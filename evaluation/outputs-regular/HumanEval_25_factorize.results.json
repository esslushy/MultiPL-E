{
  "name": "HumanEval_25_factorize",
  "language": "py",
  "prompt": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return [1]\n    if n % 3 == 0:\n        return [2, 2]\n    if n % 5 == 0:\n        return [2, 5, 2]\n    if n % 7 == 0:\n        return [2, 5, 7]\n    return factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmputy_gjwu.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmputy_gjwu.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmputy_gjwu.py\", line 29, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    return [n]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmqvclwyq.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpmqvclwyq.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmpmqvclwyq.py\", line 29, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_6433zgx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp_6433zgx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp_6433zgx.py\", line 23, in check\n    assert candidate(2) == [2]\n  File \"/tmp/tmp_6433zgx.py\", line 19, in factorize\n    factors.append(factors[-1] * i)\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp29c0xmbz.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp29c0xmbz.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp29c0xmbz.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpceg9wa7k.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpceg9wa7k.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpceg9wa7k.py\", line 23, in check\n    assert candidate(2) == [2]\n  File \"/tmp/tmpceg9wa7k.py\", line 19, in factorize\n    factors.append(factors[-1] * i)\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n // 2) + factorize(n % 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpliodc9ol.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpliodc9ol.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpliodc9ol.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2, 2]\n    if n % 3 == 0:\n        return [2, 3, 2]\n    if n % 5 == 0:\n        return [2, 5, 7]\n    if n % 7 == 0:\n        return [2, 7, 2]\n    if n % 11 == 0:\n        return [2, 11, 2]\n    if n % 13 == 0:\n        return [2, 13, 2]\n    if n % 17 == 0:\n        return [2, 17, 2]\n    if n % 19 == 0:\n        return [2, 19, 2]\n    if n % 23 == 0:\n        return [2, 23, 2]\n    if n % 29 == 0:\n        return [2, 29, 2]\n    if n % 31 == 0:\n        return [2, 31, 2]\n    if n % 37 == 0:\n        return [2, 37, 2]\n    if n % 41 == 0:\n        return [2, 41, 2]\n    if n % 43 == 0:\n        return [2, 43, 2]\n    if n % 47 == 0:\n        return [2, 47, 2]\n    if n % 53 == 0:\n        return [2, 53, 2]\n    if n % 59 == 0:\n        return [2, 59, 2]\n    if n % 67 == 0:\n        return [2, 67, 2]\n    if n % 71 == 0:\n        return [2, 71, 2]\n    if n % 73 == 0:\n        return [2, 73, 2]\n    if n % 79 == 0:\n        return [2, 79, 2]\n    if n % 83 == 0:\n        return [2, 83, 2]\n    if n % 89 == 0:\n        return [2, 89, 2]\n    if n % 97 == 0:\n        return [2, 97, 2]\n    if n % 101 == 0:\n        return [2, 101, 2]\n    if n % 103 == 0:\n        return [2\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "  File \"/tmp/tmprk4d97fx.py\", line 69\n    return [2\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpku3b86mc.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpku3b86mc.py\", line 31, in test_check\n    check(factorize)\n  File \"/tmp/tmpku3b86mc.py\", line 22, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2, 2]\n    if n % 3 == 0:\n        return [2, 2, 2]\n    if n % 5 == 0:\n        return [2, 2, 2, 2]\n    if n % 7 == 0:\n        return [2, 2, 2, 2, 2]\n    if n % 11 == 0:\n        return [2, 2, 2, 2, 2, 2]\n    if n % 13 == 0:\n        return [2, 2, 2, 2, 2, 2, 2]\n    if n % 17 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 19 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 23 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 29 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 31 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 37 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 41 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 43 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 47 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 53 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 59 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 71 == 0:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n % 73 ==\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpugunub02.py\", line 54\n    if n % 73 ==\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2, 2]\n    if n % 3 == 0:\n        return [2, 3]\n    if n % 5 == 0:\n        return [2, 5]\n    if n % 7 == 0:\n        return [2, 7]\n    return [2, 3, 5, 7]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpexw_pbv1.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpexw_pbv1.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmpexw_pbv1.py\", line 31, in check\n    assert candidate(8) == [2, 2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    return [2, 2, 2]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd5zn65p9.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpd5zn65p9.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmpd5zn65p9.py\", line 29, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi2cu8tw7.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpi2cu8tw7.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpi2cu8tw7.py\", line 23, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n - 1) + factorize(n // 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc9d_zivv.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpc9d_zivv.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpc9d_zivv.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return [1]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    return [n]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzal8e34.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpjzal8e34.py\", line 37, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzal8e34.py\", line 28, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n // 2) + factorize(n % 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph59kpdr_.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmph59kpdr_.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmph59kpdr_.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1]\n    elif n % 2 == 0:\n        return [2]\n    elif n % 3 == 0:\n        return [3]\n    elif n % 5 == 0:\n        return [5]\n    elif n % 7 == 0:\n        return [7]\n    else:\n        return [n]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo6q5adl_.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpo6q5adl_.py\", line 40, in test_check\n    check(factorize)\n  File \"/tmp/tmpo6q5adl_.py\", line 30, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            if j % i == 0:\n                factors.append(j)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwb0ujy83.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpwb0ujy83.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpwb0ujy83.py\", line 23, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * (i - 1))\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr1trjcmn.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpr1trjcmn.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpr1trjcmn.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    return factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5glqpdnv.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp5glqpdnv.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmp5glqpdnv.py\", line 29, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp29c0xmbz.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp29c0xmbz.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp29c0xmbz.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        for j in range(i, n):\n            if j % i == 0:\n                factors.append(j)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppsmy1m5u.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmppsmy1m5u.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmppsmy1m5u.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi2cu8tw7.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpi2cu8tw7.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpi2cu8tw7.py\", line 23, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr_nd5vce.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpr_nd5vce.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpr_nd5vce.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpceg9wa7k.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpceg9wa7k.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpceg9wa7k.py\", line 23, in check\n    assert candidate(2) == [2]\n  File \"/tmp/tmpceg9wa7k.py\", line 19, in factorize\n    factors.append(factors[-1] * i)\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpceg9wa7k.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpceg9wa7k.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpceg9wa7k.py\", line 23, in check\n    assert candidate(2) == [2]\n  File \"/tmp/tmpceg9wa7k.py\", line 19, in factorize\n    factors.append(factors[-1] * i)\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp29c0xmbz.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp29c0xmbz.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp29c0xmbz.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return [n]\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2, 2]\n    if n % 3 == 0:\n        return [2, 2, 2]\n    if n % 5 == 0:\n        return [5, 5]\n    if n % 7 == 0:\n        return [2, 5, 7]\n    return factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp75_o1wa.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpp75_o1wa.py\", line 41, in test_check\n    check(factorize)\n  File \"/tmp/tmpp75_o1wa.py\", line 33, in check\n    assert candidate(8) == [2, 2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr_nd5vce.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpr_nd5vce.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpr_nd5vce.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return [2, 2]\n    else:\n        return [2, 2, 2]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw27yuwyt.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpw27yuwyt.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpw27yuwyt.py\", line 26, in check\n    assert candidate(8) == [2, 2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    return factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5glqpdnv.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp5glqpdnv.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmp5glqpdnv.py\", line 29, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi2cu8tw7.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpi2cu8tw7.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpi2cu8tw7.py\", line 23, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return factorize(n / 2)\n    else:\n        return factorize(n / 2) + factorize(n / 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwae_c3dj.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpwae_c3dj.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpwae_c3dj.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    return [n]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmqvclwyq.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpmqvclwyq.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmpmqvclwyq.py\", line 29, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2, 2]\n    if n % 3 == 0:\n        return [2, 2, 2]\n    if n % 5 == 0:\n        return [2, 2, 2, 2]\n    if n % 7 == 0:\n        return [2, 2, 2, 2, 2]\n    return factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptpryavpr.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmptpryavpr.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmptpryavpr.py\", line 31, in check\n    assert candidate(8) == [2, 2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * (i - 1))\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr1trjcmn.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpr1trjcmn.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpr1trjcmn.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxjxftktk.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpxjxftktk.py\", line 31, in test_check\n    check(factorize)\n  File \"/tmp/tmpxjxftktk.py\", line 21, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr_nd5vce.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpr_nd5vce.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpr_nd5vce.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_6433zgx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp_6433zgx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp_6433zgx.py\", line 23, in check\n    assert candidate(2) == [2]\n  File \"/tmp/tmp_6433zgx.py\", line 19, in factorize\n    factors.append(factors[-1] * i)\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    return [n]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmqvclwyq.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpmqvclwyq.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmpmqvclwyq.py\", line 29, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n // 2) + factorize(n % 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph59kpdr_.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmph59kpdr_.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmph59kpdr_.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp29c0xmbz.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp29c0xmbz.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp29c0xmbz.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi2cu8tw7.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpi2cu8tw7.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpi2cu8tw7.py\", line 23, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxjxftktk.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpxjxftktk.py\", line 31, in test_check\n    check(factorize)\n  File \"/tmp/tmpxjxftktk.py\", line 21, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2, 2]\n    if n % 3 == 0:\n        return [3, 3]\n    if n % 5 == 0:\n        return [5, 5]\n    if n % 7 == 0:\n        return [7, 7]\n    return factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_r8gi9ry.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp_r8gi9ry.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmp_r8gi9ry.py\", line 31, in check\n    assert candidate(8) == [2, 2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n - 1)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5khap7j8.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp5khap7j8.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp5khap7j8.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_6433zgx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp_6433zgx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp_6433zgx.py\", line 23, in check\n    assert candidate(2) == [2]\n  File \"/tmp/tmp_6433zgx.py\", line 19, in factorize\n    factors.append(factors[-1] * i)\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n // 2) + factorize(n % 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx3s7fho4.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpx3s7fho4.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpx3s7fho4.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n // 2) + factorize(n % 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1kxkzzu3.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp1kxkzzu3.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp1kxkzzu3.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [2, 2]\n    if n == 4:\n        return [2, 2, 2]\n    if n == 5:\n        return [2, 2, 2, 2]\n    if n == 6:\n        return [2, 2, 2, 2, 2]\n    if n == 7:\n        return [2, 2, 2, 2, 2, 2]\n    if n == 8:\n        return [2, 2, 2, 2, 2, 2, 2]\n    if n == 9:\n        return [2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 10:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 11:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 12:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 13:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 14:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 15:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 16:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 17:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 18:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 19:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 20:\n        return [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    if n == 21:\n        return [2, 2, 2, 2, 2,\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp0rq2hxhv.py\", line 55\n    return [2, 2, 2, 2, 2,\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            factors.append(i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxjxftktk.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmpxjxftktk.py\", line 31, in test_check\n    check(factorize)\n  File \"/tmp/tmpxjxftktk.py\", line 21, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_6433zgx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp_6433zgx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp_6433zgx.py\", line 23, in check\n    assert candidate(2) == [2]\n  File \"/tmp/tmp_6433zgx.py\", line 19, in factorize\n    factors.append(factors[-1] * i)\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2, 2]\n    if n % 3 == 0:\n        return [2, 3]\n    if n % 5 == 0:\n        return [2, 5]\n    if n % 7 == 0:\n        return [2, 7]\n    return [2, 2, 2]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpae04gf_g.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpae04gf_g.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmpae04gf_g.py\", line 31, in check\n    assert candidate(8) == [2, 2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1]\n    elif n % 2 == 0:\n        return [2]\n    else:\n        return factorize(n // 2) + factorize(n % 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq95vjq0e.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpq95vjq0e.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpq95vjq0e.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        for j in range(i, n):\n            if j % i == 0:\n                factors.append(j)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppsmy1m5u.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmppsmy1m5u.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmppsmy1m5u.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * (i - 1))\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr1trjcmn.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpr1trjcmn.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpr1trjcmn.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpceg9wa7k.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpceg9wa7k.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpceg9wa7k.py\", line 23, in check\n    assert candidate(2) == [2]\n  File \"/tmp/tmpceg9wa7k.py\", line 19, in factorize\n    factors.append(factors[-1] * i)\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        for j in range(i, n):\n            if j % i == 0:\n                factors.append(j)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppsmy1m5u.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmppsmy1m5u.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmppsmy1m5u.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    return factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmc_uqusx.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpmc_uqusx.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmpmc_uqusx.py\", line 29, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp29c0xmbz.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp29c0xmbz.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp29c0xmbz.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi2cu8tw7.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpi2cu8tw7.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpi2cu8tw7.py\", line 23, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    elif n == 3:\n        return [3, 3]\n    elif n == 4:\n        return [4, 4, 4]\n    elif n == 5:\n        return [5, 5, 5]\n    elif n == 6:\n        return [6, 6, 6]\n    elif n == 7:\n        return [7, 7, 7]\n    elif n == 8:\n        return [8, 8, 8]\n    elif n == 9:\n        return [9, 9, 9]\n    elif n == 10:\n        return [10, 10, 10]\n    elif n == 11:\n        return [11, 11, 11]\n    elif n == 12:\n        return [12, 12, 12]\n    elif n == 13:\n        return [13, 13, 13]\n    elif n == 14:\n        return [14, 14, 14]\n    elif n == 15:\n        return [15, 15, 15]\n    elif n == 16:\n        return [16, 16, 16]\n    elif n == 17:\n        return [17, 17, 17]\n    elif n == 18:\n        return [18, 18, 18]\n    elif n == 19:\n        return [19, 19, 19]\n    elif n == 20:\n        return [20, 20, 20]\n    elif n == 21:\n        return [21, 21, 21]\n    elif n == 22:\n        return [22, 22, 22]\n    elif n == 23:\n        return [23, 23, 23]\n    elif n == 24:\n        return [24, 24, 24]\n    elif n == 25:\n        return [25, 25, 25]\n    elif n == 26:\n        return [26, 26, 26]\n    elif n == 27:\n        return [27, 27, 27]\n    elif n == 28:\n        return [28, 28, 28]\n    elif n == 29:\n        return [29, 29, 29]\n    \ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph4a_7k1r.py\", line 86, in <module>\n    test_check()\n  File \"/tmp/tmph4a_7k1r.py\", line 84, in test_check\n    check(factorize)\n  File \"/tmp/tmph4a_7k1r.py\", line 75, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        for j in range(i, n):\n            if j % i == 0:\n                factors.append(j)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppsmy1m5u.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmppsmy1m5u.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmppsmy1m5u.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2, 2]\n    if n % 3 == 0:\n        return [2, 3]\n    if n % 5 == 0:\n        return [2, 5]\n    if n % 7 == 0:\n        return [2, 7]\n    return [2, 2, 2]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpae04gf_g.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpae04gf_g.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmpae04gf_g.py\", line 31, in check\n    assert candidate(8) == [2, 2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            if j % i == 0:\n                factors.append(j)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwb0ujy83.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpwb0ujy83.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmpwb0ujy83.py\", line 23, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        for j in range(i, n):\n            if j % i == 0:\n                factors.append(j)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppsmy1m5u.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmppsmy1m5u.py\", line 32, in test_check\n    check(factorize)\n  File \"/tmp/tmppsmy1m5u.py\", line 22, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n // 2) + factorize(n % 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqvg0qhu7.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpqvg0qhu7.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmpqvg0qhu7.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi2cu8tw7.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpi2cu8tw7.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpi2cu8tw7.py\", line 23, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n // 2) + factorize(n % 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1kxkzzu3.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp1kxkzzu3.py\", line 34, in test_check\n    check(factorize)\n  File \"/tmp/tmp1kxkzzu3.py\", line 24, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp29c0xmbz.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp29c0xmbz.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp29c0xmbz.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return [1]\n    if n % 3 == 0:\n        return [2]\n    if n % 5 == 0:\n        return [3]\n    if n % 7 == 0:\n        return [4]\n    if n % 11 == 0:\n        return [5]\n    if n % 13 == 0:\n        return [6]\n    if n % 17 == 0:\n        return [7]\n    if n % 19 == 0:\n        return [8]\n    if n % 23 == 0:\n        return [9]\n    if n % 29 == 0:\n        return [10]\n    if n % 31 == 0:\n        return [11]\n    if n % 37 == 0:\n        return [12]\n    if n % 41 == 0:\n        return [13]\n    if n % 43 == 0:\n        return [14]\n    if n % 47 == 0:\n        return [15]\n    if n % 53 == 0:\n        return [16]\n    if n % 59 == 0:\n        return [17]\n    if n % 67 == 0:\n        return [18]\n    if n % 71 == 0:\n        return [19]\n    if n % 73 == 0:\n        return [20]\n    if n % 79 == 0:\n        return [21]\n    if n % 83 == 0:\n        return [22]\n    if n % 89 == 0:\n        return [23]\n    if n % 97 == 0:\n        return [24]\n    if n % 101 == 0:\n        return [25]\n    if n % 103 == 0:\n        return [26]\n    if n % 107 == 0:\n        return [27]\n    if n % 109 == 0:\n        return [28]\n    if n % 113 == 0:\n        return [29]\n    if n % 127 == 0:\n        return [30]\n    if n % 131 == 0:\n        return [31]\n    if n % 137 == 0:\n        return [32]\n    if n % 139 ==\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp3r1_dspf.py\", line 82\n    if n % 139 ==\n                 ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp29c0xmbz.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp29c0xmbz.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp29c0xmbz.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    if n == 2:\n        return [1]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    return [2, 2, 2]\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplle9ihri.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmplle9ihri.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmplle9ihri.py\", line 29, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp29c0xmbz.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp29c0xmbz.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmp29c0xmbz.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(i * (i - 1))\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr1trjcmn.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpr1trjcmn.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpr1trjcmn.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpceg9wa7k.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpceg9wa7k.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpceg9wa7k.py\", line 23, in check\n    assert candidate(2) == [2]\n  File \"/tmp/tmpceg9wa7k.py\", line 19, in factorize\n    factors.append(factors[-1] * i)\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n % 2 == 0:\n        return [2, 2]\n    if n % 3 == 0:\n        return [3, 3]\n    if n % 5 == 0:\n        return [5, 5]\n    if n % 7 == 0:\n        return [7, 7]\n    return factorize(n // 2) + factorize(n // 3) + factorize(n // 5) + factorize(n // 7)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0aw8j768.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp0aw8j768.py\", line 39, in test_check\n    check(factorize)\n  File \"/tmp/tmp0aw8j768.py\", line 29, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factors.append(i)\n        else:\n            factors.append(factors[-1] * i)\n    return factors\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjzapazpx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpjzapazpx.py\", line 33, in test_check\n    check(factorize)\n  File \"/tmp/tmpjzapazpx.py\", line 24, in check\n    assert candidate(4) == [2, 2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n < 2:\n        return [n]\n    else:\n        return factorize(n - 1) + factorize(n - 2)\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3, 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193) == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n    assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\ntest_check()\n",
      "timestamp": 1673628612,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx0q06mdc.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpx0q06mdc.py\", line 30, in test_check\n    check(factorize)\n  File \"/tmp/tmpx0q06mdc.py\", line 20, in check\n    assert candidate(2) == [2]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}