{
  "name": "HumanEval_117_select_words",
  "language": "py",
  "prompt": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s]\n    if n == 9:\n        return [s, s, s, s, s, s, s, s, s]\n    if n == 10:\n        return [s, s, s, s, s, s, s, s, s, s]\n    if n == 11:\n        return [s, s, s, s, s, s, s, s, s, s, s]\n    if n == 12:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 13:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 14:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 15:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 16:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 17:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 18:\n        return [s, s, s, s, s\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "  File \"/tmp/tmplz7wg0mz.py\", line 60\n    return [s, s, s, s, s\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if s == '':\n        return []\n    else:\n        return [word for word in s.split() if word.isalpha() and word.isdigit() and word not in '-_' and word not in '.']\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzz5eqa_.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpdzz5eqa_.py\", line 36, in test_check\n    check(select_words)\n  File \"/tmp/tmpdzz5eqa_.py\", line 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if s == '':\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7gseqgo.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpn7gseqgo.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpn7gseqgo.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return select_words(s[:n], n)\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9tu6fbhx.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmp9tu6fbhx.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmp9tu6fbhx.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm8kvfxj1.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpm8kvfxj1.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpm8kvfxj1.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for c in s:\n        if c not in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0jo6my66.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp0jo6my66.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp0jo6my66.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 1:\n        return [s] + select_words(s[1:], n)\n    if len(s) == 2:\n        return [s] + select_words(s[1:], n) + select_words(s[:1], n)\n    if len(s) == 3:\n        return [s] + select_words(s[1:], n) + select_words(s[:1], n) + select_words(s[1:], n)\n    if len(s) == 4:\n        return [s] + select_words(s[1:], n) + select_words(s[:1], n) + select_words(s[1:], n) + select_words(s[:1], n)\n    if len(s) == 5:\n        return [s] + select_words(s[1:], n) + select_words(s[:1], n) + select_words(s[1:], n) + select_words(s[:1], n) + select_words(s[1:], n)\n    if len(s) == 6:\n        return [s] + select_words(s[1:], n) + select_words(s[:1], n) + select_words(s[1:], n) + select_words(s[:1], n) + select_words(s[1:], n) + select_words(s[:1], n)\n    if len(s) == 7:\n        return [s] + select_words(s[1:], n) + select_words(s[:1], n) + select_words(s[1:], n) + select_words(s[:1], n) + select_words(s[1:], n) + select_words(s[:1], n) + select_words(s[1:], n)\n    if len(s) == 8:\n        return [s] +\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpok8baupc.py\", line 44\n    return [s] +\n                ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for c in s:\n        if c in 'aeiou':\n            words.append(c)\n        elif c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n        elif c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n        elif c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnubgwcfm.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpnubgwcfm.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpnubgwcfm.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk1id19w3.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpk1id19w3.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpk1id19w3.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [word for word in s.split(' ') if word.isalpha() and word.isdigit()]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbng62bxm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpbng62bxm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpbng62bxm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = s.split()\n    return words[:n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8334u3lr.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmp8334u3lr.py\", line 36, in test_check\n    check(select_words)\n  File \"/tmp/tmp8334u3lr.py\", line 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmizjq0d6.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpmizjq0d6.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpmizjq0d6.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha() and not s.isnumeric():\n        return []\n    if not s.isalpha() and s.isnumeric():\n        return []\n    if s.isalpha() and s.isnumeric():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric() and s.isalpha():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric() and s.isalpha():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric() and s.isalpha():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric() and s.isalpha():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric() and s.isalpha():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric() and s.isalpha():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric() and s.isalpha():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric() and s.isalpha():\n        return []\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp3eg906xk.py\", line 55\n    if s.isalpha() and s.isnumeric() and s.isalpha() and s.isnumeric\n                                                                    ^\nSyntaxError: expected ':'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3aq3afxl.py\", line 113, in <module>\n    test_check()\n  File \"/tmp/tmp3aq3afxl.py\", line 111, in test_check\n    check(select_words)\n  File \"/tmp/tmp3aq3afxl.py\", line 102, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if s == '':\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn7gseqgo.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpn7gseqgo.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpn7gseqgo.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphwxeza6z.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmphwxeza6z.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmphwxeza6z.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3aq3afxl.py\", line 113, in <module>\n    test_check()\n  File \"/tmp/tmp3aq3afxl.py\", line 111, in test_check\n    check(select_words)\n  File \"/tmp/tmp3aq3afxl.py\", line 102, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsbgb47a_.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpsbgb47a_.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpsbgb47a_.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)) if s[i:i+n] in s]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9ciov3xz.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp9ciov3xz.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp9ciov3xz.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if s == '':\n        return []\n    elif len(s) == 0:\n        return []\n    elif len(s) == 1:\n        return [s]\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpouyrnnmc.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpouyrnnmc.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmpouyrnnmc.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsbgb47a_.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpsbgb47a_.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpsbgb47a_.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6j1aqg4y.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp6j1aqg4y.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp6j1aqg4y.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)) if s[i:i+n] in s]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2nthlcbw.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp2nthlcbw.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp2nthlcbw.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s]\n    if n == 9:\n        return [s, s, s, s, s, s, s, s, s]\n    if n == 10:\n        return [s, s, s, s, s, s, s, s, s, s]\n    if n == 11:\n        return [s, s, s, s, s, s, s, s, s, s, s]\n    if n == 12:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 13:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 14:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 15:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 16:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 17:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 18:\n        return [s, s, s, s,\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp3cdwva1e.py\", line 60\n    return [s, s, s, s,\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo2dapmo0.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpo2dapmo0.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpo2dapmo0.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for word in s.split():\n        if word in words:\n            continue\n        words.append(word)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyj5um2fh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpyj5um2fh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmpyj5um2fh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [word for word in s.split(' ') if word.isalpha() and word not in '-_' and word not in '.']\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphqscrdkn.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmphqscrdkn.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmphqscrdkn.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [word for word in s.split(' ') if word.isalpha()]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8qfqoj_v.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp8qfqoj_v.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmp8qfqoj_v.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdeirufvq.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpdeirufvq.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpdeirufvq.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [s[i:i+n] for i in range(len(s)) if s[i:i+n] in s]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp57nj085o.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp57nj085o.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmp57nj085o.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if n == 1:\n        return [s]\n    if s.count(s[0]) == n:\n        return [s]\n    return [s[0]] + select_words(s[1:], n - 1)\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppp8pw0du.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmppp8pw0du.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmppp8pw0du.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for word in s.split():\n        if word in words:\n            continue\n        words.append(word)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyj5um2fh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpyj5um2fh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmpyj5um2fh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-1, -1, -1)]\n    return [s[i:i+n] for i in range(len(s)-1, -1, -1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92amqb_c.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp92amqb_c.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp92amqb_c.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s]\n    if n == 9:\n        return [s, s, s, s, s, s, s, s, s]\n    if n == 10:\n        return [s, s, s, s, s, s, s, s, s, s]\n    if n == 11:\n        return [s, s, s, s, s, s, s, s, s, s, s]\n    if n == 12:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 13:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 14:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 15:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 16:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 17:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 18:\n        return [\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp3qt4t5j7.py\", line 60\n    return [\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) % n == 0:\n        return [s[i:i+n] for i in range(len(s) // n)]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5jvi9f97.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmp5jvi9f97.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmp5jvi9f97.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if n == 1:\n        return [s]\n    else:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5jvub5ua.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp5jvub5ua.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp5jvub5ua.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsbgb47a_.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpsbgb47a_.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpsbgb47a_.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(0, len(s), n)]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzhb8g2me.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpzhb8g2me.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpzhb8g2me.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6j1aqg4y.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp6j1aqg4y.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp6j1aqg4y.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [word for word in s.split(' ') if word in s]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxzu_ogee.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpxzu_ogee.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpxzu_ogee.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for word in s.split():\n        if word in words:\n            continue\n        words.append(word)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyj5um2fh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpyj5um2fh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmpyj5um2fh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsvkrfv8j.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpsvkrfv8j.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpsvkrfv8j.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s]\n    if n == 9:\n        return [s, s, s, s, s, s, s, s, s]\n    if n == 10:\n        return [s, s, s, s, s, s, s, s, s, s]\n    if n == 11:\n        return [s, s, s, s, s, s, s, s, s, s, s]\n    if n == 12:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 13:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 14:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 15:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 16:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 17:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 18:\n        return [s, s, s, s,\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp3cdwva1e.py\", line 60\n    return [s, s, s, s,\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdk_1xjkw.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpdk_1xjkw.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpdk_1xjkw.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for c in s:\n        if c in 'aeiou':\n            words.append(c)\n        elif c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n        elif c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n        elif c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n        elif c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq_64xpdr.py\", line 49, in <module>\n    test_check()\n  File \"/tmp/tmpq_64xpdr.py\", line 47, in test_check\n    check(select_words)\n  File \"/tmp/tmpq_64xpdr.py\", line 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(0, len(s), n)]\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8nan2ygr.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp8nan2ygr.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp8nan2ygr.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0wtzayah.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmp0wtzayah.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmp0wtzayah.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-1)]\n    return [s[i:i+n] for i in range(len(s)-1, len(s)-1-n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr9_qxa62.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpr9_qxa62.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpr9_qxa62.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for word in s.split():\n        if word in words:\n            continue\n        words.append(word)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyj5um2fh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpyj5um2fh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmpyj5um2fh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    return list(filter(lambda x: x.count(s[0]) == n, s))\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdbq88_v0.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpdbq88_v0.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpdbq88_v0.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for word in s.split():\n        if word.isalpha() and word not in words:\n            words.append(word)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0hsx5pou.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp0hsx5pou.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp0hsx5pou.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if s == '':\n        return []\n    elif len(s) == 0:\n        return []\n    elif len(s) == 1:\n        return [s]\n    else:\n        return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph67ctnr3.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmph67ctnr3.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmph67ctnr3.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if s == '':\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)) if s[i:i+n] in s]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3oot9q5p.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp3oot9q5p.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp3oot9q5p.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6j1aqg4y.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp6j1aqg4y.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp6j1aqg4y.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) % n == 0:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1, len(s)+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd0nuqa26.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpd0nuqa26.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpd0nuqa26.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if not s.isalpha():\n        return []\n    if s.count(' ') == n:\n        return s.split()\n    return [s]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1epd7_ym.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp1epd7_ym.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp1epd7_ym.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [w for w in s if w.isalpha() and w.isalpha() and w.isalpha() and w.isalpha() and w.isalpha() and w.isalpha()]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc0ray7tz.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpc0ray7tz.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpc0ray7tz.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for c in s:\n        if c not in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0jo6my66.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp0jo6my66.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp0jo6my66.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [word for word in s.split() if word.count('c') == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1t3b56o_.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp1t3b56o_.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmp1t3b56o_.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) % n == 0:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1, len(s))]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcs5mzm5b.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpcs5mzm5b.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpcs5mzm5b.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return []\n    if not s.isalpha():\n        return\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3aq3afxl.py\", line 113, in <module>\n    test_check()\n  File \"/tmp/tmp3aq3afxl.py\", line 111, in test_check\n    check(select_words)\n  File \"/tmp/tmp3aq3afxl.py\", line 102, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6j1aqg4y.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp6j1aqg4y.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp6j1aqg4y.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmizjq0d6.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpmizjq0d6.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpmizjq0d6.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s]\n    if n == 9:\n        return [s, s, s, s, s, s, s, s, s]\n    if n == 10:\n        return [s, s, s, s, s, s, s, s, s, s]\n    if n == 11:\n        return [s, s, s, s, s, s, s, s, s, s, s]\n    if n == 12:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 13:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 14:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 15:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 16:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 17:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 18:\n        return [s, s, s, s, s,\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp6mmg473g.py\", line 60\n    return [s, s, s, s, s,\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [word for word in s.split() if word.count(c) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpquyyhk61.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpquyyhk61.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpquyyhk61.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n  File \"/tmp/tmpquyyhk61.py\", line 25, in select_words\n    return [word for word in s.split() if word.count(c) == n]\n  File \"/tmp/tmpquyyhk61.py\", line 25, in <listcomp>\n    return [word for word in s.split() if word.count(c) == n]\nNameError: name 'c' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo2dapmo0.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpo2dapmo0.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpo2dapmo0.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpopltd9bv.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpopltd9bv.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpopltd9bv.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm8kvfxj1.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpm8kvfxj1.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpm8kvfxj1.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6j1aqg4y.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp6j1aqg4y.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp6j1aqg4y.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdeirufvq.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpdeirufvq.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpdeirufvq.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [word for word in s.split() if word.count(c) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpquyyhk61.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpquyyhk61.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpquyyhk61.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n  File \"/tmp/tmpquyyhk61.py\", line 25, in select_words\n    return [word for word in s.split() if word.count(c) == n]\n  File \"/tmp/tmpquyyhk61.py\", line 25, in <listcomp>\n    return [word for word in s.split() if word.count(c) == n]\nNameError: name 'c' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for word in s.split():\n        if word in words:\n            continue\n        words.append(word)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyj5um2fh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpyj5um2fh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmpyj5um2fh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) % n == 0:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ub3y5md.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmp3ub3y5md.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmp3ub3y5md.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(0, len(s), n)]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzhb8g2me.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpzhb8g2me.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpzhb8g2me.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsvkrfv8j.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpsvkrfv8j.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpsvkrfv8j.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) % n == 0:\n        return [s[i:i+n] for i in range(0, len(s), n)]\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx1mzyfa2.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpx1mzyfa2.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpx1mzyfa2.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7dkttccz.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp7dkttccz.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp7dkttccz.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            words.append(s[i:i+1])\n        elif s[i] == ' ':\n            words.append(s[i:i+1])\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0_dzbf_c.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmp0_dzbf_c.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmp0_dzbf_c.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdeirufvq.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpdeirufvq.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpdeirufvq.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s))]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz8vdej5u.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpz8vdej5u.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpz8vdej5u.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return select_words(s[:n], n) + select_words(s[n:], n)\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi_zaogad.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpi_zaogad.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpi_zaogad.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n  File \"/tmp/tmpi_zaogad.py\", line 33, in select_words\n    return select_words(s[:n], n) + select_words(s[n:], n)\n  File \"/tmp/tmpi_zaogad.py\", line 33, in select_words\n    return select_words(s[:n], n) + select_words(s[n:], n)\n  File \"/tmp/tmpi_zaogad.py\", line 33, in select_words\n    return select_words(s[:n], n) + select_words(s[n:], n)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi_zaogad.py\", line 23, in select_words\n    if n == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    return [s[i:i+n] for i in range(len(s))]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprvt4jnm5.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmprvt4jnm5.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmprvt4jnm5.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [word for word in s.split(' ') if word.isalpha() and word.isnumeric()]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpncxbwv8i.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpncxbwv8i.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpncxbwv8i.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if not s.isalpha():\n        return []\n    if s.count(' ') != n:\n        return []\n    return [s[i:i+n] for i in range(len(s))]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgtaztugx.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpgtaztugx.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpgtaztugx.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return [s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmppb5edn0d.py\", line 33\n    return [s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7dkttccz.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp7dkttccz.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp7dkttccz.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpt8mgyvmi.py\", line 40\n    return [s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            words.append(s[i:i+1])\n        elif s[i] == '-':\n            words.append(s[i+1:i+2])\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpttbgn_g9.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpttbgn_g9.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpttbgn_g9.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            words.append(s[i:i+1])\n        elif s[i] == ' ':\n            words.append(s[i:i+1])\n        elif s[i] == ' ':\n            words.append(s[i:i+1])\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx1uchvmu.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpx1uchvmu.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpx1uchvmu.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmizjq0d6.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpmizjq0d6.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpmizjq0d6.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6j1aqg4y.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp6j1aqg4y.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp6j1aqg4y.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmizjq0d6.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpmizjq0d6.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpmizjq0d6.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) % n == 0:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1, len(s)+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd0nuqa26.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpd0nuqa26.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpd0nuqa26.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) % n == 0:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1, len(s)+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd0nuqa26.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpd0nuqa26.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpd0nuqa26.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpulnawzu8.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpulnawzu8.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpulnawzu8.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(0, len(s), n)]\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwz4wkiek.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpwz4wkiek.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpwz4wkiek.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(0, len(s), n)]\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8nan2ygr.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp8nan2ygr.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp8nan2ygr.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [word for word in s.split() if word.count(c) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpquyyhk61.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpquyyhk61.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpquyyhk61.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n  File \"/tmp/tmpquyyhk61.py\", line 25, in select_words\n    return [word for word in s.split() if word.count(c) == n]\n  File \"/tmp/tmpquyyhk61.py\", line 25, in <listcomp>\n    return [word for word in s.split() if word.count(c) == n]\nNameError: name 'c' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [w for w in s if w.isalpha() and w.isnumeric()]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoz9nv9f2.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpoz9nv9f2.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpoz9nv9f2.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for word in s.split():\n        if word in words:\n            continue\n        words.append(word)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyj5um2fh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpyj5um2fh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmpyj5um2fh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)) if s[i:i+n] in s]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9ciov3xz.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp9ciov3xz.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp9ciov3xz.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s]\n    if n == 9:\n        return [s, s, s, s, s, s, s, s, s]\n    if n == 10:\n        return [s, s, s, s, s, s, s, s, s, s]\n    if n == 11:\n        return [s, s, s, s, s, s, s, s, s, s, s]\n    if n == 12:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 13:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 14:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 15:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 16:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 17:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 18:\n        return [s, s, s, s,\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp3cdwva1e.py\", line 60\n    return [s, s, s, s,\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for word in s.split():\n        if word.isalpha() and word not in words:\n            words.append(word)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0hsx5pou.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp0hsx5pou.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp0hsx5pou.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn4yf09tt.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpn4yf09tt.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpn4yf09tt.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsbgb47a_.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpsbgb47a_.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpsbgb47a_.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s))]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz8vdej5u.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpz8vdej5u.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpz8vdej5u.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if not s.isalpha():\n        return []\n    return [word for word in s.split() if word.isalpha() and word.isalpha() and word not in '_']\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6uwo3uc8.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp6uwo3uc8.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp6uwo3uc8.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7dkttccz.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmp7dkttccz.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmp7dkttccz.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm8kvfxj1.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpm8kvfxj1.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpm8kvfxj1.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [word for word in s.split(' ') if word.count('c') == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8d6onv1_.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp8d6onv1_.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmp8d6onv1_.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpspy7qpgd.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpspy7qpgd.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpspy7qpgd.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmizjq0d6.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpmizjq0d6.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpmizjq0d6.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [word for word in s.split(' ') if word.count(n) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyrdtqb6q.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpyrdtqb6q.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpyrdtqb6q.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n  File \"/tmp/tmpyrdtqb6q.py\", line 25, in select_words\n    return [word for word in s.split(' ') if word.count(n) == n]\n  File \"/tmp/tmpyrdtqb6q.py\", line 25, in <listcomp>\n    return [word for word in s.split(' ') if word.count(n) == n]\nTypeError: must be str, not int\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if s == '':\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s]\n    if n == 9:\n        return [s, s, s, s, s, s, s, s, s]\n    if n == 10:\n        return [s, s, s, s, s, s, s, s, s, s]\n    if n == 11:\n        return [s, s, s, s, s, s, s, s, s, s, s]\n    if n == 12:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 13:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 14:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 15:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 16:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 17:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 18:\n        return [s, s, s, s\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpqobhil5a.py\", line 60\n    return [s, s, s, s\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo2dapmo0.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpo2dapmo0.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpo2dapmo0.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for c in s:\n        if c in 'aeiou':\n            words.append(c)\n        elif c in 'bcdfghjklmnpqrstvwxyz':\n            words.append(c)\n        else:\n            words.append(c)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfkiki_2b.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpfkiki_2b.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpfkiki_2b.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk1id19w3.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpk1id19w3.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpk1id19w3.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return [s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmppb5edn0d.py\", line 33\n    return [s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s,\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for word in s.split():\n        if word in words:\n            continue\n        words.append(word)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyj5um2fh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpyj5um2fh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmpyj5um2fh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [word for word in s.split(' ') if word.count(n) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyrdtqb6q.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpyrdtqb6q.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpyrdtqb6q.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n  File \"/tmp/tmpyrdtqb6q.py\", line 25, in select_words\n    return [word for word in s.split(' ') if word.count(n) == n]\n  File \"/tmp/tmpyrdtqb6q.py\", line 25, in <listcomp>\n    return [word for word in s.split(' ') if word.count(n) == n]\nTypeError: must be str, not int\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(0, len(s), n)]\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwz4wkiek.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpwz4wkiek.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpwz4wkiek.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    return [word for word in s if word.count('c') == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpb86ls5e9.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpb86ls5e9.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpb86ls5e9.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsbgb47a_.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpsbgb47a_.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpsbgb47a_.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-1, -1, -1)]\n    return [s[i:i+n] for i in range(len(s)-1, -1, -1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92amqb_c.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp92amqb_c.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp92amqb_c.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm8kvfxj1.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpm8kvfxj1.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpm8kvfxj1.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if s == '':\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s]\n    if n == 9:\n        return [s, s, s, s, s, s, s, s, s]\n    if n == 10:\n        return [s, s, s, s, s, s, s, s, s, s]\n    if n == 11:\n        return [s, s, s, s, s, s, s, s, s, s, s]\n    if n == 12:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 13:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 14:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 15:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 16:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 17:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 18:\n        return [s, s, s, s\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpqobhil5a.py\", line 60\n    return [s, s, s, s\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s]\n    if n == 9:\n        return [s, s, s, s, s, s, s, s, s]\n    if n == 10:\n        return [s, s, s, s, s, s, s, s, s, s]\n    if n == 11:\n        return [s, s, s, s, s, s, s, s, s, s, s]\n    if n == 12:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 13:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 14:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 15:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 16:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 17:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 18:\n        return [s, s, s, s,\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp3cdwva1e.py\", line 60\n    return [s, s, s, s,\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if s == '':\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    if n == 5:\n        return [s, s, s, s, s]\n    if n == 6:\n        return [s, s, s, s, s, s]\n    if n == 7:\n        return [s, s, s, s, s, s, s]\n    if n == 8:\n        return [s, s, s, s, s, s, s, s]\n    if n == 9:\n        return [s, s, s, s, s, s, s, s, s]\n    if n == 10:\n        return [s, s, s, s, s, s, s, s, s, s]\n    if n == 11:\n        return [s, s, s, s, s, s, s, s, s, s, s]\n    if n == 12:\n        return [s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 13:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 14:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 15:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 16:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 17:\n        return [s, s, s, s, s, s, s, s, s, s, s, s, s]\n    if n == 18:\n        return [s, s, s, s\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpqobhil5a.py\", line 60\n    return [s, s, s, s\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-1, -1, -1)]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpao9ttu64.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpao9ttu64.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpao9ttu64.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s]\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1l7w505v.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmp1l7w505v.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmp1l7w505v.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpzmalwsrm.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpzmalwsrm.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpzmalwsrm.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if not n:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if len(s) == n:\n        return [s[i:i+n] for i in range(len(s)-n+1)]\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjgq4vhqj.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgq4vhqj.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpjgq4vhqj.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    return list(filter(lambda x: x.count(c) == n, s.split(' ')))\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaesm8v4s.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpaesm8v4s.py\", line 39, in test_check\n    check(select_words)\n  File \"/tmp/tmpaesm8v4s.py\", line 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n  File \"/tmp/tmpaesm8v4s.py\", line 27, in select_words\n    return list(filter(lambda x: x.count(c) == n, s.split(' ')))\n  File \"/tmp/tmpaesm8v4s.py\", line 27, in <lambda>\n    return list(filter(lambda x: x.count(c) == n, s.split(' ')))\nNameError: name 'c' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpss__j28t.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpss__j28t.py\", line 37, in test_check\n    check(select_words)\n  File \"/tmp/tmpss__j28t.py\", line 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for word in s.split():\n        if word in words:\n            continue\n        words.append(word)\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628483,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyj5um2fh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpyj5um2fh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmpyj5um2fh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s, s]\n    if n == 3:\n        return [s, s, s]\n    if n == 4:\n        return [s, s, s, s]\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "timestamp": 1673628482,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyq5_w783.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyq5_w783.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyq5_w783.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}