{
  "name": "HumanEval_103_rounded_avg",
  "language": "py",
  "prompt": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptz_bvhi9.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmptz_bvhi9.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptz_bvhi9.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpakvjsyfg.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpakvjsyfg.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpakvjsyfg.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltjrjhx.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp7ltjrjhx.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7ltjrjhx.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / (m - n), 2)) + str(round(n % (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpka_w28k6.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpka_w28k6.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpka_w28k6.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1'\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptzqbog3l.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmptzqbog3l.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptzqbog3l.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvbrgq12l.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpvbrgq12l.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpvbrgq12l.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n == m - 1:\n        return '0b' + str(n)\n    if n == m:\n        return str(n)\n    if n > m:\n        return '-1'\n    if n == m - 1:\n        return '0b' + str(n)\n    if n == m - 2:\n        return '0b' + str(n)\n    if n == m - 3:\n        return '0b' + str(n)\n    if n == m - 4:\n        return '0b' + str(n)\n    if n == m - 5:\n        return '0b' + str(n)\n    if n == m - 6:\n        return '0b' + str(n)\n    if n == m - 7:\n        return '0b' + str(n)\n    if n == m - 8:\n        return '0b' + str(n)\n    if n == m - 9:\n        return '0b' + str(n)\n    if n == m - 10:\n        return '0b' + str(n)\n    if n == m - 11:\n        return '0b' + str(n)\n    if n == m - 12:\n        return '0b' + str(n)\n    if n == m - 13:\n        return '0b' + str(n)\n    if n == m - 14:\n        return '0b' + str(n)\n    if n == m - 15:\n        return '0b' + str(n)\n    if n == m - 16:\n        return '0b' + str(n)\n    if n == m - 17:\n        return '0b' + str(n)\n    if n == m - 18:\n        return '0b' + str(n)\n    if n == m - 19:\n        return '0b' + str(n)\n    if n == m - 20:\n        return '0b' + str(n)\n    if n == m - 21:\n        return '0b'\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk3ge5mhm.py\", line 87, in <module>\n    test_check()\n  File \"/tmp/tmpk3ge5mhm.py\", line 85, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpk3ge5mhm.py\", line 71, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsnsimqvk.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpsnsimqvk.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpsnsimqvk.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n == m - 1:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1'\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz2igjz3s.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpz2igjz3s.py\", line 44, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpz2igjz3s.py\", line 30, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    elif n > m:\n        return -1\n    else:\n        return rounded_avg(n - 1, m) + rounded_avg(m - 1, n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5uvfjhgh.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp5uvfjhgh.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5uvfjhgh.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptz_bvhi9.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmptz_bvhi9.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptz_bvhi9.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return '0b' + str(m) + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeamf6pjw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpeamf6pjw.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpeamf6pjw.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return str(n) + ' ' + str(m) + ' ' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6hwg9n57.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp6hwg9n57.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6hwg9n57.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return '0b' + str(m) + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeamf6pjw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpeamf6pjw.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpeamf6pjw.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvj6r0v2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpbvj6r0v2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvj6r0v2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return n // m + 1\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1aymvztq.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp1aymvztq.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1aymvztq.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltjrjhx.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp7ltjrjhx.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7ltjrjhx.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphu_yucoz.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmphu_yucoz.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphu_yucoz.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpakvjsyfg.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpakvjsyfg.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpakvjsyfg.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return int(round(n / (m - n)))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphrid1ff2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmphrid1ff2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphrid1ff2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(round(n / (m - n), 2)) + str(round(n % (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8rhkm8rr.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp8rhkm8rr.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8rhkm8rr.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0:\n        return '0b0'\n    if m == 0:\n        return '0b0'\n    if n == m:\n        return '0b0'\n    if n > m:\n        return '0b0'\n    if n < m:\n        return '0b1'\n    return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa0ct2jn3.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpa0ct2jn3.py\", line 45, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpa0ct2jn3.py\", line 31, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpunrhkx2w.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpunrhkx2w.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpunrhkx2w.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return '0b1' + str(round(n / (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6hltf3ig.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp6hltf3ig.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6hltf3ig.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return rounded_avg(n - 1, m) + rounded_avg(m - 1, n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2spsd3j2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp2spsd3j2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2spsd3j2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n > m:\n        return '-1'\n    return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp79tuyikd.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp79tuyikd.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp79tuyikd.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n > m:\n        return '-1'\n    return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdtji_7ek.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpdtji_7ek.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpdtji_7ek.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsnsimqvk.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpsnsimqvk.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpsnsimqvk.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpakvjsyfg.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpakvjsyfg.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpakvjsyfg.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return '0b' + str(m) + 'b' + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpl4rd5dkg.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpl4rd5dkg.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpl4rd5dkg.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoxti_es5.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpoxti_es5.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpoxti_es5.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n < m:\n        return rounded_avg(n, m - 1)\n    return rounded_avg(n, m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppj3rb0j8.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmppj3rb0j8.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmppj3rb0j8.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n > m:\n        return '-1'\n    return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdtji_7ek.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpdtji_7ek.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpdtji_7ek.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1'\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptzqbog3l.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmptzqbog3l.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptzqbog3l.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return '0b' + str(m) + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeamf6pjw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpeamf6pjw.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpeamf6pjw.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltjrjhx.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp7ltjrjhx.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7ltjrjhx.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(n) + ' ' + str(m) + ' ' + str(rounded_avg(n, m))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvqd8g7_2.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpvqd8g7_2.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpvqd8g7_2.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    elif n == m - 1:\n        return rounded_avg(n - 1, m)\n    else:\n        return rounded_avg(n - 1, m - 1) + rounded_avg(n - 1, m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyly55ort.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpyly55ort.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpyly55ort.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return '0b' + str(m) + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeamf6pjw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpeamf6pjw.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpeamf6pjw.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxvh_ep9a.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpxvh_ep9a.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxvh_ep9a.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    elif n > m:\n        return -1\n    else:\n        return n // m\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3n4u5db_.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp3n4u5db_.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp3n4u5db_.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxvh_ep9a.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpxvh_ep9a.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxvh_ep9a.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1'\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptzqbog3l.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmptzqbog3l.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptzqbog3l.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(n) + ' ' + str(m) + ' ' + str(rounded_avg(n, m))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvqd8g7_2.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpvqd8g7_2.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpvqd8g7_2.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(round(n / (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq71x9xu3.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpq71x9xu3.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpq71x9xu3.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0 or m == 0:\n        return '0b0'\n    if n == m:\n        return '0b0'\n    if n > m:\n        return '0b' + str(round(n / m, 2))\n    else:\n        return '0b' + str(round(m / n, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp0otoeer.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpp0otoeer.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpp0otoeer.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvj6r0v2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpbvj6r0v2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvj6r0v2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmjqa1zv1.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpmjqa1zv1.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmjqa1zv1.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptz_bvhi9.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmptz_bvhi9.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptz_bvhi9.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b1' + str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpadzoyc1q.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpadzoyc1q.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpadzoyc1q.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3tyigt2v.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp3tyigt2v.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp3tyigt2v.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return n // m\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeq_egbwr.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpeq_egbwr.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpeq_egbwr.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n) + str(m)\n    else:\n        return '0b' + str(m) + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbugvgh9u.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpbugvgh9u.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbugvgh9u.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1'\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptzqbog3l.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmptzqbog3l.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptzqbog3l.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0 or m == 0:\n        return '0b0'\n    if n < m:\n        return '0b' + str(n) + 'b'\n    else:\n        return '0b' + str(m) + 'b' + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5d5q3tye.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp5d5q3tye.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5d5q3tye.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(n) + ' ' + str(m) + ' ' + str(n - m) + ' ' + str(m - n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9wm8bh55.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp9wm8bh55.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp9wm8bh55.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1'\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptzqbog3l.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmptzqbog3l.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptzqbog3l.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    elif n > m:\n        return -1\n    else:\n        return int(round(n / (m + 1)))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0oj0ddt8.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp0oj0ddt8.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp0oj0ddt8.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    elif n > m:\n        return -1\n    else:\n        return rounded_avg(n - 1, m) + rounded_avg(m - 1, n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5uvfjhgh.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp5uvfjhgh.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5uvfjhgh.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return '0b' + str(m) + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeamf6pjw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpeamf6pjw.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpeamf6pjw.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return '0b' + str(m) + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeamf6pjw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpeamf6pjw.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpeamf6pjw.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b1' + str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpadzoyc1q.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpadzoyc1q.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpadzoyc1q.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return n // m + 1\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1aymvztq.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp1aymvztq.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1aymvztq.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgom5f3pq.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpgom5f3pq.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgom5f3pq.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgom5f3pq.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpgom5f3pq.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgom5f3pq.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return n // m + 1\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1aymvztq.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp1aymvztq.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1aymvztq.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n == m - 1:\n        return '0b1'\n    elif n == m - 2:\n        return '0b11'\n    elif n == m - 3:\n        return '0b11'\n    elif n == m - 4:\n        return '0b11'\n    elif n == m - 5:\n        return '0b11'\n    elif n == m - 6:\n        return '0b11'\n    elif n == m - 7:\n        return '0b11'\n    elif n == m - 8:\n        return '0b11'\n    elif n == m - 9:\n        return '0b11'\n    elif n == m - 10:\n        return '0b11'\n    elif n == m - 11:\n        return '0b11'\n    elif n == m - 12:\n        return '0b11'\n    elif n == m - 13:\n        return '0b11'\n    elif n == m - 14:\n        return '0b11'\n    elif n == m - 15:\n        return '0b11'\n    elif n == m - 16:\n        return '0b11'\n    elif n == m - 17:\n        return '0b11'\n    elif n == m - 18:\n        return '0b11'\n    elif n == m - 19:\n        return '0b11'\n    elif n == m - 20:\n        return '0b11'\n    elif n == m - 21:\n        return '0b11'\n    elif n == m - 22:\n        return '0b11'\n    elif n == m - 23:\n        return '0b11'\n    elif n == m - 24:\n        return '0b11'\n    elif n == m - 25:\n        return '0b11'\n    elif n == m - 26:\n        return '0b11'\n    elif n == m - 27:\n        return '0\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp6sdm60y9.py\", line 75\n    return '0\n           ^\nSyntaxError: unterminated string literal (detected at line 75)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphu_yucoz.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmphu_yucoz.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphu_yucoz.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgom5f3pq.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpgom5f3pq.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgom5f3pq.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(n) + ' ' + str(m) + ' ' + str(rounded_avg(n, m))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvqd8g7_2.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpvqd8g7_2.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpvqd8g7_2.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpunrhkx2w.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpunrhkx2w.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpunrhkx2w.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n > m:\n        return '-1'\n    return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdtji_7ek.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpdtji_7ek.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpdtji_7ek.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmput39qed6.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmput39qed6.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmput39qed6.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyjx_nekf.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpyjx_nekf.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpyjx_nekf.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpunrhkx2w.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpunrhkx2w.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpunrhkx2w.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphu_yucoz.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmphu_yucoz.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphu_yucoz.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvj6r0v2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpbvj6r0v2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvj6r0v2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return n // m + 1\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1aymvztq.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp1aymvztq.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1aymvztq.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsnsimqvk.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpsnsimqvk.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpsnsimqvk.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    elif n > m:\n        return -1\n    else:\n        return n // m\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3n4u5db_.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp3n4u5db_.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp3n4u5db_.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n == m - 1:\n        return '0b1'\n    elif n == m - 2:\n        return '0b11'\n    elif n == m - 3:\n        return '0b111'\n    elif n == m - 4:\n        return '0b1111'\n    elif n == m - 5:\n        return '0b111110'\n    elif n == m - 6:\n        return '0b111111'\n    elif n == m - 7:\n        return '0b1111111'\n    elif n == m - 8:\n        return '0b11111111'\n    elif n == m - 9:\n        return '0b1111111110'\n    elif n == m - 10:\n        return '0b1111111111'\n    elif n == m - 11:\n        return '0b11111111111'\n    elif n == m - 12:\n        return '0b111111111111'\n    elif n == m - 13:\n        return '0b11111111111110'\n    elif n == m - 14:\n        return '0b11111111111111'\n    elif n == m - 15:\n        return '0b111111111111111'\n    elif n == m - 16:\n        return '0b1111111111111111'\n    elif n == m - 17:\n        return '0b111111111111111110'\n    elif n == m - 18:\n        return '0b111111111111111111'\n    elif n == m - 19:\n        return '0b1111111111111111111'\n    elif n == m - 20:\n        return '0b11111111111111111111'\n    elif n == m - 21:\n        return '0b1111111111111111111110'\n    elif n == m - 22:\n        return '0b1111111111111111111111'\n    elif n == m - 23:\n        return '0b11111111111111111111111'\n    elif n == m - 24:\n        return '\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp4u1xe6ns.py\", line 69\n    return '\n           ^\nSyntaxError: unterminated string literal (detected at line 69)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return rounded_avg(n - 1, m) + rounded_avg(n - m, m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpghdjm1w1.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpghdjm1w1.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpghdjm1w1.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmput39qed6.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmput39qed6.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmput39qed6.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0 or m == 0:\n        return '0b0'\n    if n == m:\n        return '0b0'\n    if n > m:\n        return '0b' + str(n) + 'b'\n    if n < m:\n        return '0b' + str(m) + 'b'\n    return '0b' + str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8nhai4vg.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmp8nhai4vg.py\", line 43, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8nhai4vg.py\", line 29, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1fav5cul.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp1fav5cul.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1fav5cul.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return '0b' + str(round(n / (m - n), 2)) + str(round(m / (n - m), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprrd9h9cd.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmprrd9h9cd.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmprrd9h9cd.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0:\n        return '0b'\n    if m == 0:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n < m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n < m:\n        return '0b'\n    return '0b'\n<|endoftext|ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpc8ocxhi6.py\", line 33\n    \nSyntaxError: invalid syntax\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n == m - 1:\n        return '0b1'\n    elif n == m - 2:\n        return '0b11'\n    elif n == m - 3:\n        return '0b1110'\n    elif n == m - 4:\n        return '0b11001'\n    elif n == m - 5:\n        return '0b110001'\n    elif n == m - 6:\n        return '0b1100110'\n    elif n == m - 7:\n        return '0b1100101'\n    elif n == m - 8:\n        return '0b11001011'\n    elif n == m - 9:\n        return '0b11001010'\n    elif n == m - 10:\n        return '0b1100101110'\n    elif n == m - 11:\n        return '0b11001010110'\n    elif n == m - 12:\n        return '0b11001010111'\n    elif n == m - 13:\n        return '0b1100101011110'\n    elif n == m - 14:\n        return '0b11001010111001'\n    elif n == m - 15:\n        return '0b1100101011100110'\n    elif n == m - 16:\n        return '0b1100101011100101'\n    elif n == m - 17:\n        return '0b110010101110010110'\n    elif n == m - 18:\n        return '0b110010101110010101'\n    elif n == m - 19:\n        return '0b11001010111001010110'\n    elif n == m - 20:\n        return '0b11001010111001010101'\n    elif n == m - 21:\n        return '0b1100101011100101010110'\n    elif n == m - 22:\n        return '0b11001010111001\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpk_wsljhi.py\", line 65\n    return '0b11001010111001\n           ^\nSyntaxError: unterminated string literal (detected at line 65)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmjqa1zv1.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpmjqa1zv1.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmjqa1zv1.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return str(n) + ' ' + str(m) + ' ' + str(rounded_avg(n, m))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpygyj3lf5.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpygyj3lf5.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpygyj3lf5.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphu_yucoz.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmphu_yucoz.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphu_yucoz.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == m:\n        return str(n)\n    elif n < m:\n        return '-1'\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkodfvmak.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpkodfvmak.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpkodfvmak.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return str(int(round(n / m)))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr1nhdsce.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpr1nhdsce.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpr1nhdsce.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpivudor25.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpivudor25.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpivudor25.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(n) + ' ' + str(m) + ' ' + str(rounded_avg(n - 1, m))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps4yktksf.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmps4yktksf.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmps4yktksf.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n > m:\n        return '-1'\n    return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp90evd8w7.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp90evd8w7.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp90evd8w7.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return str(round(n / m, 2)) + 'b' + str(round(m / n, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp52selk1i.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp52selk1i.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp52selk1i.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0 or m == 0:\n        return -1\n    if n == m:\n        return n\n    if n > m:\n        return rounded_avg(n - 1, m)\n    else:\n        return rounded_avg(n, m - 1)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa4abjwtw.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpa4abjwtw.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpa4abjwtw.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return str(n) + ' ' + str(m) + ' ' + str(rounded_avg(n - 1, m))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_zl1t5qw.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp_zl1t5qw.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_zl1t5qw.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return rounded_avg(n - 1, m) + rounded_avg(m - 1, n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2spsd3j2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp2spsd3j2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2spsd3j2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmjqa1zv1.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpmjqa1zv1.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmjqa1zv1.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptz_bvhi9.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmptz_bvhi9.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptz_bvhi9.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvj6r0v2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpbvj6r0v2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvj6r0v2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpakvjsyfg.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpakvjsyfg.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpakvjsyfg.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return rounded_avg(n - 1, m) + rounded_avg(m - 1, n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2spsd3j2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp2spsd3j2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2spsd3j2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b1' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgf_knu27.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpgf_knu27.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgf_knu27.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return '0b' + str(m) + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeamf6pjw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpeamf6pjw.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpeamf6pjw.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvj6r0v2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpbvj6r0v2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvj6r0v2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n > m:\n        return '-1'\n    return str(round(n / (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdxbun8td.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpdxbun8td.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpdxbun8td.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxvh_ep9a.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpxvh_ep9a.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxvh_ep9a.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return str(n) + ' ' + str(m) + ' ' + str(n - m) + ' ' + str(m - n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7f_nnyxr.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp7f_nnyxr.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7f_nnyxr.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return '0b1' + str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps887hu_v.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmps887hu_v.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmps887hu_v.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxvh_ep9a.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpxvh_ep9a.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxvh_ep9a.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return '0b' + str(m) + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeamf6pjw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpeamf6pjw.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpeamf6pjw.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return int(round(n / m))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdgv_l31y.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpdgv_l31y.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpdgv_l31y.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1fav5cul.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp1fav5cul.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1fav5cul.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return str(n) + ' ' + str(m) + ' ' + str(n - m) + ' ' + str(m - n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7f_nnyxr.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp7f_nnyxr.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7f_nnyxr.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_uarnqy7.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp_uarnqy7.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_uarnqy7.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n == 0:\n        return '0b0'\n    if n == 1:\n        return '0b1'\n    if n == m:\n        return '0b1'\n    if n == m - 1:\n        return '0b1'\n    if n == m + 1:\n        return '0b1'\n    if n > m:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1:\n        return '-1'\n    if n > m + 1:\n        return '-1'\n    if n > m - 1\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpb709ik1s.py\", line 82\n    if n > m - 1\n                ^\nSyntaxError: expected ':'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvj6r0v2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpbvj6r0v2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvj6r0v2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0 or m == 0:\n        return '0'\n    if n > m:\n        return '-1'\n    if n == m:\n        return '0'\n    return '{}'.format(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7mxdobyo.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp7mxdobyo.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7mxdobyo.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltjrjhx.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp7ltjrjhx.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7ltjrjhx.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    elif n > m:\n        return '-1'\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1gkzgyvu.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp1gkzgyvu.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1gkzgyvu.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxvh_ep9a.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpxvh_ep9a.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxvh_ep9a.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptz_bvhi9.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmptz_bvhi9.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptz_bvhi9.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    else:\n        return '0b' + str(m) + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeamf6pjw.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpeamf6pjw.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpeamf6pjw.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvj6r0v2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpbvj6r0v2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvj6r0v2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n) + str(m)\n    else:\n        return '0b' + str(n) + str(m) + str(m - n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj4z1uksl.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpj4z1uksl.py\", line 38, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpj4z1uksl.py\", line 24, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    elif n == 0:\n        return '0b0'\n    elif m == 0:\n        return '0b0'\n    elif n == m:\n        return str(n)\n    elif n % 2 == 0:\n        return str(n) + 'b'\n    elif n % 2 == 1:\n        return str(n) + 'b'\n    else:\n        return str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp61trx8fh.py\", line 52, in <module>\n    test_check()\n  File \"/tmp/tmp61trx8fh.py\", line 50, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp61trx8fh.py\", line 36, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '0b' + str(n)\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3tyigt2v.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp3tyigt2v.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp3tyigt2v.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_uarnqy7.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp_uarnqy7.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_uarnqy7.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0 or m == 0:\n        return '0b0'\n    if n == m:\n        return '0b0'\n    if n > m:\n        return '-1'\n    if n < m:\n        return '0b0'\n    return '0b' + str(round(n / m, 2))\n<|endoftext|ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpyyjfy76j.py\", line 27\n    \nSyntaxError: invalid syntax\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvj6r0v2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpbvj6r0v2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvj6r0v2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1fav5cul.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp1fav5cul.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1fav5cul.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return str(round(n / (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp68485opt.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp68485opt.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp68485opt.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return str(round(n / (m + 1), 2)) + 'b' + str(round(m / (n + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9setkv99.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp9setkv99.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp9setkv99.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0 or m == 0:\n        return '0b0'\n    if n == m:\n        return '0b0'\n    if n > m:\n        return '0b' + str(n) + 'b'\n    if n < m:\n        return '0b' + str(m) + 'b'\n    return '0b' + str(n) + 'b' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8nhai4vg.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmp8nhai4vg.py\", line 43, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8nhai4vg.py\", line 29, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / (m + 1), 2)) + str(round(n % (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5ubft9l8.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp5ubft9l8.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5ubft9l8.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxvh_ep9a.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpxvh_ep9a.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxvh_ep9a.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n > m:\n        return '-1'\n    return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp79tuyikd.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp79tuyikd.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp79tuyikd.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpny7q1kfn.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpny7q1kfn.py\", line 39, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpny7q1kfn.py\", line 25, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgom5f3pq.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpgom5f3pq.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgom5f3pq.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0:\n        return '0b0'\n    if m == 0:\n        return '0b0'\n    if n < m:\n        return '0b0'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '0b1'\n    return '0b' + str(round(n / m, 2)) + str(round(m / n, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsl7ofv8w.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpsl7ofv8w.py\", line 45, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpsl7ofv8w.py\", line 31, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + ' ' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqcdwnjdk.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpqcdwnjdk.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqcdwnjdk.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(round(n / (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq71x9xu3.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpq71x9xu3.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpq71x9xu3.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvbrgq12l.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpvbrgq12l.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpvbrgq12l.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return str(n) + ' ' + str(m) + ' ' + str(n - m) + ' ' + str(m - n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7f_nnyxr.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp7f_nnyxr.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7f_nnyxr.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b11'\n    if n > m:\n        return '-1'\n    return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpu08c0z8d.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpu08c0z8d.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpu08c0z8d.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0 or m == 0:\n        return ''\n    if n < m:\n        return '0b' + str(n) + 'b' + str(m)\n    else:\n        return '0b' + str(m) + 'b' + str(n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkk99dcow.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpkk99dcow.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpkk99dcow.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ltjrjhx.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp7ltjrjhx.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp7ltjrjhx.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(round(n / (m + 1), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdd2quhto.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpdd2quhto.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpdd2quhto.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return '0b' + str(round(n / (n - m), 2)) + str(round(m / (n - m), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp29aygp4p.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp29aygp4p.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp29aygp4p.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return n // m + 1\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1aymvztq.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp1aymvztq.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1aymvztq.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return rounded_avg(n - 1, m) + rounded_avg(n, m - 1)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9406cavl.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp9406cavl.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp9406cavl.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return '0b1'\n    if n > m:\n        return '-1'\n    return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgom5f3pq.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpgom5f3pq.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpgom5f3pq.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / (m - n), 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_uarnqy7.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp_uarnqy7.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_uarnqy7.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n == 0:\n        return '0b0'\n    if n == 1:\n        return '0b1'\n    if n == m:\n        return '0b1'\n    if n == m - 1:\n        return '0b1'\n    if n == m + 1:\n        return '0b1'\n    if n == m - n:\n        return '0b1'\n    if n == m - n - 1:\n        return '0b1'\n    if n == m - n - 2:\n        return '0b1'\n    if n == m - n - 3:\n        return '0b1'\n    if n == m - n - 4:\n        return '0b1'\n    if n == m - n - 5:\n        return '0b1'\n    if n == m - n - 6:\n        return '0b1'\n    if n == m - n - 7:\n        return '0b1'\n    if n == m - n - 8:\n        return '0b1'\n    if n == m - n - 9:\n        return '0b1'\n    if n == m - n - 10:\n        return '0b1'\n    if n == m - n - 11:\n        return '0b1'\n    if n == m - n - 12:\n        return '0b1'\n    if n == m - n - 13:\n        return '0b1'\n    if n == m - n - 14:\n        return '0b1'\n    if n == m - n - 15:\n        return '0b1'\n    if n == m - n - 16:\n        return '0b1'\n    if n == m - n - 17:\n        return '0b1'\n    if n == m - n - 18:\n        return '0b1'\n    if n == m - n - 19:\n        return '0b1'\n    if n == m - n - 20:\n        return '0b1'\n    if n == m - n -\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpm5z2e4ec.py\", line 74\n    if n == m - n -\n                   ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0:\n        return '0b'\n    if m == 0:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        return '0b'\n    if n == m:\n        return '0b'\n    if n > m:\n        \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpdo9q8c4g.py\", line 92\n    def check(candidate):\nIndentationError: expected an indented block after 'if' statement on line 90\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2mlaowg4.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2mlaowg4.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2mlaowg4.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    if n == m:\n        return str(n)\n    if n > m:\n        return '-1'\n    return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdtji_7ek.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpdtji_7ek.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpdtji_7ek.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvj6r0v2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpbvj6r0v2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvj6r0v2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return -1\n    elif n == m:\n        return n\n    else:\n        return rounded_avg(n - m, m) + rounded_avg(m - n, n)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0cdnqov5.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp0cdnqov5.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp0cdnqov5.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    elif n > m:\n        return '-1'\n    else:\n        return '0b1' + str(n) + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpunrhkx2w.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpunrhkx2w.py\", line 42, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpunrhkx2w.py\", line 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return str(n)\n    else:\n        return str(n) + '-' + str(m)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbvj6r0v2.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpbvj6r0v2.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbvj6r0v2.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n == 0 or m == 0:\n        return '0'\n    if n > m:\n        return '-1'\n    if n == m:\n        return '0'\n    return str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628439,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx2nhhwrq.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpx2nhhwrq.py\", line 41, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpx2nhhwrq.py\", line 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n < m:\n        return '-1'\n    elif n == m:\n        return '0b1'\n    else:\n        return '0b' + str(round(n / m, 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n",
      "timestamp": 1673628438,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvrdhait.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpmvrdhait.py\", line 40, in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmvrdhait.py\", line 26, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}