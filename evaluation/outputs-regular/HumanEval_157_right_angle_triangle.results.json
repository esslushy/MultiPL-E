{
  "name": "HumanEval_157_right_angle_triangle",
  "language": "py",
  "prompt": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a > b and b > c) or (a < b and b < c) or (a > c and c < b)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc5jrrvvg.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpc5jrrvvg.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpc5jrrvvg.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == b or a == c or a == a:\n        return True\n    if a == c or b == c or c == a:\n        return True\n    if a == c or b == c or c == b:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr_hkmtqc.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpr_hkmtqc.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpr_hkmtqc.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0ge20ra9.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp0ge20ra9.py\", line 30, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0ge20ra9.py\", line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    elif a == c or b == c:\n        return False\n    else:\n        return (a + b) % 2 == (c + b) % 2\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm36ih89_.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpm36ih89_.py\", line 34, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpm36ih89_.py\", line 22, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == a:\n        return False\n    if a == a or b == a:\n        return False\n    if a == b or b == b:\n        return False\n    if a == c or b == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == a or b == b:\n        return False\n    if a == a or b == b:\n        return False\n    if a == c or b == c:\n        return False\n    return True\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc4a5_w76.py\", line 51, in <module>\n    test_check()\n  File \"/tmp/tmpc4a5_w76.py\", line 49, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpc4a5_w76.py\", line 36, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpft0seg1e.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpft0seg1e.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpft0seg1e.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b and b == c:\n        return True\n    elif a == c and b == c:\n        return True\n    elif a == c and b == b:\n        return True\n    elif a == b and c == b:\n        return True\n    elif a == b and c == c:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpak1ljj0p.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpak1ljj0p.py\", line 40, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpak1ljj0p.py\", line 27, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjfpzc21w.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpjfpzc21w.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjfpzc21w.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == 2 or b == 2 or c == 2:\n        return True\n    if a == 3 or b == 3 or c == 3:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpthq2sks7.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpthq2sks7.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpthq2sks7.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == b:\n        return a == c\n    if a == c:\n        return a == b\n    if a == c:\n        return a == a\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_dswxi18.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp_dswxi18.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_dswxi18.py\", line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0ge20ra9.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp0ge20ra9.py\", line 30, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0ge20ra9.py\", line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp21msqz5t.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp21msqz5t.py\", line 33, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp21msqz5t.py\", line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return True\n    elif a == c or b == c:\n        return False\n    else:\n        return (a > b) and (b > c) and (a > c)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgz8h7m3s.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpgz8h7m3s.py\", line 34, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgz8h7m3s.py\", line 21, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 3 == 0 and (a + b + c) % 5 == 0\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpps2ako8s.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpps2ako8s.py\", line 30, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpps2ako8s.py\", line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgii53b5l.py\", line 97, in <module>\n    test_check()\n  File \"/tmp/tmpgii53b5l.py\", line 95, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgii53b5l.py\", line 82, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return True\n    elif a == c or b == c:\n        return False\n    else:\n        return (a + b) % 2 == (c + a) % 2\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1mdydfqw.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp1mdydfqw.py\", line 34, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp1mdydfqw.py\", line 21, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b and b == c:\n        return True\n    elif a == c and b == c:\n        return True\n    elif a == b and c == c:\n        return True\n    elif a == c and b == c:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_v5qrlhm.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmp_v5qrlhm.py\", line 38, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_v5qrlhm.py\", line 25, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpft0seg1e.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpft0seg1e.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpft0seg1e.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjfpzc21w.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpjfpzc21w.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjfpzc21w.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    if a == 1 or b == 1 or c == 1:\n        return False\n    if a == 2 or b == 2 or c == 2:\n        return False\n    if a == 3 or b == 3 or c == 3:\n        return False\n    if a == 4 or b == 4 or c == 4:\n        return False\n    if a == 5 or b == 5 or c == 5:\n        return False\n    return True\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg6el225_.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpg6el225_.py\", line 41, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpg6el225_.py\", line 28, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == c:\n        return True\n    if a == b:\n        return True\n    if a == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpb0qlb6od.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpb0qlb6od.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpb0qlb6od.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    elif a == c or b == c:\n        return False\n    else:\n        return (a + b) % 2 == (c + b) % 2\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm36ih89_.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpm36ih89_.py\", line 34, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpm36ih89_.py\", line 22, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == c or b == c:\n        return True\n    if a == b or a == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpb30j_swm.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpb30j_swm.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpb30j_swm.py\", line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 0 or b == 0 or c == 0:\n        return True\n    if a == 1 or b == 1 or c == 1:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps8e_0y_1.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmps8e_0y_1.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmps8e_0y_1.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0ge20ra9.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp0ge20ra9.py\", line 30, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0ge20ra9.py\", line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == c or b == c:\n        return True\n    if a == b or a == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpb30j_swm.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpb30j_swm.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpb30j_swm.py\", line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == b or b == c or c == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeaqp3pcu.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpeaqp3pcu.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpeaqp3pcu.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return False\n    if\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp8w5yx6rx.py\", line 81\n    if\n      ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == b or b == c or c == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeaqp3pcu.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpeaqp3pcu.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpeaqp3pcu.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return True\n    if a == b or b == c:\n        return True\n    if a == c or b == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy74cf0ws.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpy74cf0ws.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpy74cf0ws.py\", line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    return a > b and b > c and c > a\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpptf3fs7a.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpptf3fs7a.py\", line 33, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpptf3fs7a.py\", line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == c:\n        return True\n    if a == b:\n        return True\n    if a == a or a == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpljtuycbu.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpljtuycbu.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpljtuycbu.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == 2 or b == 2 or c == 2:\n        return True\n    if a == 3 or b == 3 or c == 3:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpthq2sks7.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpthq2sks7.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpthq2sks7.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or a == 2 or b == 1 or b == 2:\n        return True\n    if a == 3 or b == 3 or c == 3:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp46xao0hw.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp46xao0hw.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp46xao0hw.py\", line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == c or b == c:\n        return True\n    if a == b or a == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpb30j_swm.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpb30j_swm.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpb30j_swm.py\", line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 3 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3xha48rf.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp3xha48rf.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3xha48rf.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpft0seg1e.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpft0seg1e.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpft0seg1e.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a % 2 == b % 2 == c % 2\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp08rr5g93.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp08rr5g93.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp08rr5g93.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 0 or b == 0 or c == 0:\n        return True\n    return (a + b) % 2 == (c + b) % 2\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpn8cr66ew.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpn8cr66ew.py\", line 33, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpn8cr66ew.py\", line 21, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 3 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3xha48rf.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp3xha48rf.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3xha48rf.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b and a == c:\n        return True\n    if a == c and b == c:\n        return True\n    if a == b and c == c:\n        return True\n    if a == c and b == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5l5bsf6c.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp5l5bsf6c.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5l5bsf6c.py\", line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 0 or b == 0 or c == 0:\n        return True\n    if a == b:\n        return a == c\n    if b == c:\n        return b == a\n    if a == c:\n        return a == b\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv38qw2mq.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpv38qw2mq.py\", line 39, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpv38qw2mq.py\", line 26, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjfpzc21w.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpjfpzc21w.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjfpzc21w.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9mi4hpfq.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp9mi4hpfq.py\", line 32, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9mi4hpfq.py\", line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == c or b == c:\n        return True\n    if a == b or a == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpb30j_swm.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpb30j_swm.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpb30j_swm.py\", line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == b or b == c or c == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpeaqp3pcu.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpeaqp3pcu.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpeaqp3pcu.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    return a > b and b > c and c > a\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpptf3fs7a.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpptf3fs7a.py\", line 33, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpptf3fs7a.py\", line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    elif a == c or b == c:\n        return False\n    else:\n        return a > b and b > c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxj1_a5gt.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxj1_a5gt.py\", line 34, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxj1_a5gt.py\", line 21, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0ge20ra9.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp0ge20ra9.py\", line 30, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0ge20ra9.py\", line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == c or b == c:\n        return True\n    if a == b:\n        return True\n    if a == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3xj_ebd6.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp3xj_ebd6.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3xj_ebd6.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 3 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3xha48rf.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp3xha48rf.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3xha48rf.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 3 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3xha48rf.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp3xha48rf.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3xha48rf.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9mi4hpfq.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp9mi4hpfq.py\", line 32, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9mi4hpfq.py\", line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == 2 or b == 2 or c == 2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpni354z8z.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpni354z8z.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpni354z8z.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 0 or b == 0 or c == 0:\n        return True\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == 2 or b == 2 or c == 2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplean57k2.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmplean57k2.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmplean57k2.py\", line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwcpjanw3.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpwcpjanw3.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwcpjanw3.py\", line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    return True\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9abb86q6.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp9abb86q6.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9abb86q6.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b and b == c:\n        return True\n    if a == c and b == c:\n        return True\n    if a == b and b == a:\n        return True\n    if a == c and b == a:\n        return True\n    if a == c and b == b:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfvb543pb.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpfvb543pb.py\", line 39, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfvb543pb.py\", line 26, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == c or b == c:\n        return True\n    if a == b:\n        return True\n    if a == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3xj_ebd6.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp3xj_ebd6.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3xj_ebd6.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == 2 or b == 2 or c == 2:\n        return True\n    if a == 3 or b == 3 or c == 3:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpthq2sks7.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpthq2sks7.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpthq2sks7.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjfpzc21w.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpjfpzc21w.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjfpzc21w.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return True\n    if a == b or b == c:\n        return True\n    if a == c or b == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpy74cf0ws.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpy74cf0ws.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpy74cf0ws.py\", line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a % 2 == b % 2 == c % 2\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp08rr5g93.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmp08rr5g93.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp08rr5g93.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpft0seg1e.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpft0seg1e.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpft0seg1e.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a % 2 == b % 2 == c % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpixi1dd8b.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpixi1dd8b.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpixi1dd8b.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    if a == b or a == c:\n        return False\n    if a == c:\n        return False\n    if a == 1 or a == 2 or a == 3:\n        return False\n    return True\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3w0c80rq.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp3w0c80rq.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3w0c80rq.py\", line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return False\n    if a == b:\n        return True\n    if b == c:\n        return True\n    if a == b:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvyf8cmrk.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpvyf8cmrk.py\", line 39, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpvyf8cmrk.py\", line 26, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0ge20ra9.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp0ge20ra9.py\", line 30, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0ge20ra9.py\", line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 0 or b == 0 or c == 0:\n        return True\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == 2 or b == 2 or c == 2:\n        return True\n    if a == 3 or b == 3 or c == 3:\n        return True\n    if a == 4 or b == 4 or c == 4:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgrgkpo8q.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrgkpo8q.py\", line 41, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgrgkpo8q.py\", line 29, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjfpzc21w.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpjfpzc21w.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjfpzc21w.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    elif a == b or a == c:\n        return False\n    elif a == a or a == c:\n        return False\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3gpchokq.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmp3gpchokq.py\", line 36, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3gpchokq.py\", line 23, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9mi4hpfq.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp9mi4hpfq.py\", line 32, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9mi4hpfq.py\", line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0ge20ra9.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp0ge20ra9.py\", line 30, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0ge20ra9.py\", line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c or b == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjfpzc21w.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpjfpzc21w.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjfpzc21w.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == c or b == c:\n        return True\n    if a == b:\n        return False\n    if a == c:\n        return False\n    return True\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4b4wa0qk.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp4b4wa0qk.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4b4wa0qk.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    return (a + b + c) % 3 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfpijycz_.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpfpijycz_.py\", line 33, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfpijycz_.py\", line 21, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == 2 or b == 2 or c == 2:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpni354z8z.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpni354z8z.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpni354z8z.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return (a + b + c) % 2 == 0\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjb3sje44.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpjb3sje44.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjb3sje44.py\", line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == b or a == c:\n        return True\n    if a == c:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt76djbmo.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpt76djbmo.py\", line 35, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpt76djbmo.py\", line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c:\n        return False\n    if a == b or a == c or a == a:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkzwi1lhr.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpkzwi1lhr.py\", line 33, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpkzwi1lhr.py\", line 21, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and a == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzyhzw_8.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmpdzyhzw_8.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdzyhzw_8.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9mi4hpfq.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp9mi4hpfq.py\", line 32, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9mi4hpfq.py\", line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptklxc64_.py\", line 31, in <module>\n    test_check()\n  File \"/tmp/tmptklxc64_.py\", line 29, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptklxc64_.py\", line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == 2 or b == 2 or c == 2:\n        return True\n    if a == 3 or b == 3 or c == 3:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpthq2sks7.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpthq2sks7.py\", line 37, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpthq2sks7.py\", line 25, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if a == b or a == c or b == c:\n        return False\n    if a == 0 or b == 0 or c == 0:\n        return True\n    if a == 1 or b == 1 or c == 1:\n        return True\n    if a == 2 or b == 2 or c == 2:\n        return True\n    if a == 3 or b == 3 or c == 3:\n        return True\n    if a == 4 or b == 4 or c == 4:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgrgkpo8q.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpgrgkpo8q.py\", line 41, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgrgkpo8q.py\", line 29, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a == b and b == c\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0ge20ra9.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp0ge20ra9.py\", line 30, in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0ge20ra9.py\", line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}