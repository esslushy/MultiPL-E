{
  "name": "HumanEval_6_parse_nested_parens",
  "language": "py",
  "prompt": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92ajyq9z.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp92ajyq9z.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp92ajyq9z.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    else:\n        return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnr87aoai.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpnr87aoai.py\", line 23, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpnr87aoai.py\", line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpnr87aoai.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpnr87aoai.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz3s7dqbl.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpz3s7dqbl.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpz3s7dqbl.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpz3s7dqbl.py\", line 41, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(i)\n        elif paren_string[i] == ')':\n            if len(parens) == 0:\n                return [i]\n            else:\n                return [i] + parse_nested_parens(parens)\n    return [i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgguthl2c.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmpgguthl2c.py\", line 28, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgguthl2c.py\", line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()') if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc1m0lp5o.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpc1m0lp5o.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpc1m0lp5o.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd4o85yeg.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpd4o85yeg.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd4o85yeg.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpd4o85yeg.py\", line 11, in parse_nested_parens\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\nNameError: name 're' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp8w3swuv8.py\", line 40\n    paren_string = paren_string.replace(')\n                                        ^\nSyntaxError: unterminated string literal (detected at line 40)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace('(', '').replace(')', '')\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq83q_osn.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpq83q_osn.py\", line 40, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpq83q_osn.py\", line 35, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    elif paren_string[0] == '(' and paren_string[-1] == ')':\n        return [int(i) for i in paren_string.split('()')[1:-1].split(')')]\n    else:\n        return [int(i) for i in paren_string.split('()')[1:-1].split(')')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2vzky0v.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpq2vzky0v.py\", line 25, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpq2vzky0v.py\", line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpq2vzky0v.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')[1:-1].split(')')]\nAttributeError: 'list' object has no attribute 'split'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split() if x.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7cko609o.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp7cko609o.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7cko609o.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92ajyq9z.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp92ajyq9z.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp92ajyq9z.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph5fqq4t5.py\", line 49, in <module>\n    test_check()\n  File \"/tmp/tmph5fqq4t5.py\", line 47, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph5fqq4t5.py\", line 42, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '').replace(')', '').replace(')', '')\n    paren_string = paren_string.replace('()', '').replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string =\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpm5o6pk9w.py\", line 40\n    paren_string =\n                  ^\nSyntaxError: invalid syntax\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpates3bwz.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpates3bwz.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpates3bwz.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpates3bwz.py\", line 11, in parse_nested_parens\n    return [int(x) for x in paren_string.split()]\n  File \"/tmp/tmpates3bwz.py\", line 11, in <listcomp>\n    return [int(x) for x in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpovkj6eiq.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpovkj6eiq.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpovkj6eiq.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpovkj6eiq.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3nsdgsbr.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3nsdgsbr.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3nsdgsbr.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd4o85yeg.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpd4o85yeg.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd4o85yeg.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpd4o85yeg.py\", line 11, in parse_nested_parens\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\nNameError: name 're' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    if paren_string[0] == '(' and paren_string[-1] == ')':\n        return [int(i) for i in paren_string.split(')')[1:-1].split('()')]\n    else:\n        return [int(i) for i in paren_string.split('()')[1:-1].split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd40ly5jz.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpd40ly5jz.py\", line 25, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd40ly5jz.py\", line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpd40ly5jz.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split(')')[1:-1].split('()')]\nAttributeError: 'list' object has no attribute 'split'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    else:\n        return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyrbmx01p.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpyrbmx01p.py\", line 23, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyrbmx01p.py\", line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string.startswith('('):\n        return [int(i) for i in paren_string.split(')')]\n    elif paren_string.startswith('('):\n        return [int(i) for i in paren_string.split(')')]\n    else:\n        return [int(i) for i in paren_string.split(')')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_uy9qulv.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp_uy9qulv.py\", line 25, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_uy9qulv.py\", line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp_uy9qulv.py\", line 13, in parse_nested_parens\n    return [int(i) for i in paren_string.split(')')]\n  File \"/tmp/tmp_uy9qulv.py\", line 13, in <listcomp>\n    return [int(i) for i in paren_string.split(')')]\nValueError: invalid literal for int() with base 10: '(('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz3s7dqbl.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpz3s7dqbl.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpz3s7dqbl.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpz3s7dqbl.py\", line 41, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.split(')')\n    return [int(i) for i in paren_string]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_2vbft6g.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp_2vbft6g.py\", line 21, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_2vbft6g.py\", line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp_2vbft6g.py\", line 13, in parse_nested_parens\n    return [int(i) for i in paren_string]\n  File \"/tmp/tmp_2vbft6g.py\", line 13, in <listcomp>\n    return [int(i) for i in paren_string]\nValueError: invalid literal for int() with base 10: '(('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpates3bwz.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpates3bwz.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpates3bwz.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpates3bwz.py\", line 11, in parse_nested_parens\n    return [int(x) for x in paren_string.split()]\n  File \"/tmp/tmpates3bwz.py\", line 11, in <listcomp>\n    return [int(x) for x in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    else:\n        return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyrbmx01p.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpyrbmx01p.py\", line 23, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyrbmx01p.py\", line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string.startswith('('):\n        paren_string = paren_string[1:]\n    if paren_string.endswith(')') and paren_string.startswith('('):\n        paren_string = paren_string[:-1]\n    return [int(x) for x in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7ohzhy5g.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp7ohzhy5g.py\", line 24, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7ohzhy5g.py\", line 19, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp7ohzhy5g.py\", line 16, in parse_nested_parens\n    return [int(x) for x in paren_string.split()]\n  File \"/tmp/tmp7ohzhy5g.py\", line 16, in <listcomp>\n    return [int(x) for x in paren_string.split()]\nValueError: invalid literal for int() with base 10: '()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_string = paren_string.split()\n    return [int(i) for i in paren_string]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe9rgulqs.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpe9rgulqs.py\", line 23, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpe9rgulqs.py\", line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpe9rgulqs.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string]\n  File \"/tmp/tmpe9rgulqs.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    elif paren_string.startswith('('):\n        return [int(i) for i in paren_string.split(')')]\n    elif paren_string.startswith('('):\n        return [int(i) for i in paren_string.split('(')]\n    else:\n        return [int(i) for i in paren_string.split(',')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoebov_jg.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpoebov_jg.py\", line 27, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpoebov_jg.py\", line 22, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpoebov_jg.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split(')')]\n  File \"/tmp/tmpoebov_jg.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string.split(')')]\nValueError: invalid literal for int() with base 10: '(('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp8w3swuv8.py\", line 40\n    paren_string = paren_string.replace(')\n                                        ^\nSyntaxError: unterminated string literal (detected at line 40)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92ajyq9z.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp92ajyq9z.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp92ajyq9z.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpju1sndj5.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpju1sndj5.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpju1sndj5.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3nsdgsbr.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3nsdgsbr.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3nsdgsbr.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbxv69t_t.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbxv69t_t.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbxv69t_t.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbxv69t_t.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpoz0l_yg8.py\", line 40\n    paren_string = paren_string.replace('()\n                                        ^\nSyntaxError: unterminated string literal (detected at line 40)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    elif paren_string[0] == '(' and paren_string[-1] == ')':\n        return [int(i) for i in paren_string.split()]\n    else:\n        return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp35ey0kyl.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp35ey0kyl.py\", line 25, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp35ey0kyl.py\", line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp35ey0kyl.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmp35ey0kyl.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string.startswith('('):\n        paren_string = paren_string[1:]\n    if paren_string.endswith(')') and paren_string.startswith('('):\n        paren_string = paren_string[:-1]\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1z4bmhx0.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp1z4bmhx0.py\", line 24, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1z4bmhx0.py\", line 19, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp1z4bmhx0.py\", line 16, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmp1z4bmhx0.py\", line 16, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdnmseqj_.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpdnmseqj_.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdnmseqj_.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpdnmseqj_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmpdnmseqj_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbmv4pfy7.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpbmv4pfy7.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbmv4pfy7.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbmv4pfy7.py\", line 11, in parse_nested_parens\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\nNameError: name 're' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split() if x.isdigit()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpstwo7ons.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpstwo7ons.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpstwo7ons.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    elif paren_string[0] == '(' and paren_string[-1] == ')':\n        return [int(i) for i in paren_string[1:-1].split(')')]\n    elif paren_string[0] == '(' and paren_string[-1] == ')':\n        return [int(i) for i in paren_string[1:-1].split(')')]\n    else:\n        return [int(i) for i in paren_string.split(')')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdfoe47w8.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmpdfoe47w8.py\", line 27, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdfoe47w8.py\", line 22, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpdfoe47w8.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string[1:-1].split(')')]\n  File \"/tmp/tmpdfoe47w8.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string[1:-1].split(')')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpates3bwz.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpates3bwz.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpates3bwz.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpates3bwz.py\", line 11, in parse_nested_parens\n    return [int(x) for x in paren_string.split()]\n  File \"/tmp/tmpates3bwz.py\", line 11, in <listcomp>\n    return [int(x) for x in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdnmseqj_.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpdnmseqj_.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdnmseqj_.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpdnmseqj_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmpdnmseqj_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3nsdgsbr.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3nsdgsbr.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3nsdgsbr.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92ajyq9z.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp92ajyq9z.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp92ajyq9z.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92ajyq9z.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp92ajyq9z.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp92ajyq9z.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string.startswith('('):\n        paren_string = paren_string[1:]\n    if paren_string.endswith(')') and paren_string.startswith('('):\n        paren_string = paren_string[:-1]\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1z4bmhx0.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp1z4bmhx0.py\", line 24, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1z4bmhx0.py\", line 19, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp1z4bmhx0.py\", line 16, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmp1z4bmhx0.py\", line 16, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    elif paren_string[0] == '(' and paren_string[-1] == ')':\n        return [int(i) for i in paren_string[1:-1].split(')')]\n    else:\n        return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpojt4o6ow.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpojt4o6ow.py\", line 25, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpojt4o6ow.py\", line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpojt4o6ow.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string[1:-1].split(')')]\n  File \"/tmp/tmpojt4o6ow.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string[1:-1].split(')')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz3s7dqbl.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpz3s7dqbl.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpz3s7dqbl.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpz3s7dqbl.py\", line 41, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string.startswith('('):\n        paren_string = paren_string[1:]\n    if paren_string.endswith(')'):\n        paren_string = paren_string[:-1]\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp01bprheq.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp01bprheq.py\", line 24, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp01bprheq.py\", line 19, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp01bprheq.py\", line 16, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmp01bprheq.py\", line 16, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp8w3swuv8.py\", line 40\n    paren_string = paren_string.replace(')\n                                        ^\nSyntaxError: unterminated string literal (detected at line 40)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpoz0l_yg8.py\", line 40\n    paren_string = paren_string.replace('()\n                                        ^\nSyntaxError: unterminated string literal (detected at line 40)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbmv4pfy7.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpbmv4pfy7.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbmv4pfy7.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbmv4pfy7.py\", line 11, in parse_nested_parens\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\nNameError: name 're' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbxv69t_t.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbxv69t_t.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbxv69t_t.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbxv69t_t.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92ajyq9z.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp92ajyq9z.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp92ajyq9z.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92ajyq9z.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp92ajyq9z.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp92ajyq9z.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2epzt36k.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp2epzt36k.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2epzt36k.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp2epzt36k.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmp2epzt36k.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split() if x.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7cko609o.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp7cko609o.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7cko609o.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    else:\n        return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyrbmx01p.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpyrbmx01p.py\", line 23, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyrbmx01p.py\", line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()') if i.isdigit()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnnkym5u2.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpnnkym5u2.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpnnkym5u2.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92ajyq9z.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp92ajyq9z.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp92ajyq9z.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpju1sndj5.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpju1sndj5.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpju1sndj5.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3nsdgsbr.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3nsdgsbr.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3nsdgsbr.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    else:\n        return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyrbmx01p.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpyrbmx01p.py\", line 23, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyrbmx01p.py\", line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92ajyq9z.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp92ajyq9z.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp92ajyq9z.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbxv69t_t.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbxv69t_t.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbxv69t_t.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbxv69t_t.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string.startswith('('):\n        paren_string = paren_string[1:]\n    if paren_string.endswith(')'):\n        paren_string = paren_string[:-1]\n    return [int(x) for x in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6q5aavfv.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp6q5aavfv.py\", line 24, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp6q5aavfv.py\", line 19, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp6q5aavfv.py\", line 16, in parse_nested_parens\n    return [int(x) for x in paren_string.split()]\n  File \"/tmp/tmp6q5aavfv.py\", line 16, in <listcomp>\n    return [int(x) for x in paren_string.split()]\nValueError: invalid literal for int() with base 10: '()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp8w3swuv8.py\", line 40\n    paren_string = paren_string.replace(')\n                                        ^\nSyntaxError: unterminated string literal (detected at line 40)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd4o85yeg.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpd4o85yeg.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd4o85yeg.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpd4o85yeg.py\", line 11, in parse_nested_parens\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\nNameError: name 're' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_string = paren_string.split()\n    if len(paren_string) == 1:\n        return [0]\n    elif len(paren_string) == 2:\n        return [0, 1]\n    elif len(paren_string) == 3:\n        return [0, 1, 2]\n    else:\n        raise ValueError('Invalid nested parentheses string: {}'.format(paren_string))\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmw41l91_.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpmw41l91_.py\", line 30, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmw41l91_.py\", line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpmw41l91_.py\", line 22, in parse_nested_parens\n    raise ValueError('Invalid nested parentheses string: {}'.format(paren_string))\nValueError: Invalid nested parentheses string: ['(()())', '((()))', '()', '((())()())']\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp92ajyq9z.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp92ajyq9z.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp92ajyq9z.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2epzt36k.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp2epzt36k.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2epzt36k.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp2epzt36k.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmp2epzt36k.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp601bt4a7.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp601bt4a7.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp601bt4a7.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp601bt4a7.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmp601bt4a7.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    else:\n        return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyrbmx01p.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpyrbmx01p.py\", line 23, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyrbmx01p.py\", line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbxv69t_t.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbxv69t_t.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbxv69t_t.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbxv69t_t.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    elif paren_string[0] == '(' and paren_string[-1] == ')':\n        return [int(i) for i in paren_string.split(')')[1:-1].split(',')]\n    else:\n        return [int(i) for i in paren_string.split('()')[1:-1].split(',')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx2k9ir1e.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpx2k9ir1e.py\", line 25, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpx2k9ir1e.py\", line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpx2k9ir1e.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split(')')[1:-1].split(',')]\nAttributeError: 'list' object has no attribute 'split'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(i)\n        elif paren_string[i] == ')':\n            parens.pop()\n    return parens\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3u8lnes6.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp3u8lnes6.py\", line 25, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3u8lnes6.py\", line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp8w3swuv8.py\", line 40\n    paren_string = paren_string.replace(')\n                                        ^\nSyntaxError: unterminated string literal (detected at line 40)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    paren_index = 0\n    while paren_index < len(paren_string):\n        if paren_string[paren_index] == '(':\n            parens.append(paren_index)\n            paren_index += 1\n        elif paren_string[paren_index] == ')':\n            if len(parens) > 0:\n                return parens\n            else:\n                return [paren_index]\n        else:\n            paren_index += 1\n    return []\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw5beinw_.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpw5beinw_.py\", line 32, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw5beinw_.py\", line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '').replace(')', '')\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphq7ti5qz.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmphq7ti5qz.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphq7ti5qz.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmphq7ti5qz.py\", line 12, in parse_nested_parens\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\nNameError: name 're' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '').replace(')', '')\n    return [int(i) for i in paren_string.split('()') if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_sr_sogd.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp_sr_sogd.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_sr_sogd.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp499_bi31.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp499_bi31.py\", line 22, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp499_bi31.py\", line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp499_bi31.py\", line 14, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmp499_bi31.py\", line 14, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    else:\n        return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyrbmx01p.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpyrbmx01p.py\", line 23, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyrbmx01p.py\", line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpyrbmx01p.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()') if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc1m0lp5o.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpc1m0lp5o.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpc1m0lp5o.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbxv69t_t.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbxv69t_t.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbxv69t_t.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbxv69t_t.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd4o85yeg.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpd4o85yeg.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd4o85yeg.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpd4o85yeg.py\", line 11, in parse_nested_parens\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\nNameError: name 're' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(i)\n        elif paren_string[i] == ')':\n            parens.pop()\n    return parens\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp102aq5cd.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp102aq5cd.py\", line 26, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp102aq5cd.py\", line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_string = paren_string.split()\n    return [int(i) for i in paren_string]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe9rgulqs.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpe9rgulqs.py\", line 23, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpe9rgulqs.py\", line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpe9rgulqs.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string]\n  File \"/tmp/tmpe9rgulqs.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2epzt36k.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp2epzt36k.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2epzt36k.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp2epzt36k.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmp2epzt36k.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string.startswith('('):\n        return [int(i) for i in paren_string.split(')')]\n    elif paren_string.startswith('('):\n        return [int(i) for i in paren_string.split(')')]\n    else:\n        return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw_tjbiqa.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpw_tjbiqa.py\", line 25, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw_tjbiqa.py\", line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw_tjbiqa.py\", line 13, in parse_nested_parens\n    return [int(i) for i in paren_string.split(')')]\n  File \"/tmp/tmpw_tjbiqa.py\", line 13, in <listcomp>\n    return [int(i) for i in paren_string.split(')')]\nValueError: invalid literal for int() with base 10: '(('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2epzt36k.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp2epzt36k.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2epzt36k.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp2epzt36k.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmp2epzt36k.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(i)\n        elif paren_string[i] == ')':\n            if len(parens) > 0:\n                parens.pop()\n            else:\n                raise ValueError('Unmatched parentheses')\n    return parens\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9_aghq51.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp9_aghq51.py\", line 28, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9_aghq51.py\", line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpovkj6eiq.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpovkj6eiq.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpovkj6eiq.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpovkj6eiq.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "  File \"/tmp/tmp8w3swuv8.py\", line 40\n    paren_string = paren_string.replace(')\n                                        ^\nSyntaxError: unterminated string literal (detected at line 40)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpoz0l_yg8.py\", line 40\n    paren_string = paren_string.replace('()\n                                        ^\nSyntaxError: unterminated string literal (detected at line 40)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd4o85yeg.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpd4o85yeg.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd4o85yeg.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpd4o85yeg.py\", line 11, in parse_nested_parens\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\nNameError: name 're' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz3s7dqbl.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpz3s7dqbl.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpz3s7dqbl.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpz3s7dqbl.py\", line 41, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    elif paren_string[0] == '(' and paren_string[-1] == ')':\n        return [int(i) for i in paren_string[1:-1].split(')')]\n    else:\n        return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpojt4o6ow.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpojt4o6ow.py\", line 25, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpojt4o6ow.py\", line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpojt4o6ow.py\", line 15, in parse_nested_parens\n    return [int(i) for i in paren_string[1:-1].split(')')]\n  File \"/tmp/tmpojt4o6ow.py\", line 15, in <listcomp>\n    return [int(i) for i in paren_string[1:-1].split(')')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2epzt36k.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp2epzt36k.py\", line 20, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2epzt36k.py\", line 15, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp2epzt36k.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmp2epzt36k.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '').replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n    paren_string = paren_string.replace(')', '').replace(')', '')\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx26yj61j.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmpx26yj61j.py\", line 40, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpx26yj61j.py\", line 35, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string.startswith('('):\n        paren_string = paren_string[1:]\n    if paren_string.endswith(')'):\n        paren_string = paren_string[:-1]\n    return [int(x) for x in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6q5aavfv.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp6q5aavfv.py\", line 24, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp6q5aavfv.py\", line 19, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp6q5aavfv.py\", line 16, in parse_nested_parens\n    return [int(x) for x in paren_string.split()]\n  File \"/tmp/tmp6q5aavfv.py\", line 16, in <listcomp>\n    return [int(x) for x in paren_string.split()]\nValueError: invalid literal for int() with base 10: '()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(i)\n        elif paren_string[i] == ')':\n            parens.pop()\n    return parens\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp102aq5cd.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp102aq5cd.py\", line 26, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp102aq5cd.py\", line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpveld9bhf.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpveld9bhf.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpveld9bhf.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpveld9bhf.py\", line 11, in parse_nested_parens\n    return [int(x) for x in paren_string.split('()')]\n  File \"/tmp/tmpveld9bhf.py\", line 11, in <listcomp>\n    return [int(x) for x in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz3s7dqbl.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpz3s7dqbl.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpz3s7dqbl.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpz3s7dqbl.py\", line 41, in parse_nested_parens\n    paren\nNameError: name 'paren' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw1nf3ns5.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1nf3ns5.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpw1nf3ns5.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split()]\n  File \"/tmp/tmpw1nf3ns5.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_string = paren_string.split()\n    return [len(paren_string)] + [len(paren_string[0])] + [len(paren_string[1])] + [len(paren_string[2])] + [len(paren_string[3])] + [len(paren_string[4])] + [len(paren_string[5])] + [len(paren_string[6])] + [len(paren_string[7])] + [len(paren_string[8])] + [len(paren_string[9])] + [len(paren_string[10])] + [len(paren_string[11])] + [len(paren_string[12])] + [len(paren_string[13])] + [len(paren_string[14])] + [len(paren_string[15])] + [len(paren_string[16])] + [len(paren_string[17])] + [len(paren_string[18])] + [len(paren_string[19])] + [len(paren_string[20])] + [len(paren_string[21])] + [len(paren_string[22])] + [len(paren_string[23])] + [len(paren_string[24])] + [len(paren_string[25])] + [len(paren_string[26])] + [len(paren_string[27])] + [len(paren_string[28])] + [len(paren_string[29])] + [len(paren_string[30])] + [len(paren_string[31])] + [len(paren_string[32])] + [len(paren_string[33])] + [len(paren_string[34])] + [len(paren_string[35])] + [len(paren_string[36])] + [len(paren_string[37])] + [len(paren_string[38])] + [len(paren_string[39])] + [len(paren_string[40])] + [len(paren_string[41])] + [\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "  File \"/tmp/tmphslbsdgu.py\", line 15\n    ing[37])] + [len(paren_string[38])] + [len(paren_string[39])] + [len(paren_string[40])] + [len(paren_string[41])] + [\n                                                                                                                         ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_string = paren_string.split()\n    if len(paren_string) < 2:\n        return []\n    return [int(i) for i in paren_string]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628657,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0ix3ycn6.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp0ix3ycn6.py\", line 25, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp0ix3ycn6.py\", line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmp0ix3ycn6.py\", line 17, in parse_nested_parens\n    return [int(i) for i in paren_string]\n  File \"/tmp/tmp0ix3ycn6.py\", line 17, in <listcomp>\n    return [int(i) for i in paren_string]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()') if i.isdigit()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpc1m0lp5o.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpc1m0lp5o.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpc1m0lp5o.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split()]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpates3bwz.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpates3bwz.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpates3bwz.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpates3bwz.py\", line 11, in parse_nested_parens\n    return [int(x) for x in paren_string.split()]\n  File \"/tmp/tmpates3bwz.py\", line 11, in <listcomp>\n    return [int(x) for x in paren_string.split()]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split() if i]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph9krcdb_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmph9krcdb_.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9krcdb_.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split() if i]\n  File \"/tmp/tmph9krcdb_.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split() if i]\nValueError: invalid literal for int() with base 10: '(()())'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd4o85yeg.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpd4o85yeg.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd4o85yeg.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpd4o85yeg.py\", line 11, in parse_nested_parens\n    return [int(i) for i in re.findall(r'\\((\\d+)\\)', paren_string)]\nNameError: name 're' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('()')]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpej2nbodn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpej2nbodn.py\", line 19, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpej2nbodn.py\", line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in parse_nested_parens\n    return [int(i) for i in paren_string.split('()')]\n  File \"/tmp/tmpej2nbodn.py\", line 11, in <listcomp>\n    return [int(i) for i in paren_string.split('()')]\nValueError: invalid literal for int() with base 10: '('\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = p\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n",
      "timestamp": 1673628656,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbzogic6i.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbzogic6i.py\", line 48, in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbzogic6i.py\", line 43, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n  File \"/tmp/tmpbzogic6i.py\", line 41, in parse_nested_parens\n    paren_string = p\nNameError: name 'p' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}