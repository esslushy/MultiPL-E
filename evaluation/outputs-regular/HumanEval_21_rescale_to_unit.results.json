{
  "name": "HumanEval_21_rescale_to_unit",
  "language": "py",
  "prompt": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1.0) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsasrz_8i.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpsasrz_8i.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpsasrz_8i.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[-1] - numbers[0]) / (len(numbers) - 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpalsn862v.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpalsn862v.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpalsn862v.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n * 1.0 / len(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxu297it.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpkxu297it.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpkxu297it.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    if len(numbers) == 2:\n        return [numbers[0], numbers[1]]\n    numbers = [numbers[0] + (numbers[1] - numbers[0]) * (numbers[1] - numbers[0]) / (len(numbers) - 1)\n               for i in range(len(numbers) - 1)]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpub5kms7u.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpub5kms7u.py\", line 26, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpub5kms7u.py\", line 19, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo_tjypko.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpo_tjypko.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpo_tjypko.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n            numbers[-1] * (numbers[1] - numbers[-1]) + numbers[-1]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9gdnfqj3.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp9gdnfqj3.py\", line 20, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9gdnfqj3.py\", line 13, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n * 1.0 / len(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxu297it.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpkxu297it.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpkxu297it.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.sqrt(n) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6d8t9i9j.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp6d8t9i9j.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp6d8t9i9j.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in rescale_to_unit\n    return [n / numpy.sqrt(n) for n in numbers]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in <listcomp>\n    return [n / numpy.sqrt(n) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    numbers.sort()\n    return [numbers[0] * (1.0 / n) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq8o_9w73.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpq8o_9w73.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpq8o_9w73.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / (numbers[1] - numbers[0])) + numbers[1] for numbers in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp53edcf1f.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp53edcf1f.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp53edcf1f.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmp53edcf1f.py\", line 12, in rescale_to_unit\n    return [numbers[0] * (1.0 / (numbers[1] - numbers[0])) + numbers[1] for numbers in numbers]\n  File \"/tmp/tmp53edcf1f.py\", line 12, in <listcomp>\n    return [numbers[0] * (1.0 / (numbers[1] - numbers[0])) + numbers[1] for numbers in numbers]\nTypeError: 'float' object is not subscriptable\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    numbers = [numbers[0]] + [numbers[-1]]\n    for i in range(1, len(numbers)):\n        if numbers[i] < numbers[i - 1]:\n            numbers[i] = numbers[i - 1]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps7w4jcks.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmps7w4jcks.py\", line 26, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmps7w4jcks.py\", line 19, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    numbers.sort()\n    return [numbers[0] * (1.0 / len(numbers)) + numbers[-1] * (1.0 / len(numbers))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnqaoe9zr.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpnqaoe9zr.py\", line 23, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpnqaoe9zr.py\", line 16, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[1] - numbers[0]) / (numbers[-1] - numbers[0])]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmwosszly.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpmwosszly.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpmwosszly.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.sqrt(n) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6d8t9i9j.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp6d8t9i9j.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp6d8t9i9j.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in rescale_to_unit\n    return [n / numpy.sqrt(n) for n in numbers]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in <listcomp>\n    return [n / numpy.sqrt(n) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[1] - numbers[0]) / (numbers[-1] - numbers[0])]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmwosszly.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpmwosszly.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpmwosszly.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    numbers = [numbers[0]] + [numbers[1]] + [numbers[-1]]\n    return [numbers[0] / n for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnyg1i2f2.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpnyg1i2f2.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpnyg1i2f2.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[1] - numbers[0]) / (len(numbers) - 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqot99fkv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpqot99fkv.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpqot99fkv.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    numbers = [numbers[0]] + [numbers[-1]]\n    numbers = [numbers[0] * (1.0 / float(i)) for i in range(len(numbers) - 1)]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwrmbzsby.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpwrmbzsby.py\", line 24, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpwrmbzsby.py\", line 17, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpwrmbzsby.py\", line 13, in rescale_to_unit\n    numbers = [numbers[0] * (1.0 / float(i)) for i in range(len(numbers) - 1)]\n  File \"/tmp/tmpwrmbzsby.py\", line 13, in <listcomp>\n    numbers = [numbers[0] * (1.0 / float(i)) for i in range(len(numbers) - 1)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1.0) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsasrz_8i.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpsasrz_8i.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpsasrz_8i.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9s94y3j3.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp9s94y3j3.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9s94y3j3.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n            numbers[-1] * (numbers[1] - numbers[-1]) + numbers[-1]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9gdnfqj3.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp9gdnfqj3.py\", line 20, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9gdnfqj3.py\", line 13, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo_tjypko.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpo_tjypko.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpo_tjypko.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n, n_i in zip(numbers, numbers[:-1])]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg8b6snis.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg8b6snis.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg8b6snis.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[-1] - numbers[0]) / (len(numbers) - 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpalsn862v.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpalsn862v.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpalsn862v.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n - 1.0 for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5gla8xx0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp5gla8xx0.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp5gla8xx0.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [float(x) for x in numbers]\n    if len(numbers) < 2:\n        return numbers\n    numbers = [x / float(n) for x, n in zip(numbers, numbers[1:])]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp19pq2sen.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp19pq2sen.py\", line 23, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp19pq2sen.py\", line 16, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    if len(numbers) == 2:\n        return [numbers[0] + (numbers[1] - numbers[0]) * 0.5]\n    if len(numbers) == 3:\n        return [numbers[0] + (numbers[1] - numbers[0]) * 0.5,\n                numbers[2] + (numbers[1] - numbers[2]) * 0.5]\n    return [numbers[0] + (numbers[1] - numbers[0]) * 0.5,\n            numbers[2] + (numbers[1] - numbers[2]) * 0.5]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6h2f3r6u.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp6h2f3r6u.py\", line 28, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp6h2f3r6u.py\", line 21, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] if n > 1 else 0.0 for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpndzf2pgk.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpndzf2pgk.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpndzf2pgk.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (1.0 - n) + numbers[1] * (1.0 - n) + numbers[2] * (1.0 - n) + numbers[3] * (1.0 - n) + numbers[4] * (1.0 - n) + numbers[5] * (1.0 - n) for n in range(len(numbers))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpviudk_3l.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpviudk_3l.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpviudk_3l.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpviudk_3l.py\", line 9, in rescale_to_unit\n    return [numbers[0] * (1.0 - n) + numbers[1] * (1.0 - n) + numbers[2] * (1.0 - n) + numbers[3] * (1.0 - n) + numbers[4] * (1.0 - n) + numbers[5] * (1.0 - n) for n in range(len(numbers))]\n  File \"/tmp/tmpviudk_3l.py\", line 9, in <listcomp>\n    return [numbers[0] * (1.0 - n) + numbers[1] * (1.0 - n) + numbers[2] * (1.0 - n) + numbers[3] * (1.0 - n) + numbers[4] * (1.0 - n) + numbers[5] * (1.0 - n) for n in range(len(numbers))]\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[-1] - numbers[0]) / (len(numbers) - 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpalsn862v.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpalsn862v.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpalsn862v.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [float(x) for x in numbers]\n    numbers = [x / (numbers[0] + numbers[1]) for x in numbers]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4tq1pe7f.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp4tq1pe7f.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp4tq1pe7f.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n * 1.0 / len(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxu297it.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpkxu297it.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpkxu297it.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n - 0.5 for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv8td2fmn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpv8td2fmn.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpv8td2fmn.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n * 1.0 / len(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxu297it.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpkxu297it.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpkxu297it.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo_tjypko.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpo_tjypko.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpo_tjypko.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [float(x) for x in numbers]\n    if len(numbers) < 2:\n        return numbers\n    numbers = [x / (x + 1.0) for x in numbers]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4epe90w7.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp4epe90w7.py\", line 23, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp4epe90w7.py\", line 16, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / len(numbers)) + numbers[-1] * (1.0 / len(numbers))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm90ewaxu.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpm90ewaxu.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpm90ewaxu.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n < 1]\n    return [n for n in numbers if n == 0]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpanyoqb1p.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpanyoqb1p.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpanyoqb1p.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo_tjypko.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpo_tjypko.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpo_tjypko.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n            numbers[-1] * (numbers[1] - numbers[-1]) + numbers[-1]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9gdnfqj3.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp9gdnfqj3.py\", line 20, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9gdnfqj3.py\", line 13, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / (numbers[1] - numbers[0])) + numbers[1] for numbers in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp53edcf1f.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp53edcf1f.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp53edcf1f.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmp53edcf1f.py\", line 12, in rescale_to_unit\n    return [numbers[0] * (1.0 / (numbers[1] - numbers[0])) + numbers[1] for numbers in numbers]\n  File \"/tmp/tmp53edcf1f.py\", line 12, in <listcomp>\n    return [numbers[0] * (1.0 / (numbers[1] - numbers[0])) + numbers[1] for numbers in numbers]\nTypeError: 'float' object is not subscriptable\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / float(len(numbers))) + numbers[-1] * (1.0 / float(len(numbers))) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo38nb257.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpo38nb257.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpo38nb257.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1.0) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsasrz_8i.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpsasrz_8i.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpsasrz_8i.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[1] - numbers[0]) / (numbers[-1] - numbers[0])]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmwosszly.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpmwosszly.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpmwosszly.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / float(numbers[0]) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyfx1slvj.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpyfx1slvj.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpyfx1slvj.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[1] - numbers[0]) / (len(numbers) - 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqot99fkv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpqot99fkv.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpqot99fkv.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[-1] - numbers[0]) / (len(numbers) - 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpalsn862v.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpalsn862v.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpalsn862v.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n - 1.0 for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5gla8xx0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp5gla8xx0.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp5gla8xx0.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp13dprbho.py\", line 52, in <module>\n    test_check()\n  File \"/tmp/tmp13dprbho.py\", line 50, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp13dprbho.py\", line 43, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n < 1]\n    return [n for n in numbers if n > 0]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1v3o5j4e.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp1v3o5j4e.py\", line 23, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp1v3o5j4e.py\", line 16, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n * 1.0 / len(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxu297it.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpkxu297it.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpkxu297it.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    if len(numbers) == 2:\n        return [numbers[0], numbers[1]]\n    if len(numbers) == 3:\n        return [numbers[0], numbers[1], numbers[2]]\n    if len(numbers) == 4:\n        return [numbers[0], numbers[1], numbers[2], numbers[3]]\n    if len(numbers) == 5:\n        return [numbers[0], numbers[1], numbers[2], numbers[3], numbers[4]]\n    return [numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmtmtsdlh.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpmtmtsdlh.py\", line 30, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpmtmtsdlh.py\", line 23, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    if len(numbers) == 2:\n        return [numbers[0], numbers[1]]\n    else:\n        return [numbers[0] / (numbers[0] + numbers[1]), numbers[1]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpezbaj3j5.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpezbaj3j5.py\", line 24, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpezbaj3j5.py\", line 17, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n            numbers[-1] * (numbers[1] - numbers[-1]) + numbers[-1]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9gdnfqj3.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp9gdnfqj3.py\", line 20, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9gdnfqj3.py\", line 13, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n * 1.0 / len(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxu297it.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpkxu297it.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpkxu297it.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / float(len(numbers))) + numbers[1] * (1.0 / float(len(numbers))) for _ in range(2)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr3ckvpfk.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpr3ckvpfk.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpr3ckvpfk.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n            numbers[-1] * (numbers[1] - numbers[-1]) + numbers[-1]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9gdnfqj3.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp9gdnfqj3.py\", line 20, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9gdnfqj3.py\", line 13, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0], numbers[-1] * (numbers[-1] - numbers[-2]) + numbers[-2]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqaw7zljq.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpqaw7zljq.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpqaw7zljq.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    return [numbers[0] * (1.0 / float(len(numbers))) + numbers[-1] * (1.0 / float(len(numbers)))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6fhk2i11.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp6fhk2i11.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp6fhk2i11.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp13dprbho.py\", line 52, in <module>\n    test_check()\n  File \"/tmp/tmp13dprbho.py\", line 50, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp13dprbho.py\", line 43, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo_tjypko.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpo_tjypko.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpo_tjypko.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[-1] - numbers[0]) / (numbers[-1] - numbers[0]) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkaagcv0h.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpkaagcv0h.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpkaagcv0h.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    numbers = [n for n in numbers if n > 0]\n    return [n for n in numbers if n < 1]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdmzur46g.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpdmzur46g.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpdmzur46g.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[-1] - numbers[0]) / (len(numbers) - 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppz0_3vhm.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmppz0_3vhm.py\", line 23, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmppz0_3vhm.py\", line 16, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / float(len(numbers))) + numbers[-1] * (1.0 / float(len(numbers)))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqv_9cz5v.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpqv_9cz5v.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpqv_9cz5v.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n * 1.0 / n for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpodn7vg7k.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpodn7vg7k.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpodn7vg7k.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.sqrt(n) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6d8t9i9j.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp6d8t9i9j.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp6d8t9i9j.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in rescale_to_unit\n    return [n / numpy.sqrt(n) for n in numbers]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in <listcomp>\n    return [n / numpy.sqrt(n) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    if len(numbers) == 2:\n        return [numbers[0] * 1.0, numbers[1] * 1.0]\n    if len(numbers) == 3:\n        return [numbers[0] * 1.0, numbers[1] * 1.0, numbers[2] * 1.0]\n    if len(numbers) == 4:\n        return [numbers[0] * 1.0, numbers[1] * 1.0, numbers[2] * 1.0, numbers[3] * 1.0]\n    if len(numbers) == 5:\n        return [numbers[0] * 1.0, numbers[1] * 1.0, numbers[2] * 1.0, numbers[3] * 1.0, numbers[4] * 1.0]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbprigxzb.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmpbprigxzb.py\", line 30, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpbprigxzb.py\", line 23, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.sqrt(n) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6d8t9i9j.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp6d8t9i9j.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp6d8t9i9j.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in rescale_to_unit\n    return [n / numpy.sqrt(n) for n in numbers]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in <listcomp>\n    return [n / numpy.sqrt(n) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    numbers.sort()\n    numbers.reverse()\n    return [numbers[0] * (1.0 / (numbers[-1] - numbers[0])) + numbers[-1] for _ in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppopf44mo.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmppopf44mo.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmppopf44mo.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[-1] - numbers[0]) / (len(numbers) - 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpalsn862v.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpalsn862v.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpalsn862v.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [float(x) for x in numbers]\n    if len(numbers) < 2:\n        return numbers\n    numbers = [x / float(n) for x, n in zip(numbers, numbers[1:])]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp19pq2sen.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp19pq2sen.py\", line 23, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp19pq2sen.py\", line 16, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n/numbers[0] for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpclllprlu.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpclllprlu.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpclllprlu.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / float(n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9lr8ukhp.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp9lr8ukhp.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9lr8ukhp.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9s94y3j3.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp9s94y3j3.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9s94y3j3.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n - 0.5 for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv8td2fmn.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpv8td2fmn.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpv8td2fmn.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / float(numbers[0]) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyfx1slvj.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpyfx1slvj.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpyfx1slvj.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo_tjypko.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpo_tjypko.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpo_tjypko.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.sqrt(n) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6d8t9i9j.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp6d8t9i9j.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp6d8t9i9j.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in rescale_to_unit\n    return [n / numpy.sqrt(n) for n in numbers]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in <listcomp>\n    return [n / numpy.sqrt(n) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n - 1.0 for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5gla8xx0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp5gla8xx0.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp5gla8xx0.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[1] - numbers[0]) / (numbers[-1] - numbers[0])]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmwosszly.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpmwosszly.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpmwosszly.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n/numbers[0] for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpclllprlu.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpclllprlu.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpclllprlu.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    numbers = [n for n in numbers if n > 0]\n    return [n / float(len(numbers)) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2nenh85p.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp2nenh85p.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp2nenh85p.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0], numbers[-1] * (numbers[1] - numbers[-1]) + numbers[-1]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg565tj01.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg565tj01.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg565tj01.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n/numbers[0] for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpclllprlu.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpclllprlu.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpclllprlu.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0], numbers[-1] * (numbers[1] - numbers[-1]) + numbers[-1]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg565tj01.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg565tj01.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg565tj01.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / float(numbers[0]) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyfx1slvj.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpyfx1slvj.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpyfx1slvj.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n, n_i in zip(numbers, numbers[::-1])]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4vtpvpyp.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp4vtpvpyp.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp4vtpvpyp.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [float(x) for x in numbers]\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [x / float(len(numbers)) for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8cmko46d.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmp8cmko46d.py\", line 23, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp8cmko46d.py\", line 16, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo_tjypko.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpo_tjypko.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpo_tjypko.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n/numbers[0] for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpclllprlu.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpclllprlu.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpclllprlu.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0] for _ in range(len(numbers))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5lju3bhg.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp5lju3bhg.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp5lju3bhg.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / float(len(numbers))) + numbers[-1] * (1.0 / float(len(numbers)))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqv_9cz5v.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpqv_9cz5v.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpqv_9cz5v.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / (numbers[1] - numbers[0])) + numbers[-1] * (1.0 / (numbers[-1] - numbers[-2]))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0tt7up7k.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp0tt7up7k.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp0tt7up7k.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[1] - numbers[0]) / (len(numbers) - 1) for _ in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpct0ocbdv.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpct0ocbdv.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpct0ocbdv.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n            numbers[1] * (numbers[2] - numbers[1]) + numbers[1],\n            numbers[2] * (numbers[3] - numbers[2]) + numbers[2],\n            numbers[3] * (numbers[4] - numbers[3]) + numbers[3],\n            numbers[4] * (numbers[5] - numbers[4]) + numbers[4],\n            numbers[5] * (numbers[6] - numbers[5]) + numbers[5],\n            numbers[6] * (numbers[7] - numbers[6]) + numbers[6],\n            numbers[7] * (numbers[8] - numbers[7]) + numbers[7],\n            numbers[8] * (numbers[9] - numbers[8]) + numbers[8],\n            numbers[9] * (numbers[10] - numbers[9]) + numbers[9],\n            numbers[10] * (numbers[11] - numbers[10]) + numbers[10],\n            numbers[11] * (numbers[12] - numbers[11]) + numbers[11],\n            numbers[12] * (numbers[13] - numbers[12]) + numbers[12],\n            numbers[13] * (numbers[14] - numbers[13]) + numbers[13],\n            numbers[14] * (numbers[15] - numbers[14]) + numbers[14],\n            numbers[15] * (numbers[16] - numbers[15]) + numbers[15],\n            numbers[16] * (numbers[17] - numbers[16]) + numbers[16],\n            numbers[17] * (numbers[18] - numbers[17]) + numbers[17],\n            numbers[18] * (numbers[19] - numbers[18]) + numbers[18],\n            numbers[19] * (numbers[20] - numbers[19]) + numbers[19],\n            numbers[20] * (numbers[21] - numbers[20]) + numbers[20],\n            numbers[21]\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpndvo4ioo.py\", line 9\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    numbers = [numbers[0]] + [numbers[-1]]\n    for i in range(1, len(numbers)):\n        numbers[i] = numbers[i] / numbers[i - 1]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphbz_mpi2.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmphbz_mpi2.py\", line 25, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmphbz_mpi2.py\", line 18, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    if len(numbers) == 2:\n        return [numbers[0] + 0.5 * (numbers[1] - numbers[0])]\n    if len(numbers) == 3:\n        return [numbers[0] + 0.5 * (numbers[1] - numbers[0])] + [numbers[2] + 0.5 * (numbers[1] - numbers[2])]\n    return [numbers[0] + 0.5 * (numbers[1] - numbers[0])] + [numbers[2] + 0.5 * (numbers[1] - numbers[2])] + [numbers[3] + 0.5 * (numbers[1] - numbers[3])]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph5jt01ri.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmph5jt01ri.py\", line 26, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmph5jt01ri.py\", line 19, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [float(x) for x in numbers]\n    numbers = [x if x > 0 else 1.0 for x in numbers]\n    return [x if x < 1.0 else 1.0 for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppk9_17er.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmppk9_17er.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmppk9_17er.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9s94y3j3.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp9s94y3j3.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9s94y3j3.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / float(len(numbers))) + numbers[-1] * (1.0 / float(len(numbers)))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpaoex5p9r.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpaoex5p9r.py\", line 23, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpaoex5p9r.py\", line 16, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n < 1]\n    return [n for n in numbers if n > 0]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpuxh8m_wr.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpuxh8m_wr.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpuxh8m_wr.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9s94y3j3.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp9s94y3j3.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9s94y3j3.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[-1] - numbers[0]) / (len(numbers) - 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpalsn862v.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpalsn862v.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpalsn862v.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    if len(numbers) == 2:\n        return [numbers[0], numbers[1]]\n    else:\n        return [numbers[0] / numbers[-1], numbers[-1] / numbers[-2]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp15ry1k10.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp15ry1k10.py\", line 24, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp15ry1k10.py\", line 17, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    if len(numbers) == 2:\n        return [numbers[0] * 1.0, numbers[1] * 1.0]\n    else:\n        return [numbers[0] * 1.0, numbers[-1] * 1.0]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoxy1mk17.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpoxy1mk17.py\", line 25, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpoxy1mk17.py\", line 18, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n/numbers[0] for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpclllprlu.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpclllprlu.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpclllprlu.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] if len(numbers) == 1 else numbers[-1] for numbers in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0zs9jkxh.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp0zs9jkxh.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp0zs9jkxh.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmp0zs9jkxh.py\", line 9, in rescale_to_unit\n    return [numbers[0] if len(numbers) == 1 else numbers[-1] for numbers in numbers]\n  File \"/tmp/tmp0zs9jkxh.py\", line 9, in <listcomp>\n    return [numbers[0] if len(numbers) == 1 else numbers[-1] for numbers in numbers]\nTypeError: object of type 'float' has no len()\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.sqrt(n) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6d8t9i9j.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp6d8t9i9j.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp6d8t9i9j.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in rescale_to_unit\n    return [n / numpy.sqrt(n) for n in numbers]\n  File \"/tmp/tmp6d8t9i9j.py\", line 9, in <listcomp>\n    return [n / numpy.sqrt(n) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    numbers = [numbers[0]] + [numbers[-1]]\n    for i in range(1, len(numbers)):\n        numbers[i] = numbers[i] / numbers[i - 1]\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphbz_mpi2.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmphbz_mpi2.py\", line 25, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmphbz_mpi2.py\", line 18, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n - n % n for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjdbhamp1.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjdbhamp1.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpjdbhamp1.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    numbers.sort()\n    return [numbers[0] * (1.0 / n) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq8o_9w73.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpq8o_9w73.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpq8o_9w73.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n            numbers[-1] * (numbers[1] - numbers[-1]) + numbers[-1]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9gdnfqj3.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp9gdnfqj3.py\", line 20, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9gdnfqj3.py\", line 13, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    numbers = [numbers[0]] + [numbers[1]]\n    for i in range(2, len(numbers)):\n        numbers[i] = numbers[i - 1] * (1.0 / (i - 1))\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5m1wofrc.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp5m1wofrc.py\", line 24, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp5m1wofrc.py\", line 17, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n            numbers[1] * (numbers[2] - numbers[1]) + numbers[1],\n            numbers[2] * (numbers[3] - numbers[2]) + numbers[2],\n            numbers[3] * (numbers[4] - numbers[3]) + numbers[3],\n            numbers[4] * (numbers[5] - numbers[4]) + numbers[4],\n            numbers[5] * (numbers[6] - numbers[5]) + numbers[5],\n            numbers[6] * (numbers[7] - numbers[6]) + numbers[6],\n            numbers[7] * (numbers[8] - numbers[7]) + numbers[7],\n            numbers[8] * (numbers[9] - numbers[8]) + numbers[8],\n            numbers[9] * (numbers[10] - numbers[9]) + numbers[9],\n            numbers[10] * (numbers[11] - numbers[10]) + numbers[10],\n            numbers[11] * (numbers[12] - numbers[11]) + numbers[11],\n            numbers[12] * (numbers[13] - numbers[12]) + numbers[12],\n            numbers[13] * (numbers[14] - numbers[13]) + numbers[13],\n            numbers[14] * (numbers[15] - numbers[14]) + numbers[14],\n            numbers[15] * (numbers[16] - numbers[15]) + numbers[15],\n            numbers[16] * (numbers[17] - numbers[16]) + numbers[16],\n            numbers[17] * (numbers[18] - numbers[17]) + numbers[17],\n            numbers[18] * (numbers[19] - numbers[18]) + numbers[18],\n            numbers[19] * (numbers[20] - numbers[19]) + numbers[19],\n            numbers[20] * (numbers[21] - numbers[20]) + numbers[20],\n            numbers[21]\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpndvo4ioo.py\", line 9\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    if len(numbers) == 2:\n        return [numbers[0] * 1.0, numbers[1] * 1.0]\n    else:\n        return [numbers[0] * 1.0, numbers[-1] * 1.0]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoxy1mk17.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpoxy1mk17.py\", line 25, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpoxy1mk17.py\", line 18, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [float(x) for x in numbers]\n    return [x / max(numbers) for x in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3osdwn6a.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3osdwn6a.py\", line 20, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp3osdwn6a.py\", line 13, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] / (numbers[-1] - numbers[0]) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe_33zfia.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpe_33zfia.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpe_33zfia.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    numbers = [numbers[0]] + [numbers[-1]]\n    for i in range(1, len(numbers)):\n        if numbers[i] < numbers[i - 1]:\n            numbers[i] = numbers[i - 1]\n        else:\n            numbers[i] = numbers[i - 1] + 1\n    return numbers\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp21ko0dza.py\", line 30, in <module>\n    test_check()\n  File \"/tmp/tmp21ko0dza.py\", line 28, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp21ko0dza.py\", line 21, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n/numbers[0] for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpclllprlu.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpclllprlu.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpclllprlu.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / float(n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9lr8ukhp.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp9lr8ukhp.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp9lr8ukhp.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n    numbers = [n for n in numbers if n > 0]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp13dprbho.py\", line 52, in <module>\n    test_check()\n  File \"/tmp/tmp13dprbho.py\", line 50, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp13dprbho.py\", line 43, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / (numbers[1] - numbers[0])) + numbers[-1] * (1.0 / (numbers[-1] - numbers[-2])) for _ in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5wefbctv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmp5wefbctv.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp5wefbctv.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n - n % 1.0 for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7jk576x8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp7jk576x8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp7jk576x8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n * 1.0 / (n - 1.0) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1lu3b5l_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp1lu3b5l_.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp1lu3b5l_.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n * 1.0 / len(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkxu297it.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpkxu297it.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpkxu297it.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / numpy.max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg4o_gs3a.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpg4o_gs3a.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg4o_gs3a.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in rescale_to_unit\n    return [n / numpy.max(numbers) for n in numbers]\n  File \"/tmp/tmpg4o_gs3a.py\", line 9, in <listcomp>\n    return [n / numpy.max(numbers) for n in numbers]\nNameError: name 'numpy' is not defined\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n_i for n_i, n in enumerate(numbers)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9m8wdf8.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpk9m8wdf8.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpk9m8wdf8.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in rescale_to_unit\n    return [n / n_i for n_i, n in enumerate(numbers)]\n  File \"/tmp/tmpk9m8wdf8.py\", line 9, in <listcomp>\n    return [n / n_i for n_i, n in enumerate(numbers)]\nZeroDivisionError: float division by zero\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    numbers.sort()\n    numbers.reverse()\n    return [numbers[i] * (i + 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmr7rnkaf.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpmr7rnkaf.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpmr7rnkaf.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] + (numbers[-1] - numbers[0]) * (numbers[1] - numbers[0]) / (len(numbers) - 1) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqot99fkv.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpqot99fkv.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpqot99fkv.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n - 1.0 for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5gla8xx0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmp5gla8xx0.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp5gla8xx0.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (numbers[-1] - numbers[0]) + numbers[-1] * (numbers[-2] - numbers[-1])]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpknffm94l.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpknffm94l.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpknffm94l.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    numbers.sort()\n    return [numbers[0] * (1.0 / n) for n in numbers[1:]]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpg74no6jr.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmpg74no6jr.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpg74no6jr.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / float(len(numbers))) + numbers[-1] * (1.0 / float(len(numbers))) for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo38nb257.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpo38nb257.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpo38nb257.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1.0) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsasrz_8i.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpsasrz_8i.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpsasrz_8i.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / max(numbers) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpo_tjypko.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpo_tjypko.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpo_tjypko.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / float(numbers[0]) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyfx1slvj.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpyfx1slvj.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpyfx1slvj.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / n.max() for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpi8c3vjvf.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpi8c3vjvf.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpi8c3vjvf.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n  File \"/tmp/tmpi8c3vjvf.py\", line 9, in rescale_to_unit\n    return [n / n.max() for n in numbers]\n  File \"/tmp/tmpi8c3vjvf.py\", line 9, in <listcomp>\n    return [n / n.max() for n in numbers]\nAttributeError: 'float' object has no attribute 'max'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    if len(numbers) < 2:\n        return numbers\n    if len(numbers) == 2:\n        return [numbers[0] * 1.0 / (numbers[1] - numbers[0])]\n    else:\n        return [numbers[0] * 1.0 / (numbers[1] - numbers[0])] + [numbers[-1] * 1.0 / (numbers[-2] - numbers[-1])]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpugy0te05.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpugy0te05.py\", line 25, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpugy0te05.py\", line 18, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n            numbers[1] * (numbers[2] - numbers[1]) + numbers[1],\n            numbers[2] * (numbers[3] - numbers[2]) + numbers[2],\n            numbers[3] * (numbers[4] - numbers[3]) + numbers[3],\n            numbers[4] * (numbers[5] - numbers[4]) + numbers[4],\n            numbers[5] * (numbers[6] - numbers[5]) + numbers[5],\n            numbers[6] * (numbers[7] - numbers[6]) + numbers[6],\n            numbers[7] * (numbers[8] - numbers[7]) + numbers[7],\n            numbers[8] * (numbers[9] - numbers[8]) + numbers[8],\n            numbers[9] * (numbers[10] - numbers[9]) + numbers[9],\n            numbers[10] * (numbers[11] - numbers[10]) + numbers[10],\n            numbers[11] * (numbers[12] - numbers[11]) + numbers[11],\n            numbers[12] * (numbers[13] - numbers[12]) + numbers[12],\n            numbers[13] * (numbers[14] - numbers[13]) + numbers[13],\n            numbers[14] * (numbers[15] - numbers[14]) + numbers[14],\n            numbers[15] * (numbers[16] - numbers[15]) + numbers[15],\n            numbers[16] * (numbers[17] - numbers[16]) + numbers[16],\n            numbers[17] * (numbers[18] - numbers[17]) + numbers[17],\n            numbers[18] * (numbers[19] - numbers[18]) + numbers[18],\n            numbers[19] * (numbers[20] - numbers[19]) + numbers[19],\n            numbers[20] * (numbers[21] - numbers[20]) + numbers[20],\n            numbers[21]\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "  File \"/tmp/tmpndvo4ioo.py\", line 9\n    return [numbers[0] * (numbers[1] - numbers[0]) + numbers[0],\n           ^\nSyntaxError: '[' was never closed\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    numbers = list(numbers)\n    numbers.sort()\n    return [numbers[i] for i in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph7y3shg2.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmph7y3shg2.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmph7y3shg2.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    return [numbers[0] * (numbers[-1] - numbers[0]) + numbers[-1] for _ in range(len(numbers) - 1)]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_1plk93p.py\", line 23, in <module>\n    test_check()\n  File \"/tmp/tmp_1plk93p.py\", line 21, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmp_1plk93p.py\", line 14, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / (n - 1) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw4fvu41.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmptw4fvu41.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmptw4fvu41.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / float(numbers[i])) for i in range(1, len(numbers))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppwhczx6r.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmppwhczx6r.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmppwhczx6r.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0] * (1.0 / float(numbers[1])) + numbers[-1] * (1.0 / float(numbers[-1]))]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628609,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpox09w8y9.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpox09w8y9.py\", line 22, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpox09w8y9.py\", line 15, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [n / float(numbers[0]) for n in numbers]\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\ntest_check()\n",
      "timestamp": 1673628608,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyfx1slvj.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpyfx1slvj.py\", line 19, in test_check\n    check(rescale_to_unit)\n  File \"/tmp/tmpyfx1slvj.py\", line 12, in check\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}