{
  "name": "HumanEval_47_median",
  "language": "py",
  "prompt": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcjlc8uil.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpcjlc8uil.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpcjlc8uil.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[(len(l) - 1) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8892fus_.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp8892fus_.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmp8892fus_.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqaj4vzj_.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpqaj4vzj_.py\", line 23, in test_check\n    check(median)\n  File \"/tmp/tmpqaj4vzj_.py\", line 16, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[-1]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsuf0gv6v.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpsuf0gv6v.py\", line 25, in test_check\n    check(median)\n  File \"/tmp/tmpsuf0gv6v.py\", line 18, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptga0jthe.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmptga0jthe.py\", line 25, in test_check\n    check(median)\n  File \"/tmp/tmptga0jthe.py\", line 18, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmptga0jthe.py\", line 15, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[-1]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgl_6fvbt.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpgl_6fvbt.py\", line 25, in test_check\n    check(median)\n  File \"/tmp/tmpgl_6fvbt.py\", line 18, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcjlc8uil.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpcjlc8uil.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpcjlc8uil.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    return l[0] + (l[1] / 2.0 - l[0] / 2.0) / 2.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7zqhkne7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp7zqhkne7.py\", line 26, in test_check\n    check(median)\n  File \"/tmp/tmp7zqhkne7.py\", line 19, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3oe6ph9m.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp3oe6ph9m.py\", line 25, in test_check\n    check(median)\n  File \"/tmp/tmp3oe6ph9m.py\", line 18, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    else:\n        return l[-1]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwgh_gd4s.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpwgh_gd4s.py\", line 23, in test_check\n    check(median)\n  File \"/tmp/tmpwgh_gd4s.py\", line 16, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    return l[-1] if l[-1] > l[-2] else l[-2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmprh52g3zs.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmprh52g3zs.py\", line 22, in test_check\n    check(median)\n  File \"/tmp/tmprh52g3zs.py\", line 15, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3oe6ph9m.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmp3oe6ph9m.py\", line 25, in test_check\n    check(median)\n  File \"/tmp/tmp3oe6ph9m.py\", line 18, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return min(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpktz1gxft.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpktz1gxft.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpktz1gxft.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf1di86ds.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpf1di86ds.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpf1di86ds.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    if len(l) == 3:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0\n    if len(l) == 4:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0\n    if len(l) == 5:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0\n    return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0 + l[5] / 2.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfc0x2mv_.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfc0x2mv_.py\", line 32, in test_check\n    check(median)\n  File \"/tmp/tmpfc0x2mv_.py\", line 25, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[0] if l[0] > l[1] else l[1]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyjh6veqz.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpyjh6veqz.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpyjh6veqz.py\", line 18, in check\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] / 2 + l[2] / 2\n    if len(l) == 4:\n        return l[0] + l[1] / 2 + l[2] / 2 + l[3] / 2\n    if len(l) == 5:\n        return l[0] + l[1] / 2 + l[2] / 2 + l[3] / 2 + l[4] / 2\n    return l[0] + l[1] / 2 + l[2] / 2 + l[3] / 2 + l[4] / 2 + l[5] / 2\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmivhfnfp.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpmivhfnfp.py\", line 32, in test_check\n    check(median)\n  File \"/tmp/tmpmivhfnfp.py\", line 25, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1]\n    if len(l) == 3:\n        return l[0] + l[1] + l[2]\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3]\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4]\n    return l[0] + l[1] + l[2] + l[3] + l[4] + l[5]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpceezl_s5.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpceezl_s5.py\", line 32, in test_check\n    check(median)\n  File \"/tmp/tmpceezl_s5.py\", line 25, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[-1]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsuf0gv6v.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpsuf0gv6v.py\", line 25, in test_check\n    check(median)\n  File \"/tmp/tmpsuf0gv6v.py\", line 18, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] / 2 + l[2] / 2\n    if len(l) == 4:\n        return l[0] + l[1] / 2 + l[2] / 2 + l[3] / 2\n    return l[0] + l[1] / 2 + l[2] / 2 + l[3] / 2 + l[4] / 2\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp911kag42.py\", line 32, in <module>\n    test_check()\n  File \"/tmp/tmp911kag42.py\", line 30, in test_check\n    check(median)\n  File \"/tmp/tmp911kag42.py\", line 23, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return min(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpktz1gxft.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpktz1gxft.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpktz1gxft.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    return l[0] + (l[1] / 2.0) - (l[0] / 2.0)\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjznlhpdg.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpjznlhpdg.py\", line 26, in test_check\n    check(median)\n  File \"/tmp/tmpjznlhpdg.py\", line 19, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf1di86ds.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpf1di86ds.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpf1di86ds.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf1di86ds.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpf1di86ds.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpf1di86ds.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[(len(l) - 1) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8892fus_.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmp8892fus_.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmp8892fus_.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcjlc8uil.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpcjlc8uil.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpcjlc8uil.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[-1]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgl_6fvbt.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpgl_6fvbt.py\", line 25, in test_check\n    check(median)\n  File \"/tmp/tmpgl_6fvbt.py\", line 18, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpnjmj7bg_.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpnjmj7bg_.py\", line 25, in test_check\n    check(median)\n  File \"/tmp/tmpnjmj7bg_.py\", line 18, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return min(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6gq12fij.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6gq12fij.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6gq12fij.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    return l[-1]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxtes9r5s.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpxtes9r5s.py\", line 22, in test_check\n    check(median)\n  File \"/tmp/tmpxtes9r5s.py\", line 15, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[-1] + (l[-2] - l[-1]) / 2.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe7vmyws9.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpe7vmyws9.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpe7vmyws9.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    return l[0] + (l[1] / 2.0 - l[0] / 2.0) / 2.0\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp5o7_hg5m.py\", line 29, in <module>\n    test_check()\n  File \"/tmp/tmp5o7_hg5m.py\", line 27, in test_check\n    check(median)\n  File \"/tmp/tmp5o7_hg5m.py\", line 20, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    return l[-1] if len(l) > 1 else l[0]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbon06id8.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpbon06id8.py\", line 22, in test_check\n    check(median)\n  File \"/tmp/tmpbon06id8.py\", line 15, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return min(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6gq12fij.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6gq12fij.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6gq12fij.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    if len(l) == 3:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0\n    if len(l) == 4:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0\n    if len(l) == 5:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0\n    return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0 + l[5] / 2.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfc0x2mv_.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfc0x2mv_.py\", line 32, in test_check\n    check(median)\n  File \"/tmp/tmpfc0x2mv_.py\", line 25, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    else:\n        return l[-1]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpwgh_gd4s.py\", line 25, in <module>\n    test_check()\n  File \"/tmp/tmpwgh_gd4s.py\", line 23, in test_check\n    check(median)\n  File \"/tmp/tmpwgh_gd4s.py\", line 16, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4xtacgl.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4xtacgl.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpm4xtacgl.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return min(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpktz1gxft.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpktz1gxft.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpktz1gxft.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        return 0.0\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsj9_aoas.py\", line 24, in <module>\n    test_check()\n  File \"/tmp/tmpsj9_aoas.py\", line 22, in test_check\n    check(median)\n  File \"/tmp/tmpsj9_aoas.py\", line 15, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return min(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmvjb9ywf.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpmvjb9ywf.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpmvjb9ywf.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nmelcme.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6nmelcme.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6nmelcme.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpf1di86ds.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpf1di86ds.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpf1di86ds.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[len(l)/2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpypbmu7fm.py\", line 27, in <module>\n    test_check()\n  File \"/tmp/tmpypbmu7fm.py\", line 25, in test_check\n    check(median)\n  File \"/tmp/tmpypbmu7fm.py\", line 18, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpypbmu7fm.py\", line 15, in median\n    return l[len(l)/2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcjlc8uil.py\", line 26, in <module>\n    test_check()\n  File \"/tmp/tmpcjlc8uil.py\", line 24, in test_check\n    check(median)\n  File \"/tmp/tmpcjlc8uil.py\", line 17, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1]\n    if len(l) == 3:\n        return l[0] + l[1] + l[2]\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3]\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4]\n    return l[0] + l[1] + l[2] + l[3] + l[4] + l[5]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6b41e8c0.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp6b41e8c0.py\", line 32, in test_check\n    check(median)\n  File \"/tmp/tmp6b41e8c0.py\", line 25, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    if len(l) == 3:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0\n    if len(l) == 4:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0\n    if len(l) == 5:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0\n    return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0 + l[5] / 2.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfc0x2mv_.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpfc0x2mv_.py\", line 32, in test_check\n    check(median)\n  File \"/tmp/tmpfc0x2mv_.py\", line 25, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return l[len(l) / 2]\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpatds0fa1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpatds0fa1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpatds0fa1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\n  File \"/tmp/tmpatds0fa1.py\", line 10, in median\n    return l[len(l) / 2]\nTypeError: list indices must be integers or slices, not float\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpsshb_9_1.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpsshb_9_1.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpsshb_9_1.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm7u8qz35.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpm7u8qz35.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpm7u8qz35.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return min(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6gq12fij.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6gq12fij.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6gq12fij.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return min(l) if l else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6gq12fij.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp6gq12fij.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmp6gq12fij.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return max(l) if len(l) > 0 else 0.0\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n",
      "timestamp": 1673628633,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqa3cqhda.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpqa3cqhda.py\", line 20, in test_check\n    check(median)\n  File \"/tmp/tmpqa3cqhda.py\", line 13, in check\n    assert candidate([3, 1, 2, 4, 5]) == 3\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}