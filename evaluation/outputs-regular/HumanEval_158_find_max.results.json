{
  "name": "HumanEval_158_find_max",
  "language": "py",
  "prompt": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if len(words) == 0:\n        return ''\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words[0] + words[1]\n    if len(words) == 3:\n        return words[0] + words[1] + words[2]\n    if len(words) == 4:\n        return words[0] + words[1] + words[2] + words[3]\n    if len(words) == 5:\n        return words[0] + words[1] + words[2] + words[3] + words[4]\n    if len(words) == 6:\n        return words[0] + words[1] + words[2] + words[3] + words[4] + words[5]\n    if len(words) == 7:\n        return words[0] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6]\n    if len(words) == 8:\n        return words[0] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7]\n    if len(words) == 9:\n        return words[0] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7] + words[8]\n    if len(words) == 10:\n        return words[0] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7] + words[8] + words[9]\n    if len(words) == 11:\n        return words[0] + words[1] + words[2] + words[3] + words[4] + words[5] + words[6] + words[7] + words[8] + words[9] + words[10]\n    if len(words) == 12:\n        return words[0] + words[1] + words[2] + words[3] + words[4]\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpmojcn279.py\", line 57, in <module>\n    test_check()\n  File \"/tmp/tmpmojcn279.py\", line 55, in test_check\n    check(find_max)\n  File \"/tmp/tmpmojcn279.py\", line 43, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if not words:\n        return ''\n    max_len = max(len(word) for word in words)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp085yunz9.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp085yunz9.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmp085yunz9.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_count = 0\n    for word in words:\n        if word in words:\n            max_count += 1\n    return words[max_count]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6k7h6jrh.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp6k7h6jrh.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp6k7h6jrh.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File \"/tmp/tmp6k7h6jrh.py\", line 20, in find_max\n    return words[max_count]\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if not words:\n        return ''\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr81y84e1.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpr81y84e1.py\", line 36, in test_check\n    check(find_max)\n  File \"/tmp/tmpr81y84e1.py\", line 24, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_count = 0\n    for word in words:\n        max_count = max(max_count, len(word))\n    return words[max_count]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6h9a_1lk.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp6h9a_1lk.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmp6h9a_1lk.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File \"/tmp/tmp6h9a_1lk.py\", line 19, in find_max\n    return words[max_count]\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if len(words) == 0:\n        return ''\n    if len(words) == 1:\n        return words[0]\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcmih4m42.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcmih4m42.py\", line 38, in test_check\n    check(find_max)\n  File \"/tmp/tmpcmih4m42.py\", line 26, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if not words:\n        return ''\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx4wziagp.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpx4wziagp.py\", line 37, in test_check\n    check(find_max)\n  File \"/tmp/tmpx4wziagp.py\", line 25, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_count = 0\n    for word in words:\n        max_count = max(max_count, len(word))\n    return words[max_count]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6h9a_1lk.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp6h9a_1lk.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmp6h9a_1lk.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File \"/tmp/tmp6h9a_1lk.py\", line 19, in find_max\n    return words[max_count]\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if len(words) == 0:\n        return ''\n    if len(words) == 1:\n        return words[0]\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqnnc87yu.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpqnnc87yu.py\", line 39, in test_check\n    check(find_max)\n  File \"/tmp/tmpqnnc87yu.py\", line 27, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if len(words) == 0:\n        return ''\n    if len(words) == 1:\n        return words[0]\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcmih4m42.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpcmih4m42.py\", line 38, in test_check\n    check(find_max)\n  File \"/tmp/tmpcmih4m42.py\", line 26, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_count = 0\n    for word in words:\n        if len(word) > max_count:\n            max_count = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkip5v93i.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpkip5v93i.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmpkip5v93i.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if not words:\n        return ''\n    max_len = 0\n    max_char = ''\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_char = word\n    return max_char\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpet288qo7.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpet288qo7.py\", line 39, in test_check\n    check(find_max)\n  File \"/tmp/tmpet288qo7.py\", line 28, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_count = 0\n    for word in words:\n        if len(word) > max_count:\n            max_count = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpkip5v93i.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmpkip5v93i.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmpkip5v93i.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if len(words) == 0:\n        return ''\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz2sf4dc7.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpz2sf4dc7.py\", line 37, in test_check\n    check(find_max)\n  File \"/tmp/tmpz2sf4dc7.py\", line 25, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if len(words) == 0:\n        return ''\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfjqc2284.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpfjqc2284.py\", line 36, in test_check\n    check(find_max)\n  File \"/tmp/tmpfjqc2284.py\", line 24, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_count = 0\n    for word in words:\n        if word in words:\n            max_count += 1\n    return words[max_count - 1]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0py2vljc.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp0py2vljc.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp0py2vljc.py\", line 24, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if len(words) == 0:\n        return ''\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpfjqc2284.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpfjqc2284.py\", line 36, in test_check\n    check(find_max)\n  File \"/tmp/tmpfjqc2284.py\", line 24, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if len(words) == 0:\n        return ''\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz2sf4dc7.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpz2sf4dc7.py\", line 37, in test_check\n    check(find_max)\n  File \"/tmp/tmpz2sf4dc7.py\", line 25, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_count = 0\n    for word in words:\n        if word in words:\n            max_count += 1\n    return words[max_count]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6k7h6jrh.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp6k7h6jrh.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp6k7h6jrh.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File \"/tmp/tmp6k7h6jrh.py\", line 20, in find_max\n    return words[max_count]\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_count = 0\n    for word in words:\n        if word in words:\n            max_count += 1\n    return words[max_count]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6k7h6jrh.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp6k7h6jrh.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp6k7h6jrh.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File \"/tmp/tmp6k7h6jrh.py\", line 20, in find_max\n    return words[max_count]\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if len(words) == 0:\n        return ''\n    if len(words) == 1:\n        return words[0]\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqnnc87yu.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpqnnc87yu.py\", line 39, in test_check\n    check(find_max)\n  File \"/tmp/tmpqnnc87yu.py\", line 27, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_i7bbn4h.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp_i7bbn4h.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp_i7bbn4h.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9hagnrce.py\", line 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hagnrce.py\", line 35, in test_check\n    check(find_max)\n  File \"/tmp/tmp9hagnrce.py\", line 23, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if not words:\n        return ''\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr81y84e1.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpr81y84e1.py\", line 36, in test_check\n    check(find_max)\n  File \"/tmp/tmpr81y84e1.py\", line 24, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    if len(words) == 0:\n        return ''\n    if len(words) == 1:\n        return words[0]\n    max_char = 0\n    for word in words:\n        max_char = max(max_char, len(word))\n    return words[max_char]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628574,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx3m838w1.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpx3m838w1.py\", line 38, in test_check\n    check(find_max)\n  File \"/tmp/tmpx3m838w1.py\", line 26, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File \"/tmp/tmpx3m838w1.py\", line 23, in find_max\n    return words[max_char]\nIndexError: list index out of range\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxz7hndis.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxz7hndis.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpxz7hndis.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    max_len = 0\n    for word in words:\n        max_len = max(len(word), max_len)\n    return words[0][:max_len]\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpcuet9q_0.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpcuet9q_0.py\", line 34, in test_check\n    check(find_max)\n  File \"/tmp/tmpcuet9q_0.py\", line 22, in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"\n    return max(words, key=len)\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n",
      "timestamp": 1673628573,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphai0d_gi.py\", line 33, in <module>\n    test_check()\n  File \"/tmp/tmphai0d_gi.py\", line 31, in test_check\n    check(find_max)\n  File \"/tmp/tmphai0d_gi.py\", line 20, in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}