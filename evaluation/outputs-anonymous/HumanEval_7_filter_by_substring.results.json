{
  "name": "HumanEval_7_filter_by_substring",
  "language": "py",
  "prompt": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) > -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().startswith(arg2.lower())]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdxk5un7k.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpdxk5un7k.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpdxk5un7k.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) > -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) > -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3scqlud2.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3scqlud2.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmp3scqlud2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in arg1 if s in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj13yty0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjj13yty0.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpjj13yty0.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3scqlud2.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3scqlud2.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmp3scqlud2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) > -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) > -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3scqlud2.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3scqlud2.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmp3scqlud2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in arg1 if s in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj13yty0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjj13yty0.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpjj13yty0.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) > -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) > -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpetv57g80.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpetv57g80.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmpetv57g80.py\", line 16, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().startswith(arg2.lower())]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdxk5un7k.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpdxk5un7k.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpdxk5un7k.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in arg1 if s in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj13yty0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjj13yty0.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpjj13yty0.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in arg1 if s in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj13yty0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjj13yty0.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpjj13yty0.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in arg1 if s in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj13yty0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjj13yty0.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpjj13yty0.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) > -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3scqlud2.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3scqlud2.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmp3scqlud2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3scqlud2.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3scqlud2.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmp3scqlud2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in arg1 if s in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj13yty0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjj13yty0.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpjj13yty0.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3scqlud2.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3scqlud2.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmp3scqlud2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3scqlud2.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3scqlud2.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmp3scqlud2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) > -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in arg1 if s in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj13yty0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjj13yty0.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpjj13yty0.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in arg1 if s in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj13yty0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjj13yty0.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpjj13yty0.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpetv57g80.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmpetv57g80.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmpetv57g80.py\", line 16, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().startswith(arg2.lower())]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdxk5un7k.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpdxk5un7k.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpdxk5un7k.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in arg1 if s in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjj13yty0.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpjj13yty0.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpjj13yty0.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpczw0y75_.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpczw0y75_.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpczw0y75_.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().startswith(arg2.lower())]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdxk5un7k.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpdxk5un7k.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpdxk5un7k.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3scqlud2.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3scqlud2.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmp3scqlud2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.startswith(arg2)]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgbqwajb2.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpgbqwajb2.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpgbqwajb2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) > -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3scqlud2.py\", line 22, in <module>\n    test_check()\n  File \"/tmp/tmp3scqlud2.py\", line 20, in test_check\n    check(f)\n  File \"/tmp/tmp3scqlud2.py\", line 15, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x in arg2]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxdg2hmpd.py\", line 21, in <module>\n    test_check()\n  File \"/tmp/tmpxdg2hmpd.py\", line 19, in test_check\n    check(f)\n  File \"/tmp/tmpxdg2hmpd.py\", line 14, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in arg1 if x.find(arg2) != -1]\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}