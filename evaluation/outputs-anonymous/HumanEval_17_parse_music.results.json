{
  "name": "HumanEval_17_parse_music",
  "language": "py",
  "prompt": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1[i:i+2]) for i in range(0, len(arg1), 2)]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk9z61066.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpk9z61066.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpk9z61066.py\", line 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\n  File \"/tmp/tmpk9z61066.py\", line 16, in f\n    return [int(arg1[i:i+2]) for i in range(0, len(arg1), 2)]\n  File \"/tmp/tmpk9z61066.py\", line 16, in <listcomp>\n    return [int(arg1[i:i+2]) for i in range(0, len(arg1), 2)]\nValueError: invalid literal for int() with base 10: 'o '\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(i) for i in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdi1ns3mr.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi1ns3mr.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpdi1ns3mr.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in f\n    return [int(i) for i in arg1.split('|')]\n  File \"/tmp/tmpdi1ns3mr.py\", line 16, in <listcomp>\n    return [int(i) for i in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1) for arg1 in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpth6rzln3.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmpth6rzln3.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmpth6rzln3.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpth6rzln3.py\", line 16, in f\n    return [int(arg1) for arg1 in arg1.split('|')]\n  File \"/tmp/tmpth6rzln3.py\", line 16, in <listcomp>\n    return [int(arg1) for arg1 in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(arg1[i:i+2]) for i in range(len(arg1)-1, -1, -1)]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp35m8tqzp.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp35m8tqzp.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp35m8tqzp.py\", line 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\n  File \"/tmp/tmp35m8tqzp.py\", line 16, in f\n    return [int(arg1[i:i+2]) for i in range(len(arg1)-1, -1, -1)]\n  File \"/tmp/tmp35m8tqzp.py\", line 16, in <listcomp>\n    return [int(arg1[i:i+2]) for i in range(len(arg1)-1, -1, -1)]\nValueError: invalid literal for int() with base 10: 'o'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import List\n\ndef f(arg1: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> f('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in arg1.split('|')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255427,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4fcuq5d7.py\", line 28, in <module>\n    test_check()\n  File \"/tmp/tmp4fcuq5d7.py\", line 26, in test_check\n    check(f)\n  File \"/tmp/tmp4fcuq5d7.py\", line 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in f\n    return [int(x) for x in arg1.split('|')]\n  File \"/tmp/tmp4fcuq5d7.py\", line 16, in <listcomp>\n    return [int(x) for x in arg1.split('|')]\nValueError: invalid literal for int() with base 10: ''\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}