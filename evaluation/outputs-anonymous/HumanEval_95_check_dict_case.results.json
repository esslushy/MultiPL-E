{
  "name": "HumanEval_95_check_dict_case",
  "language": "py",
  "prompt": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ],
  "results": [
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not arg1:\n        return False\n    for key in arg1.keys():\n        if key.lower() not in arg1.keys():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjrp2_ilv.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpjrp2_ilv.py\", line 37, in test_check\n    check(f)\n  File \"/tmp/tmpjrp2_ilv.py\", line 30, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3go6gc5c.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp3go6gc5c.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp3go6gc5c.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() == v.lower() for k, v in arg1.items())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2s_9wzfs.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2s_9wzfs.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp2s_9wzfs.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph0ll7gjf.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmph0ll7gjf.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmph0ll7gjf.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3go6gc5c.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp3go6gc5c.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp3go6gc5c.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3go6gc5c.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp3go6gc5c.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp3go6gc5c.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() == v.lower() for k, v in arg1.items())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2s_9wzfs.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2s_9wzfs.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp2s_9wzfs.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph0ll7gjf.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmph0ll7gjf.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmph0ll7gjf.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3go6gc5c.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp3go6gc5c.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp3go6gc5c.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph0ll7gjf.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmph0ll7gjf.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmph0ll7gjf.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph0ll7gjf.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmph0ll7gjf.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmph0ll7gjf.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() == v.lower() for k, v in arg1.items())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2s_9wzfs.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2s_9wzfs.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp2s_9wzfs.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(arg1) == 0:\n        return False\n    for key in arg1:\n        if key.lower() not in ['a', 'A', 'b', 'B', 'c', 'c']:\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpb9u0vzps.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpb9u0vzps.py\", line 37, in test_check\n    check(f)\n  File \"/tmp/tmpb9u0vzps.py\", line 28, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph0ll7gjf.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmph0ll7gjf.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmph0ll7gjf.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in key.lower() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpif6bv6rq.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpif6bv6rq.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmpif6bv6rq.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not isinstance(arg1, Dict):\n        return False\n    for k, v in arg1.items():\n        if not isinstance(k, str):\n            return False\n        if not isinstance(v, str):\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa48ylc79.py\", line 41, in <module>\n    test_check()\n  File \"/tmp/tmpa48ylc79.py\", line 39, in test_check\n    check(f)\n  File \"/tmp/tmpa48ylc79.py\", line 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(key, str) for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplznvvnvp.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmplznvvnvp.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmplznvvnvp.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3go6gc5c.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp3go6gc5c.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp3go6gc5c.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() == v.lower() for k, v in arg1.items())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2s_9wzfs.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2s_9wzfs.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp2s_9wzfs.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph0ll7gjf.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmph0ll7gjf.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmph0ll7gjf.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not arg1:\n        return False\n    for k, v in arg1.items():\n        if k.lower() not in ['state', 'city', 'zip']:\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphaquy5ca.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmphaquy5ca.py\", line 37, in test_check\n    check(f)\n  File \"/tmp/tmphaquy5ca.py\", line 28, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in key.lower() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpif6bv6rq.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpif6bv6rq.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmpif6bv6rq.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() == v.lower() for k, v in arg1.items())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2s_9wzfs.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2s_9wzfs.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp2s_9wzfs.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not arg1:\n        return False\n    for key in arg1.keys():\n        if key.lower() not in arg1.keys():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjrp2_ilv.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpjrp2_ilv.py\", line 37, in test_check\n    check(f)\n  File \"/tmp/tmpjrp2_ilv.py\", line 30, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph0ll7gjf.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmph0ll7gjf.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmph0ll7gjf.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() == k for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphfjz11xg.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmphfjz11xg.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmphfjz11xg.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() in k for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2aoyex50.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2aoyex50.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp2aoyex50.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() in k for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2aoyex50.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2aoyex50.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp2aoyex50.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not arg1:\n        return False\n    for k, v in arg1.items():\n        if k.lower() not in ['name', 'age', 'city', 'state', 'zip']:\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpz7_bd2fv.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpz7_bd2fv.py\", line 37, in test_check\n    check(f)\n  File \"/tmp/tmpz7_bd2fv.py\", line 28, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpna2m903i.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpna2m903i.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmpna2m903i.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in key.lower() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpif6bv6rq.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpif6bv6rq.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmpif6bv6rq.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph0ll7gjf.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmph0ll7gjf.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmph0ll7gjf.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph0ll7gjf.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmph0ll7gjf.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmph0ll7gjf.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in key.lower() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpif6bv6rq.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpif6bv6rq.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmpif6bv6rq.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if len(arg1) == 0:\n        return False\n    return all(map(lambda k: k.lower() == k.upper(), arg1.keys()))\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppzkepqez.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmppzkepqez.py\", line 34, in test_check\n    check(f)\n  File \"/tmp/tmppzkepqez.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not arg1:\n        return False\n    for key in arg1.keys():\n        if key.lower() not in ['name', 'age', 'city', 'state', 'zip']:\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp97qwbehw.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp97qwbehw.py\", line 37, in test_check\n    check(f)\n  File \"/tmp/tmp97qwbehw.py\", line 28, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(key, str) for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplznvvnvp.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmplznvvnvp.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmplznvvnvp.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(key, str) for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplznvvnvp.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmplznvvnvp.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmplznvvnvp.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() == v.lower() for k, v in arg1.items())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2s_9wzfs.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2s_9wzfs.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp2s_9wzfs.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmph0ll7gjf.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmph0ll7gjf.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmph0ll7gjf.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() == v.lower() for k, v in arg1.items())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2s_9wzfs.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2s_9wzfs.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp2s_9wzfs.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in key.lower() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpif6bv6rq.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpif6bv6rq.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmpif6bv6rq.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(k.lower() == k for k in arg1.keys()) and all(k.upper() == k for k in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppztd6ahs.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmppztd6ahs.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmppztd6ahs.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(key, str) for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplznvvnvp.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmplznvvnvp.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmplznvvnvp.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not arg1:\n        return False\n    for key in arg1.keys():\n        if key.lower() not in arg1.keys():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpjrp2_ilv.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpjrp2_ilv.py\", line 37, in test_check\n    check(f)\n  File \"/tmp/tmpjrp2_ilv.py\", line 30, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() == key.upper() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_shq6o3z.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp_shq6o3z.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp_shq6o3z.py\", line 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(isinstance(k, str) for k in arg1.keys()) and all(isinstance(v, str) for v in arg1.values())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4tjbsk61.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4tjbsk61.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4tjbsk61.py\", line 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not arg1:\n        return False\n    for k, v in arg1.items():\n        if k.lower() not in ['a', 'A', 'b', 'B', 'c', 'c']:\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6tsovtlo.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmp6tsovtlo.py\", line 37, in test_check\n    check(f)\n  File \"/tmp/tmp6tsovtlo.py\", line 28, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    if not isinstance(arg1, Dict):\n        return False\n    for key in arg1:\n        if not isinstance(key, str):\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpd343kwcu.py\", line 39, in <module>\n    test_check()\n  File \"/tmp/tmpd343kwcu.py\", line 37, in test_check\n    check(f)\n  File \"/tmp/tmpd343kwcu.py\", line 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n    return all(key.lower() in arg1.keys() for key in arg1.keys())\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n",
      "timestamp": 1674255525,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4be3uvi1.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp4be3uvi1.py\", line 32, in test_check\n    check(f)\n  File \"/tmp/tmp4be3uvi1.py\", line 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\nAssertionError\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}