{
  "name": "HumanEval_103_rounded_avg",
  "language": "fs",
  "prompt": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n",
  "tests": "let test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' >= n then \n                loop n' m\n            else \n                loop n' (n' - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt3sglzg9.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            0b11\n        else\n            let x = n % m\n            if x = 0b00 then\n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppwjp_33m.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x < n then loop (x + 1) (m - x)\n            else loop (x + 1) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2jsb2iyr.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let n' = n + 1\n            if n' = m then -1\n            else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqc6sj7oh.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' > m' then loop n' m'\n            elif n' = m' then n'\n            else loop n' m'\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpglbgg7_z.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11\n        else\n            let n' = n + 1\n            if n' = m then \n                0b11\n            else\n                let n'' = n' + 1\n                loop n'' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi3h8skee.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' < m' then\n                loop n' m'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp56uj5h2z.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let n' = n + 1\n            let m' = m - 1\n            if n' > m' then loop n' m'\n            elif n' = m' then n'\n            else loop n' m'\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa073uvc5.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop (n' + 1) (m - n')\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqy9azw2f.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            if x < 0 then loop (n - x) (m - x)\n            elif x = 0 then loop (n - 1) (m - 1)\n            else loop (n - 1) (m - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjpsluh3i.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0 else\n        let x = n % m\n        let y = n / m\n        loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuzjk9ez8.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x < 0 then loop (x - 1) m\n            elif x = 0 then loop (n / m) m\n            else loop (x / m) (n / m)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptazvluha.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x < 0 then loop (n / m) (m - x)\n            elif x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc5t76tn8.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let b = (n % m)\n            if b = 0 then loop (n / m) (m - b)\n            else loop (n / m) (m + b)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxnidgajg.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' < m' then \n                loop n' m'\n            else \n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq4kxp06e.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1 else\n        let n' = n + 1\n        if n' > m then -1 else\n        loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpshbxfajs.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else \n            let x = n / m\n            if x > 0 then loop (x - 1) (m - x)\n            else loop (m - x) (n - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppnak5ro0.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then \n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl7tyj2zq.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x < n then \n                loop (x + 1) m\n            else\n                loop x m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpchgpzxhe.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then\n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp67gmw00u.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1 else \n        let n' = n + 1\n        if n' > m then n' else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppeuu09zf.fsx(18,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x < n then loop (x + 1) m\n            else loop x m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpruugoqrg.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then \n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m - x - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc6men9e6.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxuconr_.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxuconr_.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            let y = n % m\n            if x <> 0 then loop x y\n            else loop y m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2slmygmo.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let x = (n % m)\n            if x < 0 then loop (x - 1) (m - x)\n            elif x = 0 then loop (x - 1) (m - x)\n            else loop (x - 1) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp498hj9de.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1 else \n        let n' = n + 1\n        if n' = m then n' else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0iolz4u0.fsx(18,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then loop (n / m) (x - 1)\n            else loop (n / m) (x + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy3i_hs9o.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4saj5tb7.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let b = (n % 2) = 0\n            let n = n / 2\n            if b then loop (n + 1) m\n            else loop (n + 1) m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprduh8v_t.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11\n        else\n            let x = n % m\n            if x <> 0b11 then loop (x / m) (m - x)\n            else loop (x / m) (m - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsjnxiyy9.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec helper n m = \n        if n = m then \n            n\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' > m' then \n                helper n' m'\n            elif n' = m' then \n                helper n' m\n            else\n                helper n' m\n    helper n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz3gfzvzy.fsx(26,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then loop (x + 1) m\n            else loop (x + 1) m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpssbivfl_.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else \n            let n' = n + 1\n            loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7r_xbevj.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop (n' + 1) (m - n')\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnpnengqq.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkc87otfc.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let x = (n % m)\n            if x < 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm17ixloh.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxuconr_.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1 else \n        let n' = n + 1\n        if n' = m then n' else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0iolz4u0.fsx(18,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let n' = n + 1\n            if n' > m then\n                loop n' m\n            else\n                loop n' (n' + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpw4bk1s1v.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else \n            let n' = n + 1\n            if n' = m then \n                n'\n            else \n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpk1924q96.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0 else \n        let x = n % m\n        if x = 0 then loop (n / m) m\n        else loop (x / m) (n / m)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfi83eeim.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let n' = n + 1\n            let m' = m - 1\n            if n' < m' then loop n' m'\n            else loop n' m'\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwitihcoi.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let b = (n % m)\n            if b = 0 then \n                loop (n / m) (m - b)\n            else\n                loop (n / m) (m - b)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc1abi4hl.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            if x < 0 then loop (x - 1) (m - x)\n            elif x = 0 then loop (x - 1) m\n            else loop (x - 1) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppxslsoyd.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11\n        else \n            let x = n % m\n            if x = 0b01 then \n                loop (n / m) (m - x)\n            else \n                loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn5sp4kh1.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            if x < 0 then \n                loop (n - x) (m - x)\n            else\n                loop (x + 1) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps8rgfux7.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            let y = n % m\n            if x = 0 then \n                loop (y + 1) m\n            elif y = 0 then \n                loop (x + 1) m\n            else\n                loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzqlazm_e.fsx(26,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else \n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgvvzzsq_.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3hls42ig.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxuconr_.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then \n                loop (n / m) (x - 1)\n            else\n                loop (n / m) (x - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqtrdzm0k.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            if x < 0 then \n                loop (x - 1) (m - x)\n            elif x = 0 then \n                loop (x - 1) (m - x)\n            else\n                loop x (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmfbc7xnm.fsx(25,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0 else\n        let n' = n + 1\n        if n' = m then -1 else\n        loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpthd524_p.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec helper n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                helper n' m'\n    helper n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuivy2yl4.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1\n        else\n            let x = n % m\n            if x = 0 then loop (n / m) m\n            else loop (n / m) (x - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkavu6vqs.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0 else\n        let n' = n + 1\n        if n' = m then -1 else\n        loop (n' - 1) (m - n')\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0qrz6xwg.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let n' = n + 1\n            if n' < m then loop n' m\n            else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp52kyof15.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then \n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4suao4e2.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx0bk6a0r.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec helper n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                helper n' m'\n    helper n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuivy2yl4.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            let y = n % m\n            if x <> 0 && y <> 0 then loop (x - 1) (y - 1)\n            elif x = 0 && y = 0 then loop (x - 1) (y - 1)\n            elif x = 0 && y <> 0 then loop (x - 1) (y - 1)\n            elif x <> 0 && y <> 0 then loop (x - 1) (y - 1)\n            else loop (x - 1) (y - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2q_tesh_.fsx(25,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then \n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl7tyj2zq.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec helper n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                helper n' m'\n    helper n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuivy2yl4.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1 else \n        let n' = n + 1\n        if n' = m then n' else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0iolz4u0.fsx(18,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else \n            let n' = n + 1\n            if n' = m then \n                n'\n            else \n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfgyw1hre.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m'\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5ty6jau6.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1\n        else \n            let n' = n + 1\n            if n' = m then n'\n            else loop (n' + 1) (m - n')\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpeni01wz4.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m) \n            if x < 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0rtu2lxo.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let b = (n % 2) = 0\n            if b then \n                loop (n / 2) (m - 1)\n            else\n                loop (n / 2) (m + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuosiyx94.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            n\n        else\n            let n' = n + 1\n            if n' = m then\n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoooqntnp.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            if x = 0 then \n                loop (n - 1) m\n            else\n                loop (x - 1) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2w6pe5l7.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxuconr_.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec helper n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' > m then \n                helper n' m\n            else\n                helper n' (n' - 1)\n    helper n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcmxwjn5n.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let x = (n % m)\n            if x = 0 then\n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphyosnms0.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let x = n % m\n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwqh4bbrp.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x > m then \n                loop (x - 1) (x - 1)\n            else\n                loop (x + 1) (x + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv9gecia5.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx0bk6a0r.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let x = n % m\n            loop (x + 1) (x + m / 2)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2t35a9wb.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then -1\n            else loop n' m'\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpes0vakg6.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            0b11\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then\n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjar_e4t9.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph3bura70.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx0bk6a0r.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            if x < 0 then \n                loop (n - x) (m - x)\n            elif x = 0 then \n                loop (n - x) (m - x)\n            else\n                loop (x - 1) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnujgzd8_.fsx(25,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x < n then loop x m\n            else loop x (n - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp00wdhug5.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let x = n % m\n            if x = 0 then\n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1ygjjodk.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkc87otfc.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1\n        else \n            let n' = n + 1\n            if n' < n then loop n' m\n            else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppuso8h9i.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec helper n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                helper n' m'\n    helper n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuivy2yl4.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0lyl0ak0.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let x = n % m\n            loop (n / m) (x + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplzgyut56.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let b = (n % m)\n            if b = 0 then loop (n / m) (m - b)\n            else loop (n / m) (m + b)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxnidgajg.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4saj5tb7.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else \n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else \n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpimu7mkr4.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else \n            let x = (n % m)\n            if x = 0 then \n                loop (n / m) (m - x)\n            else \n                loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1zjbx0jw.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x > m then loop (x - 1) (m - x)\n            else loop x m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprfjbj951.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x < 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmc6fg31y.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9c0et5y8.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then \n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpul3kmc8f.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0 else \n        let x = n % m\n        if x = 0 then loop (x + 1) m else loop (x + 1) m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe5nwlyma.fsx(18,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                let n' = n' + 1\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjcgked76.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let x = (n % m)\n            let y = (n / m)\n            loop (x + y) (m - y)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4ljcjks5.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let n' = n + 1\n            if n' = m then\n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjofzdm82.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let n' = n + 1\n            loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkci5wkgi.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9c0et5y8.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            let y = (n + m) % 2\n            if x <> 0 && y <> 0 then loop (x - 1) (y - 1)\n            elif x <> 0 then loop (x - 1) (y + 1)\n            elif y <> 0 then loop (x + 1) (y - 1)\n            else loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnlj73n_q.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let n' = n + 1\n            if n' = m then -1\n            else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqc6sj7oh.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' > m' then \n                loop n' m\n            elif n' = m' then \n                loop n' m\n            else \n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449645,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl2bvt49d.fsx(26,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let x = (n % m)\n            if x = 0 then\n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphga1pn7f.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x = 0 then \n                loop (n - 1) (m - 1)\n            else\n                loop (n - 1) (m - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq25wr_k7.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxuconr_.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx0bk6a0r.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' > m' then\n                loop n' m'\n            elif n' = m' then\n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzz5rk7fs.fsx(26,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            if x < 0 then \n                loop (n - x) (m - x)\n            else\n                loop (x + 1) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps8rgfux7.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' >= m then \n                loop n' (n' - 1)\n            else\n                loop n' (n' - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprtavwugp.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else \n            let x = n % m\n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv3pz31hu.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let x = n % m\n            if x = 0 then\n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7curswzp.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9c0et5y8.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else \n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else \n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0w0yid4t.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let b = (n % m)\n            if b = 0 then \n                loop (n / m) (m - b)\n            else\n                loop (n / m) (m + b)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp13w9lzia.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' > m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp2b_8mnt.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then \n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpul3kmc8f.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else \n            let x = (n % m)\n            if x = 0 then \n                loop (n / m) (m - x)\n            else \n                loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1zjbx0jw.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            let y = (n + m) % 2\n            if x <> 0 && y <> 0 then loop x y\n            else loop (n + m) (m - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphb111ljs.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1\n        else \n            let x = (n % m)\n            if x < 0 then loop (n / m) (x + m)\n            elif x = 0 then loop (n / m) (x + m)\n            else loop (n / m) (x + m)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpijic7w_2.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x = 0 then \n                loop (n - 1) (m - 1)\n            else\n                loop x (n - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvpj89uob.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            0b11\n        else\n            let n' = n + 1\n            if n' < m then\n                loop (n' + 1) m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpey87smph.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else \n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else \n                loop n' m'\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps2xhfi9q.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx0bk6a0r.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9c0et5y8.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' < m then \n                loop n' m\n            else \n                loop n' (n' - m)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsj_0qlbp.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then loop (x + 1) m\n            else loop (x + 1) (m / x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe_7oan30.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop (n' + 1) (m - n')\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnpnengqq.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkc87otfc.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1 else \n        let x = (n % m) \n        if x = 0 then loop (n / m) (m - x)\n        else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2wnraqtf.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x < n then loop x m\n            else loop x (n - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp00wdhug5.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' < m' then loop n' m'\n            else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0kef1mq6.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0 else\n        let n' = n + 1\n        if n' > m then -1 else\n        loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptwbfi3wr.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9c0et5y8.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec helper n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x < 0 then \n                helper (n / m) (m - x)\n            elif x = 0 then \n                helper (n / m) (m + x)\n            else\n                helper (n / m) (m - x)\n    helper n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplhi_cya8.fsx(25,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' < m' then loop n' m'\n            else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp972omqqt.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11\n        else\n            let b = (n % m)\n            if b = 0b11 then \n                loop (n / m) (m - b)\n            else\n                loop (n / m) (m + b)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3de0bvmo.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let n' = n + 1\n            if n' > m then\n                loop n' m\n            else\n                loop n' (n' + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpw4bk1s1v.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            if x = 0 then \n                loop (n - 1) (m - 1)\n            else\n                loop (n - 1) (m - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppuk3bdor.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1 else\n        let x = n % m\n        if x = 0 then loop (x + 1) m else loop x m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1pvuslhm.fsx(18,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x <> 0 then loop (x - 1) m\n            else loop (n / m) m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmsc3ww17.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop (n' + 1) (m - n')\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnpnengqq.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp32qfcj3c.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec helper n m = \n        if n = m then \n            n\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                helper n' m'\n    helper n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6fx6poq7.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' > m' then\n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpk_803b55.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let x = n / m\n            if x < 0 then\n                loop (x - 1) (m - x)\n            elif x = 0 then\n                loop (x - 1) (m - x)\n            else\n                loop x (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3ycubxho.fsx(25,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx83j039q.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11uy\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9wganwnt.fsx(24,27): error FS0001: This expression was expected to have type\n    'byte'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp32qfcj3c.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449647,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpneloiob9.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' > m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnrcd1jx1.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1\n        else \n            let n' = n + 1\n            if n' > m then loop n' m\n            else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449647,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpydumppj5.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9c0et5y8.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx0bk6a0r.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let x = n % m\n            if x < 0 then\n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449647,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpeyexa29k.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' < m then \n                loop n' m\n            else\n                loop n' (m - n')\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6j3b7fi7.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then \n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4suao4e2.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x = m then \n                loop (n + 1) (x - 1)\n            else\n                loop (n + 1) (x - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449647,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxy6bc15t.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x < 0 then loop (x - 1) m\n            elif x = 0 then loop (n / m) m\n            else loop (x - 1) (n / m)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcdp0j20p.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx0bk6a0r.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1 else \n        let n' = n + 1\n        if n' > m then -1 else \n        loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449647,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpchu5cuyy.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let b = (n % m)\n            if b = 0 then loop (n / m) (m - b)\n            else loop (n / m) (m + b)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxnidgajg.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1 else\n        let n' = n + 1\n        if n' = m then n' else\n        loop (n' + 1) (m - n')\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449647,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppiwmmjpl.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let b = (n % m)\n            if b = 0 then\n                loop (n / m) (m - b)\n            else\n                loop (n / m) (m - b)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449647,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv33hw830.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' < m' then \n                loop n' m'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps6nde6gp.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp32qfcj3c.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m) \n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2fkhrst9.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449647,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpneloiob9.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx83j039q.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1\n        else \n            let x = (n + m) / 2\n            if x < n then loop (x + 1) m\n            else loop (x - 1) m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp87abi8n_.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx83j039q.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else \n            let n' = n + 1\n            if n' > m then \n                loop n' m\n            else \n                loop n' (n' - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxb_uh5d4.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9c0et5y8.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1 else \n        let n' = n + 1\n        if n' = m then n' else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0iolz4u0.fsx(18,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4saj5tb7.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449647,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpneloiob9.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' > m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphmv771oi.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9c0et5y8.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + y) (m - y)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpswc7ahcu.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            n\n        else\n            let n' = n + 1\n            loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkci5wkgi.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449644,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9c0et5y8.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            if x = 0 then \n                loop (n - x) (m - x)\n            else\n                loop x (n - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6fy2_tcy.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then loop (n / m) (x - 1)\n            else loop (n / m) (x - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7ejtt2zu.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11\n        else\n            let x = n % m\n            if x = 0b00 then \n                loop (n / m) (m - x)\n            else\n                loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu5f3u36j.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then \n                loop (n / m) (x - 1)\n            else\n                loop (n / m) (x - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449643,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqtrdzm0k.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt0alf66.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then \n                loop (n / m) (x - 1)\n            else\n                loop (n / m) (x + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpg20b6od9.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxuconr_.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            let y = (n + m) % 2\n            if x <> 0 && y <> 0 then loop (x - 1) (y - 1)\n            else loop (x - 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449648,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3mtn8bgg.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let x = n / m\n            let y = n % m\n            loop (x + 1) (y + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675449641,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4saj5tb7.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}