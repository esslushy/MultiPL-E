{
  "name": "HumanEval_111_histogram",
  "language": "fs",
  "prompt": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n",
  "tests": "let test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | x :: xs -> histogram' (acc + 1) xs\n        | [] -> acc\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8bpiuk16.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (dict:Dictionary<char,int>) (str:string) =\n        match str with\n        | \"\" -> dict\n        | _ ->\n            let mutable count = 0\n            for c in str do\n                if dict.ContainsKey(c) then\n                    count <- count + 1\n                else\n                    dict.Add(c,count)\n            histogram' dict (str.Substring(0,count))\n    histogram' Dictionary.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8z1r75b5.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = acc\n            for c in str do\n                if acc.ContainsKey c then\n                    acc <- acc.Add(c, acc.Count + 1)\n                else\n                    acc <- acc.Add(c, 1)\n            histogram' acc str\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqba85byd.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable acc = acc\n            let mutable i = 0\n            while i < str.Length do\n                if str.[i] = ' ' then\n                    acc <- histogram' acc (str.Substring(i, 1))\n                else\n                    acc <- histogram' acc (str.Substring(i, 1))\n                    i <- i + 1\n            acc\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2z59h6zd.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (str:string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = Dictionary<char,int>()\n            for c in str do\n                if acc.ContainsKey c then\n                    acc <- acc.Add(c,acc.[c])\n                else\n                    acc <- acc.Add(c,1)\n            histogram' acc str\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwrf7njjw.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x :: xs ->\n            match x with\n            | ' ' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7ezns647.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp7ezns647.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp7ezns647.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp7ezns647.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp7ezns647.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:13). Try indenting this to",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphvd5clfw.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Map<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let count = str.Length\n            let mutable acc = Map.empty\n            for i = 0 to count - 1 do\n                let c = str.[i]\n                if acc.ContainsKey c then\n                    acc <- Map.add c (acc.[c] + 1) acc\n                else\n                    acc <- Map.add c 1 acc\n            histogram' acc str\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnn17f9bp.fsx(27,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvyiz774v.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (str:string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = Dictionary<char,int>()\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf9kgqovj.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (acc' : Dictionary<char,int>) (str : string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable acc' = acc\n            let mutable acc = acc'\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc <- acc'.[c]\n                else\n                    acc <- acc'\n            histogram' acc' acc' (str.Substring(0, str.Length-1))\n    histogram' (Dictionary()) (Dictionary()) test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph7eig98h.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let s' = s.ToLower()\n        if s' = test then\n            s\n        else\n            let count = s'.Length\n            let s' = s'.Substring(0, count - 1)\n            let s'' = s'.Substring(count - 1)\n            histogram' s'\n            histogram' s''\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmputqj5kq8.fsx(19,13): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmputqj5kq8.fsx(24,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    'string'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (str:string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = acc\n            for c in str do\n                if acc.ContainsKey c then\n                    acc <- acc.Add(c,acc.Count + 1)\n                else\n                    acc <- acc.Add(c,1)\n            histogram' acc str\n    histogram' (Dictionary()) test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpk_8nkbz2.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = \n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | _ -> acc\n    histogram' []\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpie1z3ssi.fsx(17,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpie1z3ssi.fsx(18,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpie1z3ssi.fsx(19,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpie1z3ssi.fsx(20,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpie1z3ssi.fsx(21,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpie1z3ssi.fsx(22,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpie1z3ssi.fsx(27,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp93uqyqi6.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs ->\n            let newAcc = x::acc\n            histogram' newAcc xs\n    histogram' [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjh2pjthh.fsx(19,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let s = s.ToLower()\n            let rec histo' (s:string) =\n                match s with\n                | \"\" -> []\n                | _ ->\n                    let s = s.ToLower()\n                    let rec histo'' (s:string) =\n                        match s with\n                        | \"\" -> []\n                        | _ ->\n                            let s = s.ToLower()\n                            let rec histo''' (s:string) =\n                                match s with\n                                | \"\" -> []\n                                | _ ->\n                                    let s = s.ToLower()\n                                    let rec histo''''' (s:string) =\n                                        match s with\n                                        | \"\" -> []\n                                        | _ ->\n                                            let s = s.ToLower()\n                                            let rec histo''''''' (s:string) =\n                                                match s with\n                                                | \"\" -> []\n                                                | _ ->\n                                                    let s = s.ToLower()\n                                                    let rec histo''''''''' (s:string) =\n                                                        match s with\n                                                        | \"\" -> []\n                                                        | _ ->\n                                                            let s = s.ToLower()\n                                                            let rec histo''''''''''' (s:string) =\n                                                                match s with\n                                                                | \"\" -> []\n                                                                | _ ->\n                                                                    let s = s.ToLower()\n                                                                    let rec histo''''''''''''' (s:string) =\n                                                                        match s with\n                                                                        | \"\" -> []\n                                                                        | _ ->\n                                                                            let s = s.ToLower()\n                                                                            let rec histo''''''''''''' (s:string) =\n                                                                                match s with\n                                                                                | \"\" -> []\n                                                                                | _ ->\n                                                                                    let s = s.ToLower()\n                                                                                    let rec histo''''''''''''' (s:string) =\n                                                                                        match s with\n                                                                                        | \"\" -> []\n                                                                                        | _ ->\n                                                                                            let s = s\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpht3tayz_.fsx(65,93): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxig99cmg.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs -> histo (x::acc) xs\n    histo [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0dxpya1w.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | 'a' -> acc\n        | 'b' -> histogram' (acc + 1) 'b'\n        | 'c' -> histogram' (acc + 1) 'c'\n        | _ -> acc\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx5bc23dp.fsx(19,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let mutable count = 0\n        let mutable found = false\n        for c in s do\n            if found then\n                count <- count + 1\n            else\n                found <- true\n                count <- count + 1\n                if count = test then\n                    found <- true\n                    count <- 0\n                    s\n        if found then\n            count\n        else\n            0\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4061r0yc.fsx(23,21): error FS0001: All branches of an 'if' expression must return values implicitly convertible to the type of the first branch, which here is 'unit'. This branch returns a value of type 'string'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Map<char,int>) (acc' : Map<char,int>) (acc'' : Map<char,int>) (acc''' : Map<char,int>) (acc'''' : Map<char,int>) = \n        match test with\n        | ' ' -> acc\n        | '\\n' -> acc'\n        | '\\t' -> acc''\n        | '\\r' -> acc'''\n        | '\\t' -> acc'''''\n        | '\\r' -> acc'''''''\n        | _ -> histogram' (acc + 1) (acc' + 1) (acc'' + 1) (acc'''' + 1) (acc'''''' + 1)\n    histogram' Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map.empty Map\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsdk_souv.fsx(17,19): error FS0039: The value or constructor 'acc'''''' is not defined. Maybe you want one of the following:\n   acc''''\n   acc'''\n   acc''\n   acc'\n   acc\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let count = acc.Count + 1\n            let letters = str.ToCharArray()\n            let letters' = letters |> Array.map (fun c -> c.ToString())\n            let letters'' = letters |> Array.map (fun c -> c.ToString())\n            let letters''' = letters |> Array.map (fun c -> c.ToString())\n            let letters'''' = letters |> Array.map (fun c -> c.ToString())\n            let letters''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters'''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters'''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters'''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters'''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters''''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters'''''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters'''''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters'''''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters''''''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters''''''''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters''''''''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters''''''''''''' = letters |> Array.map (fun c -> c.ToString())\n            let letters''''''''''''' = letters |> Array.map (fun\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxxzrybl7.fsx(36,1): error FS0010: Incomplete structured construct at or before this point in lambda expression\n\n\n\n/tmp/tmpxxzrybl7.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:13). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let mutable count = 0\n        let mutable result = Map.empty\n        for letter in s do\n            if count = 0 then\n                result <- Map.add letter count result\n            else\n                let newCount = count + 1\n                if newCount > 1 then\n                    result <- Map.add letter (newCount - 1) result\n                else\n                    result <- Map.add letter 1 result\n        result\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgb44j1fn.fsx(27,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let mutable count = 0\n        let mutable found = false\n        for c in s do\n            if found then \n                count <- count + 1\n            else\n                found <- true\n                count <- 1\n                yield count\n                yield! histogram' c\n        if count = 0 then \n            None\n        else\n            Some(count, found)\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph4chn6im.fsx(20,17): error FS0747: This construct may only be used within list, array and sequence expressions, e.g. expressions of the form 'seq { ... }', '[ ... ]' or '[| ... |]'. These use the syntax 'for ... in ... do ... yield...' to generate elements\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (acc' : Dictionary<char,int>) (acc'' : Dictionary<char,int>) (acc''' : Dictionary<char,int>) (acc'''' : Dictionary<char,int>) =\n        match test with\n        | 'a' -> acc.Add('a', 1)\n        | 'b' -> acc.Add('b', 1)\n        | 'c' -> acc.Add('c', 1)\n        | 'a' -> acc.Add('a', 2)\n        | 'b' -> acc.Add('b', 2)\n        | 'c' -> acc.Add('c', 2)\n        | 'a' -> acc.Add('a', 4)\n        | 'b' -> acc.Add('b', 4)\n        | 'c' -> acc.Add('c', 4)\n        | 'a' -> acc.Add('a', 4)\n        | 'b' -> acc.Add('b', 4)\n        | 'c' -> acc.Add('c', 4)\n        | 'a' -> acc.Add('a', 4)\n        | 'b' -> acc.Add('b', 4)\n        | 'c' -> acc.Add('c', 4)\n        | 'a' -> acc.Add('a', 4)\n        | 'b' -> acc.Add('b', 4)\n        | 'c' -> acc.Add('c', 4)\n        | 'a' -> acc.Add('a', 4)\n        | 'b' -> acc.Add('b', 4)\n        | 'c' -> acc.Add('c', 4)\n        | 'a' -> acc.Add('a', 4)\n        | 'b' -> acc.Add('b', 4)\n        | 'c' -> acc.Add('c', 4)\n        | 'a' -> acc.Add('a', 4)\n        | 'b' -> acc.Add('b', 4)\n        | 'c' -> acc.Add('c', 4)\n        | 'a' -> acc.Add('a', 4)\n        | 'b' -> acc.Add('b', 4)\n        | 'c' -> acc.Add('c',\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt_hikz_t.fsx(43,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_hikz_t.fsx(43,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_hikz_t.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_hikz_t.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_hikz_t.fsx(55,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:9). Try indenting this token f",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5o4_hqy.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | _ -> acc\n    histogram' Map.empty\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfm5gsj3q.fsx(17,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpfm5gsj3q.fsx(18,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpfm5gsj3q.fsx(19,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpfm5gsj3q.fsx(24,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Map<char, int>) (acc' : Map<char, int>) (acc'' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc'''\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpibwgn_ge.fsx(12,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpibwgn_ge.fsx(12,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let mutable res = Map.empty\n        let mutable i = 0\n        while i < s.Length do\n            let c = s.[i]\n            if Map.containsKey c res then\n                res <- Map.add c (i+1) res\n            else\n                res <- Map.add c (i+1) res\n            i <- i + 1\n        res\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp695lns_4.fsx(25,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs ->\n            let count = x.Length\n            if count > 1 then\n                histo (x::acc) xs\n            else\n                histo (x::acc) xs\n    histo [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvliyjk8c.fsx(14,25): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x :: xs ->\n            match x with\n            | ' ' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | _ -> histo (acc + 1) xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu61js08d.fsx(19,15): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpu61js08d.fsx(24,21): error FS0001: This expression was expected to have type\n    'char list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | x::xs -> histogram' (acc + 1) xs\n        | [] -> acc\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm1e4dk1u.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | ' ' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | _ -> histo (acc + 1) xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppo8rfdiy.fsx(23,21): error FS0001: This expression was expected to have type\n    'char list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (dict: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> dict\n        | _ ->\n            let count = dict.Count\n            let newDict = dict.Add(str.[0], count + 1)\n            histogram' newDict (str.Substring(1))\n    histogram' Dictionary.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_abvs8aj.fsx(11,31): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let rec histogram' (s:string) =\n            let s' = s.ToLower()\n            if s' = test then\n                s\n            else\n                match s' with\n                | 'a' -> histogram' (s.Substring(0, 1))\n                | 'b' -> histogram' (s.Substring(1, 1))\n                | 'c' -> histogram' (s.Substring(2, 1))\n                | _ -> failwith \"Invalid character in histogram\"\n        histogram' s\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp30sm77r0.fsx(18,19): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppiztw1ut.fsx(12,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppiztw1ut.fsx(12,1): error FS1241: Expected type argument or static argument\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let s = s.ToLower()\n            let rec histo' (s:string) = \n                match s with\n                | \"\" -> []\n                | _ -> \n                    let s = s.ToLower()\n                    let rec histo'' (s:string) = \n                        match s with\n                        | \"\" -> []\n                        | _ -> \n                            let s = s.ToLower()\n                            let rec histo''' (s:string) = \n                                match s with\n                                | \"\" -> []\n                                | _ -> \n                                    let s = s.ToLower()\n                                    let rec histo'''' (s:string) = \n                                        match s with\n                                        | \"\" -> []\n                                        | _ -> \n                                            let s = s.ToLower()\n                                            let rec histo''''' (s:string) = \n                                                match s with\n                                                | \"\" -> []\n                                                | _ -> \n                                                    let s = s.ToLower()\n                                                    let rec histo'''''' (s:string) = \n                                                        match s with\n                                                        | \"\" -> []\n                                                        | _ -> \n                                                            let s = s.ToLower()\n                                                            let rec histo''''''' (s:string) = \n                                                                match s with\n                                                                | \"\" -> []\n                                                                | _ -> \n                                                                    let s = s.ToLower()\n                                                                    let rec histo''''''''' (s:string) = \n                                                                        match s with\n                                                                        | \"\" -> []\n                                                                        | _ -> \n                                                                            let s = s.ToLower()\n                                                                            let rec histo''''''''' (s:string) = \n                                                                                match s with\n                                                                                | \"\" -> []\n                                                                                | _ -> \n                                                                                    let s = s.ToLower()\n                                                                                    let rec histo''''''''' (s:string) = \n                                                                                        match s with\n                                                                                        | \"\" -> []\n                                                                                        | _\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpaxm_udks.fsx(65,1): error FS0010: Incomplete structured construct at or before this point in pattern matching. Expected '->' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let s = s.ToLower()\n            let count = \n                match s.Length with\n                | 1 -> 1\n                | _ -> \n                    let mutable i = 0\n                    let mutable count = 0\n                    while i < s.Length do\n                        if s.[i] = 'a' then \n                            count <- count + 1\n                            i <- i + 1\n                        else\n                            i <- i + 1\n                    count\n            let result = \n                s.ToCharArray()\n                |> Array.map (fun c -> \n                    if c = 'a' then 1\n                    else 0)\n                |> Array.sort\n            result\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8f_v3ru7.fsx(35,13): error FS0001: All branches of a pattern match expression must return values implicitly convertible to the type of the first branch, which here is ''a list'. This branch returns a value of type 'int[]'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmn_tq0ep.fsx(12,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpmn_tq0ep.fsx(12,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvyiz774v.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (acc' : Dictionary<char, int>) (str : string) =\n        if str.Length = 0 then\n            acc\n        else\n            let c = str.[0]\n            let newAcc = acc.Add(c, acc'.Count + 1)\n            histogram' newAcc acc' newAcc str.[1..]\n    histogram' (Dictionary()) (Dictionary()) test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjx2htbm5.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | x::xs -> histo (x::acc) xs\n        | [] -> acc\n    histo [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpklol9njo.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (acc' : Dictionary<char,int>) (str:string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable i = 0\n            let mutable acc' = acc\n            while i < str.Length do\n                let c = str.[i]\n                if acc.ContainsKey c then\n                    acc' <- acc'.[c] + 1\n                else\n                    acc' <- acc'.[c]\n                i <- i + 1\n            histogram' acc' acc' (str.Substring(i))\n    histogram' (Dictionary()) (Dictionary()) test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqbp1pmv0.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs -> histo (x::acc) xs\n    histo [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0dxpya1w.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs -> \n            if test x then histogram' (acc + 1) xs\n            else histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqxhlgalg.fsx(16,18): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    ''a -> bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmn_tq0ep.fsx(12,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpmn_tq0ep.fsx(12,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs ->\n            let count = x.Length\n            if count > 1 then\n                histo (acc + 1) xs\n            else\n                histo (acc + count) xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmi9tb2eq.fsx(14,25): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (dict:Dictionary<char,int>) (str:string) = \n        match str with\n        | \"\" -> dict\n        | _ ->\n            let mutable count = 0\n            for c in str do\n                match dict.TryGetValue(c) with\n                | true, count -> histogram' dict (c::count)\n                | false, _ -> histogram' dict (c::count)\n            dict.[c] <- count\n            histogram' dict (str.Substring(0, count))\n    histogram' Dictionary.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2sajuuza.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (dict: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> dict\n        | _ ->\n            let mutable count = 0\n            for c in str do\n                match dict.TryGetValue(c) with\n                | true, count -> histogram' dict (count + 1)\n                | false, _ -> histogram' dict (count + 1)\n                count <- count + 1\n            dict.Add(c, count)\n            histogram' dict (count + 1)\n    histogram' Dictionary.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphny_nwr6.fsx(11,31): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs ->\n            if test x then histo (acc + 1) xs\n            else histo (acc + 1) xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2lgj9z5x.fsx(16,13): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    ''a -> bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = Dictionary<char, int>()\n            for c in str do\n                if acc.ContainsKey c then\n                    acc <- acc.Add(c, acc.[c] + 1)\n                else\n                    acc <- acc.Add(c, 1)\n            for c in str do\n                if acc.ContainsKey c then\n                    acc <- histogram' acc.[c]\n            acc\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkxxnurps.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (acc' : Dictionary<char, int>) (str : string) =\n        if str.Length = 0 then\n            acc\n        else\n            let char = str.[0]\n            let count = acc.ContainsKey char\n            if count then\n                histogram' (acc.Remove char) acc' (str.Substring 1)\n            else\n                histogram' (acc.Add(char, 1)) acc' (str.Substring 1)\n    histogram' (Dictionary()) (Dictionary()) test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt38qnjor.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5o4_hqy.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzj84771l.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp93uqyqi6.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let s = s.ToLower()\n            let count =\n                match s with\n                | \"a\" -> 1\n                | \"b\" -> 1\n                | \"c\" -> 1\n                | _ -> 0\n            [s]\n            |> List.map (fun s -> histogram' s)\n            |> List.filter (fun s -> s.Length > count)\n            |> List.map (fun s -> s.ToLower())\n            |> List.sort\n            |> List.toArray\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkpan155y.fsx(25,37): error FS0039: The type 'List<_>' does not define the field, constructor or member 'ToLower'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x :: xs ->\n            match x with\n            | ' ' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\t' -> histo (\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpep_er60n.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpep_er60n.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpep_er60n.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpep_er60n.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpep_er60n.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:13). Try indenting this t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Map<char, int>) (acc' : Map<char, int>) (acc'' : Map<char, int>) (acc''' : Map<char, int>) (acc'''' : Map<char, int>) (acc''''' : Map<char, int>) (acc'''''' : Map<char, int>) (acc'''''' : Map<char, int>) =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc'\n        | '\\n' -> acc''\n        | '\\r' -> acc'''\n        | '\\r' -> acc'''''\n        | '\\n' -> acc'''''\n        | '\\r' -> acc'''''''\n        | '\\t' -> acc'''''''\n        | '\\n' -> acc'''''''''\n        | '\\r' -> acc'''''''''''\n        | '\\t' -> acc'''''''''''\n        | '\\n' -> acc'''''''''''''\n        | '\\r' -> acc'''''''''''''''\n        | '\\t' -> acc'''''''''''''''\n        | '\\n' -> acc'''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''''''''''''''''\n        | '\\r' -> acc''''''''''''''''''''''''''''''''''''''''''''''\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyxv57i5z.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa99vl7c1.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x :: xs -> histo (x :: acc) xs\n    histo [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpscbope3l.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (s:string) =\n        match s with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable i = 0\n            while i < s.Length && acc.ContainsKey(s.Substring(i,1)) do\n                count <- count + 1\n                i <- i + 1\n            if count > 0 then\n                histogram' (acc.Add(s.Substring(i,1),count)) s.Substring(i)\n            else\n                acc\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphufyozvb.fsx(21,62): error FS0597: Successive arguments should be separated by spaces or tupled, and arguments involving function or method applications should be parenthesized\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvyiz774v.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (str:string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable i = 0\n            let mutable count = 0\n            while i < str.Length do\n                let c = str.[i]\n                if acc.ContainsKey c then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n                i <- i + 1\n            histogram' (acc |> Seq.fold (fun acc k -> acc.Add(k,acc.[k])) Dictionary.empty) str\n    histogram' Dictionary.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2dqvy08m.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Map<char, int>) (acc' : Map<char, int>) (acc'' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) (acc''' : Map<char, int>) =\n        match test with\n        | ' ' -> acc\n        | 'a' -> acc'\n        | 'b' -> acc''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        | 'b' -> acc'''\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpthyaadku.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable i = 0\n            let mutable count = 0\n            while i < str.Length do\n                let c = str.[i]\n                if acc.ContainsKey c then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c, 1)\n                i <- i + 1\n            histogram' (acc |> Seq.fold (fun acc k -> acc.Add(k, count)) acc)\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphg5h4q64.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            for c in str do\n                if acc.ContainsKey c then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c, 1)\n                count <- count + 1\n            histogram' (acc.Add(\"\", count)) str\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2h6s9w2q.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let s' = s.ToLower()\n            let count =\n                match s' with\n                | \"a\" -> 1\n                | \"b\" -> 1\n                | \"c\" -> 1\n                | _ -> 0\n            (s', count) :: histogram' s'\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367897,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp75txchlb.fsx(26,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    '(string * int) list'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let count = ref 0\n        let rec histo' (s:string) = \n            if s.Length = 0 then \n                count := !count + 1\n                [|s|]\n            else\n                let c = s.Substring(0,1).ToUpper() + s.Substring(1)\n                if c = test then \n                    count := !count + 1\n                    [|s|]\n                else\n                    histo' (s.Substring(1))\n        histo' s\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367897,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt0lu9c7i.fsx(28,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    'string[]'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367897,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvtm4xoyq.fsx(68,11): error FS0010: Unexpected quote symbol in pattern matching\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | ' ' -> histogram' (acc + 1) xs\n            | '\\t' -> histogram' (acc + 1) xs\n            | '\\n' -> histogram' (acc + 1) xs\n            | '\\r' -> histogram' (acc + 1) xs\n            | _ -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmgd1_g5l.fsx(23,21): error FS0001: This expression was expected to have type\n    'char list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let s = s.ToLower()\n        match s with\n        | \"a\" -> 1\n        | \"b\" -> 1\n        | \"c\" -> 1\n        | \"a b\" -> 2\n        | \"a b c\" -> 2\n        | \"b c a\" -> 4\n        | \"b c a b\" -> 4\n        | _ -> failwith \"Invalid histogram\"\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367897,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8h0pdy58.fsx(25,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    'int'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppiztw1ut.fsx(12,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppiztw1ut.fsx(12,1): error FS1241: Expected type argument or static argument\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let mutable res = Map.empty\n        for c in s do\n            match Map.tryFind c res with\n            | Some count -> res <- Map.add c count res\n            | None -> res <- Map.add c 1 res\n        res\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkscznu54.fsx(21,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let mutable count = 0\n        let mutable res = []\n        for c in s do\n            if count = 0 then\n                res <- c :: res\n            else\n                if c = res.[count - 1] then\n                    count <- count + 1\n                else\n                    res <- c :: res\n        res\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplwkod1z8.fsx(26,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    'char list'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let count = ref 0\n        let rec histogram' (s:string) =\n            match s with\n            | ' ' -> count := !count + 1\n            | '\\t' -> count := !count + 1\n            | '\\n' -> count := !count + 1\n            | '\\r' -> count := !count + 1\n            | '\\r' -> count := !count + 1\n            | '\\n' -> count := !count + 1\n            | '\\t' -> count := !count + 1\n            | '\\n' -> count := !count + 1\n            | _ -> ()\n        histogram' s\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367897,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl67jzwkg.fsx(15,15): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5o4_hqy.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (dict: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> dict\n        | _ ->\n            let mutable count = 0\n            let mutable result = dict\n            for letter in str do\n                let count = count + 1\n                let newResult =\n                    match dict.TryGetValue(letter) with\n                    | true, count -> count\n                    | false, _ -> count\n                result <- result.Add(letter, newResult)\n                histogram' result\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367897,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5aucanbn.fsx(11,31): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | 'a' -> histo (acc + 1) xs\n            | 'b' -> histo (acc + 1) xs\n            | 'c' -> histo (acc + 1) xs\n            | _ -> histo (acc + 1) xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwla02d36.fsx(22,21): error FS0001: This expression was expected to have type\n    'char list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | x::xs -> histogram' (acc + 1) xs\n        | [] -> acc\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm1e4dk1u.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) =\n        match test with\n        | \"a\" -> acc\n        | \"b\" -> acc\n        | \"c\" -> acc\n        | _ ->\n            let newAcc = Dictionary<char, int>()\n            for i in 0..(acc.Count-1) do\n                let key = acc.[i]\n                let value = acc.[i]\n                newAcc.[key] <- value\n            newAcc\n    histogram' (Dictionary()) (Dictionary()) (Dictionary()) (Dictionary()) (Dictionary()) (Dictionary())\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367897,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6qxgybmx.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | ' ' -> acc\n        | 'b' -> histogram' (acc + 1) 'b'\n        | 'a' -> histogram' (acc + 1) 'a'\n        | 'c' -> histogram' (acc + 1) 'c'\n        | _ -> acc\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzlf0venu.fsx(20,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | ' ' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | _ -> histo (acc + 1) xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpktdapi91.fsx(19,15): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpktdapi91.fsx(20,15): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpktdapi91.fsx(21,15): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpktdapi91.fsx(22,15): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpktdapi91.fsx(23,15): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpktdapi91.fsx(24,15): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpktdapi91.fsx(29,21): error FS0001: This expression was expected to have type\n    'char list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let s = s.ToLower()\n            let count = s.Length\n            let letters = s.ToCharArray()\n            let rec histo' (letters:char[]) =\n                if count = 0 then\n                    letters\n                else\n                    let count = count - 1\n                    let letters = Array.append letters (Array.sub letters 0 count)\n                    histo' letters\n            histo' letters\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgs02kj2u.fsx(25,13): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'char[]'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let mutable count = 0\n        let mutable res = []\n        for c in s do\n            if c = ' ' then\n                count <- count + 1\n            elif c = '\\t' then\n                count <- count + 1\n            elif c = '\\n' then\n                count <- count + 1\n            elif c = '\\r' then\n                count <- count + 1\n            elif c = '\\r' || c = '\\n' then\n                count <- count + 1\n            elif c = '\\b' then\n                count <- count + 1\n            elif c = '\\b' || c = '\\n' then\n                count <- count + 1\n            elif c = '\\f' then\n                count <- count + 1\n            elif c = '\\f' || c = '\\n' then\n                count <- count + 1\n            elif c = '\\v' then\n                count <- count + 1\n            elif c = '\\v' || c = '\\n' then\n                count <- count + 1\n            elif c = '\\x0' then\n                count <- count + 1\n            elif c = '\\x0' || c = '\\n' then\n                count <- count + 1\n            elif c = '\\x1' then\n                count <- count + 1\n            elif c = '\\x1' || c = '\\n' then\n                count <- count + 1\n            elif c = '\\x2' then\n                count <- count + 1\n            elif c = '\\x2' || c = '\\n' then\n                count <- count + 1\n            elif c = '\\x3' then\n                count <- count + 1\n            elif c = '\\x3' || c = '\\n' then\n                count <- count + 1\n            elif c = '\\x4' then\n                count <- count + 1\n            elif c = '\\x4' || c = '\\n' then\n                count <- count + 1\n            elif c = '\\x5' then\n                count <- count + 1\n            elif c = '\\x\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367897,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkun_46vp.fsx(37,22): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphvd5clfw.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | 'a' -> acc\n        | 'b' -> histo (acc + 1) 'b'\n        | 'c' -> histo (acc + 1) 'c'\n        | _ -> acc\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp47d_b80w.fsx(19,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let s = s.ToLower()\n        if s.Length = 0 then\n            Map.empty\n        else\n            let mutable count = 0\n            let mutable result = Map.empty\n            for letter in s do\n                let count = count + 1\n                if count > 1 then\n                    result <- Map.add letter (count) result\n            result\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb0u72l54.fsx(26,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | ' ' -> acc\n        | 'b' -> histo (acc + 1) 'b'\n        | 'a' -> histo (acc + 1) 'a'\n        | _ -> acc\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwp2jwoc8.fsx(19,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367897,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7gicil0r.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (str:string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable i = 0\n            let mutable count = 0\n            while i < str.Length do\n                if str.[i] = ' ' then\n                    count <- count + 1\n                    i <- i + 1\n                else\n                    i <- i + 1\n            if count > 0 then\n                histogram' (acc.Add(str.[0],count)) (str.Substring(1,i))\n            else\n                acc\n    histogram' (Dictionary()) test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3p8nkr_l.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367897,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfge6z3ug.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | x::xs -> histo (acc + 1) xs\n        | [] -> acc\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplt8gypaf.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let s = s.ToLower()\n        match s with\n        | \"a\" -> 1\n        | \"b\" -> 1\n        | \"c\" -> 1\n        | \"a b\" -> 2\n        | \"a b c\" -> 2\n        | \"a b c a\" -> 2\n        | \"a b c a b\" -> 2\n        | \"a b c a b c\" -> 2\n        | _ -> failwith \"Invalid histogram test\"\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbg4j9ly1.fsx(26,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    'int'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let mutable res = Map.empty\n        let mutable i = 0\n        while i < s.Length do\n            let c = s.[i]\n            if res.ContainsKey c then\n                res <- Map.add c (i + 1) res\n            else\n                res <- Map.add c 1 res\n            i <- i + 1\n        res\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp8ey3vob.fsx(25,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Map<char, int>) (acc2: Map<char, int>) (acc3: Map<char, int>) (acc4: Map<char, int>) (acc5: Map<char, int>) (acc6: Map<char, int>) (acc7: Map<char, int>) (acc8: Map<char, int>) (acc9: Map<char, int>) (acc10: Map<char, int>) (acc11: Map<char, int>) (acc12: Map<char, int>) (acc13: Map<char, int>) (acc14: Map<char, int>) (acc15: Map<char, int>) (acc16: Map<char, int>) (acc17: Map<char, int>) (acc18: Map<char, int>) (acc19: Map<char, int>) (acc20: Map<char, int>) (acc21: Map<char, int>) (acc22: Map<char, int>) (acc23: Map<char, int>) (acc24: Map<char, int>) (acc25: Map<char, int>) (acc26: Map<char, int>) (acc27: Map<char, int>) (acc28: Map<char, int>) (acc29: Map<char, int>) (acc30: Map<char, int>) (acc31: Map<char, int>) (acc32: Map<char, int>) (acc33: Map<char, int>) (acc34: Map<char, int>) (acc35: Map<char, int>) (acc36: Map<char, int>) (acc37: Map<char, int>) (acc38: Map<char, int>) (acc39: Map<char, int>) (acc40: Map<char, int>) (acc41: Map<char, int>) (acc42: Map<char, int>) (acc43: Map<char, int>) (acc44: Map<char, int>) (acc45: Map<char, int>) (acc46: Map<char, int>) (acc47: Map<char, int>) (acc48: Map<char, int>) (acc49: Map<char, int>) (acc50: Map<char, int>) (acc51: Map<char\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpra0vcblo.fsx(12,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpra0vcblo.fsx(12,1): error FS0010: Unexpected keyword 'let' or 'use' in type arguments. Expected ',' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs ->\n            let count = x.Length\n            if count > 1 then\n                histo (acc + 1) xs\n            else\n                acc + count\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2s0ytsli.fsx(14,25): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (s: string) =\n        match s with\n        | \"\" -> acc\n        | _ ->\n            let s = s.ToCharArray()\n            let s = s |> Array.rev\n            let s = s |> Array.toList\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if c = ' ' then 1 else 0)\n            let s = s |> List.map (fun c -> if\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpywa6lgvk.fsx(36,1): error FS0010: Incomplete structured construct at or before this point in expression\n\n\n\n/tmp/tmpywa6lgvk.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:13). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5o4_hqy.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs ->\n            let newAcc = histogram' (acc + 1) xs\n            histogram' newAcc xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc6k_imtn.fsx(19,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | ' ' -> acc\n        | 'b' -> histogram' (acc + 1) 'b'\n        | 'c' -> histogram' (acc + 1) 'c'\n        | _ -> acc\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp983che36.fsx(19,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let mutable count = 0\n        let mutable found = false\n        for c in s do\n            if found then\n                count <- count + 1\n            else\n                found <- true\n                count <- count + 1\n                yield count\n                yield! histogram' (c.ToString())\n        count\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxeouogtp.fsx(20,17): error FS0747: This construct may only be used within list, array and sequence expressions, e.g. expressions of the form 'seq { ... }', '[ ... ]' or '[| ... |]'. These use the syntax 'for ... in ... do ... yield...' to generate elements\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let m = s.ToLowerInvariant()\n            match m.IndexOfAny(['a'..'z']) with\n            | -1 -> Map.empty\n            | i ->\n                let count = m.Substring(i+1).ToLowerInvariant()\n                Map.add (s.Substring(0, i)) (count, count) histogram' m\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb0clzha3.fsx(16,32): error FS0001: This expression was expected to have type\n    'char[]'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let s = s.ToLower()\n            let mutable count = 0\n            let mutable result = []\n            for c in s do\n                if c = ' ' then\n                    count <- count + 1\n                elif c = '\\n' then\n                    result <- result @ [count]\n                elif c = '\\r' then\n                    result <- result @ [count]\n                elif c = '\\t' then\n                    result <- result @ [count]\n                else\n                    result <- result @ [count]\n            result\n    \n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz4os05gj.fsx(34,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    'int list'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let mutable count = 0\n        let mutable result = Map.empty\n        for letter in s do\n            if count = 0 then\n                result <- Map.add letter count result\n            else\n                let newCount = count\n                count <- count + 1\n                result <- Map.add letter newCount result\n        result\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprw0uq449.fsx(25,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvyiz774v.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (s:string) =\n        match s with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            for c in s do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            histogram' (acc |> Map.add c (acc |> Map.find c)) s\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp94g06cf5.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzj84771l.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | ' ' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | _ -> histo (acc + 1) xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5htf1kww.fsx(23,21): error FS0001: This expression was expected to have type\n    'char list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x :: xs -> histo (acc + 1) xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi7c6aeim.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | 'a' -> acc\n        | 'b' -> histogram' (acc + 1) 'b'\n        | 'c' -> histogram' (acc + 1) 'c'\n        | _ -> acc\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx5bc23dp.fsx(19,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let s = s.ToLower()\n        if s.Length = 0 then\n            Map.empty\n        else\n            let mutable count = 0\n            let mutable result = Map.empty\n            for i in 0 .. s.Length - 1 do\n                if s.[i] = 'a' then\n                    count <- count + 1\n                    result <- Map.add s.[i] count result\n                elif s.[i] = 'b' then\n                    count <- count + 1\n                    result <- Map.add s.[i] count result\n                elif s.[i] = 'c' then\n                    count <- count + 1\n                    result <- Map.add s.[i] count result\n                else\n                    result <- Map.add s.[i] count result\n            result\n    \n    let result = histogram' test\n    result |> Map.toList |> List.rev |> List.head\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptb4o1tex.fsx(36,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    'char * int'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp93uqyqi6.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5o4_hqy.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = acc\n            for c in str do\n                if acc.ContainsKey c then\n                    acc <- acc.Add(c, acc.[c] + 1)\n                else\n                    acc <- acc.Add(c, 1)\n            histogram' acc str\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu887w8af.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            for c in str do\n                if acc.ContainsKey c then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c, 1)\n                    count <- count + 1\n            histogram' (acc.Add(test, count)) str\n    histogram' (Dictionary()) test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4ctovpve.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvq2bakjg.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | x::xs -> histogram' (acc + 1) xs\n        | [] -> acc\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm1e4dk1u.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | _ -> acc\n    histogram' []\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmdtgu64v.fsx(17,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpmdtgu64v.fsx(18,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpmdtgu64v.fsx(19,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpmdtgu64v.fsx(20,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmpmdtgu64v.fsx(25,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let s = s.ToLower()\n            let rec histo' (s:string) =\n                match s with\n                | \"\" -> []\n                | _ ->\n                    let s = s.ToLower()\n                    let rec histo'' (s:string) =\n                        match s with\n                        | \"\" -> []\n                        | _ ->\n                            let s = s.ToLower()\n                            let rec histo''' (s:string) =\n                                match s with\n                                | \"\" -> []\n                                | _ ->\n                                    let s = s.ToLower()\n                                    let rec histo''''' (s:string) =\n                                        match s with\n                                        | \"\" -> []\n                                        | _ ->\n                                            let s = s.ToLower()\n                                            let rec histo''''''' (s:string) =\n                                                match s with\n                                                | \"\" -> []\n                                                | _ ->\n                                                    let s = s.ToLower()\n                                                    let rec histo''''''''' (s:string) =\n                                                        match s with\n                                                        | \"\" -> []\n                                                        | _ ->\n                                                            let s = s.ToLower()\n                                                            let rec histo''''''''''' (s:string) =\n                                                                match s with\n                                                                | \"\" -> []\n                                                                | _ ->\n                                                                    let s = s.ToLower()\n                                                                    let rec histo''''''''''' (s:string) =\n                                                                        match s with\n                                                                        | \"\" -> []\n                                                                        | _ ->\n                                                                            let s = s.ToLower()\n                                                                            let rec histo''''''''''' (s:string) =\n                                                                                match s with\n                                                                                | \"\" -> []\n                                                                                | _ ->\n                                                                                    let s = s.ToLower()\n                                                                                    let rec histo''''''''''' (s:string) =\n                                                                                        match s with\n                                                                                        | \"\" -> []\n                                                                                        | _ ->\n                                                                                            let s = s.ToLower\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplaj29dt_.fsx(65,93): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzj84771l.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvyiz774v.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzj84771l.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Map<char,int>) (s:string) =\n        match s with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = Map.empty\n            for c in s do\n                if acc.ContainsKey c then\n                    acc <- Map.add c (count + 1) acc\n                else\n                    acc <- Map.add c 1 acc\n            histogram' (acc |> Map.add ' ' count) s\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzic5f0fs.fsx(26,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | ' ' -> acc\n        | 'a' -> acc + 1\n        | 'b' -> acc + 2\n        | 'c' -> acc + 3\n        | _ -> histo (acc + 1) (List.tail test)\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe31rnsna.fsx(16,33): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (acc' : Dictionary<char, int>) (str : string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable acc = acc\n            let mutable acc' = acc'\n            let mutable i = 0\n            while i < str.Length do\n                if acc.ContainsKey(str.[i]) then\n                    acc <- acc.Add(str.[i], acc.[str.[i]] + 1)\n                else\n                    acc <- acc.Add(str.[i], 1)\n                i <- i + 1\n            histogram' acc acc' str\n    histogram' Dictionary() Dictionary() test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuw602dyc.fsx(25,16): error FS0597: Successive arguments should be separated by spaces or tupled, and arguments involving function or method applications should be parenthesized\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Map<char, int>) (acc' : Map<char, int>) (acc'' : Map<char, int>) (acc''' : Map<char, int>) (acc'''' : Map<char, int>) (acc''''' : Map<char, int>) = \n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc'\n        | '\\n' -> acc''\n        | '\\r' -> acc'''\n        | '\\r' -> acc'''''\n        | '\\n' -> acc'''''\n        | '\\t' -> acc'''''\n        | '\\n' -> acc'''''''\n        | '\\r' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\n' -> acc'''''''''''\n        | '\\r' -> acc'''''''''''''\n        | '\\t' -> acc'''''''''''''\n        | '\\n' -> acc'''''''''''''''\n        | '\\r' -> acc'''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''\n        | '\\\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2pyj_k90.fsx(41,11): error FS0010: Unexpected quote symbol in pattern matching\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let s = s.ToLower()\n            match s with\n            | \"a\" -> [1]\n            | \"b\" -> [1;2]\n            | \"c\" -> [1;2;3]\n            | _ -> histogram' s\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgpkjo76b.fsx(24,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    'int list'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let mutable count = 0\n            let mutable result = []\n            for letter in s do\n                if count = 0 then\n                    result <- (letter, count) :: result\n                else\n                    let mutable count = count - 1\n                    if count = 0 then\n                        result <- (letter, count) :: result\n                    else\n                        let mutable count = count - 1\n                        if count = 0 then\n                            result <- (letter, count) :: result\n                        else\n                            let mutable count = count - 1\n                            if count = 0 then\n                                result <- (letter, count) :: result\n                            else\n                                let mutable count = count - 1\n                                if count = 0 then\n                                    result <- (letter, count) :: result\n                                else\n                                    let mutable count = count - 1\n                                    if count = 0 then\n                                        result <- (letter, count) :: result\n                                    else\n                                        let mutable count = count - 1\n                                        if count = 0 then\n                                            result <- (letter, count) :: result\n                                        else\n                                            let mutable count = count - 1\n                                            if count = 0 then\n                                                result <- (letter, count) :: result\n                                            else\n                                                let mutable count = count - 1\n                                                if count = 0 then\n                                                    result <- (letter, count) :: result\n                                                else\n                                                    let mutable count = count - 1\n                                                    if count = 0 then\n                                                        result <- (letter, count) :: result\n                                                    else\n                                                        let mutable count = count - 1\n                                                        if count = 0 then\n                                                            result <- (letter, count) :: result\n                                                        else\n                                                            let mutable count = count - 1\n                                                            if count = 0 then\n                                                                result <- (letter, count) :: result\n                                                            else\n                                                                let mutable count = count - 1\n                                                                if count = 0 then\n                                                                    result <- (letter, count) :: result\n                                                                else\n                                                                    let mutable count = count - 1\n                                                                    if count = 0 then\n                                                                        result <- (letter,\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwvdtam81.fsx(72,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (70:69). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwvdtam81.fsx(72,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (70:69). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwvdtam81.fsx(84,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (70:69). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwvdtam81.fsx(84,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (70:69). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwvdtam81.fsx(84,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (70:69). Try indenting this to",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let mutable count = 0\n        let mutable result = Map.empty\n        for c in s do\n            if count = 0 then\n                result <- Map.add c count result\n            else\n                let newCount = Map.find c result\n                count <- newCount\n                result <- Map.add c newCount result\n        result\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp95l_d7nh.fsx(25,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5o4_hqy.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let mutable count = 0\n        let mutable result = Map.empty\n        for c in s do\n            if result.ContainsKey c then\n                count <- count + 1\n                result <- Map.add c (count) result\n            else\n                result <- Map.add c 1 result\n        result\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprl_0ahqs.fsx(24,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let s = s.ToLower()\n            let count =\n                match s with\n                | \"a\" -> 1\n                | \"b\" -> 1\n                | \"c\" -> 1\n                | _ -> 0\n            let letters = s.ToCharArray()\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 1)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 1)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 1)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 1)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 1)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 1)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 1)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 1)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 1)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 1)\n            let letters = letters |> Array.map (fun\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpskrky_18.fsx(44,1): error FS0010: Incomplete structured construct at or before this point in lambda expression\n\n\n\n/tmp/tmpskrky_18.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (43:13). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | _ -> histogram' (acc + 1)\n    histogram' 0\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmporax6m_e.fsx(17,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmporax6m_e.fsx(18,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmporax6m_e.fsx(19,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmporax6m_e.fsx(24,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5o4_hqy.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | ' ' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | _ -> histo (acc + 1) xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps1yen7ts.fsx(19,15): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmps1yen7ts.fsx(24,21): error FS0001: This expression was expected to have type\n    'char list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmqkjx4ak.fsx(68,11): error FS0010: Unexpected quote symbol in pattern matching\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let s = s.ToLower()\n            let count =\n                match s with\n                | \"a\" -> 1\n                | \"b\" -> 1\n                | \"c\" -> 1\n                | _ -> 0\n            s.ToCharArray()\n            |> Array.map (fun c ->\n                if c = 'a' then count + 1\n                elif c = 'b' then count + 1\n                elif c = 'c' then count + 1\n                else count)\n            |> List.ofArray\n            |> List.rev\n            |> List.map (fun c ->\n                if c = 'a' then 1\n                elif c = 'b' then 1\n                elif c = 'c' then 1\n                else 0)\n            |> List.sum\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5ffixhzy.fsx(31,24): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs ->\n            let count = x |> List.length\n            if count > 1 then\n                histogram' (x :: acc) xs\n            else\n                acc\n    histogram' [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu8wqd7w8.fsx(22,21): error FS0001: This expression was expected to have type\n    ''a list list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs ->\n            if test x then histo (x::acc) xs\n            else histo (x::acc) xs\n    histo [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkb4oza6y.fsx(16,14): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    ''a -> bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | _ -> histo (acc + 1)\n    histo 0\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpihfyjrsx.fsx(21,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | _ -> histo (acc + 1)\n    histo 0\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpihfyjrsx.fsx(21,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Map<string,int>) (s:string) =\n        match s with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | _ -> histogram' (acc |> Map.add s (acc |> Map.find s)) (s.ToCharArray())\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp011r6z68.fsx(13,11): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | 'a' -> acc + 1\n        | 'b' -> acc + 1\n        | 'c' -> acc + 1\n        | _ -> histo (acc + 1) test\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgz9ls50d.fsx(19,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | ' ' -> acc\n        | '\\t' -> histo (acc + 1) '\\t'\n        | '\\n' -> histo (acc + 1) '\\n'\n        | '\\r' -> histo (acc + 1) '\\r'\n        | _ -> acc\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmjhlht1m.fsx(20,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> \n            let newAcc = x :: acc\n            histogram' newAcc xs\n    histogram' [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367900,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc8kjbjc2.fsx(19,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let rec histo' (s:string) =\n            let s' = s.ToLower()\n            if s' = test then\n                s\n            else\n                s' + \" \" + histo' s'\n        histo' s\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn1kx76kn.fsx(22,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    'string'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvyiz774v.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable found = false\n            for c in str do\n                if found then\n                    count <- count + 1\n                else\n                    found <- true\n                    acc.Add(c, count)\n            histogram' (acc.Add(test, count)) (str.Substring(0, count))\n    histogram' (Dictionary()) test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqv5qnini.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let rec histogram' (s:string) =\n            let s' = s.ToLower()\n            if s' = test then\n                s.ToCharArray()\n                |> Array.map (fun c -> c.ToCharArray() |> Array.map (fun c' -> c'))\n                |> Array.reduce (fun x y -> x + y)\n            else\n                histogram' s'\n        histogram' s\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmt2kqo69.fsx(16,42): error FS0039: The type 'Char' does not define the field, constructor or member 'ToCharArray'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let m = Map.empty\n            for c in s do\n                match Map.tryFind c m with\n                | Some(x) -> m <- Map.add c x m\n                | None -> m <- Map.add c 1 m\n            m\n    \n    let rec histogram'' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let m = Map.empty\n            for c in s do\n                match Map.tryFind c m with\n                | Some(x) -> m <- Map.add c x m\n                | None -> m <- Map.add c 1 m\n            m\n    \n    let rec histogram''' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let m = Map.empty\n            for c in s do\n                match Map.tryFind c m with\n                | Some(x) -> m <- Map.add c x m\n                | None -> m <- Map.add c 1 m\n            m\n    \n    histogram' test\n    histogram''' test\n    histogram'''' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4qlcajne.fsx(18,30): error FS0027: This value is not mutable. Consider using the mutable keyword, e.g. 'let mutable m = expression'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | \"\" -> Map.empty\n        | _ -> \n            let m = Map.empty\n            let mutable i = 0\n            while i < s.Length do\n                let c = s.[i]\n                if c = ' ' then \n                    m <- Map.add c i m\n                else\n                    i <- i + 1\n            m\n    \n    let rec histogram' (s:string) = \n        match s with\n        | \"\" -> Map.empty\n        | _ -> \n            let m = Map.empty\n            let mutable i = 0\n            while i < s.Length do\n                let c = s.[i]\n                if c = ' ' then \n                    m <- Map.add c i m\n                else\n                    i <- i + 1\n            m\n    \n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwga2uqkt.fsx(20,21): error FS0027: This value is not mutable. Consider using the mutable keyword, e.g. 'let mutable m = expression'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = acc\n            for c in str do\n                if acc.ContainsKey c then\n                    acc <- acc.Add(c, acc.[c] + 1)\n                else\n                    acc <- acc.Add(c, 1)\n            histogram' acc (str.Substring(0, str.Length - 1))\n    histogram' Dictionary.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq5ho864w.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let rec histogram' (s:string) =\n            let letters = s.ToCharArray()\n            let count = \n                letters \n                |> Array.filter (fun c -> c <> ' ')\n                |> Array.map (fun c -> c.ToString())\n                |> Array.sum\n            if count = 0 then\n                None\n            else\n                Some(letters, count)\n        histogram' s\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp62ahicne.fsx(18,20): error FS0001: The type 'string' does not support the operator 'get_Zero'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (acc' : Dictionary<char, int>) (str : string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable acc' = acc\n            let mutable acc = acc'\n            for c in str do\n                match acc.TryGetValue c with\n                | true, count -> acc <- acc'.[c] + count\n                | _ -> acc <- acc'.[c]\n            histogram' acc' acc' (str.Substring(0, str.Length - 1))\n    histogram' Dictionary.empty Dictionary.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3rbmn__x.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (s:string) =\n        match s with\n        | \"\" -> acc\n        | _ ->\n            let mutable i = 0\n            let mutable acc = Dictionary<char,int>()\n            while i < s.Length do\n                acc <- acc.Add(s.[i],i)\n                i <- i + 1\n            histogram' acc s\n    histogram' Dictionary.Empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp482muiml.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | 'a' -> acc\n        | 'b' -> histogram' (acc + 1) 'b'\n        | 'c' -> histogram' (acc + 1) 'c'\n        | _ -> acc\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx5bc23dp.fsx(19,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (s:string) =\n        match s with\n        | \"\" -> acc\n        | _ ->\n            let s = s.ToLower()\n            let acc' = acc.Add(s,acc.Count + 1)\n            let s' = s.ToUpper()\n            if s' = s then histogram' acc' s'\n            else histogram' acc' s'\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr7k9qdrn.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (acc' : Dictionary<char,int>) (str : string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable i = 0\n            let mutable acc' = acc\n            while i < str.Length do\n                let c = str.[i]\n                if acc.ContainsKey(c) then\n                    acc' <- acc'.[c] + 1\n                else\n                    acc' <- acc'.[c]\n                i <- i + 1\n            histogram' acc' acc' (str.Substring(i))\n    histogram' (Dictionary()) (Dictionary()) test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4ao433ut.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let rec histogram' (s:string) =\n            let mutable count = 0\n            let mutable found = false\n            for c in s do\n                if found then\n                    count <- count + 1\n                else\n                    found <- true\n                    yield count\n                    count <- 0\n                if c = test then\n                    count <- count + 1\n            if count = 0 then\n                None\n            else\n                Some(count, histogram' (s.Substring(0, count)))\n        histogram' s\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpw8qxa9x5.fsx(20,21): error FS0747: This construct may only be used within list, array and sequence expressions, e.g. expressions of the form 'seq { ... }', '[ ... ]' or '[| ... |]'. These use the syntax 'for ... in ... do ... yield...' to generate elements\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c, 1)\n                    count <- count + 1\n            histogram' (acc.Add(test, count)) str\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp57te2hra.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let mutable count = 0\n        let mutable result = Map.empty\n        for letter in s do\n            if count = 0 then\n                result <- Map.add letter count result\n            else\n                let count = count + 1\n                if count > 1 then\n                    result <- Map.add letter (count - 1) result\n        result\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9_5a6ukg.fsx(25,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (str:string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = Dictionary<char,int>()\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c,1)\n            for c in acc do\n                if c = ' ' then\n                    count <- count + 1\n            if count > 0 then\n                histogram' acc (str.Substring(0, count))\n            else\n                acc\n    histogram' Dictionary.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo34qvty3.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvyiz774v.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (acc' : Dictionary<char,int>) (acc'' : Dictionary<char,int>) (acc''' : Dictionary<char,int>) (acc'''' : Dictionary<char,int>) (acc''''' : Dictionary<char,int>) (acc'''''' : Dictionary<char,int>) (acc''''''' : Dictionary<char,int>) =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc'\n        | '\\n' -> acc''\n        | '\\r' -> acc'''\n        | '\\r' -> acc'''''\n        | '\\n' -> acc'''''\n        | '\\r' -> acc'''''''\n        | '\\t' -> acc'''''''\n        | '\\n' -> acc'''''''''\n        | '\\r' -> acc'''''''''''\n        | '\\t' -> acc'''''''''''\n        | '\\n' -> acc'''''''''''''\n        | '\\r' -> acc'''''''''''''''\n        | '\\t' -> acc'''''''''''''''\n        | '\\n' -> acc'''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''\n        | '\\n' -> acc''''''''\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7foqlt90.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5o4_hqy.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let s = s.ToLower()\n            let count = \n                match s with\n                | \"a\" -> 1\n                | \"b\" -> 1\n                | \"c\" -> 1\n                | _ -> 0\n            let letters = s.ToCharArray()\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 0)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 0)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 0)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 0)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 0)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 0)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 0)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 0)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 0)\n            let letters = letters |> Array.map (fun c -> c.ToString())\n            let letters = letters |> Array.filter (fun c -> c.Length > 0)\n            let letters = letters |> Array.map (\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprh_ejt1k.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (43:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprh_ejt1k.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (43:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprh_ejt1k.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (43:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprh_ejt1k.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (43:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprh_ejt1k.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (43:13). Try indenting this to",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let s = s.ToLower()\n        match s with\n        | \"a\" -> 1\n        | \"b\" -> 1\n        | \"c\" -> 1\n        | _ ->\n            let mutable count = 0\n            for letter in s do\n                if count = 0 then\n                    count <- count + 1\n                else\n                    count <- count + 1\n                    if count = s.Length then\n                        count <- count + 1\n                    else\n                        count <- count + 1\n            count\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpslc1__b7.fsx(32,33): error FS0193: Type constraint mismatch. The type \n    'Map<string,int>'    \nis not compatible with type\n    'int'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let mutable count = 0\n        let mutable result = Map.empty\n        for letter in s do\n            let count = count + 1\n            if count = 1 then\n                result <- Map.add letter result Map.empty\n            else\n                let newResult = Map.add letter result\n                result <- newResult\n        result\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyo3178g8.fsx(17,42): error FS0001: Type mismatch. Expecting a\n    ''a'    \nbut given a\n    'Map<char,'a>'    \nThe types ''a' and 'Map<char,'a>' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x :: xs -> histo (acc + 1) xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi7c6aeim.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvyiz774v.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5o4_hqy.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | 'a' -> acc + 1\n        | 'b' -> acc + 1\n        | 'c' -> acc + 1\n        | _ -> histo (acc + 1) (test())\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpliccuz6s.fsx(16,13): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'unit -> char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (acc' : Dictionary<char, int>) (acc'' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc'''' : Dictionary<char, int>) (acc''''' : Dictionary<char, int>) =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc'\n        | '\\n' -> acc''\n        | '\\r' -> acc'''\n        | '\\r' -> acc'''''\n        | '\\n' -> acc'''''\n        | '\\r' -> acc'''''''\n        | '\\t' -> acc'''''''\n        | '\\n' -> acc'''''''''\n        | '\\r' -> acc'''''''''''\n        | '\\t' -> acc'''''''''''\n        | '\\n' -> acc'''''''''''''\n        | '\\r' -> acc'''''''''''''''\n        | '\\t' -> acc'''''''''''''''\n        | '\\n' -> acc'''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''''''''\n        | '\\n' -> acc'''''''''''''''''''''''''\n        | '\\r' -> acc'''''''''''''''''''''''''''\n        | '\\t' -> acc'''''''''''''''''''''''''''''''''''\n        | '\\n' -> acc\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptjdkx31p.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp93uqyqi6.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs ->\n            let newAcc = x::acc\n            histo newAcc xs\n    histo [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfhwc4xwa.fsx(19,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzj84771l.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let s = s.ToLower()\n            let m = Map.empty\n            for i = 0 to s.Length - 1 do\n                let c = s.[i]\n                if c = 'a' then\n                    m <- Map.add c (i+1) m\n                elif c = 'b' then\n                    m <- Map.add c (i+1) m\n                elif c = 'c' then\n                    m <- Map.add c (i+1) m\n            m\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpk685qao_.fsx(20,21): error FS0027: This value is not mutable. Consider using the mutable keyword, e.g. 'let mutable m = expression'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let m = Map.empty\n            for i = 0 to s.Length - 1 do\n                match s.[i] with\n                | ' ' -> m <- Map.add i (i + 1) m\n                | _ -> m <- Map.add i (i + 1) m\n            m\n    \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let m = Map.empty\n            for i = 0 to s.Length - 1 do\n                match s.[i] with\n                | ' ' -> m <- Map.add i (i + 1) m\n                | _ -> m <- Map.add i (i + 1) m\n            m\n    \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let m = Map.empty\n            for i = 0 to s.Length - 1 do\n                match s.[i] with\n                | ' ' -> m <- Map.add i (i + 1) m\n                | _ -> m <- Map.add i (i + 1) m\n            m\n    \n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvb70s197.fsx(18,26): error FS0027: This value is not mutable. Consider using the mutable keyword, e.g. 'let mutable m = expression'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (acc' : Dictionary<char, int>) (acc'' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc''' : Dictionary<char, int>) (acc'''\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpot9ns4cy.fsx(12,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpot9ns4cy.fsx(12,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvyiz774v.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        let s = s.ToLower()\n        match s with\n        | \"a\" -> 1\n        | \"b\" -> 1\n        | \"c\" -> 1\n        | _ ->\n            let s = s.Substring(0,1).ToLower()\n            match s with\n            | \"a\" -> 1\n            | \"b\" -> 1\n            | \"c\" -> 1\n            | _ ->\n                let s = s.Substring(1)\n                match s with\n                | \"a\" -> 1\n                | \"b\" -> 1\n                | \"c\" -> 1\n                | _ ->\n                    let s = s.Substring(1)\n                    match s with\n                    | \"a\" -> 1\n                    | \"b\" -> 1\n                    | \"c\" -> 1\n                    | _ ->\n                        let s = s.Substring(1)\n                        match s with\n                        | \"a\" -> 1\n                        | \"b\" -> 1\n                        | \"c\" -> 1\n                        | _ ->\n                            let s = s.Substring(1)\n                            match s with\n                            | \"a\" -> 1\n                            | \"b\" -> 1\n                            | \"c\" -> 1\n                            | _ ->\n                                let s = s.Substring(1)\n                                match s with\n                                | \"a\" -> 1\n                                | \"b\" -> 1\n                                | \"c\" -> 1\n                                | _ ->\n                                    let s = s.Substring(1)\n                                    match s with\n                                    | \"a\" -> 1\n                                    | \"b\" -> 1\n                                    | \"c\" -> 1\n                                    | _ ->\n                                        let s = s.Substring(1)\n                                        match s with\n                                        | \"a\" -> 1\n                                        | \"b\" -> 1\n                                        | \"c\" -> 1\n                                        | _ ->\n                                            let s = s.Substring(1)\n                                            match s with\n                                            | \"a\" -> 1\n                                            | \"b\" -> 1\n                                            | \"c\" -> 1\n                                            | _ ->\n                                                let s = s.Substring(1)\n                                                match s with\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpybpo8brz.fsx(74,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (73:49). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpybpo8brz.fsx(74,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (73:49). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpybpo8brz.fsx(74,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n\n\n/tmp/tmpybpo8brz.fsx(86,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (73:49). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpybpo8brz.fsx(86,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (73:49). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzj84771l.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | _ -> histogram' (acc + 1)\n    histogram' 0\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppvoxtnya.fsx(17,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmppvoxtnya.fsx(18,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmppvoxtnya.fsx(19,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmppvoxtnya.fsx(20,11): warning FS0026: This rule will never be matched\n\n\n\n/tmp/tmppvoxtnya.fsx(25,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = Dictionary<char, int>()\n            for c in str do\n                if acc.ContainsKey c then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c, 1)\n            for c in acc do\n                acc.[c] <- acc.[c] - 1\n            histogram' acc str\n    histogram' Dictionary.Empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmbwp4yev.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5o4_hqy.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let letters = s.ToCharArray()\n        let count = letters |> Array.fold (fun acc x -> acc + x.Length) 0\n        if count > 1 then\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.Length > count)\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.Length < count)\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.Length < count)\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.Length > count)\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.Length < count)\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.Length < count)\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.Length > count)\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.Length < count)\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.Length < count)\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.Length > count)\n            let letters = letters |> Array.map (fun x -> x.ToCharArray())\n            let letters = letters |> Array.filter (fun x -> x.\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptaii2ygy.fsx(36,62): error FS0599: Missing qualification after '.'\n\n\n\n/tmp/tmptaii2ygy.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:13). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> []\n        | _ ->\n            let mutable count = 0\n            let mutable result = []\n            for letter in s do\n                if count = 0 then\n                    result <- (letter, count) :: result\n                else\n                    let mutable count = count - 1\n                    if count = 0 then\n                        result <- (letter, count) :: result\n                    else\n                        let mutable count = count - 1\n                        if count = 0 then\n                            result <- (letter, count) :: result\n                        else\n                            let mutable count = count - 1\n                            if count = 0 then\n                                result <- (letter, count) :: result\n                            else\n                                let mutable count = count - 1\n                                if count = 0 then\n                                    result <- (letter, count) :: result\n                                else\n                                    let mutable count = count - 1\n                                    if count = 0 then\n                                        result <- (letter, count) :: result\n                                    else\n                                        let mutable count = count - 1\n                                        if count = 0 then\n                                            result <- (letter, count) :: result\n                                        else\n                                            let mutable count = count - 1\n                                            if count = 0 then\n                                                result <- (letter, count) :: result\n                                            else\n                                                let mutable count = count - 1\n                                                if count = 0 then\n                                                    result <- (letter, count) :: result\n                                                else\n                                                    let mutable count = count - 1\n                                                    if count = 0 then\n                                                        result <- (letter, count) :: result\n                                                    else\n                                                        let mutable count = count - 1\n                                                        if count = 0 then\n                                                            result <- (letter, count) :: result\n                                                        else\n                                                            let mutable count = count - 1\n                                                            if count = 0 then\n                                                                result <- (letter, count) :: result\n                                                            else\n                                                                let mutable count = count - 1\n                                                                if count = 0 then\n                                                                    result <- (letter, count) :: result\n                                                                else\n                                                                    let mutable count = count - 1\n                                                                    if count = 0 then\n                                                                        result <- (letter,\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367899,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwvdtam81.fsx(72,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (70:69). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwvdtam81.fsx(72,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (70:69). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwvdtam81.fsx(84,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (70:69). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwvdtam81.fsx(84,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (70:69). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwvdtam81.fsx(84,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (70:69). Try indenting this to",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Map<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable acc = Map.empty\n            for c in str do\n                if acc.ContainsKey c then\n                    acc <- Map.add c (count + 1) acc\n                else\n                    acc <- Map.add c 1 acc\n            histogram' (acc |> Map.add ' ' count) str\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprkhizqu3.fsx(26,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs ->\n            let newAcc = histogram' (acc + 1) xs\n            histogram' newAcc xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367898,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc6k_imtn.fsx(19,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs -> histogram' (acc + 1) xs\n    histogram' 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367896,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzj84771l.fsx(17,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367894,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp93uqyqi6.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (s: string) =\n        if s.Length = 0 then\n            acc\n        else\n            let c = s.[0]\n            let count = acc.ContainsKey c\n            if count then\n                acc.[c] <- acc.[c] + 1\n            else\n                acc.Add(c, 1)\n                histogram' acc s.[1..]\n    histogram' Dictionary.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvf_eav06.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | \"\" -> Map.empty\n        | _ -> \n            let mutable count = 0\n            let mutable result = Map.empty\n            for c in s do\n                if count = 0 then\n                    result <- Map.add c count result\n                else\n                    let newCount = count + 1\n                    if newCount = s.Length then\n                        result <- Map.add c newCount result\n                    else\n                        let newResult = Map.add c newCount result\n                        histogram' s\n                        result <- newResult\n            result\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphwjps66x.fsx(26,25): warning FS0020: The result of this expression has type 'Map<'a,'b>' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmphwjps66x.fsx(32,39): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\t' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        \nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_7u_jmy5.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let s = s.ToLower()\n            let m = Map.empty\n            for i in 0..s.Length-1 do\n                let c = s.[i]\n                if c = ' ' then\n                    m <- Map.add c (i+1) m\n                else\n                    m <- Map.add c i m\n            m\n    let s = test\n    histogram' s\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoq71nkzu.fsx(20,21): error FS0027: This value is not mutable. Consider using the mutable keyword, e.g. 'let mutable m = expression'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        match s with\n        | \"\" -> Map.empty\n        | _ -> \n            let m = Map.empty\n            for c in s do\n                match Map.tryFind c m with\n                | Some count -> m <- Map.add c (count + 1) m\n                | None -> m <- Map.add c 1 m\n            m\n    let rec histogram' (s:string) = \n        match s with\n        | \"\" -> Map.empty\n        | _ -> \n            let m = Map.empty\n            for c in s do\n                match Map.tryFind c m with\n                | Some count -> m <- Map.add c (count + 1) m\n                | None -> m <- Map.add c 1 m\n            m\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgbdqi7a8.fsx(18,33): error FS0027: This value is not mutable. Consider using the mutable keyword, e.g. 'let mutable m = expression'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x :: xs ->\n            let count = xs |> List.length\n            if count > 0 then\n                histo (x :: acc) xs\n            else\n                acc\n    histo [] test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_dus601r.fsx(22,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            for c in str do\n                if acc.ContainsKey(c) then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c, 1)\n            histogram' (acc |> Map.add c) str\n    histogram' Map.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcrpisvje.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let s = s.ToLower()\n        match s with\n        | \"a\" -> 1\n        | \"b\" -> 1\n        | \"c\" -> 1\n        | _ -> \n            let mutable count = 0\n            let mutable result = Map.empty\n            for letter in s do\n                if count = 0 then\n                    result <- Map.add letter result Map.empty\n                else\n                    let count = count + 1\n                    if result.ContainsKey letter then\n                        result <- Map.add letter result Map.empty\n                    else\n                        result <- Map.add letter result Map.empty\n            result\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367903,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8cpesajg.fsx(22,46): error FS0001: Type mismatch. Expecting a\n    ''a'    \nbut given a\n    'Map<char,'a>'    \nThe types ''a' and 'Map<char,'a>' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) (acc: Dictionary<char, int>) =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n'\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmjpvlpz4.fsx(66,1): error FS0010: Incomplete structured construct at or before this point in pattern matching. Expected '->' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (str:string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable i = 0\n            let mutable count = 0\n            while i < str.Length do\n                if str.[i] = ' ' then\n                    count <- count + 1\n                    i <- i + 1\n                else\n                    if count = 0 then\n                        acc.Add(str.[i])\n                    else\n                        acc.Add(str.[i], count)\n                    i <- i + 1\n            histogram' (acc.Add(str.[i])) (str.Substring(i))\n    histogram' (Dictionary()) test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwfyf_f50.fsx(11,29): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histo acc = function\n        | [] -> acc\n        | x::xs ->\n            let newAcc = acc + 1\n            histo newAcc xs\n    histo 0 test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367903,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_wzm604m.fsx(19,21): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc: Map<char, int>) (acc' : Map<char, int>) (acc'' : Map<char, int>) (acc''' : Map<char, int>) (acc'''' : Map<char, int>) (acc''''' : Map<char, int>) =\n        match test with\n        | ' ' -> acc\n        | '\\n' -> acc'\n        | '\\t' -> acc''\n        | '\\r' -> acc'''\n        | '\\r' -> acc'''''\n        | '\\t' -> acc'''''\n        | '\\t' -> acc'''''''\n        | '\\t' -> acc'''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc'''''''''\n        | '\\t' -> acc''''''''\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp64dlupp6.fsx(11,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367895,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppiztw1ut.fsx(12,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppiztw1ut.fsx(12,1): error FS1241: Expected type argument or static argument\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let s = s.ToLower()\n            let m = Map.empty\n            for i in 0..s.Length-1 do\n                let c = s.[i]\n                if c = ' ' || c = '\\t' || c = '\\n' || c = '\\r' then\n                    m <- m.Add(c, i)\n                else\n                    m <- m.Add(c, i)\n            m\n    histogram' test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367903,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqq7psael.fsx(20,21): error FS0027: This value is not mutable. Consider using the mutable keyword, e.g. 'let mutable m = expression'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (s:string) = \n        let rec histogram' (s:string) = \n            let s' = s.ToLower()\n            if s' = \"\" then\n                s\n            else\n                let s' = s' + \" \"\n                let s'' = s' + \" \"\n                let s''' = s'' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s''' + \" \"\n                let s''' = s'''\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf8tn6uv3.fsx(52,17): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n    let rec histogram' (dict:Dictionary<char,int>) (str:string) = \n        match str with\n        | \"\" -> dict\n        | _ -> \n            let mutable count = 0\n            let mutable letter = str.[0]\n            for i in 0..(str.Length-1) do\n                if dict.ContainsKey(letter) then\n                    count <- count + 1\n                    dict.[letter] <- count\n                else\n                    count <- count + 1\n                    dict.Add(letter,count)\n            histogram' dict (str.Substring(1))\n    histogram' Dictionary.empty test\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675367902,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzpnh7sdt.fsx(11,30): error FS0039: The type 'Dictionary' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}