{
  "name": "HumanEval_152_compare",
  "language": "fs",
  "prompt": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n",
  "tests": "let test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkurbwu1a.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game.Score guess\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun x -> score.[x] - score.[x-1])\n    if diff.Length = 0 then 0 else diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdq1ird6s.fsx(13,17): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess.Length - score.Length\n    if diff = 0 then\n        score\n    else\n        let diff = diff / 2\n        let guess = guess |> Array.sub guess diff\n        let score = score |> Array.sub score diff\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let diff = guess.Length - score.Length\n        if diff = 0 then\n            score\n        else\n            let diff = diff / 2\n            let guess = guess |> Array.sub guess diff\n            let score = score |> Array.sub score diff\n            let guess = guess |> Array.toList\n            let score = score |> Array.toList\n            let diff = guess.Length - score.Length\n            if diff = 0 then\n                score\n            else\n                let diff = diff / 2\n                let guess = guess |> Array.sub guess diff\n                let score = score |> Array.sub score diff\n                let guess = guess |> Array.toList\n                let score = score |> Array.toList\n                let diff = guess.Length - score.Length\n                if diff = 0 then\n                    score\n                else\n                    let diff = diff / 2\n                    let guess = guess |> Array.sub guess diff\n                    let score = score |> Array.sub score diff\n                    let guess = guess |> Array.toList\n                    let score = score |> Array.toList\n                    let diff = guess.Length - score.Length\n                    if diff = 0 then\n                        score\n                    else\n                        let diff = diff / 2\n                        let guess = guess |> Array.sub guess diff\n                        let score = score |> Array.sub score diff\n                        let guess = guess |> Array.toList\n                        let score = score |> Array.toList\n                        let diff = guess.Length - score.Length\n                        if diff = 0 then\n                            score\n                        else\n                            let diff = diff / 2\n                            let guess = guess |> Array.sub guess diff\n                            let score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4fihl0ep.fsx(68,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.length\n    let guess = guess |> Array.map (fun x -> x - guess.[0])\n    let score = score |> Array.length\n    let guess = guess |> Array.map (fun x -> x / score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |> Array.map (fun x -> x * score)\n    let score = score |> Array.sum\n    let guess = guess |>\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3wt7bx19.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp3wt7bx19.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp3wt7bx19.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp3wt7bx19.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp3wt7bx19.fsx(46,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun x -> score.[x] - score.[x+1])\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x / 2)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    \nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjaz8ssez.fsx(39,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x,\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt_v85xh4.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(28,36): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Score)\n    let score = guess |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.sumBy (fun\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr42eqjbo.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in lambda expression\n\n\n\n/tmp/tmpr42eqjbo.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:5). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> List.map (fun x -> x, guess.Length)\n    let score = score |> List.map (fun (x,y) -> x, y)\n    let diff = guess |> List.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff |> List.map (fun x -> abs x)\n    let diff = diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnp7_fyp4.fsx(40,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let diff = guess.Length - score.Length\n    if diff = 0 then\n        score\n    else\n        let diff = diff / 2\n        let guess = guess |> Array.toList\n        let score = score |> Array.map (fun x -> x.Score)\n        let guess = guess |> Array.toList\n        let score = score |> Array.map (fun x -> x.Score)\n        let diff = diff - diff\n        if diff = 0 then\n            score\n        else\n            let diff = diff / 2\n            let guess = guess |> Array.toList\n            let score = score |> Array.map (fun x -> x.Score)\n            let guess = guess |> Array.toList\n            let score = score |> Array.map (fun x -> x.Score)\n            let diff = diff - diff\n            if diff = 0 then\n                score\n            else\n                let diff = diff / 2\n                let guess = guess |> Array.toList\n                let score = score |> Array.map (fun x -> x.Score)\n                let guess = guess |> Array.toList\n                let score = score |> Array.map (fun x -> x.Score)\n                let diff = diff - diff\n                if diff = 0 then\n                    score\n                else\n                    let diff = diff / 2\n                    let guess = guess |> Array.toList\n                    let score = score |> Array.map (fun x -> x.Score)\n                    let guess = guess |> Array.toList\n                    let score = score |> Array.map (fun x -> x.Score)\n                    let diff = diff - diff\n                    if diff = 0 then\n                        score\n                    else\n                        let diff = diff / 2\n                        let guess = guess |> Array.toList\n                        let score = score |> Array.map (fun x -> x.Score)\n                        let guess = guess |> Array.toList\n                        let score =\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpw0f_9pkz.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (60:25). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw0f_9pkz.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (60:25). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw0f_9pkz.fsx(69,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (60:25). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw0f_9pkz.fsx(69,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (60:25). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw0f_9pkz.fsx(69,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (60:25). Try indenting this t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun guess -> guess - score) |> List.sum\n    if diff = 0 then\n        score\n    else\n        diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkvp2u_5e.fsx(14,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.map (fun x -> x - guess.[0])\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxj34j3uu.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppjlku0np.fsx(38,23): error FS0010: Unexpected symbol '|' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.sumBy (fun x -> game.[x] - guess.[x])\n    [score; guess]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbl0_ndqs.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.guess)\n    let score = guess |> Array.sumBy (fun x -> x * game.score)\n    let diff = guess |> Array.map (fun x -> x - score)\n    let diff = diff |> Array.map (fun x -> x * game.difficulty)\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgtf09aji.fsx(12,50): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.sumBy (fun x -> x.Value)\n    let diff = score - guess.Length\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmy15z12q.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq guess\n    let rec loop score guess = \n        match guess with\n        | [] -> score\n        | x::xs -> \n            let diff = score.[x] - score.[x]\n            if diff < 0 then loop (score.[x] + diff) xs\n            else loop (score.[x] - diff) xs\n    loop score guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpg7h_mx33.fsx(18,24): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt3x2sfij.fsx(68,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec loop (guess:int[]) (score:int) = \n        match guess with\n        | x::xs -> \n            if x = score then \n                loop xs (score+1)\n            else\n                loop xs (score+1)\n        | [] -> \n            score\n    loop guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4ik5u2o6.fsx(14,11): error FS0001: This expression was expected to have type\n    'int[]'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let guess = guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo97w95j8.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let diff = Array.zip score guess\n    let diff = Array.map2 (fun x y -> x - y) diff 0\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc6qzep__.fsx(13,82): error FS0001: Expecting a type supporting the operator '-' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let rec loop score guess =\n        match guess, score with\n        | [], _ -> [score]\n        | _, _ -> \n            let guess = guess |> Array.map (fun x -> x, guess.[x])\n            let score = guess |> Array.map (fun x -> x, guess.[x])\n            loop score guess\n    loop score guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyrxqu7b6.fsx(13,56): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game.Score guess\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun x -> score.[x] - score.[x-1])\n    let diff = diff |> List.map (fun x -> x / 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff =\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9dezoupw.fsx(41,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (40:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9dezoupw.fsx(41,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (40:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9dezoupw.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (40:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9dezoupw.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (40:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9dezoupw.fsx(40,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let diff = score - guess\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6pugt873.fsx(13,56): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.sumBy (fun x -> x * game.[x])\n    [score]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu7bz3dk7.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.guess)\n    let score = guess |> Array.map (fun x -> x.score)\n    let diff = Array.zip guess score\n    let diff = diff |> Array.map (fun (x,y) -> abs (x-y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x-y))\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsderns1q.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess with \n        | [] -> score\n        | x::xs -> \n            let score' = score + x\n            if score' = score then compare' xs score'\n            else compare' xs score'\n    compare' guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptue59qnu.fsx(22,62): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score) |> Array.sum\n    let\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0vl8tptb.fsx(41,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Value)\n    let diff = Array.zip guess score\n    let diff = Array.map2 (fun x y -> x - y) diff 0\n    let diff = Array.map2 (fun x y -> x - y) diff 1\n    let diff = Array.map2 (fun x y -> x - y) diff 2\n    let diff = Array.map2 (fun x y -> x - y) diff 3\n    let diff = Array.map2 (fun x y -> x - y) diff 4\n    let diff = Array.map2 (fun x y -> x - y) diff 5\n    let diff = Array.map2 (fun x y -> x - y) diff 6\n    let diff = Array.map2 (fun x y -> x - y) diff 7\n    let diff = Array.map2 (fun x y -> x - y) diff 8\n    let diff = Array.map2 (fun x y -> x - y) diff 9\n    let diff = Array.map2 (fun x y -> x - y) diff 10\n    let diff = Array.map2 (fun x y -> x - y) diff 11\n    let diff = Array.map2 (fun x y -> x - y) diff 12\n    let diff = Array.map2 (fun x y -> x - y) diff 13\n    let diff = Array.map2 (fun x y -> x - y) diff 14\n    let diff = Array.map2 (fun x y -> x - y) diff 15\n    let diff = Array.map2 (fun x y -> x - y) diff 16\n    let diff = Array.map2 (fun x y -> x - y) diff 17\n    let diff = Array.map2 (fun x y -> x - y) diff 18\n    let diff = Array.map2 (fun x y -> x - y) diff 19\n    let diff = Array.map2 (fun x y -> x - y) diff 20\n    let diff = Array.map2 (fun x y -> x - y) diff 21\n    let diff = Array.map2 (fun x y -> x - y) diff 22\n    let diff =\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfezx48bl.fsx(39,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (38:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfezx48bl.fsx(39,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (38:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfezx48bl.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (38:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfezx48bl.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (38:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfezx48bl.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score) |> List.sum\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let guess = guess |> List.filter (fun x -> x.Score = score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpg_h7_96h.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpg_h7_96h.fsx(37,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkurbwu1a.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let score = score |> List.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoc15boyz.fsx(37,44): error FS0599: Missing qualification after '.'\n\n\n\n/tmp/tmpoc15boyz.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:5). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq guess\n    let rec loop score guess =\n        match guess with\n        | [] -> score\n        | x::xs ->\n            if score.[x] = score.[x] && score.[x] = score.[x] then loop (score.[x] - score.[x]) xs\n            else loop (score.[x] + score.[x]) xs\n    loop score guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_kfdgxjk.fsx(18,16): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3m7hp7z_.fsx(36,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x - guess.[0])\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm_xp0bri.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.sumBy (fun (x,y) -> y - x)\n    let diff = score - guess.[0]\n    if diff < 0 then diff else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpeiawyz8l.fsx(14,24): error FS0001: The type 'int * int' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess, score with\n        | (0,0), (0,0) -> score\n        | (0,1), (0,0) -> score\n        | (0,1), (0,1) -> score\n        | (0,1), (1,0) -> score\n        | (0,1), (1,1) -> score\n        | (1,0), (0,0) -> score\n        | (1,0), (0,1) -> score\n        | (1,1), (1,0) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (2,0) -> score\n        | (1,1), (2,1) -> score\n        | (2,0), (0,0) -> score\n        | (2,0), (0,1) -> score\n        | (2,0), (1,0) -> score\n        | (2,0), (1,1) -> score\n        | (2,1), (0,0) -> score\n        | (2,1), (0,1) -> score\n        | (2,1), (1,0) -> score\n        | (2,1), (1,1) -> score\n        | (2,1), (2,0) -> score\n        | (2,1), (2,1) -> score\n        | (2,1), (2,2) -> score\n        | (2,2), (0,0) -> score\n        | (2,2), (0,1) -> score\n        | (2,2), (1,0) -> score\n        | (2,2), (1,1) -> score\n        | (2,2), (1,2) -> score\n        | (2,2), (2,0) -> score\n        | (2,2), (2,1) -> score\n        | (2,2), (2,2) -> score\n        | _ -> failwith \"invalid match\"\n    compare' guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsdt5yi_m.fsx(45,20): error FS0001: This expression was expected to have type\n    'int * int'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> List.map (fun x -> x.ToString())\n    let score = score |> List.map (fun x -> x.ToString())\n    let diff = guess |> List.map (fun x -> x.Length) |> List.sum\n    if diff = 0 then score else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkob81xlm.fsx(17,33): error FS0001: All branches of an 'if' expression must return values implicitly convertible to the type of the first branch, which here is 'string list'. This branch returns a value of type 'int'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let diff = score - guess\n    if diff < 0 then diff else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphxoz1br7.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.length\n    let guess = guess |> Array.map (fun x -> x - guess.[0])\n    let score = score |> Array.map (fun x -> x / score)\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1gxql6r4.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> int'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess = guess |> List.filter (fun x -> x <> guess.[0])\n    let score = score |> List.filter (fun x -> x <> score.[0])\n    let guess =\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv071veul.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpv071veul.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpv071veul.fsx(45,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpv071veul.fsx(45,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpv071veul.fsx(36,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let rec loop guess score =\n        match guess.Length, score.Length with\n        | 0, 0 -> score\n        | 0, 1 -> score\n        | 1, 0 -> score\n        | 1, 1 -> score\n        | _ ->\n            let guess = Array.copy guess\n            let score = Array.copy score\n            let rec loop guess score =\n                match guess.Length, score.Length with\n                | 0, 0 -> score\n                | 0, 1 -> score\n                | 1, 0 -> score\n                | 1, 1 -> score\n                | _ ->\n                    let guess = Array.copy guess\n                    let score = Array.copy score\n                    let rec loop guess score =\n                        match guess.Length, score.Length with\n                        | 0, 0 -> score\n                        | 0, 1 -> score\n                        | 1, 0 -> score\n                        | 1, 1 -> score\n                        | _ ->\n                            let guess = Array.copy guess\n                            let score = Array.copy score\n                            let rec loop guess score =\n                                match guess.Length, score.Length with\n                                | 0, 0 -> score\n                                | 0, 1 -> score\n                                | 1, 0 -> score\n                                | 1, 1 -> score\n                                | _ ->\n                                    let guess = Array.copy guess\n                                    let score = Array.copy score\n                                    loop guess score\n                            loop guess score\n                    loop guess score\n            loop guess score\n    loop game 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1undy6ht.fsx(15,15): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let diff = score |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array.map (fun x -> x, guess.[x])\n    let diff = diff |> Array\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_lcmv3kn.fsx(36,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Value)\n    let diff = score - guess\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt70l9620.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.sumBy (fun x -> game.[x] - guess.[x])\n    let diff = score - guess.[0]\n    if diff < 0 then diff else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfvktckq_.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game)\n    let score = guess |> Array.map (fun x -> x * game)\n    let diff = Array.zip guess score\n    diff |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpetmve5i5.fsx(15,13): error FS0001: Expecting a type supporting the operator '+' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.guess)\n    let score = guess |> Array.sumBy (fun x -> x * game.score)\n    let diff = score - game.score\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbtsy8raj.fsx(12,50): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let diff = Array.zip guess score\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 0\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 1\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 2\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 3\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 4\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 5\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 6\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 7\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 8\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 9\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 10\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 11\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 12\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 13\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 14\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 15\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 16\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 17\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 18\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff 19\n    let diff = Array.map2 (fun x y -> abs (x-y)) diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcdp985ki.fsx(35,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = guess |> Array.map (fun x -> x,x)\n    let rec compare' guess score = \n        match guess,score with\n        | [],[] -> score\n        | _,_ -> compare' (guess |> Array.filter (fun x -> x <> guess.[0] && x <> guess.[1] && x <> guess.[2] && x <> guess.[3] && x <> guess.[4] && x <> guess.[5] && x <> guess.[6] && x <> guess.[7] && x <> guess.[8] && x <> guess.[9] && x <> guess.[10] && x <> guess.[11] && x <> guess.[12] && x <> guess.[13] && x <> guess.[14] && x <> guess.[15] && x <> guess.[16] && x <> guess.[17] && x <> guess.[18] && x <> guess.[19] && x <> guess.[20] && x <> guess.[21] && x <> guess.[22] && x <> guess.[23] && x <> guess.[24] && x <> guess.[25] && x <> guess.[26] && x <> guess.[27] && x <> guess.[28] && x <> guess.[29] && x <> guess.[30] && x <> guess.[31] && x <> guess.[32] && x <> guess.[33] && x <> guess.[34] && x <> guess.[35] && x <> guess.[36] && x <> guess.[37] && x <> guess.[38] && x <> guess.[39] && x <> guess.[40] && x <> guess.[41] && x <> guess.[42] && x <> guess.[43] && x <> guess.[44] && x <> guess.[45] && x <> guess.[46] && x <> guess.[47] && x <> guess.[48] && x <> guess.[49] && x <> guess.[50] && x <> guess.[51] && x <> guess.[52] && x <> guess.[\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpinelh9eb.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpinelh9eb.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpinelh9eb.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpinelh9eb.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpinelh9eb.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkurbwu1a.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.map (fun x -> x - guess.[0]) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x - guess.[0]) |> Array.sum\n    [score; guess]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4y7af1rf.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let guess = guess |> List.toArray\n    let score = score |> List.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Score - score.[0])\n    let diff = diff |> List.map (fun x -> x.Score)\n    diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp69h4b2dl.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.sumBy (fun x -> game.[x] - guess.[x])\n    [score; guess; score]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgnfnguur.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.sumBy (fun x -> x.Value)\n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = score |> Array.sumBy (fun x -> x.Value)\n    let diff = score - guess\n    if diff < 0 then 0 else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1g9v080x.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let diff = Array.zip guess score\n    let diff = diff |> Array.map (fun (x, y) -> abs (x - y))\n    diff |> Array.max\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpg2798x5s.fsx(13,82): error FS0001: Expecting a type supporting the operator '-' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq guess\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpywycav6t.fsx(58,22): error FS0599: Missing qualification after '.'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3m7hp7z_.fsx(36,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let rec loop score guess =\n        match guess, score with\n        | [], _ -> score\n        | _, _ -> loop score (score |> Array.append guess)\n    loop score guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxw9bt_x0.fsx(13,56): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game)\n    let score = guess |> Array.map (fun x -> x * game)\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo64344ap.fsx(17,40): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''d list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.guess)\n    let score = guess |> Array.map (fun x -> x.score)\n    let diff = Array.zip guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff diff\n    \nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz7ahdfb8.fsx(35,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Score)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = score - guess\n    if diff < 0 then diff else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkhv63ic9.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.map (fun x -> x - game) |> Array.sum\n    let diff = guess |> Array.map (fun x -> x - score) |> Array.sum\n    if diff = 0 then 0 else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpalnj7xlt.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun x -> x - score.[0])\n    if diff |> List.sum = 0 then 0 else diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6mt9qa2l.fsx(14,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x,\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt_v85xh4.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(28,36): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let diff = score |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    diff |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvak67vos.fsx(13,82): error FS0001: Expecting a type supporting the operator '-' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let rec loop score guess =\n        match guess, score with\n        | [], _ -> score\n        | _, _ -> loop score guess\n    loop score guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpze57futs.fsx(13,56): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, score.[x])\n    let rec loop guess score = \n        match guess, score with\n        | [], [] -> score\n        | _, [] -> score\n        | _, _ -> \n            let guess = guess |> Array.map (fun x -> x, guess.[x])\n            let score = guess |> Array.map (fun x -> x, score.[x])\n            loop guess score\n    loop guess score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptsr6qlp5.fsx(13,49): error FS0039: The value or constructor 'score' is not defined. Maybe you want one of the following:\n   Core\n   Some\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq guess\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) guess score\n    let diff = Array.\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp12rq82gx.fsx(36,21): error FS0599: Missing qualification after '.'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score) |> List.sum\n    let diff = guess.Length - score\n    if diff = 0 then guess\n    else guess |> List.map (fun x -> x.Score) |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6dv_tbh9.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = score |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |> Array.map (fun x -> x.Difference)\n    let correct = diff |> Array.map (fun x -> x.Value)\n    let diff = correct |\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5pll8xzw.fsx(38,24): error FS0010: Unexpected symbol '|' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y, x))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y, x))\n    let diff = Array.zip guess score\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n    let diff = Array.map2 (fun x y -> x / y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n    let diff = Array.map2 (fun x y -> x / y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n    let diff = Array.map2 (fun x y -> x / y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n    let diff = Array.map2 (fun x y -> x / y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n    let diff = Array.map2 (fun x y -> x / y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n    let diff = Array.map2 (fun x y -> x / y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n    let diff = Array.map2 (fun x y -> x / y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n    let diff = Array.map2 (fun x y -> x / y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n    let diff = Array.map2 (fun x y -> x / y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n    let diff = Array.map2 (fun x y -> x / y) diff diff\n    let diff = Array.map2 (fun x y -> x * y) diff diff\n\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplq2vbd5p.fsx(36,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkurbwu1a.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.sumBy (fun x -> game.[x] - guess.[x])\n    [score]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6kxq4x25.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    let diff = Array.map2 (fun x y -> x - y) diff 0\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8a2v71o9.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.guess)\n    let score = guess |> Array.map (fun x -> x.score)\n    let diff = Array.zip guess score\n    let isCorrect = diff |> Array.forall (fun (x,y) -> x = y)\n    if isCorrect then\n        let guess = guess |> Array.map (fun x -> x.guess)\n        let score = guess |> Array.map (fun x -> x.score)\n        let diff = Array.zip guess score\n        let isCorrect = diff |> Array.forall (fun (x,y) -> x = y)\n        if isCorrect then\n            let guess = guess |> Array.map (fun x -> x.guess)\n            let score = guess |> Array.map (fun x -> x.score)\n            let diff = Array.zip guess score\n            let isCorrect = diff |> Array.forall (fun (x,y) -> x = y)\n            if isCorrect then\n                let guess = guess |> Array.map (fun x -> x.guess)\n                let score = guess |> Array.map (fun x -> x.score)\n                let diff = Array.zip guess score\n                let isCorrect = diff |> Array.forall (fun (x,y) -> x = y)\n                if isCorrect then\n                    let guess = guess |> Array.map (fun x -> x.guess)\n                    let score = guess |> Array.map (fun x -> x.score)\n                    let diff = Array.zip guess score\n                    let isCorrect = diff |> Array.forall (fun (x,y) -> x = y)\n                    if isCorrect then\n                        let guess = guess |> Array.map (fun x -> x.guess)\n                        let score = guess |> Array.map (fun x -> x.score)\n                        let diff = Array.zip guess score\n                        let isCorrect = diff |> Array.forall (fun (x,y) -> x = y)\n                        if isCorrect then\n                            let guess = guess |> Array.map (fun x -> x.guess)\n                            let score = guess |> Array.map (fun\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprehjb7z_.fsx(44,1): error FS0010: Incomplete structured construct at or before this point in lambda expression\n\n\n\n/tmp/tmprehjb7z_.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (43:29). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3m7hp7z_.fsx(36,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.map (fun x -> x - game.[x])\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6l3yr5xi.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3m7hp7z_.fsx(36,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let rec loop guess score = \n        match guess, score with\n        | [], [] -> 0\n        | _, [] -> 1\n        | _, _ -> \n            let diff = guess |> List.sumBy (fun x -> score |> List.sumBy (fun y -> x - y))\n            loop guess (score |> List.sumBy (fun y -> diff))\n    loop guess score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9efvy_ot.fsx(14,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = guess |> Array.map (fun x -> x,x)\n    let rec compare' guess score =\n        match guess,score with\n        | [],_ -> score\n        | _,_ -> \n            let guess = guess |> Array.map (fun x -> x,x)\n            let score = guess |> Array.map (fun x -> x,x)\n            compare' guess score\n    compare' guess score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjt_mnuwb.fsx(18,34): error FS0001: The type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq74y6hu0.fsx(13,82): error FS0001: Expecting a type supporting the operator '-' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score) |> List.sum\n    let diff = guess |> List.map (fun x -> x.Score - score) |> List.sum\n    if diff = 0 then guess |> List.rev |> List.toArray else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo8gdynte.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun guess -> guess - score) |> List.sum\n    if diff = 0 then 0 else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbcrfhuse.fsx(14,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = guess |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpujv0hn60.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score) |> List.sum\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score * guess\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0zrfqfn7.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score =\n        match guess, score with\n        | (0,0), (0,0) -> score\n        | (0,1), (0,0) -> score\n        | (0,1), (0,1) -> score\n        | (0,1), (1,0) -> score\n        | (0,1), (1,1) -> score\n        | (1,0), (0,0) -> score\n        | (1,0), (0,1) -> score\n        | (1,1), (0,0) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        \nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbr_fg4br.fsx(12,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x,\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt_v85xh4.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(28,36): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    let result = diff |> Array.sum\n    result\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4c0dq716.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> List.rev\n    let score = score |> List.rev\n    let rec loop guess score = \n        match guess with\n        | [] -> score\n        | x::xs -> \n            let guess = x::guess\n            let score = score |> List.rev\n            let rec loop guess score = \n                match guess with\n                | [] -> score\n                | x::xs -> \n                    let guess = x::guess\n                    let score = score |> List.rev\n                    let rec loop guess score = \n                        match guess with\n                        | [] -> score\n                        | x::xs -> \n                            let guess = x::guess\n                            let score = score |> List.rev\n                            loop guess score\n                    loop guess score\n            loop guess score\n    loop guess score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt652c2op.fsx(40,21): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList |> Array.map (fun x -> x.Score)\n    let diff = guess.Length - score.Length\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let diff = diff * diff\n    let\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps1cqyemv.fsx(71,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzmgwxbsf.fsx(64,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score =\n        match guess with\n        | [] -> score\n        | x::xs -> \n            if x = score then score\n            else compare' xs (score + 1)\n    compare' guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzz4bfkrq.fsx(21,62): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game.score guess\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpau0rq9b9.fsx(54,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let rec loop guess score =\n        match guess, score with\n        | [], [] -> score\n        | _, [] -> score\n        | _, _ ->\n            let guess = guess |> List.rev\n            let score = score |> List.rev\n            let rec loop guess score =\n                match guess, score with\n                | [], [] -> score\n                | _, [] -> score\n                | _, _ ->\n                    let guess = guess |> List.rev\n                    let score = score |> List.rev\n                    let rec loop guess score =\n                        match guess, score with\n                        | [], [] -> score\n                        | _, [] -> score\n                        | _, _ ->\n                            let guess = guess |> List.rev\n                            let score = score |> List.rev\n                            loop guess score\n                    loop guess score\n            loop guess score\n    loop guess score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6y4fulcn.fsx(14,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score) |> List.sum\n    let guess = guess |> List.filter (fun x -> x.Score < score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x < score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x < score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x > score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x > score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x > score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x < score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x < score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x > score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x > score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x < score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun x -> x > score)\n    let guess = guess |> List.map (fun x -> x.Score)\n    let guess = guess |> List.filter (fun\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyg_mp_ar.fsx(39,1): error FS0010: Incomplete structured construct at or before this point in lambda expression\n\n\n\n/tmp/tmpyg_mp_ar.fsx(39,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (38:5). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game.Score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let rec compare' guess score = \n        match guess, score with\n        | [], [] -> 0\n        | _, _ -> \n            let diff = guess.Length - score.Length\n            if diff > 0 then diff else 0\n    compare' guess score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv6plox6l.fsx(13,17): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let rec loop guess score =\n        match guess.Length, score.Length with\n        | 0, 0 -> score\n        | 0, 1 -> score\n        | 1, 0 -> score\n        | 1, 1 -> score\n        | 2, 0 -> score\n        | 2, 1 -> score\n        | _ ->\n            let guess = Array.copy guess\n            let score = Array.copy score\n            let rec loop guess score =\n                match guess.Length, score.Length with\n                | 0, 0 -> score\n                | 0, 1 -> score\n                | 1, 0 -> score\n                | 1, 1 -> score\n                | 2, 0 -> score\n                | 2, 1 -> score\n                | _ ->\n                    let guess = Array.copy guess\n                    let score = Array.copy score\n                    let rec loop guess score =\n                        match guess.Length, score.Length with\n                        | 0, 0 -> score\n                        | 0, 1 -> score\n                        | 1, 0 -> score\n                        | 1, 1 -> score\n                        | 2, 0 -> score\n                        | 2, 1 -> score\n                        | _ ->\n                            let guess = Array.copy guess\n                            let score = Array.copy score\n                            let rec loop guess score =\n                                match guess.Length, score.Length with\n                                | 0, 0 -> score\n                                | 0, 1 -> score\n                                | 1, 0 -> score\n                                | 1, 1 -> score\n                                | 2, 0 -> score\n                                | 2, 1 -> score\n                                | _ ->\n                                    let guess = Array.copy guess\n                                    let score = Array.copy score\n                                    let rec loop guess score =\n                                        match guess.Length, score.Length with\n                                        | 0, 0 -> score\n                                        | 0, 1 -> score\n                                        | 1, 0 -> score\n                                        | 1, 1 -> score\n                                        | 2, 0 -> score\n                                        | 2, 1 -> score\n                                        | _ ->\n                                            let guess = Array.copy guess\n                                            let score = Array.copy score\n                                            let rec loop guess score =\n                                                match guess.Length, score.Length with\n                                                | 0, 0 -> score\n                               \nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbxxacg2i.fsx(69,45): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score) |> List.sum\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let guess = guess |> List\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnuvvatzl.fsx(42,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess with\n        | [] -> score\n        | x::xs -> \n            let guessScore = score + x\n            let guess = x\n            let score' = compare' guess' guessScore\n            if guessScore = score' then score'\n            else compare' guess guessScore\n    compare' guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqc_znsgk.fsx(18,35): error FS0039: The value or constructor 'guess'' is not defined. Maybe you want one of the following:\n   guess\n   guessScore\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.ToString())\n    let score = guess |> Array.map (fun x -> x.ToString())\n    let diff = guess |> Array.map (fun x -> x.ToString()) |> Array.max\n    let diff = diff + score\n    if diff = 0 then 0 else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu21foskm.fsx(15,23): error FS0001: The type 'string[]' does not match the type 'string'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.map (fun x -> x - guess.[0])\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x - guess.[0])\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu3b_hzxo.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score =\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiqsmtx8l.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (45:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpiqsmtx8l.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (45:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpiqsmtx8l.fsx(54,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (45:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpiqsmtx8l.fsx(54,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (45:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpiqsmtx8l.fsx(45,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Score - score)\n    if diff |> List.length = 0 then 0 else diff |> List.max\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpg45vvqrc.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.map (fun x -> x, guess) guess\n    let score = Array.map (fun x -> x, score guess) guess\n    let diff = Array.map (fun (x,y) -> abs (x - y)) score\n    if diff.Length = 0 then 0 else diff.[0]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn4afuasu.fsx(13,40): error FS0039: The value or constructor 'score' is not defined. Maybe you want one of the following:\n   Core\n   Some\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    if diff.Length = 0 then 0 else diff |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmgpupvul.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3m7hp7z_.fsx(36,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3m7hp7z_.fsx(36,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game.score guess\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpau0rq9b9.fsx(54,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun guess -> guess - score) |> List.sum\n    if diff = 0 then guess else score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmputic0g_2.fsx(14,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.map (fun x -> x, guess) guess\n    let score = Array.map (fun x -> x, guess.[0]) guess\n    let guess = Array.map (fun x -> x, guess.[1]) guess\n    let score = Array.map (fun x -> x, guess.[1]) guess\n    let guess = Array.map (fun x -> x, guess.[2]) guess\n    let score = Array.map (fun x -> x, guess.[2]) guess\n    let guess = Array.map (fun x -> x, guess.[3]) guess\n    let score = Array.map (fun x -> x, guess.[3]) guess\n    let guess = Array.map (fun x -> x, guess.[4]) guess\n    let score = Array.map (fun x -> x, guess.[4]) guess\n    let guess = Array.map (fun x -> x, guess.[5]) guess\n    let score = Array.map (fun x -> x, guess.[5]) guess\n    let guess = Array.map (fun x -> x, guess.[6]) guess\n    let score = Array.map (fun x -> x, guess.[6]) guess\n    let guess = Array.map (fun x -> x, guess.[7]) guess\n    let score = Array.map (fun x -> x, guess.[7]) guess\n    let guess = Array.map (fun x -> x, guess.[8]) guess\n    let score = Array.map (fun x -> x, guess.[8]) guess\n    let guess = Array.map (fun x -> x, guess.[9]) guess\n    let score = Array.map (fun x -> x, guess.[9]) guess\n    let guess = Array.map (fun x -> x, guess.[10]) guess\n    let score = Array.map (fun x -> x, guess.[10]) guess\n    let guess = Array.map (fun x -> x, guess.[11]) guess\n    let score = Array.map (fun x -> x, guess.[11]) guess\n    let guess = Array.map (fun x -> x, guess.[12]) guess\n    let score = Array.map (fun x -> x, guess.[12]) guess\n    let guess = Array.map (fun x -> x, guess.[13]) guess\n    \nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmkxakfzl.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.toList |> Array.map (fun x -> x - guess.[0])\n    let diff = score |> Array.map (fun x -> x - guess.[0])\n    diff |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_jc76df4.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let rec loop guess score =\n        match guess with\n        | [] -> score\n        | h::t -> \n            let guess = h |> Array.toList\n            let score = score |> Array.toList\n            let rec loop guess score =\n                match guess with\n                | [] -> score\n                | h::t -> \n                    let guess = h |> Array.toList\n                    let score = score |> Array.toList\n                    let rec loop guess score =\n                        match guess with\n                        | [] -> score\n                        | h::t -> \n                            let guess = h |> Array.toList\n                            let score = score |> Array.toList\n                            let rec loop guess score =\n                                match guess with\n                                | [] -> score\n                                | h::t -> \n                                    let guess = h |> Array.toList\n                                    let score = score |> Array.toList\n                                    loop (h::t) (score |> Array.toList)\n                            loop (h::t) score\n                    loop (h::t) score\n            loop (h::t) score\n    loop guess score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpadgcsax8.fsx(14,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> List.map (fun x -> x, guess |> List.map (fun y -> x - y))\n    let score = score |> List.map (fun x -> x, score |> List.map (fun y -> x - y))\n    let diff = guess |> List.map (fun x -> x, score |> List.map (fun y -> x - y))\n    let diff = diff |> List.map (fun x -> x, guess |> List.map (fun y -> x - y))\n    let diff = diff |> List.map (fun x -> x, guess |> List.map (fun y -> x - y))\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpks0tnnkf.fsx(16,79): error FS0001: Expecting a type supporting the operator '-' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun x -> score.[x] - score.[x])\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x / x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x / x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x / x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff = diff |> List.map (fun x -> x * x)\n    let diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv1ukrpn_.fsx(41,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let rec loop guess score =\n        match guess with\n        | [] -> score\n        | h::t -> \n            let diff = abs (score - h)\n            if diff < 0. then loop t (score - diff)\n            else loop t (score + diff)\n    loop guess score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq9cg3x4o.fsx(14,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.map (fun x -> x - guess.[0])\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x - guess.[0])\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu3b_hzxo.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    let diff = diff |> Array.map (fun (x,y) -> abs (x-y))\n    diff |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6x59t7ev.fsx(13,41): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff = Array.map (fun (x,y) -> abs (y-x)) diff\n    let diff =\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgn6e9jyd.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgn6e9jyd.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgn6e9jyd.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgn6e9jyd.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgn6e9jyd.fsx(35,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess with\n        | [] -> score\n        | x::xs -> \n            match x with\n            | [] -> score\n            | x -> \n                match x with\n                | [] -> score\n                | x -> \n                    match x with\n                    | [] -> score\n                    | x -> \n                        match x with\n                        | [] -> score\n                        | x -> \n                            match x with\n                            | [] -> score\n                            | x -> \n                                match x with\n                                | [] -> score\n                                | x -> \n                                    match x with\n                                    | [] -> score\n                                    | x -> \n                                        match x with\n                                        | [] -> score\n                                        | x -> \n                                            match x with\n                                            | [] -> score\n                                            | x -> \n                                                match x with\n                                                | [] -> score\n                                                | x -> \n                                                    match x with\n                                                    | [] -> score\n                                                    | x -> \n                                                        match x with\n                                                        | [] -> score\n                                                        | x -> \n                                                            match x with\n                                                            | [] -> score\n                                                            | x -> \n                                                                match x with\n                                                                | [] -> score\n                                                                | x -> \n                                                                    match x with\n                                                                    | [] -> score\n                                                                    | x -> \n                                                                        match x with\n                                                                        | [] -> score\n                                                                        | x -> \n                                                                            match x with\n                                                                            | [] -> score\n                                                                            | x -> \n                                                                                match x with\n                                                                                | [] -> score\n                                                                                | x -> \n                                                                                    match x with\n                                                                                    | [] -> score\n                                                                                    | x -> \n                                                                                        match x with\n                                                                                        | [] -> score\n                                                                                        | x -> \n                                                                                            match x with\n                                                                                            | [] -> score\n                                                                                            | x -> \n                                                                                               match x with\n                                                                                               | [] -> score\n                                                                                               | x -> \n                                                                                                   match x with\n                                                                                                   | [] -> score\n                                                                                                   | x -> \n                                                                                                       match\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwyt6gr2p.fsx(86,1): error FS0010: Incomplete structured construct at or before this point in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let rec loop guess score =\n        match guess.Length, score.Length with\n        | 0, 0 -> score\n        | 0, 1 -> score\n        | 1, 0 -> score\n        | 1, 1 -> score\n        | 2, 0 -> score\n        | 2, 1 -> score\n        | _ -> loop guess (score + guess.[0])\n    loop guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmrfw7nxy.fsx(15,15): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game.Score guess\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun x -> score.[x] - score.[x - 1])\n    let diff = diff |> List.map (fun x -> x / 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff = diff |> List.map (fun x -> x * 2)\n    let diff =\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdhs6wul4.fsx(41,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (40:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdhs6wul4.fsx(41,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (40:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdhs6wul4.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (40:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdhs6wul4.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (40:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdhs6wul4.fsx(40,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game.score guess\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess.Length - score.Length\n    if diff = 0 then score\n    else\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let diff = guess.Length - score.Length\n        if diff = 0 then score\n        else\n            let guess = guess |> Array.toList\n            let score = score |> Array.toList\n            let diff = guess.Length - score.Length\n            if diff = 0 then score\n            else\n                let guess = guess |> Array.toList\n                let score = score |> Array.toList\n                let diff = guess.Length - score.Length\n                if diff = 0 then score\n                else\n                    let guess = guess |> Array.toList\n                    let score = score |> Array.toList\n                    let diff = guess.Length - score.Length\n                    if diff = 0 then score\n                    else\n                        let guess = guess |> Array.toList\n                        let score = score |> Array.toList\n                        let diff = guess.Length - score.Length\n                        if diff = 0 then score\n                        else\n                            let guess = guess |> Array.toList\n                            let score = score |> Array.toList\n                            let diff = guess.Length - score.Length\n                            if diff = 0 then score\n                            else\n                                let guess = guess |> Array.toList\n                                let score = score |> Array.toList\n                                let diff = guess.Length - score.Length\n                                if diff = 0 then score\n                                else\n                                    let guess = guess |> Array.toList\n                                    let score = score |> Array.toList\n                                    let diff = guess.Length - score.Length\n                                    if diff = 0 then score\n                                    else\n                                        let guess = guess |> Array.toList\n                                        let score = score |> Array.toList\n                                        let diff = guess.Length - score.Length\n                                        if diff = 0 then score\n                                        else\n                                            let guess = guess |> Array.to\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqi262xbr.fsx(64,71): error FS0599: Missing qualification after '.'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score) |> List.sum\n    let diff = guess |> List.map (fun x -> x.Score - score) |> List.sum\n    if diff = 0 then guess |> List.rev |> List.toArray else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo8gdynte.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkurbwu1a.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess with\n        | [] -> score\n        | x::xs -> \n            match x with\n            | x when x = guess -> score\n            | _ -> compare' xs score\n    compare' guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm4l_sf_s.fsx(17,26): error FS0001: Type mismatch. Expecting a\n    ''a'    \nbut given a\n    ''a list'    \nThe types ''a' and ''a list' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let rec loop score guess =\n        match guess, score with\n        | [], _ -> score\n        | _, [x] -> x\n        | _, _ -> loop score (score |> Array.append guess)\n    loop score guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp_z18hxh.fsx(17,21): error FS0001: Type mismatch. Expecting a\n    ''a list'    \nbut given a\n    ''a'    \nThe types ''a' and ''a list' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (x,y)))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    let diff = Array.zip guess score\n    let diff = diff |> Array.map (fun (x,y) -> (x,y))\n    let diff = diff |> Array.map (fun (x,y) -> (y,x))\n    let diff = diff |> Array.map (fun (x,y) -> (x,y))\n    let diff = diff |> Array.map (fun (x,y) -> (y,x))\n    let diff = diff |> Array.map (fun (x,y) -> (x,y))\n    let diff = diff |> Array.map (fun (x,y) -> (y,x))\n    let diff = diff |> Array.map (fun (x,y) -> (x,y))\n    let diff = diff |> Array.map (fun (x,y) -> (y,x))\n    let diff = diff |> Array.map (fun (x,y) -> (x,y))\n    let diff = diff |> Array.map (fun (x,y) -> (y,x))\n    let diff = diff |> Array.map (fun (x,y) -> (x,y))\n    let diff = diff |> Array.map (fun (x,y) -> (y,x))\n    let diff = diff |> Array.map (fun (x,y) -> (x,y))\n    let diff = diff |> Array.map (fun (x,y) -> (y,x))\n    let diff = diff |> Array.map (fun (x,y) -> (x,y))\n    let diff = diff |> Array.map (fun (x,y) -> (y,x))\n    let diff = diff |> Array.map (fun (x,y) -> (x,y))\n    let diff = diff |> Array.map (fun (x,y) -> (y,x))\n    let diff = diff |\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpddo8cotc.fsx(33,21): error FS0010: Unexpected symbol '|' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let score = score |> List.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoc15boyz.fsx(37,44): error FS0599: Missing qualification after '.'\n\n\n\n/tmp/tmpoc15boyz.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:5). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq guess\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let rec loop guess score guess' score' = \n        match guess, guess' with\n        | [], [] -> score'\n        | _, [] -> score'\n        | _, _ -> \n            let guess' = Array.ofSeq guess'\n            let score' = Array.ofSeq score'\n            let guess' = Array.ofSeq guess'\n            let score' = Array.ofSeq score'\n            let rec loop guess' score' guess'' score'' = \n                match guess', guess'' with\n                | [], [] -> score''\n                | _, [] -> score''\n                | _, _ -> \n                    let guess'' = Array.ofSeq guess''\n                    let score'' = Array.ofSeq score''\n                    let guess'' = Array.ofSeq guess''\n                    let score'' = Array.ofSeq score''\n                    let guess'' = Array.ofSeq guess''\n                    let score'' = Array.ofSeq score''\n                    loop guess'' score'' guess'' score''\n            loop guess' score' guess' score'\n    loop guess guess score guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps8ee6zrb.fsx(36,26): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    ''b[]'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = guess |> Array.map (fun x -> x.Difference(score))\n    diff |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo16fjcmj.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = guess |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\n    let score = score |> Array.map (fun x -> x,x)\n    let guess = guess |> Array.map (fun x -> x,x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpujv0hn60.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> y - x))\n    let guess = guess |> Array.map (fun x -> x,\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt_v85xh4.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:46). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt_v85xh4.fsx(28,36): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess, score with \n        | (x,y)::rest, (y,z)::rest -> \n            if x = y then \n                if y = z then \n                    score\n                else \n                    compare' rest (score + 1)\n            else \n                compare' rest (score + 1)\n        | _ -> score\n    compare' guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfucyvm46.fsx(14,25): error FS0038: 'y' is bound twice in this pattern\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.sumBy (fun x -> game.[x] - guess.[x])\n    [score; guess]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbl0_ndqs.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess, score with\n        | (0,0), (0,0) -> score\n        | (0,0), (0,1) -> 0\n        | (0,0), (0,2) -> 1\n        | (0,0), (0,3) -> 2\n        | (0,0), (0,4) -> 3\n        | (0,0), (0,5) -> 4\n        | (0,0), (0,6) -> 5\n        | (0,1), (0,0) -> 0\n        | (0,1), (0,1) -> 1\n        | (0,1), (0,2) -> 2\n        | (0,1), (0,3) -> 3\n        | (0,1), (0,4) -> 4\n        | (0,1), (0,5) -> 5\n        | (0,1), (0,6) -> 6\n        | (0,2), (0,0) -> 0\n        | (0,2), (0,1) -> 1\n        | (0,2), (0,2) -> 2\n        | (0,2), (0,3) -> 3\n        | (0,2), (0,4) -> 4\n        | (0,2), (0,5) -> 5\n        | (0,2), (0,6) -> 6\n        | (0,3), (0,0) -> 0\n        | (0,3), (0,1) -> 1\n        | (0,3), (0,2) -> 2\n        | (0,3), (0,3) -> 3\n        | (0,3), (0,4) -> 4\n        | (0,3), (0,5) -> 5\n        | (0,3), (0,6) -> 6\n        | (0,4), (0,0) -> 0\n        | (0,4), (0,1) -> 1\n        | (0,4), (0,2) -> 2\n        | (0,4), (0,3) -> 3\n        | (0,4), (0,4) -> 4\n\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph9zim_vb.fsx(12,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.map (fun x -> game.[x] - guess.[x])\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj2plk8zq.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let score = score |> List.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.Difference)\n    let diff = diff |> List.map (fun x -> x.\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoc15boyz.fsx(37,44): error FS0599: Missing qualification after '.'\n\n\n\n/tmp/tmpoc15boyz.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:5). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (x,y)))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> (y,x)))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> (y,x)))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> (y,x)))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> (y,x)))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> (y,x)))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> (y,x)))\n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    let score = score |> Array.map (fun x -> x, score |> Array.map (fun y -> (y,x)))\n\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphnmvgumr.fsx(27,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> Array.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Score - score.[x])\n    diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph9zulwol.fsx(13,41): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game.Score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun x -> score.[x] - score.[x-1])\n    if diff |> List.length > 0 then diff |> List.max else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_pqha8xh.fsx(13,17): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.sumBy (fun x -> x.Score)\n\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjem83k6y.fsx(43,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x,y) -> abs (x - y))\n    let diff = diff |> Array.map (fun (x\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbl9kr0rl.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbl9kr0rl.fsx(34,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkurbwu1a.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, score.[x])\n    let guess = guess |> Array\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3m7hp7z_.fsx(36,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun guess -> guess - score) |> List.sum\n    if diff = 0 then\n        score\n    else\n        diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkvp2u_5e.fsx(14,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let rec loop score guess =\n        match guess with\n        | [] -> score\n        | x::xs -> \n            if x = guess.[0] then loop score xs\n            else loop score (x::score)\n    loop score guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe2norg3n.fsx(20,10): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    ''b[]'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess, score with\n        | (0,0), (0,0) -> score\n        | (0,1), (0,0) -> score\n        | (0,1), (0,1) -> score\n        | (0,1), (1,0) -> score\n        | (0,1), (1,1) -> score\n        | (1,0), (0,0) -> score\n        | (1,0), (0,1) -> score\n        | (1,1), (0,0) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwjjlcps1.fsx(12,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkurbwu1a.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let diff = score - guess\n    if diff = 0 then 0 else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0hj3xb3o.fsx(13,56): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess with\n        | [] -> score\n        | x::xs -> \n            match x with\n            | [] -> score\n            | xs -> \n                match xs with\n                | [] -> score\n                | xs -> \n                    match xs with\n                    | [] -> score\n                    | xs -> \n                        match xs with\n                        | [] -> score\n                        | xs -> \n                            match xs with\n                            | [] -> score\n                            | xs -> \n                                match xs with\n                                | [] -> score\n                                | xs -> \n                                    match xs with\n                                    | [] -> score\n                                    | xs -> \n                                        match xs with\n                                        | [] -> score\n                                        | xs -> \n                                            match xs with\n                                            | [] -> score\n                                            | xs -> \n                                                match xs with\n                                                | [] -> score\n                                                | xs -> \n                                                    match xs with\n                                                    | [] -> score\n                                                    | xs -> \n                                                        match xs with\n                                                        | [] -> score\n                                                        | xs -> \n                                                            match xs with\n                                                            | [] -> score\n                                                            | xs -> \n                                                                match xs with\n                                                                | [] -> score\n                                                                | xs -> \n                                                                    match xs with\n                                                                    | [] -> score\n                                                                    | xs -> \n                                                                        match xs with\n                                                                        | [] -> score\n                                                                        | xs -> \n                                                                            match xs with\n                                                                            | [] -> score\n                                                                            | xs -> \n                                                                                match xs with\n                                                                                | [] -> score\n                                                                                | xs -> \n                                                                                    match xs with\n                                                                                    | [] -> score\n                                                                                    | xs -> \n                                                                                        match xs with\n                                                                                        | [] -> score\n                                                                                        | xs -> \n                                                                                            match xs with\n                                                                                            | [] -> score\n                                                                                            | xs -> \n                                                                                               match xs with\n                                                                                               | [] ->\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbc66iou9.fsx(81,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (79:96). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc66iou9.fsx(81,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (79:96). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc66iou9.fsx(89,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (79:96). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc66iou9.fsx(89,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (79:96). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc66iou9.fsx(89,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (79:96). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc66iou9.fsx(12,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guessLength = Array.length guess\n    let scoreLength = Array.length score\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm5bnfmg8.fsx(64,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.toList |> Array.map (fun x -> x - guess.[0]) |> Array.sum\n    let diff = score - guess.[0]\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5qonob7j.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.sumBy (fun x -> game.[x] - guess.[x])\n    [score]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6kxq4x25.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess with\n        | [] -> score\n        | x :: xs -> \n            match x with\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe6_zt1lg.fsx(65,1): error FS0010: Incomplete structured construct at or before this point in pattern matching. Expected '->' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.map (fun x -> x.Guess)\n    let score = score |> Array.map (fun x -> x.Score)\n    let guess = guess |\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppjlku0np.fsx(38,23): error FS0010: Unexpected symbol '|' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (x,y)))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    let diff = score |> Array.map (fun x -> x, guess |> Array.map (fun y -> (y,x)))\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqutux48w.fsx(18,40): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkurbwu1a.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.map (fun x -> x - guess.[0]) |> Array.sum\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x - guess.[0]) |> Array.sum\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpanf147si.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Score - score)\n    diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc398r1l5.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let guess = guess |> List.toArray\n    let score = score |> List.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Score - score.[0])\n    diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph12z0yw7.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score) |> List.sum\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let diff = score - guess\n    let diff = diff / 2.0\n    [0..diff] |> List.map (fun x -> x * x) |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp51343sb.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess with\n        | [] -> score\n        | x::xs -> \n            match x with\n            | [] -> score\n            | x -> \n                match x with\n                | [] -> score\n                | x -> \n                    match x with\n                    | [] -> score\n                    | x -> \n                        match x with\n                        | [] -> score\n                        | x -> \n                            match x with\n                            | [] -> score\n                            | x -> \n                                match x with\n                                | [] -> score\n                                | x -> \n                                    match x with\n                                    | [] -> score\n                                    | x -> \n                                        match x with\n                                        | [] -> score\n                                        | x -> \n                                            match x with\n                                            | [] -> score\n                                            | x -> \n                                                match x with\n                                                | [] -> score\n                                                | x -> \n                                                    match x with\n                                                    | [] -> score\n                                                    | x -> \n                                                        match x with\n                                                        | [] -> score\n                                                        | x -> \n                                                            match x with\n                                                            | [] -> score\n                                                            | x -> \n                                                                match x with\n                                                                | [] -> score\n                                                                | x -> \n                                                                    match x with\n                                                                    | [] -> score\n                                                                    | x -> \n                                                                        match x with\n                                                                        | [] -> score\n                                                                        | x -> \n                                                                            match x with\n                                                                            | [] -> score\n                                                                            | x -> \n                                                                                match x with\n                                                                                | [] -> score\n                                                                                | x -> \n                                                                                    match x with\n                                                                                    | [] -> score\n                                                                                    | x -> \n                                                                                        match x with\n                                                                                        | [] -> score\n                                                                                        | x -> \n                                                                                            match x with\n                                                                                            | [] -> score\n                                                                                            | x -> \n                                                                                               match x with\n                                                                                               | [] -> score\n                                                                                               | x -> \n                                                                                                   match x with\n                                                                                                   | [] -> score\n                                                                                                   | x -> \n                                                                                                       match\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwyt6gr2p.fsx(86,1): error FS0010: Incomplete structured construct at or before this point in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Value)\n    let diff = score - guess\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt70l9620.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Score)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = score - guess\n    if diff < 0 then\n        [0,0,0,0,0,0]\n    else\n        let diff = diff / 2\n        [diff, diff, diff, diff, diff]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphm0561pj.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess with\n        | [] -> score\n        | h::t -> \n            if h = score then \n                compare' t (score + 1)\n            else \n                compare' t (score + 1)\n    compare' guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpubakeuu2.fsx(23,62): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Score - score.[0])\n    let diff = diff |> List.map (fun x -> x.Score)\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx112ef46.fsx(13,41): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let diff = guess |> Array.map (fun x -> x.Score - score.[0])\n    diff |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwwwfhu9n.fsx(13,41): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.map (fun x -> x - game.[x]) |> Array.sum\n    let diff = score - guess |> Array.sum\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwrjab9fs.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game.Score guess\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let guess = guess |> Array.toList\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp39xq1cvk.fsx(54,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score =\n        match guess with\n        | [] -> score\n        | x::xs ->\n            match x with\n            | [] -> score\n            | x ->\n                match x with\n                | [] -> score\n                | x ->\n                    match x with\n                    | [] -> score\n                    | x ->\n                        match x with\n                        | [] -> score\n                        | x ->\n                            match x with\n                            | [] -> score\n                            | x ->\n                                match x with\n                                | [] -> score\n                                | x ->\n                                    match x with\n                                    | [] -> score\n                                    | x ->\n                                        match x with\n                                        | [] -> score\n                                        | x ->\n                                            match x with\n                                            | [] -> score\n                                            | x ->\n                                                match x with\n                                                | [] -> score\n                                                | x ->\n                                                    match x with\n                                                    | [] -> score\n                                                    | x ->\n                                                        match x with\n                                                        | [] -> score\n                                                        | x ->\n                                                            match x with\n                                                            | [] -> score\n                                                            | x ->\n                                                                match x with\n                                                                | [] -> score\n                                                                | x ->\n                                                                    match x with\n                                                                    | [] -> score\n                                                                    | x ->\n                                                                        match x with\n                                                                        | [] -> score\n                                                                        | x ->\n                                                                            match x with\n                                                                            | [] -> score\n                                                                            | x ->\n                                                                                match x with\n                                                                                | [] -> score\n                                                                                | x ->\n                                                                                    match x with\n                                                                                    | [] -> score\n                                                                                    | x ->\n                                                                                        match x with\n                                                                                        | [] -> score\n                                                                                        | x ->\n                                                                                            match x with\n                                                                                            | [] -> score\n                                                                                            | x ->\n                                                                                               match x with\n                                                                                               | [] -> score\n                                                                                               | x ->\n                                                                                                   match x with\n                                                                                                   | [] -> score\n                                                                                                   | x ->\n                                                                                                       match x with\n                                                                                                       | [] -> score\n                                                                                                       | x ->\n                                                                                                           match\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkan8i5xm.fsx(89,1): error FS0010: Incomplete structured construct at or before this point in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff 0\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp40hhvrtb.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Score)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff 0\n    diff |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_ny16reb.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List.map (fun x -> x - guess.[0])\n    let score = score |> List.map (fun x -> x / 2)\n    let guess = guess |> List\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_q7jvmn.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game)\n    let score = guess |> Array.map (fun x -> x * game)\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo64344ap.fsx(17,40): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''d list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let diff = List.zip guess score\n    let diff = List.map (fun (x,y) -> abs (x-y)) diff\n    let diff = List.map (fun (x,y) -> abs (x-y)) diff\n    diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsghuq6gp.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x -> x |> List.map (fun y -> (y,x))) |> List.sortByDescending snd\n    let guess = guess |> List.map (fun x ->\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkh8upjyo.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (25:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkh8upjyo.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (25:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkh8upjyo.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (25:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkh8upjyo.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (25:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkh8upjyo.fsx(25,35): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game)\n    let score = guess |> Array.map (fun x -> x * game)\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo64344ap.fsx(17,40): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''d list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr62po2gf.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = score |> Array.map (fun x -> x, x)\n    let guess = guess |> Array.map (fun x -> x, x)\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkurbwu1a.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score) |> List.sum\n    let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n    let score = score - guess\n    let diff = score - guess\n    if diff < 0 then\n        [0,0,0,0,0,0]\n    else\n        let diff = diff / 2\n        let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n        let score = score - guess\n        let diff = diff / 2\n        let guess = guess |> List.map (fun x -> x.Guess) |> List.sum\n        let score = score - guess\n        [diff,diff,diff,diff,diff,diff]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzd4iac31.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let rec loop score guess =\n        match guess, score with\n        | [], _ -> [score.[0]]\n        | _, _ -> loop (score.[0] + score.[1]) (score.[2] + score.[3])\n    loop score guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmd6fp5qr.fsx(13,56): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.map (fun x -> x, guess) guess\n    let score = Array.map (fun x -> x, guess) guess\n    let diff = Array.map (fun x -> x, guess) score\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let diff = Array.map (fun x -> x, guess) diff\n    let\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn0e9m7w9.fsx(43,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    let diff =\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq73oygw_.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq73oygw_.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq73oygw_.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq73oygw_.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq73oygw_.fsx(35,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess with\n        | [] -> score\n        | x::xs -> \n            match x with\n            | [] -> score\n            | y::ys -> \n                match y with\n                | [] -> score\n                | yy::yyy -> \n                    match yy with\n                    | [] -> score\n                    | yyy -> \n                        match yy with\n                        | [] -> score\n                        | yyy -> \n                            match yy with\n                            | [] -> score\n                            | yyy -> \n                                match yy with\n                                | [] -> score\n                                | yyy -> \n                                    match yy with\n                                    | [] -> score\n                                    | yyy -> \n                                        match yy with\n                                        | [] -> score\n                                        | yyy -> \n                                            match yy with\n                                            | [] -> score\n                                            | yyy -> \n                                                match yy with\n                                                | [] -> score\n                                                | yyy -> \n                                                    match yy with\n                                                    | [] -> score\n                                                    | yyy -> \n                                                        match yy with\n                                                        | [] -> score\n                                                        | yyy -> \n                                                            match yy with\n                                                            | [] -> score\n                                                            | yyy -> \n                                                                match yy with\n                                                                | [] -> score\n                                                                | yyy -> \n                                                                    match yy with\n                                                                    | [] -> score\n                                                                    | yyy -> \n                                                                        match yy with\n                                                                        | [] -> score\n                                                                        | yyy -> \n                                                                            match yy with\n                                                                            | [] -> score\n                                                                            | yyy -> \n                                                                                match yy with\n                                                                                | [] -> score\n                                                                                | yyy -> \n                                                                                    match yy with\n                                                                                    | [] -> score\n                                                                                    | yyy -> \n                                                                                        match yy with\n                                                                                        | [] -> score\n                                                                                        | yyy -> \n                                                                                            match yy with\n                                                                                            | [] -> score\n                                                                                            |\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449628,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3pld71s_.fsx(79,1): error FS0010: Incomplete structured construct at or before this point in pattern matching\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.map (fun x -> x, guess) guess\n    let score = Array.map (fun x -> x, guess.[0]) guess\n    let guess = Array.map (fun x -> x, guess.[1]) guess\n    let score = Array.map (fun x -> x, guess.[1]) guess\n    let guess = Array.map (fun x -> x, guess.[2]) guess\n    let score = Array.map (fun x -> x, guess.[2]) guess\n    let guess = Array.map (fun x -> x, guess.[3]) guess\n    let score = Array.map (fun x -> x, guess.[3]) guess\n    let guess = Array.map (fun x -> x, guess.[4]) guess\n    let score = Array.map (fun x -> x, guess.[4]) guess\n    let guess = Array.map (fun x -> x, guess.[5]) guess\n    let score = Array.map (fun x -> x, guess.[5]) guess\n    let guess = Array.map (fun x -> x, guess.[6]) guess\n    let score = Array.map (fun x -> x, guess.[6]) guess\n    let guess = Array.map (fun x -> x, guess.[7]) guess\n    let score = Array.map (fun x -> x, guess.[7]) guess\n    let guess = Array.map (fun x -> x, guess.[8]) guess\n    let score = Array.map (fun x -> x, guess.[8]) guess\n    let guess = Array.map (fun x -> x, guess.[9]) guess\n    let score = Array.map (fun x -> x, guess.[9]) guess\n    let guess = Array.map (fun x -> x, guess.[10]) guess\n    let score = Array.map (fun x -> x, guess.[10]) guess\n    let guess = Array.map (fun x -> x, guess.[11]) guess\n    let score = Array.map (fun x -> x, guess.[11]) guess\n    let guess = Array.map (fun x -> x, guess.[12]) guess\n    let score = Array.map (fun x -> x, guess.[12]) guess\n    let guess = Array.map (fun x -> x, guess.[13]) guess\n    \nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449626,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmkxakfzl.fsx(38,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let diff = Array.zip guess score\n    let diff = Array.map2 (fun x y -> abs (x - y)) diff 0\n    diff |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4f3dvegz.fsx(13,56): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Value)\n    let diff = Array.zip guess score\n    let result = diff |> Array.map (fun (x,y) -> abs (x - y))\n    result\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt7o3bhbf.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Value)\n    let diff = score - guess\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt70l9620.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq guess\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpywycav6t.fsx(58,22): error FS0599: Missing qualification after '.'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> List.map (fun x -> x.ToString())\n    let score = score |> List.map (fun x -> x.ToString())\n    let diff = guess |> List.map (fun x -> x.Length) |> List.max\n    let diff = diff + score |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |> List.sum\n    let diff = diff + guess |\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpag26ioq3.fsx(49,29): error FS0010: Unexpected symbol '|' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.sumBy (fun x -> game.[x] - guess.[x])\n    let diff = score - guess.[0]\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy7olh16q.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guess = Array.copy guess\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449623,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt3x2sfij.fsx(68,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |> Array.map (fun x -> x, scoreOf guess.[x])\n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = score |>\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1dgfssv3.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1dgfssv3.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1dgfssv3.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1dgfssv3.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1dgfssv3.fsx(35,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess, score with\n        | [], 0 -> score\n        | _, 0 -> score\n        | _, score -> \n            let diff = score - guess\n            if diff < 0 then diff + score\n            else diff\n    compare' guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqaeg7bsr.fsx(17,32): error FS0001: The type ''a list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess, score with\n        | (0,0), (0,0) -> score\n        | (0,1), (0,0) -> score\n        | (0,1), (0,1) -> score\n        | (0,1), (1,0) -> score\n        | (0,1), (1,1) -> score\n        | (1,0), (0,0) -> score\n        | (1,0), (0,1) -> score\n        | (1,1), (0,0) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n        | (1,1), (1,1) -> score\n\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449627,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwjjlcps1.fsx(12,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Score - score.[0])\n    let diff = diff |> List.map (fun x -> x.Score)\n    diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzbcs6zbm.fsx(13,41): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = score - guess\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbyaxjog7.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzmgwxbsf.fsx(64,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let diff = List.zip guess score\n    let diff = List.map (fun (x,y) -> abs (x-y)) diff\n    let diff = List.map (fun (x,y) -> abs (y-x)) diff\n    let diff = List.map (fun (x,y) -> abs (x-y)) diff\n    let diff = List.map (fun (x,y) -> abs (y-x)) diff\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamnddhdh.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449625,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq74y6hu0.fsx(13,82): error FS0001: Expecting a type supporting the operator '-' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    let isCorrect = diff |> Array.forall (fun (x,y) -> x = y)\n    if isCorrect then 0 else diff |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprnh5o6fp.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.sumBy (fun x -> game.[x] - guess.[x])\n    let diff = score - guess.[0]\n    if diff < 0 then diff else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449624,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfvktckq_.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.map (fun x -> x, guess.[x])\n    let diff = Array.zip guess score\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n    let diff = Array.map2 (fun x y -> x - y) diff diff\n\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsknmid_c.fsx(37,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Score)\n    let diff = Array.zip guess score\n    let rec loop acc = function\n        | [] -> acc\n        | (guess,score)::t -> loop (score@acc) t\n    loop [] game\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3y7dm0bc.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score = \n        match guess with\n        | [] -> score\n        | x::xs -> \n            match x with\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | x when x = guess ->\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_6qwx13u.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_6qwx13u.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_6qwx13u.fsx(73,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_6qwx13u.fsx(73,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_6qwx13u.fsx(73,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_6qwx13u.fsx(12,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guessLength = Array.length guess\n    let scoreLength = Array.length score\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff = guessLength - scoreLength\n    let guessLengthDiff =\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpicc0roq4.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpicc0roq4.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpicc0roq4.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpicc0roq4.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpicc0roq4.fsx(55,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.sumBy (fun x -> x.Score)\n    let diff = guess |> Array.map (fun x -> x.Score - score)\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_d1434v2.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess.Length - score.Length\n    if diff = 0 then\n        score\n    else\n        let diff = diff / 2\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let diff = diff - 1\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let diff = diff - 1\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let diff = diff - 1\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let diff = diff - 1\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let diff = diff - 1\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let diff = diff - 1\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let diff = diff - 1\n        let guess = guess |> Array.toList\n        let score = score |> Array.toList\n        let guess = guess |> Array.toList\n        let score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx30mjvg3.fsx(60,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, x)\n    let score = guess |> Array.map (fun x -> x, x)\n    let rec compare' guess score = \n        match guess, score with\n        | [], _ -> score\n        | _, [] -> score\n        | _, _ -> \n            let guess = guess |> Array.map (fun x -> x, x)\n            let score = guess |> Array.map (fun x -> x, x)\n            compare' guess score\n    compare' guess score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675449629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsjlct1dt.fsx(19,34): error FS0001: The type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}