{
  "name": "HumanEval_114_minSubArraySum",
  "language": "fs",
  "prompt": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n",
  "tests": "let test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x = 0 -> 0\n            | x when x < 0 -> minSubArraySum' xs\n            | x -> minSubArraySum' (x::xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpol3avffy.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpol3avffy.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | x when x < 0 -> minSubArraySum' xs\n            | x -> minSubArraySum' (min (minSubArraySum' xs) (x - 1))\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb5h35q3n.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpb5h35q3n.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlsk4ejq.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxlsk4ejq.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x < 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp16lmyz6.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpp16lmyz6.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> min (minSubArraySum' xs) (x+x)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvowwug7j.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpvowwug7j.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x = 0 then loop xs\n            else loop (x::nums)\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx365gs23.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpx365gs23.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < nums.Length then \n            let sum = nums.[i] + loop (i+1)\n            if sum < nums.[i] then sum else loop (i+1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx25krlo9.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpx25krlo9.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop nums =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            if x = 0 then\n                loop xs\n            else\n                loop (min (x::xs))\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp650rzgx9.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp650rzgx9.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x < 0 -> loop xs\n            | x when x > 0 -> loop xs\n            | _ -> loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpllocb7ba.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpllocb7ba.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x < 0 -> minSubArraySum' xs\n            | x -> minSubArraySum' (minSubArraySum' xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwr6mr5bi.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpwr6mr5bi.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i acc = \n        if i < 0 then acc\n        else loop (i-1) (acc + nums.[i])\n    loop 0 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphjmetyr3.fsx(16,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmphjmetyr3.fsx(16,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            let sum = acc + x\n            if sum < x then loop (sum - x) xs\n            else loop sum xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp31dd6k_5.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp31dd6k_5.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0 else \n        let sum = nums.[i] * (nums.[i-1] + nums.[i-2])\n        if sum < 0 then loop (i-1)\n        else sum\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkg0j508r.fsx(18,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpkg0j508r.fsx(18,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i =\n        if i < 0 then i\n        elif i = 0 then i\n        else loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprrl3gs8a.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmprrl3gs8a.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0 else\n        let sum = nums.[i] * (nums.[i-1] + nums.[i-2]) / 2\n        if sum < 0 then loop (i-1)\n        else loop (i-1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp43wglj9g.fsx(18,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp43wglj9g.fsx(18,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x < 0 then minSubArraySum' xs\n            else minSubArraySum' (minSubArraySum' xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8gi2pplb.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp8gi2pplb.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamuhxr_x.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpamuhxr_x.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec findMinSum nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + findMinSum xs\n            if sum < x then sum else findMinSum xs\n    findMinSum nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5lgo8cwd.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp5lgo8cwd.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec findMinSum nums =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            let sum = x + findMinSum xs\n            if sum < x then sum else findMinSum xs\n    findMinSum nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo3486jjl.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpo3486jjl.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i =\n        if i < nums.Length then\n            let sum = nums.[i] + loop (i+1)\n            if sum < nums.[i] then sum else loop (i+1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo7v9v3ut.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpo7v9v3ut.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0 else\n        let sum = nums.[i] * (nums.[i-1] + nums.[i-2])\n        if sum < 0 then loop (i-1)\n        else sum\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_jqtlg3z.fsx(18,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp_jqtlg3z.fsx(18,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x < 0 -> minSubArraySum' xs\n            | x when x > 0 -> minSubArraySum' xs\n            | _ -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8kvglwbf.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp8kvglwbf.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < nums.Length then \n            let sum = nums.[i] + loop (i+1)\n            if sum > 0 then sum else loop (i+1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5164a2h1.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp5164a2h1.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlsk4ejq.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxlsk4ejq.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x < 0 -> minSubArraySum' xs\n            | x when x > 0 -> minSubArraySum' xs\n            | _ -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8kvglwbf.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp8kvglwbf.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlsk4ejq.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxlsk4ejq.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            match x with \n            | x when x = 0 -> 0\n            | x -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmmi76pfi.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpmmi76pfi.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x > 0 -> loop (acc + x) xs\n            | x -> loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprn_240md.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmprn_240md.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0\n        elif i = 0 then 0\n        else loop (i - 1)\n    loop (nums.Length - 1)\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7uu54vyj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp7uu54vyj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec findMinSum nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            let sum = x + findMinSum xs\n            if sum < x then sum else findMinSum xs\n    findMinSum nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3fxvbqyl.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp3fxvbqyl.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            let sum = x + xs\n            if sum > 0 then loop xs else sum\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphkbup0de.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmphkbup0de.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            let minSum = min x xs\n            minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1zf7s80v.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp1zf7s80v.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec findMinSubArraySum nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + findMinSubArraySum xs\n            if sum < x then sum else findMinSubArraySum xs\n    findMinSubArraySum nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpen4kkw0f.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpen4kkw0f.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x < 0 then minSubArraySum' xs\n            else minSubArraySum' (minSubArraySum' xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8gi2pplb.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp8gi2pplb.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then i\n        else \n            let minSum = nums.[i]\n            let mutable minSum = minSum\n            for j = i to i - 1 do\n                let mutable sum = nums.[j]\n                for k = j + 1 to i - 1 do\n                    sum <- sum + nums.[k]\n                if sum < minSum then minSum <- sum\n            loop (i + 1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvqkjmpao.fsx(24,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpvqkjmpao.fsx(24,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum acc nums =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum (min acc x) xs\n    minSubArraySum 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuvm_4nio.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpuvm_4nio.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i acc =\n        if i < nums.Length then\n            let sub = nums.[i]\n            if sub > 0 then loop (i+1) (acc + sub)\n            else acc\n        else acc\n    loop 0 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpii1vohok.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpii1vohok.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i acc = \n        if i < nums.Length then \n            let acc' = acc + nums.[i]\n            loop (i + 1) acc'\n        else\n            acc\n    loop 0 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkzhmt0jf.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpkzhmt0jf.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec findMinSum nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x < 0 -> findMinSum xs\n            | x when x > 0 -> findMinSum xs\n            | _ -> findMinSum xs\n    findMinSum nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwvus1mkb.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpwvus1mkb.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            if x = 0 then\n                minSubArraySum' xs\n            else\n                minSubArraySum' (minSubArraySum' xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn1zjkyri.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpn1zjkyri.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i acc = \n        if i < 0 then acc\n        else loop (i - 1) (acc + nums.[i])\n    loop 0 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcbbkkaa3.fsx(16,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpcbbkkaa3.fsx(16,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> minSubArraySum' (min (min x xs) (x+x))\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7c53rqvv.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp7c53rqvv.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x < 0 then loop (acc + x) xs\n            else loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps7md34jq.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmps7md34jq.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x < 0 then minSubArraySum' xs\n            else minSubArraySum' (min (x-1) xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcljmavlh.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpcljmavlh.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs) (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj6kx_sy3.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpj6kx_sy3.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x = 0 then loop xs\n            else loop (min (x::xs))\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzb649shx.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpzb649shx.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then i\n        else \n            let sum = nums.[i] * (nums.[i-1] + nums.[i-2])\n            if sum < 0 then loop (i-1)\n            else loop (i-1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9yck0tkf.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp9yck0tkf.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then i\n        else \n            let sum = nums.[i]\n            let sub = nums.[i - 1]\n            if sub < sum then loop (i - 1)\n            else loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo7adtybh.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpo7adtybh.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            match x with \n            | 0 -> x\n            | _ -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8mboew1a.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp8mboew1a.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x < 0 -> loop (acc + x) xs\n            | x when x > 0 -> loop (acc - x) xs\n            | _ -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj6vzg2b4.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpj6vzg2b4.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0\n        elif i = 0 then 0\n        else loop (i - 1)\n    loop (nums.Length - 1)\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7uu54vyj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp7uu54vyj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppcqc04ci.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmppcqc04ci.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 0 -> loop (acc + x) xs\n            | _ -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9gq9u7ds.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp9gq9u7ds.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i acc =\n        if i < 0 then acc\n        else loop (i-1) (acc + nums.[i])\n    loop 0 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpswe97004.fsx(16,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpswe97004.fsx(16,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i =\n        if i < 0 then 0\n        elif i = 0 then 0\n        else loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzg0x9or0.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpzg0x9or0.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec findMinSum nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x < 0 then findMinSum xs\n            else findMinSum xs\n    findMinSum nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_w76_4n2.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp_w76_4n2.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x < 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp16lmyz6.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpp16lmyz6.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> minSubArraySum' (x::xs)\n    minSubArraySum' []\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoibxgr24.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpoibxgr24.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            if x = 0 then 0\n            else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo09ljbpb.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpo09ljbpb.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgbo5bd0e.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpgbo5bd0e.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum (min acc x) xs\n    minSubArraySum 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1i_hwpyj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp1i_hwpyj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgbo5bd0e.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpgbo5bd0e.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x > 0 -> minSubArraySum' xs\n            | _ -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu5o7iv1d.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpu5o7iv1d.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + x) xs\n            else loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj3i95t5h.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpj3i95t5h.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums =\n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqygj86se.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpqygj86se.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbro9pl76.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbro9pl76.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe2kgzobj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpe2kgzobj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlsk4ejq.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxlsk4ejq.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | 0 -> x\n            | x -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsf4trffl.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpsf4trffl.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with \n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3kvukmon.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp3kvukmon.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            let sum = acc + x\n            loop (sum - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcdiqxh97.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpcdiqxh97.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < nums.Length then\n            let sum = nums.[i] + loop (i+1)\n            if sum < nums.[i] then sum else loop (i+1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2xuhiov_.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp2xuhiov_.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec findMinSum nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + findMinSum xs\n            if sum < x then sum else findMinSum xs\n    findMinSum nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5lgo8cwd.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp5lgo8cwd.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlsk4ejq.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxlsk4ejq.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + (min xs)\n            loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqtcqgpbc.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpqtcqgpbc.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe2kgzobj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpe2kgzobj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x < 0 -> loop (acc + x) xs\n            | x when x > 0 -> loop (acc - x) xs\n            | _ -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj6vzg2b4.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpj6vzg2b4.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0\n        elif i = 0 then 0\n        else loop (i - 1)\n    loop (nums.Length - 1)\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7uu54vyj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp7uu54vyj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let minSum = min x xs\n            minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr4q4t0gl.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpr4q4t0gl.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < nums.Length then \n            let sum = nums.[i] + loop (i+1)\n            if sum < nums.[i] then sum else loop (i+1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx25krlo9.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpx25krlo9.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0 else\n        let sum = nums.[i] * (nums.[i-1] + nums.[i-2]) / 2\n        loop (i-1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1j13m8_k.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp1j13m8_k.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0\n        elif i = 0 then 0\n        else loop (i - 1)\n    loop (nums.Length - 1)\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7uu54vyj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp7uu54vyj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy8hlnidx.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpy8hlnidx.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprr96y4wz.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmprr96y4wz.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | 0 -> x\n            | _ -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa7ti1itj.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpa7ti1itj.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x < 0 -> minSubArraySum' xs\n            | x -> minSubArraySum' (minSubArraySum' xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwr6mr5bi.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpwr6mr5bi.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + x) xs\n            else loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj3i95t5h.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpj3i95t5h.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then i\n        else loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxfz_bwyq.fsx(16,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxfz_bwyq.fsx(16,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> min (minSubArraySum' xs) (x+1)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqajhqf0a.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpqajhqf0a.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamuhxr_x.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpamuhxr_x.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + x) xs\n            else loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj3i95t5h.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpj3i95t5h.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x = 0 then minSubArraySum' xs\n            else minSubArraySum' (minSubArraySum' xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmwm0o8jy.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpmwm0o8jy.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x < 0 then loop (acc + x) xs\n            else loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps7md34jq.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmps7md34jq.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | x when x = 0 -> loop (acc + x) xs\n            | x when x < 0 -> loop (acc - x) xs\n            | x -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnbfap_05.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpnbfap_05.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then i\n        elif i = 0 then 0\n        else loop (i - 1)\n    loop (nums.Length - 1)\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo02reg3a.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpo02reg3a.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i acc = \n        if i < nums.Length then \n            let sum = acc + nums.[i]\n            loop (i + 1) sum\n        else acc\n    loop 0 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz_9wi5la.fsx(18,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpz_9wi5la.fsx(18,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> min (minSubArraySum' xs) (x+x)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvowwug7j.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpvowwug7j.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then i\n        else \n            let sum = nums.[i] * (nums.[i] - nums.[i - 1])\n            if sum < 0 then loop (i - 1)\n            else loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2oa3pvs0.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp2oa3pvs0.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamuhxr_x.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpamuhxr_x.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x < 0 -> minSubArraySum' xs\n            | x -> minSubArraySum' (x::xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgbqf_qhe.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpgbqf_qhe.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0\n        else \n            let sum = nums.[i] * (nums.[i-1] + nums.[i-2])\n            loop (i-1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppp_370j1.fsx(18,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmppp_370j1.fsx(18,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs) (x+1)\n            sum\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp40hhopyp.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp40hhopyp.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlsk4ejq.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxlsk4ejq.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            if x = 0 then 0\n            else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo09ljbpb.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpo09ljbpb.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqu6674ah.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpqu6674ah.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec findMinSum nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + findMinSum xs\n            if sum < x then sum else findMinSum xs\n    findMinSum nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5lgo8cwd.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp5lgo8cwd.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamuhxr_x.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpamuhxr_x.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamuhxr_x.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpamuhxr_x.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> minSubArraySum' (x::xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp76m1g4xa.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp76m1g4xa.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with \n        | [] -> acc\n        | x::xs -> \n            if x < 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp291bbb6v.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp291bbb6v.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgbo5bd0e.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpgbo5bd0e.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamuhxr_x.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpamuhxr_x.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with \n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyp02oih9.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpyp02oih9.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < nums.Length then \n            let sum = nums.[i] + loop (i + 1)\n            if sum < nums.[i] then sum else loop (i + 1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpittb5q6u.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpittb5q6u.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqu6674ah.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpqu6674ah.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe2kgzobj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpe2kgzobj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe2kgzobj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpe2kgzobj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamuhxr_x.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpamuhxr_x.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i =\n        if i < 0 then i\n        else\n            let sum = nums.[i] * (nums.[i-1] + nums.[i-2])\n            if sum < 0 then loop (i-1)\n            else loop (i-1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp85sre_hs.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp85sre_hs.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgbo5bd0e.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpgbo5bd0e.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc + x) xs\n            else loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp34s3syn_.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp34s3syn_.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlsk4ejq.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxlsk4ejq.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqu6674ah.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpqu6674ah.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x = 0 then 0\n            else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1q5a7h_6.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp1q5a7h_6.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | 0 -> 0\n            | _ -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_dt8mt1_.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp_dt8mt1_.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + x) xs\n            else loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj3i95t5h.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpj3i95t5h.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i =\n        if i < 0 then\n            0\n        else\n            let sum = nums.[i] * (nums.[i-1] + nums.[i-2])\n            loop (i-1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp1hkdvff.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpp1hkdvff.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlsk4ejq.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxlsk4ejq.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgbo5bd0e.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpgbo5bd0e.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> min (minSubArraySum' xs) (minSubArraySum' xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiruhr07s.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpiruhr07s.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x = 0 then 0\n            else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1q5a7h_6.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp1q5a7h_6.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec findMinSum (nums: int []) = \n        if nums.Length = 0 then 0\n        else\n            let minSum = nums.[0]\n            for i in 1..nums.Length-1 do\n                let sum = nums.[i] + minSum\n                if sum < minSum then minSum <- sum\n            findMinSum nums\n    findMinSum nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf7_3oen2.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpf7_3oen2.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x = 0 -> 0\n            | x when x < 0 -> minSubArraySum' xs\n            | x -> minSubArraySum' (x::xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpol3avffy.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpol3avffy.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + x) xs\n            else loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj3i95t5h.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpj3i95t5h.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x = 0 then \n                minSubArraySum' xs\n            else\n                minSubArraySum' (minSubArraySum' xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8jeue0a3.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp8jeue0a3.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe2kgzobj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpe2kgzobj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then i\n        else loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxfz_bwyq.fsx(16,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxfz_bwyq.fsx(16,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu7nlme1d.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpu7nlme1d.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with \n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + x) xs\n            else loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmsim6e9m.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpmsim6e9m.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe2kgzobj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpe2kgzobj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 0 -> loop (acc + x) xs\n            | _ -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9gq9u7ds.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp9gq9u7ds.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            let minSum = min x xs\n            minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7qkwmo1n.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp7qkwmo1n.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec findMinSum nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + findMinSum xs\n            if sum < x then sum else findMinSum xs\n    findMinSum nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5lgo8cwd.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp5lgo8cwd.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlsk4ejq.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxlsk4ejq.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums =\n        match nums with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo0fnp2g4.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpo0fnp2g4.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc = \n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlsk4ejq.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxlsk4ejq.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x = 0 then 0\n            else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1q5a7h_6.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp1q5a7h_6.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < nums.Length then \n            let sum = nums.[i] + loop (i+1)\n            if sum < nums.[i] then sum else loop (i+1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx25krlo9.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpx25krlo9.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i acc =\n        if i < 0 then acc\n        else loop (i-1) (acc + nums.[i])\n    loop 0 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpswe97004.fsx(16,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpswe97004.fsx(16,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe2kgzobj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpe2kgzobj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe2kgzobj.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpe2kgzobj.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            let sum = acc + x\n            loop (sum - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcdiqxh97.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpcdiqxh97.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = minSubArraySum' xs\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzmqnw4a_.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpzmqnw4a_.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x < 0 then minSubArraySum' xs\n            else minSubArraySum' (minSubArraySum' xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8gi2pplb.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp8gi2pplb.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0\n        elif i = 0 then 0\n        else loop (nums.[i-1] + nums.[i])\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpttguwar3.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpttguwar3.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x < 0 -> loop (x::acc) xs\n            | x when x > 0 -> loop (x::acc) xs\n            | _ -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8522b80h.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp8522b80h.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamuhxr_x.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpamuhxr_x.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x < 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp16lmyz6.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpp16lmyz6.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = min (minSubArraySum' xs)\n            sum + x\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamuhxr_x.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpamuhxr_x.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            let sum = x + acc\n            loop (sum - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_do_j0y8.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp_do_j0y8.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x < 0 -> minSubArraySum' xs\n            | x -> minSubArraySum' (x::xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgbqf_qhe.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpgbqf_qhe.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            if x = 0 then 0\n            else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1q5a7h_6.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp1q5a7h_6.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x < 0 -> minSubArraySum' xs\n            | x when x > 0 -> minSubArraySum' xs\n            | _ -> minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8kvglwbf.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp8kvglwbf.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0\n        else \n            let sum = nums.[i] * (nums.[i - 1] + nums.[i - 2])\n            loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp07d4f6sj.fsx(18,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp07d4f6sj.fsx(18,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums =\n        match nums with\n        | [] -> acc\n        | x::xs ->\n            if x = 0 then loop (acc + x) xs\n            else loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp30tg8fq1.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp30tg8fq1.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + x) xs\n            else loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj3i95t5h.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpj3i95t5h.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + (min xs)\n            loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphjquv81k.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmphjquv81k.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then 0 else\n        let sum = nums.[i] * (nums.[i-1] - nums.[i-1])\n        if sum < 0 then loop (i-1) else sum\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpln3n81c2.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpln3n81c2.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums acc =\n        match nums with\n        | [] -> acc\n        | x::xs -> minSubArraySum' xs (min acc x)\n    minSubArraySum' nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbw7je6z8.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpbw7je6z8.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376536,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjl_t8z69.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpjl_t8z69.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums =\n        match nums with\n        | [] -> acc\n        | x::xs ->\n            if x = 0 then loop (acc + x) xs\n            else loop (acc - x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp30tg8fq1.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp30tg8fq1.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x < 0 then loop (acc + x) xs\n            else loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps7md34jq.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmps7md34jq.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums =\n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376537,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqygj86se.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpqygj86se.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop i = \n        if i < 0 then i\n        else loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376538,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxfz_bwyq.fsx(16,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpxfz_bwyq.fsx(16,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum nums = \n    let rec loop acc nums =\n        match nums with\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | 0 -> loop (acc + x) xs\n            | _ -> loop (acc + x) xs\n    loop 0 nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675376539,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuopdgj72.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpuopdgj72.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}