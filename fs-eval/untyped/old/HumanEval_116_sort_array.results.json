{
  "name": "HumanEval_116_sort_array",
  "language": "fs",
  "prompt": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n",
  "tests": "let test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr:array<int>) =\n        let rec sort_array_rec' (arr:array<int>) =\n            let rec sort_array_rec'' (arr:array<int>) =\n                let rec sort_array_rec'' (arr:array<int>) =\n                    let rec sort_array_rec'' (arr:array<int>) =\n                        let rec sort_array_rec'' (arr:array<int>) =\n                            let rec sort_array_rec'' (arr:array<int>) =\n                                let rec sort_array_rec'' (arr:array<int>) =\n                                    let rec sort_array_rec'' (arr:array<int>) =\n                                        let rec sort_array_rec'' (arr:array<int>) =\n                                            let rec sort_array_rec'' (arr:array<int>) =\n                                                let rec sort_array_rec'' (arr:array<int>) =\n                                                    let rec sort_array_rec'' (arr:array<int>) =\n                                                        let rec sort_array_rec'' (arr:array<int>) =\n                                                            let rec sort_array_rec'' (arr:array<int>) =\n                                                                let rec sort_array_rec'' (arr:array<int>) =\n                                                                    let rec sort_array_rec'' (arr:array<int>) =\n                                                                        let rec sort_array_rec' (arr:array<int>) =\n                                                                            let rec sort_array_rec' (arr:array<int>) =\n                                                                                let rec sort_array_rec' (arr:array<int>) =\n                                                                                    let rec sort_array_rec' (arr:array<int>) =\n                                                                                        let rec sort_array_rec' (arr:array<int>) =\n                                                                                            let rec sort_array_rec' (arr:array<int>) =\n                                                                                                   let rec sort_array_rec' (arr:array<int>) =\n                                                                                                       let rec sort_array_rec' (arr:array<int>) =\n                                                                                                           let rec sort_array_rec' (arr:array<int>)\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjfg7p6qu.fsx(35,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr:array<int>) = \n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let y = x + 1\n            if y > 0 then sort_array_rec xs\n            else sort_array_rec xs\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp70314fza.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x :: xs ->\n            let xs = x :: xs\n            let rec sort_array_rec_rec acc = function\n                | [] -> acc\n                | x :: xs ->\n                    let xs = x :: xs\n                    let rec sort_array_rec_rec_rec acc = function\n                        | [] -> acc\n                        | x :: xs ->\n                            let xs = x :: xs\n                            let rec sort_array_rec_rec_rec acc = function\n                                | [] -> acc\n                                | x :: xs ->\n                                    let xs = x :: xs\n                                    let rec sort_array_rec_rec_rec acc = function\n                                        | [] -> acc\n                                        | x :: xs ->\n                                            let xs = x :: xs\n                                            let rec sort_array_rec_rec_rec acc = function\n                                                | [] -> acc\n                                                | x :: xs ->\n                                                    let xs = x :: xs\n                                                    let rec sort_array_rec_rec_rec acc = function\n                                                        | [] -> acc\n                                                        | x :: xs ->\n                                                            let xs = x :: xs\n                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                | [] -> acc\n                                                                | x :: xs ->\n                                                                    let xs = x :: xs\n                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                        | [] -> acc\n                                                                        | x :: xs ->\n                                                                            let xs = x :: xs\n                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                | [] -> acc\n                                                                                | x :: xs ->\n                                                                                    let xs = x :: xs\n                                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                                        | [] -> acc\n                                                                                        | x :: xs ->\n                                                                                            let xs = x :: xs\n                                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                               | [] -> acc\n                                                                                               | x ::\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpistz340t.fsx(56,1): error FS0010: Incomplete structured construct at or before this point in pattern\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) = \n        let rec sort_array_rec' (arr: 'a array) = \n            let rec sort_array_rec'' (arr: 'a array) = \n                let rec sort_array_rec'' (arr: 'a array) = \n                    let rec sort_array_rec'' (arr: 'a array) = \n                        let rec sort_array_rec'' (arr: 'a array) = \n                            let rec sort_array_rec'' (arr: 'a array) = \n                                let rec sort_array_rec'' (arr: 'a array) = \n                                    let rec sort_array_rec'' (arr: 'a array) = \n                                        let rec sort_array_rec'' (arr: 'a array) = \n                                            let rec sort_array_rec'' (arr: 'a array) = \n                                                let rec sort_array_rec'' (arr: 'a array) = \n                                                    let rec sort_array_rec'' (arr: 'a array) = \n                                                        let rec sort_array_rec'' (arr: 'a array) = \n                                                            let rec sort_array_rec'' (arr: 'a array) = \n                                                                let rec sort_array_rec'' (arr: 'a array) = \n                                                                    let rec sort_array_rec'' (arr: 'a array) = \n                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                let rec sort_array_rec' (arr: 'a array) = \n                                                                                    let rec sort_array_rec' (arr: 'a array) = \n                                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                                   let rec sort_array_rec' (arr: 'a array) = \n                                                                                                       let rec sort_array_rec' (arr: '\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp565zvwrs.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp565zvwrs.fsx(34,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected identifier or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        let rec sort_array_rec' (arr: 'a array) =\n            match arr with\n            | [] -> arr\n            | x::xs ->\n                let x = x\n                let xs = xs |> Array.sortInPlace\n                if x <> xs.[0] then\n                    sort_array_rec' xs\n                else\n                    sort_array_rec' xs\n        sort_array_rec' arr\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpufexktfw.fsx(12,15): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) =\n        let rec sort_array_rec' (arr: 'a []) =\n            let rec sort_array_rec'' (arr: 'a []) =\n                let rec sort_array_rec''' (arr: 'a []) =\n                    let rec sort_array_rec''' (arr: 'a []) =\n                        let rec sort_array_rec''' (arr: 'a []) =\n                            let rec sort_array_rec''' (arr: 'a []) =\n                                let rec sort_array_rec''' (arr: 'a []) =\n                                    let rec sort_array_rec''' (arr: 'a []) =\n                                        let rec sort_array_rec''' (arr: 'a []) =\n                                            let rec sort_array_rec''' (arr: 'a []) =\n                                                let rec sort_array_rec''' (arr: 'a []) =\n                                                    let rec sort_array_rec'' (arr: 'a []) =\n                                                        let rec sort_array_rec'' (arr: 'a []) =\n                                                            let rec sort_array_rec'' (arr: 'a []) =\n                                                                let rec sort_array_rec'' (arr: 'a []) =\n                                                                    let rec sort_array_rec' (arr: 'a []) =\n                                                                        let rec sort_array_rec' (arr: 'a []) =\n                                                                            let rec sort_array_rec' (arr: 'a []) =\n                                                                                let rec sort_array_rec' (arr: 'a []) =\n                                                                                    let rec sort_array_rec' (arr: 'a []) =\n                                                                                        let rec sort_array_rec' (arr: 'a []) =\n                                                                                            let rec sort_array_rec' (arr: 'a []) =\n                                                                                                   let rec sort_array_rec' (arr: 'a []) =\n                                                                                                       let rec sort_array_rec' (arr: 'a []) =\n                                                                                                           let rec sort_array_rec\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprrmz4ljr.fsx(35,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) =\n        let rec sort_array_rec' (arr: 'T[]) =\n            let rec sort_array_rec'' (arr: 'T[]) =\n                let rec sort_array_rec'' (arr: 'T[]) =\n                    let rec sort_array_rec'' (arr: 'T[]) =\n                        let rec sort_array_rec'' (arr: 'T[]) =\n                            let rec sort_array_rec'' (arr: 'T[]) =\n                                let rec sort_array_rec'' (arr: 'T[]) =\n                                    let rec sort_array_rec'' (arr: 'T[]) =\n                                        let rec sort_array_rec'' (arr: 'T[]) =\n                                            let rec sort_array_rec'' (arr: 'T[]) =\n                                                let rec sort_array_rec'' (arr: 'T[]) =\n                                                    let rec sort_array_rec'' (arr: 'T[]) =\n                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                let rec sort_array_rec' (arr: 'T[]) =\n                                                                    let rec sort_array_rec' (arr: 'T[]) =\n                                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                                let rec sort_array_rec' (arr: 'T[]) =\n                                                                                    let rec sort_array_rec' (arr: 'T[]) =\n                                                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                   let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                       let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                           let rec sort_array_rec' (arr: 'T[]) =\n                                                              \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf2k8nmfd.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf2k8nmfd.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf2k8nmfd.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf2k8nmfd.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf2k8nmfd.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) =\n        let rec sort_array'' (arr: 'a array) =\n            let rec sort_array'' (arr: 'a array) =\n                let rec sort_array'' (arr: 'a array) =\n                    let rec sort_array'' (arr: 'a array) =\n                        let rec sort_array'' (arr: 'a array) =\n                            let rec sort_array'' (arr: 'a array) =\n                                let rec sort_array'' (arr: 'a array) =\n                                    let rec sort_array'' (arr: 'a array) =\n                                        let rec sort_array'' (arr: 'a array) =\n                                            let rec sort_array'' (arr: 'a array) =\n                                                let rec sort_array'' (arr: 'a array) =\n                                                    let rec sort_array'' (arr: 'a array) =\n                                                        let rec sort_array'' (arr: 'a array) =\n                                                            let rec sort_array'' (arr: 'a array) =\n                                                                let rec sort_array'' (arr: 'a array) =\n                                                                    let rec sort_array'' (arr: 'a array) =\n                                                                        let rec sort_array'' (arr: 'a array) =\n                                                                            let rec sort_array'' (arr: 'a array) =\n                                                                                let rec sort_array' (arr: 'a array) =\n                                                                                    let rec sort_array' (arr: 'a array) =\n                                                                                        let rec sort_array' (arr: 'a array) =\n                                                                                            let rec sort_array' (arr: 'a array) =\n                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                       let rec sort_array' (arr: 'a array) =\n                                                                                                           let rec sort_array' (arr: 'a array) =\n                                                                                                               let rec sort_array' (arr: 'a array) =\n                                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                                       let rec sort_\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppv48j476.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc = function\n        | [] -> acc\n        | x::xs ->\n            let xs = x::xs\n            let rec sort_array' acc' = function\n                | [] -> acc'\n                | x::xs ->\n                    let xs = x::xs\n                    let rec sort_array' acc' = function\n                        | [] -> acc'\n                        | x::xs ->\n                            let xs = x::xs\n                            let rec sort_array' acc' = function\n                                | [] -> acc'\n                                | x::xs ->\n                                    let xs = x::xs\n                                    let rec sort_array' acc' = function\n                                        | [] -> acc'\n                                        | x::xs ->\n                                            let xs = x::xs\n                                            let rec sort_array' acc' = function\n                                                | [] -> acc'\n                                                | x::xs ->\n                                                    let xs = x::xs\n                                                    let rec sort_array' acc' = function\n                                                        | [] -> acc'\n                                                        | x::xs ->\n                                                            let xs = x::xs\n                                                            let rec sort_array' acc' = function\n                                                                | [] -> acc'\n                                                                | x::xs ->\n                                                                    let xs = x::xs\n                                                                    let rec sort_array' acc' = function\n                                                                        | [] -> acc'\n                                                                        | x::xs ->\n                                                                            let xs = x::xs\n                                                                            let rec sort_array' acc' = function\n                                                                                | [] -> acc'\n                                                                                | x::xs ->\n                                                                                    let xs = x::xs\n                                                                                    let rec sort_array' acc' = function\n                                                                                        | [] -> acc'\n                                                                                        | x::xs ->\n                                                                                            let xs = x::xs\n                                                                                            let rec sort_array' acc' = function\n                                                                                               | [] -> acc'\n                                                                                               | x::xs ->\n                                                                                                   let xs = x::xs\n                                                                                                   let rec sort_array' acc' = function\n                                                                                                       | [] -> acc'\n                                                                                                       | x::xs ->\n                                                                                                           \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa_w_x42u.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpa_w_x42u.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpa_w_x42u.fsx(73,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpa_w_x42u.fsx(73,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpa_w_x42u.fsx(73,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) =\n        let rec sort_array_rec' (arr: 'T[]) =\n            let rec sort_array_rec'' (arr: 'T[]) =\n                let rec sort_array_rec'' (arr: 'T[]) =\n                    let rec sort_array_rec'' (arr: 'T[]) =\n                        let rec sort_array_rec'' (arr: 'T[]) =\n                            let rec sort_array_rec'' (arr: 'T[]) =\n                                let rec sort_array_rec'' (arr: 'T[]) =\n                                    let rec sort_array_rec'' (arr: 'T[]) =\n                                        let rec sort_array_rec'' (arr: 'T[]) =\n                                            let rec sort_array_rec'' (arr: 'T[]) =\n                                                let rec sort_array_rec'' (arr: 'T[]) =\n                                                    let rec sort_array_rec'' (arr: 'T[]) =\n                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                let rec sort_array_rec' (arr: 'T[]) =\n                                                                    let rec sort_array_rec' (arr: 'T[]) =\n                                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                                let rec sort_array_rec' (arr: 'T[]) =\n                                                                                    let rec sort_array_rec' (arr: 'T[]) =\n                                                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                   let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                       let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                           let rec sort_array_rec' (arr: 'T[]) =\n                                                              \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf2k8nmfd.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf2k8nmfd.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf2k8nmfd.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf2k8nmfd.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf2k8nmfd.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) = \n        let rec sort_array'' (arr: 'T[]) = \n            let rec sort_array'' (arr: 'T[]) = \n                let rec sort_array'' (arr: 'T[]) = \n                    let rec sort_array'' (arr: 'T[]) = \n                        let rec sort_array'' (arr: 'T[]) = \n                            let rec sort_array'' (arr: 'T[]) = \n                                let rec sort_array'' (arr: 'T[]) = \n                                    let rec sort_array'' (arr: 'T[]) = \n                                        let rec sort_array'' (arr: 'T[]) = \n                                            let rec sort_array'' (arr: 'T[]) = \n                                                let rec sort_array'' (arr: 'T[]) = \n                                                    let rec sort_array'' (arr: 'T[]) = \n                                                        let rec sort_array'' (arr: 'T[]) = \n                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                let rec sort_array'' (arr: 'T[]) = \n                                                                    let rec sort_array'' (arr: 'T[]) = \n                                                                        let rec sort_array'' (arr: 'T[]) = \n                                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                                let rec sort_array' (arr: 'T[]) = \n                                                                                    let rec sort_array' (arr: 'T[]) = \n                                                                                        let rec sort_array' (arr: 'T[]) = \n                                                                                            let rec sort_array' (arr: 'T[]) = \n                                                                                                   let rec sort_array' (arr: 'T[]) = \n                                                                                                       let rec sort_array' (arr: 'T[]) = \n                                                                                                           let rec sort_array' (arr: 'T[]) = \n                                                                                                               let rec sort_array' (arr: 'T[]) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdwyea240.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(35,112): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x :: xs -> \n            let rec sort_array_rec_rec acc = function\n                | [] -> acc\n                | x :: xs -> \n                    let rec sort_array_rec_rec_rec acc = function\n                        | [] -> acc\n                        | x :: xs -> \n                            let rec sort_array_rec_rec_rec acc = function\n                                | [] -> acc\n                                | x :: xs -> \n                                    let rec sort_array_rec_rec_rec acc = function\n                                        | [] -> acc\n                                        | x :: xs -> \n                                            let rec sort_array_rec_rec_rec acc = function\n                                                | [] -> acc\n                                                | x :: xs -> \n                                                    let rec sort_array_rec_rec_rec acc = function\n                                                        | [] -> acc\n                                                        | x :: xs -> \n                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                | [] -> acc\n                                                                | x :: xs -> \n                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                        | [] -> acc\n                                                                        | x :: xs -> \n                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                | [] -> acc\n                                                                                | x :: xs -> \n                                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                                        | [] -> acc\n                                                                                        | x :: xs -> \n                                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                               | [] -> acc\n                                                                                               | x :: xs -> \n                                                                                                   let rec sort_array_rec_rec_rec acc = function\n                                                                                                       | [] -> acc\n                                                                                                       | x :: xs -> \n                                                                                                           let rec sort_array_rec_rec_rec acc = function\n                                                                                                               | [] -> acc\n                                                                                                               | x :: xs -> \n                                                                                                                   let rec sort_array_rec_rec_rec acc = function\n                                                                                                                       | [] ->\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwpegmn9e.fsx(53,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwpegmn9e.fsx(53,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwpegmn9e.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwpegmn9e.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwpegmn9e.fsx(65,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        let rec sort_array_rec_rec (arr: 'a array) =\n            let rec sort_array_rec_rec_rec (arr: 'a array) =\n                let rec sort_array_rec_rec_rec (arr: 'a array) =\n                    let rec sort_array_rec_rec_rec (arr: 'a array) =\n                        let rec sort_array_rec_rec_rec (arr: 'a array) =\n                            let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                    let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                        let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                            let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                    let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                        let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                            let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                                let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                                    let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                                        let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                                            let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                                                let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                                                    let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                                                        let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                                                            let rec sort_array_rec_rec_rec (arr: 'a array) =\n                                                                                               let rec sort_array_rec_\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz6khto61.fsx(33,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr:array<int>) = \n        let rec sort_array_rec' (arr:array<int>) = \n            let rec sort_array_rec'' (arr:array<int>) = \n                let rec sort_array_rec'' (arr:array<int>) = \n                    let rec sort_array_rec'' (arr:array<int>) = \n                        let rec sort_array_rec'' (arr:array<int>) = \n                            let rec sort_array_rec'' (arr:array<int>) = \n                                let rec sort_array_rec'' (arr:array<int>) = \n                                    let rec sort_array_rec'' (arr:array<int>) = \n                                        let rec sort_array_rec'' (arr:array<int>) = \n                                            let rec sort_array_rec'' (arr:array<int>) = \n                                                let rec sort_array_rec'' (arr:array<int>) = \n                                                    let rec sort_array_rec'' (arr:array<int>) = \n                                                        let rec sort_array_rec'' (arr:array<int>) = \n                                                            let rec sort_array_rec'' (arr:array<int>) = \n                                                                let rec sort_array_rec'' (arr:array<int>) = \n                                                                    let rec sort_array_rec'' (arr:array<int>) = \n                                                                        let rec sort_array_rec' (arr:array<int>) = \n                                                                            let rec sort_array_rec' (arr:array<int>) = \n                                                                                let rec sort_array_rec' (arr:array<int>) = \n                                                                                    let rec sort_array_rec' (arr:array<int>) = \n                                                                                        let rec sort_array_rec' (arr:array<int>) = \n                                                                                            let rec sort_array_rec' (arr:array<int>) = \n                                                                                                   let rec sort_array_rec' (arr:array<int>) = \n                                                                                                       let rec sort_array_rec' (arr:array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp618h6tjc.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp618h6tjc.fsx(34,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        let rec sort_array'' (arr: 'T[]) =\n            let rec sort_array'' (arr: 'T[]) =\n                let rec sort_array'' (arr: 'T[]) =\n                    let rec sort_array'' (arr: 'T[]) =\n                        let rec sort_array'' (arr: 'T[]) =\n                            let rec sort_array'' (arr: 'T[]) =\n                                let rec sort_array'' (arr: 'T[]) =\n                                    let rec sort_array'' (arr: 'T[]) =\n                                        let rec sort_array'' (arr: 'T[]) =\n                                            let rec sort_array'' (arr: 'T[]) =\n                                                let rec sort_array'' (arr: 'T[]) =\n                                                    let rec sort_array'' (arr: 'T[]) =\n                                                        let rec sort_array'' (arr: 'T[]) =\n                                                            let rec sort_array'' (arr: 'T[]) =\n                                                                let rec sort_array'' (arr: 'T[]) =\n                                                                    let rec sort_array'' (arr: 'T[]) =\n                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                let rec sort_array' (arr: 'T[]) =\n                                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                       let rec sort_array' (arr: 'T[]) =\n                                                                                                           let rec sort_array' (arr: 'T[]) =\n                                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                                       let rec sort_array'\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4dc0yvrf.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        match arr with\n        | [| |] -> arr\n        | [| x |] -> arr\n        | x::xs ->\n            let xs = xs |> Array.sortInPlace\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp50ho97om.fsx(13,11): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc =\n        match arr with\n        | [] -> acc\n        | x::xs ->\n            let xs = x::xs\n            let xs = x::xs\n            let xs = x::xs\n            let xs = x::xs\n            sort_array' (acc + xs)\n    sort_array' []\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr6p2oeyl.fsx(18,17): error FS0001: None of the types ''a list, 'a list' support the operator '+'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array'' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafk8yq57.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        match arr with\n        | [| |] -> arr\n        | [| x |] -> arr\n        | [| x; y |] -> arr\n        | x::xs ->\n            let y = x\n            let y = y |> Array.sortInPlace\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi2q7ahnr.fsx(14,11): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr:array<int>) = \n        match arr with\n        | null -> arr\n        | _ ->\n            let rec sort_array' (arr:array<int>) = \n                match arr with\n                | null -> arr\n                | _ ->\n                    let rec sort_array' (arr:array<int>) = \n                        match arr with\n                        | null -> arr\n                        | _ ->\n                            let rec sort_array' (arr:array<int>) = \n                                match arr with\n                                | null -> arr\n                                | _ ->\n                                    let rec sort_array' (arr:array<int>) = \n                                        match arr with\n                                        | null -> arr\n                                        | _ ->\n                                            let rec sort_array' (arr:array<int>) = \n                                                match arr with\n                                                | null -> arr\n                                                | _ ->\n                                                    let rec sort_array' (arr:array<int>) = \n                                                        match arr with\n                                                        | null -> arr\n                                                        | _ ->\n                                                            let rec sort_array' (arr:array<int>) = \n                                                               match arr with\n                                                               | null -> arr\n                                                               | _ ->\n                                                                   let rec sort_array' (arr:array<int>) = \n                                                                       match arr with\n                                                                       | null -> arr\n                                                                       | _ ->\n                                                                           let rec sort_array' (arr:array<int>) = \n                                                                               match arr with\n                                                                               | null -> arr\n                                                                               | _ ->\n                                                                                   let rec sort_array' (arr:array<int>) = \n                                                                                       match arr with\n                                                                                       | null -> arr\n                                                                                       | _ ->\n                                                                                           let rec sort_array' (arr:array<int>) = \n                                                                                              match arr with\n                                                                                              | null -> arr\n                                                                                              | _ ->\n                                                                                                  let rec sort_array' (arr:array<int>) = \n                                                                                                      match arr with\n                                                                                                      | null -> arr\n                                                                                                      | _ ->\n                                                                                                          let rec sort_array' (arr:array<int>) = \n                                                                                             \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdj37xm__.fsx(63,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (61:107). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdj37xm__.fsx(63,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (61:107). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdj37xm__.fsx(75,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (61:107). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdj37xm__.fsx(75,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (61:107). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdj37xm__.fsx(75,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (61:107). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        let rec sort_array'' (arr: 'a array) = \n            let rec sort_array'' (arr: 'a array) = \n                let rec sort_array'' (arr: 'a array) = \n                    let rec sort_array'' (arr: 'a array) = \n                        let rec sort_array'' (arr: 'a array) = \n                            let rec sort_array'' (arr: 'a array) = \n                                let rec sort_array'' (arr: 'a array) = \n                                    let rec sort_array'' (arr: 'a array) = \n                                        let rec sort_array'' (arr: 'a array) = \n                                            let rec sort_array'' (arr: 'a array) = \n                                                let rec sort_array'' (arr: 'a array) = \n                                                    let rec sort_array'' (arr: 'a array) = \n                                                        let rec sort_array'' (arr: 'a array) = \n                                                            let rec sort_array'' (arr: 'a array) = \n                                                                let rec sort_array'' (arr: 'a array) = \n                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                let rec sort_array'' (arr: 'a array) = \n                                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                                        let rec sort_array' (arr: 'a array) = \n                                                                                            let rec sort_array' (arr: 'a array) = \n                                                                                                   let rec sort_array' (arr: 'a array) = \n                                                                                                       let rec sort_array' (arr: 'a array) = \n                                                                                                           let rec sort_array' (arr: 'a array) = \n                                                                                                               let rec sort_array' (arr: 'a array) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphethbdgh.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr:array<int>) = \n        let rec sort_array_rec' (arr:array<int>) = \n            let rec sort_array_rec'' (arr:array<int>) = \n                let rec sort_array_rec'' (arr:array<int>) = \n                    let rec sort_array_rec'' (arr:array<int>) = \n                        let rec sort_array_rec'' (arr:array<int>) = \n                            let rec sort_array_rec'' (arr:array<int>) = \n                                let rec sort_array_rec'' (arr:array<int>) = \n                                    let rec sort_array_rec'' (arr:array<int>) = \n                                        let rec sort_array_rec'' (arr:array<int>) = \n                                            let rec sort_array_rec'' (arr:array<int>) = \n                                                let rec sort_array_rec'' (arr:array<int>) = \n                                                    let rec sort_array_rec'' (arr:array<int>) = \n                                                        let rec sort_array_rec'' (arr:array<int>) = \n                                                            let rec sort_array_rec'' (arr:array<int>) = \n                                                                let rec sort_array_rec'' (arr:array<int>) = \n                                                                    let rec sort_array_rec'' (arr:array<int>) = \n                                                                        let rec sort_array_rec' (arr:array<int>) = \n                                                                            let rec sort_array_rec' (arr:array<int>) = \n                                                                                let rec sort_array_rec' (arr:array<int>) = \n                                                                                    let rec sort_array_rec' (arr:array<int>) = \n                                                                                        let rec sort_array_rec' (arr:array<int>) = \n                                                                                            let rec sort_array_rec' (arr:array<int>) = \n                                                                                                   let rec sort_array_rec' (arr:array<int>) = \n                                                                                                       let rec sort_array_rec' (arr:array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp618h6tjc.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp618h6tjc.fsx(34,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) =\n        let rec sort_array_rec' (arr: 'T[]) =\n            let rec sort_array_rec'' (arr: 'T[]) =\n                let rec sort_array_rec'' (arr: 'T[]) =\n                    let rec sort_array_rec'' (arr: 'T[]) =\n                        let rec sort_array_rec'' (arr: 'T[]) =\n                            let rec sort_array_rec'' (arr: 'T[]) =\n                                let rec sort_array_rec'' (arr: 'T[]) =\n                                    let rec sort_array_rec'' (arr: 'T[]) =\n                                        let rec sort_array_rec'' (arr: 'T[]) =\n                                            let rec sort_array_rec'' (arr: 'T[]) =\n                                                let rec sort_array_rec'' (arr: 'T[]) =\n                                                    let rec sort_array_rec'' (arr: 'T[]) =\n                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                let rec sort_array_rec' (arr: 'T[]) =\n                                                                    let rec sort_array_rec' (arr: 'T[]) =\n                                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                                let rec sort_array_rec' (arr: 'T[]) =\n                                                                                    let rec sort_array_rec' (arr: 'T[]) =\n                                                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                                               let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                   let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                       let rec sort_array_rec' (arr: 'T[]) =\n                                                              \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbkcwm6w9.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbkcwm6w9.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbkcwm6w9.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbkcwm6w9.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbkcwm6w9.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:104). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) = \n        let rec sort_array_rec' (arr: 'a array) = \n            let rec sort_array_rec'' (arr: 'a array) = \n                let rec sort_array_rec'' (arr: 'a array) = \n                    let rec sort_array_rec''' (arr: 'a array) = \n                        let rec sort_array_rec''' (arr: 'a array) = \n                            let rec sort_array_rec''' (arr: 'a array) = \n                                let rec sort_array_rec''' (arr: 'a array) = \n                                    let rec sort_array_rec''' (arr: 'a array) = \n                                        let rec sort_array_rec''' (arr: 'a array) = \n                                            let rec sort_array_rec''' (arr: 'a array) = \n                                                let rec sort_array_rec''' (arr: 'a array) = \n                                                    let rec sort_array_rec''' (arr: 'a array) = \n                                                        let rec sort_array_rec''' (arr: 'a array) = \n                                                            let rec sort_array_rec''' (arr: 'a array) = \n                                                                let rec sort_array_rec'' (arr: 'a array) = \n                                                                    let rec sort_array_rec'' (arr: 'a array) = \n                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                let rec sort_array_rec' (arr: 'a array) = \n                                                                                    let rec sort_array_rec' (arr: 'a array) = \n                                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                                   let rec sort_array_rec' (arr: 'a array) = \n                                                                                                       let\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxltgjhx6.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array'' (arr: 'a []) = \n                                                                                    let rec sort_array' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) = \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpugb7pika.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc = function\n        | [] -> acc\n        | x::xs ->\n            let rec sort_array'' acc' xs =\n                match xs with\n                | [] -> acc'\n                | x::xs ->\n                    let x = x\n                    let x = x.CompareTo(x)\n                    if x < 0 then sort_array' (x::acc) xs\n                    elif x > 0 then sort_array' (x::acc) xs\n                    else acc\n            sort_array' (sort_array' acc xs) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphv3z1l6s.fsx(17,29): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array'' (arr: 'a []) = \n                                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpipb0yczu.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpipb0yczu.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpipb0yczu.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpipb0yczu.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpipb0yczu.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: _[]) = \n        let rec sort_array'' (arr: _[]) = \n            let rec sort_array'' (arr: _[]) = \n                let rec sort_array'' (arr: _[]) = \n                    let rec sort_array'' (arr: _[]) = \n                        let rec sort_array'' (arr: _[]) = \n                            let rec sort_array'' (arr: _[]) = \n                                let rec sort_array'' (arr: _[]) = \n                                    let rec sort_array'' (arr: _[]) = \n                                        let rec sort_array'' (arr: _[]) = \n                                            let rec sort_array'' (arr: _[]) = \n                                                let rec sort_array'' (arr: _[]) = \n                                                    let rec sort_array'' (arr: _[]) = \n                                                        let rec sort_array'' (arr: _[]) = \n                                                            let rec sort_array'' (arr: _[]) = \n                                                                let rec sort_array'' (arr: _[]) = \n                                                                    let rec sort_array'' (arr: _[]) = \n                                                                        let rec sort_array'' (arr: _[]) = \n                                                                            let rec sort_array'' (arr: _[]) = \n                                                                                let rec sort_array'' (arr: _[]) = \n                                                                                    let rec sort_array' (arr: _[]) = \n                                                                                        let rec sort_array' (arr: _[]) = \n                                                                                            let rec sort_array' (arr: _[]) = \n                                                                                                   let rec sort_array' (arr: _[]) = \n                                                                                                       let rec sort_array' (arr: _[]) = \n                                                                                                           let rec sort_array' (arr: _[]) = \n                                                                                                               let rec sort_array' (arr: _[]) = \n                                                                                                                   let rec sort_array' (arr: _[]) = \n                                                                                                                       let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfnf5rn8i.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) = \n        match arr with\n        | [] -> arr\n        | x::xs -> \n            let x = x\n            let y = x\n            let z = x\n            if y > z then\n                sort_array_rec xs\n            else\n                sort_array_rec xs\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp21d_dl7u.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc (arr: 'a array) =\n        match arr with\n        | [] -> acc\n        | _ :: tail ->\n            let left, right = sort_array_rec (acc + 1) tail\n            (left, right)\n    sort_array_rec 0 arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiquw0bl1.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array'' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwefutcfy.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) = \n        let rec sort_array_rec' (arr: 'a array) = \n            let rec sort_array_rec'' (arr: 'a array) = \n                let rec sort_array_rec'' (arr: 'a array) = \n                    let rec sort_array_rec'' (arr: 'a array) = \n                        let rec sort_array_rec'' (arr: 'a array) = \n                            let rec sort_array_rec'' (arr: 'a array) = \n                                let rec sort_array_rec'' (arr: 'a array) = \n                                    let rec sort_array_rec'' (arr: 'a array) = \n                                        let rec sort_array_rec'' (arr: 'a array) = \n                                            let rec sort_array_rec'' (arr: 'a array) = \n                                                let rec sort_array_rec'' (arr: 'a array) = \n                                                    let rec sort_array_rec'' (arr: 'a array) = \n                                                        let rec sort_array_rec'' (arr: 'a array) = \n                                                            let rec sort_array_rec'' (arr: 'a array) = \n                                                                let rec sort_array_rec'' (arr: 'a array) = \n                                                                    let rec sort_array_rec'' (arr: 'a array) = \n                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                let rec sort_array_rec' (arr: 'a array) = \n                                                                                    let rec sort_array_rec' (arr: 'a array) = \n                                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                                   let rec sort_array_rec' (arr: 'a array) = \n                                                                                                       let rec sort_array_rec' (arr: '\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp565zvwrs.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp565zvwrs.fsx(34,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected identifier or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) = \n        match arr with \n        | null -> arr\n        | _ -> \n            let mutable i = 0\n            let mutable j = 0\n            let mutable temp = arr.[0]\n            while i < arr.Length && j < arr.Length do\n                if arr.[i] <> arr.[j] then\n                    let temp = arr.[i]\n                    arr.[i] <- arr.[j]\n                    arr.[j] <- temp\n                    i <- i + 1\n                    j <- j + 1\n                else\n                    i <- i + 1\n                    j <- j + 1\n            if i < arr.Length then\n                arr.[i] <- arr.[j]\n                arr.[j] <- temp\n            if j < arr.Length then\n                arr.[j] <- arr.[i]\n                arr.[i] <- temp\n            arr\n    let arr = Array.zeroCreate (arr.Length)\n    arr |> sort_array_rec\n    arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzs99ay7m.fsx(33,33): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array' (arr: 'a []) =\n                                                                let rec sort_array' (arr: 'a []) =\n                                                                    let rec sort_array' (arr: 'a []) =\n                                                                        let rec sort_array' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array' (arr:\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjosqbdkr.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjosqbdkr.fsx(38,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        let rec sort_array'' (arr: 'a array) = \n            let rec sort_array'' (arr: 'a array) = \n                let rec sort_array'' (arr: 'a array) = \n                    let rec sort_array'' (arr: 'a array) = \n                        let rec sort_array'' (arr: 'a array) = \n                            let rec sort_array'' (arr: 'a array) = \n                                let rec sort_array'' (arr: 'a array) = \n                                    let rec sort_array'' (arr: 'a array) = \n                                        let rec sort_array'' (arr: 'a array) = \n                                            let rec sort_array'' (arr: 'a array) = \n                                                let rec sort_array'' (arr: 'a array) = \n                                                    let rec sort_array'' (arr: 'a array) = \n                                                        let rec sort_array'' (arr: 'a array) = \n                                                            let rec sort_array'' (arr: 'a array) = \n                                                                let rec sort_array'' (arr: 'a array) = \n                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                let rec sort_array'' (arr: 'a array) = \n                                                                                    let rec sort_array' (arr: 'a array) = \n                                                                                        let rec sort_array' (arr: 'a array) = \n                                                                                            let rec sort_array' (arr: 'a array) = \n                                                                                                   let rec sort_array' (arr: 'a array) = \n                                                                                                       let rec sort_array' (arr: 'a array) = \n                                                                                                           let rec sort_array' (arr: 'a array) = \n                                                                                                               let rec sort_array' (arr: 'a array) = \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1tl1bo.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(35,112): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr:array<int>) = \n        match arr with\n        | [] -> arr\n        | x::xs -> \n            let xs' = x::xs\n            let xs'' = x::xs''\n            sort_array' xs''\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3f9c1foc.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        let rec sort_array_rec' (arr: 'a array) =\n            let rec sort_array_rec'' (arr: 'a array) =\n                let rec sort_array_rec'' (arr: 'a array) =\n                    let rec sort_array_rec'' (arr: 'a array) =\n                        let rec sort_array_rec'' (arr: 'a array) =\n                            let rec sort_array_rec'' (arr: 'a array) =\n                                let rec sort_array_rec'' (arr: 'a array) =\n                                    let rec sort_array_rec'' (arr: 'a array) =\n                                        let rec sort_array_rec'' (arr: 'a array) =\n                                            let rec sort_array_rec'' (arr: 'a array) =\n                                                let rec sort_array_rec'' (arr: 'a array) =\n                                                    let rec sort_array_rec'' (arr: 'a array) =\n                                                        let rec sort_array_rec'' (arr: 'a array) =\n                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                let rec sort_array_rec' (arr: 'a array) =\n                                                                    let rec sort_array_rec' (arr: 'a array) =\n                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                let rec sort_array_rec' (arr: 'a array) =\n                                                                                    let rec sort_array_rec' (arr: 'a array) =\n                                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                                   let rec sort_array_rec' (arr: 'a array) =\n                                                                                                       let rec sort_array_rec' (arr: 'a array) =\n                                                                                                           let rec sort_array_rec' (arr: 'a array) =\n                               \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0bqpcei6.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0bqpcei6.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0bqpcei6.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0bqpcei6.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0bqpcei6.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x :: xs ->\n            let rec sort_array_rec_rec acc = function\n                | [] -> acc\n                | x :: xs ->\n                    let rec sort_array_rec_rec_rec acc = function\n                        | [] -> acc\n                        | x :: xs ->\n                            let rec sort_array_rec_rec_rec acc = function\n                                | [] -> acc\n                                | x :: xs ->\n                                    let rec sort_array_rec_rec_rec acc = function\n                                        | [] -> acc\n                                        | x :: xs ->\n                                            let rec sort_array_rec_rec_rec acc = function\n                                                | [] -> acc\n                                                | x :: xs ->\n                                                    let rec sort_array_rec_rec_rec acc = function\n                                                        | [] -> acc\n                                                        | x :: xs ->\n                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                | [] -> acc\n                                                                | x :: xs ->\n                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                        | [] -> acc\n                                                                        | x :: xs ->\n                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                | [] -> acc\n                                                                                | x :: xs ->\n                                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                                        | [] -> acc\n                                                                                        | x :: xs ->\n                                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                               | [] -> acc\n                                                                                               | x :: xs ->\n                                                                                                   let rec sort_array_rec_rec_rec acc = function\n                                                                                                       | [] -> acc\n                                                                                                       | x :: xs ->\n                                                                                                           let rec sort_array_rec_rec_rec acc = function\n                                                                                                               | [] -> acc\n                                                                                                               | x :: xs ->\n                                                                                                                   let rec sort_array_rec_rec_rec acc = function\n                                                                                                                       | [] -> acc\n                                                                                                                       | x :: xs ->\n                               \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq7zcu0p9.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq7zcu0p9.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq7zcu0p9.fsx(67,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq7zcu0p9.fsx(67,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq7zcu0p9.fsx(67,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: _[]) = \n        let rec sort_array'' (arr: _[]) = \n            let rec sort_array'' (arr: _[]) = \n                let rec sort_array'' (arr: _[]) = \n                    let rec sort_array'' (arr: _[]) = \n                        let rec sort_array'' (arr: _[]) = \n                            let rec sort_array'' (arr: _[]) = \n                                let rec sort_array'' (arr: _[]) = \n                                    let rec sort_array'' (arr: _[]) = \n                                        let rec sort_array'' (arr: _[]) = \n                                            let rec sort_array'' (arr: _[]) = \n                                                let rec sort_array'' (arr: _[]) = \n                                                    let rec sort_array'' (arr: _[]) = \n                                                        let rec sort_array'' (arr: _[]) = \n                                                            let rec sort_array'' (arr: _[]) = \n                                                                let rec sort_array'' (arr: _[]) = \n                                                                    let rec sort_array'' (arr: _[]) = \n                                                                        let rec sort_array'' (arr: _[]) = \n                                                                            let rec sort_array' (arr: _[]) = \n                                                                                let rec sort_array' (arr: _[]) = \n                                                                                    let rec sort_array' (arr: _[]) = \n                                                                                        let rec sort_array' (arr: _[]) = \n                                                                                            let rec sort_array' (arr: _[]) = \n                                                                                                   let rec sort_array' (arr: _[]) = \n                                                                                                       let rec sort_array' (arr: _[]) = \n                                                                                                           let rec sort_array' (arr: _[]) = \n                                                                                                               let rec sort_array' (arr: _[]) = \n                                                                                                                   let rec sort_array' (arr: _[]) = \n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcckhhix_.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) =\n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let xs = xs |> Array.sort\n            let xs = xs |> Array.map (fun x -> x.CompareTo(x))\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfwkh1rp9.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array' (arr: 'a []) =\n                                                                    let rec sort_array' (arr: 'a []) =\n                                                                        let rec sort_array' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array' (arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0t7an5b8.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0t7an5b8.fsx(38,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x::xs ->\n            let xs = x::xs\n            let ys = x::ys\n            let zs = x::zs\n            let z = x\n            let y = ys\n            let z = zs\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y = ys\n            let z = z\n            let y =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj2_p1dym.fsx(86,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (85:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpj2_p1dym.fsx(86,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (85:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpj2_p1dym.fsx(98,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (85:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpj2_p1dym.fsx(98,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (85:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpj2_p1dym.fsx(98,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (85:13). Try indenting this t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc (arr: 'a array) =\n        match arr with\n        | [] -> acc\n        | x::xs ->\n            let x = x\n            let y = x\n            if y > x then\n                sort_array' (x::acc) xs\n            else\n                sort_array' (y::acc) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0k0x4l1b.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a[]) =\n        let rec sort_array_rec' (arr: 'a[]) =\n            let rec sort_array_rec'' (arr: 'a[]) =\n                let rec sort_array_rec'' (arr: 'a[]) =\n                    let rec sort_array_rec'' (arr: 'a[]) =\n                        let rec sort_array_rec'' (arr: 'a[]) =\n                            let rec sort_array_rec'' (arr: 'a[]) =\n                                let rec sort_array_rec'' (arr: 'a[]) =\n                                    let rec sort_array_rec'' (arr: 'a[]) =\n                                        let rec sort_array_rec'' (arr: 'a[]) =\n                                            let rec sort_array_rec'' (arr: 'a[]) =\n                                                let rec sort_array_rec'' (arr: 'a[]) =\n                                                    let rec sort_array_rec'' (arr: 'a[]) =\n                                                        let rec sort_array_rec' (arr: 'a[]) =\n                                                            let rec sort_array_rec' (arr: 'a[]) =\n                                                                let rec sort_array_rec' (arr: 'a[]) =\n                                                                    let rec sort_array_rec' (arr: 'a[]) =\n                                                                        let rec sort_array_rec' (arr: 'a[]) =\n                                                                            let rec sort_array_rec' (arr: 'a[]) =\n                                                                                let rec sort_array_rec' (arr: 'a[]) =\n                                                                                    let rec sort_array_rec' (arr: 'a[]) =\n                                                                                        let rec sort_array_rec' (arr: 'a[]) =\n                                                                                            let rec sort_array_rec' (arr: 'a[]) =\n                                                                                                   let rec sort_array_rec' (arr: 'a[]) =\n                                                                                                       let rec sort_array_rec' (arr: 'a[]) =\n                                                                                                           let rec sort_array_rec' (arr: 'a[]) =\n                                                              \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp10cs8fi4.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp10cs8fi4.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp10cs8fi4.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp10cs8fi4.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp10cs8fi4.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr:array<int>) =\n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let xs = x::xs\n            let ys = sort_array_rec xs\n            let zs = sort_array_rec ys\n            (xs, ys) ||> List.fold (fun acc x ->\n                if x = 0 then acc\n                else\n                    let y = x / xs.Length\n                    let z = x % xs.Length\n                    if z = 0 then acc\n                    else\n                        let z = y / ys.Length\n                        let x = x % ys.Length\n                        if x = 0 then acc\n                        else\n                            let y = y / ys.Length\n                            let z = y % ys.Length\n                            if z = 0 then acc\n                            else\n                                let z = z / zs.Length\n                                let x = x % zs.Length\n                                if x = 0 then acc\n                                else\n                                    let y = y / zs.Length\n                                    let z = y % zs.Length\n                                    if z = 0 then acc\n                                    else\n                                        let z = z / zs.Length\n                                        let x = x % zs.Length\n                                        if x = 0 then acc\n                                        else\n                                            let y = y / zs.Length\n                                            let z = y % zs.Length\n                                            if z = 0 then acc\n                                            else\n                                                let z = z / zs.Length\n                                                let x = x % zs.Length\n                                                if x = 0 then acc\n                                                else\n                                                    let y = y / zs.Length\n                                                    let z = y % zs.Length\n                                                    if z = 0 then acc\n                                                    else\n                                                        let z = z / zs.Length\n                                                        let x = x % zs.Length\n                                                        if x = 0 then acc\n                                                        else\n                                                            let y = y / zs.Length\n                                                            let z = y % zs.Length\n                                                            if z = 0 then acc\n                                                            else\n                                                                let z = z / zs.Length\n                                                                let x = x % z\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvh_e9pks.fsx(64,65): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n\n\n/tmp/tmpvh_e9pks.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:9). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr:array<int>) = \n        let rec sort_array'' (arr:array<int>) = \n            let rec sort_array'' (arr:array<int>) = \n                let rec sort_array'' (arr:array<int>) = \n                    let rec sort_array'' (arr:array<int>) = \n                        let rec sort_array'' (arr:array<int>) = \n                            let rec sort_array'' (arr:array<int>) = \n                                let rec sort_array'' (arr:array<int>) = \n                                    let rec sort_array'' (arr:array<int>) = \n                                        let rec sort_array'' (arr:array<int>) = \n                                            let rec sort_array'' (arr:array<int>) = \n                                                let rec sort_array'' (arr:array<int>) = \n                                                    let rec sort_array'' (arr:array<int>) = \n                                                        let rec sort_array'' (arr:array<int>) = \n                                                            let rec sort_array'' (arr:array<int>) = \n                                                                let rec sort_array'' (arr:array<int>) = \n                                                                    let rec sort_array'' (arr:array<int>) = \n                                                                        let rec sort_array'' (arr:array<int>) = \n                                                                            let rec sort_array'' (arr:array<int>) = \n                                                                                let rec sort_array'' (arr:array<int>) = \n                                                                                    let rec sort_array'' (arr:array<int>) = \n                                                                                        let rec sort_array' (arr:array<int>) = \n                                                                                            let rec sort_array' (arr:array<int>) = \n                                                                                                   let rec sort_array' (arr:array<int>) = \n                                                                                                       let rec sort_array' (arr:array<int>) = \n                                                                                                           let rec sort_array' (arr:array<int>) = \n                                                                                                               let rec sort_array' (arr:array<int>) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbsamm_yy.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbsamm_yy.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbsamm_yy.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbsamm_yy.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbsamm_yy.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr:array<int>) =\n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let xs = xs |> Array.sort\n            let xs = xs |> Array.map (fun x -> x - x % 2)\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6mlrzu7g.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) =\n        let rec sort_array_rec' (arr: 'a []) =\n            let rec sort_array_rec'' (arr: 'a []) =\n                let rec sort_array_rec'' (arr: 'a []) =\n                    let rec sort_array_rec'' (arr: 'a []) =\n                        let rec sort_array_rec'' (arr: 'a []) =\n                            let rec sort_array_rec'' (arr: 'a []) =\n                                let rec sort_array_rec'' (arr: 'a []) =\n                                    let rec sort_array_rec'' (arr: 'a []) =\n                                        let rec sort_array_rec'' (arr: 'a []) =\n                                            let rec sort_array_rec'' (arr: 'a []) =\n                                                let rec sort_array_rec'' (arr: 'a []) =\n                                                    let rec sort_array_rec'' (arr: 'a []) =\n                                                        let rec sort_array_rec' (arr: 'a []) =\n                                                            let rec sort_array_rec' (arr: 'a []) =\n                                                                let rec sort_array_rec' (arr: 'a []) =\n                                                                    let rec sort_array_rec' (arr: 'a []) =\n                                                                        let rec sort_array_rec' (arr: 'a []) =\n                                                                            let rec sort_array_rec' (arr: 'a []) =\n                                                                                let rec sort_array_rec' (arr: 'a []) =\n                                                                                    let rec sort_array_rec' (arr: 'a []) =\n                                                                                        let rec sort_array_rec' (arr: 'a []) =\n                                                                                            let rec sort_array_rec' (arr: 'a []) =\n                                                                                                   let rec sort_array_rec' (arr: 'a []) =\n                                                                                                       let rec sort_array_rec' (arr: 'a []) =\n                                                                                                           let rec sort_array_rec' (arr: 'a []) =\n                                                              \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4d9gcmiz.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4d9gcmiz.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4d9gcmiz.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4d9gcmiz.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4d9gcmiz.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4d9gcmiz.fsx(34,108): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) = \n        let rec sort_array'' (arr: 'T[]) = \n            let rec sort_array'' (arr: 'T[]) = \n                let rec sort_array'' (arr: 'T[]) = \n                    let rec sort_array'' (arr: 'T[]) = \n                        let rec sort_array'' (arr: 'T[]) = \n                            let rec sort_array'' (arr: 'T[]) = \n                                let rec sort_array'' (arr: 'T[]) = \n                                    let rec sort_array'' (arr: 'T[]) = \n                                        let rec sort_array'' (arr: 'T[]) = \n                                            let rec sort_array'' (arr: 'T[]) = \n                                                let rec sort_array'' (arr: 'T[]) = \n                                                    let rec sort_array'' (arr: 'T[]) = \n                                                        let rec sort_array'' (arr: 'T[]) = \n                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                let rec sort_array'' (arr: 'T[]) = \n                                                                    let rec sort_array'' (arr: 'T[]) = \n                                                                        let rec sort_array'' (arr: 'T[]) = \n                                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                                let rec sort_array'' (arr: 'T[]) = \n                                                                                    let rec sort_array'' (arr: 'T[]) = \n                                                                                        let rec sort_array' (arr: 'T[]) = \n                                                                                            let rec sort_array' (arr: 'T[]) = \n                                                                                                   let rec sort_array' (arr: 'T[]) = \n                                                                                                       let rec sort_array' (arr: 'T[]) = \n                                                                                                           let rec sort_array' (arr: 'T[]) = \n                                                                                                               let rec sort_array' (arr: 'T[]) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp91nq3jpy.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp91nq3jpy.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp91nq3jpy.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp91nq3jpy.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp91nq3jpy.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        match arr with\n        | null -> arr\n        | _ ->\n            let mutable i = 0\n            let mutable j = 0\n            let mutable k = 0\n            let mutable l = 0\n            let mutable m = 0\n            let mutable n = 0\n            let mutable p = 0\n            let mutable q = 0\n            let mutable r = 0\n            while i < arr.Length && j < arr.Length do\n                if arr.[i] < arr.[j] then\n                    if arr.[i] < arr.[j] then\n                        if arr.[i] < arr.[j] then\n                            if arr.[i] < arr.[j] then\n                                if arr.[i] < arr.[j] then\n                                    if arr.[i] < arr.[j] then\n                                        if arr.[i] < arr.[j] then\n                                            if arr.[i] < arr.[j] then\n                                                if arr.[i] < arr.[j] then\n                                                    if arr.[i] < arr.[j] then\n                                                        if arr.[i] < arr.[j] then\n                                                            if arr.[i] < arr.[j] then\n                                                                if arr.[i] < arr.[j] then\n                                                                    if arr.[i] < arr.[j] then\n                                                                        if arr.[i] < arr.[j] then\n                                                                            if arr.[i] < arr.[j] then\n                                                                                if arr.[i] < arr.[j] then\n                                                                                    if arr.[i] < arr.[j] then\n                                                                                        if arr.[i] < arr.[j] then\n                                                                                            if arr.[i] < arr.[j] then\n                                                                                               if arr.[i] < arr.[j] then\n                                                                                                   if arr.[i] < arr.[j] then\n                                                                                                       if arr.[i] < arr.[j] then\n                                                                                                           if arr.[i] < arr.[j] then\n                                                                                                               if arr.[i] < arr.[j] then\n                                                                                                                   if arr.[i] < arr.[j] then\n                                                                                                                       if arr.[i] < arr.[j]\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuqq_p6q6.fsx(50,1): error FS0010: Incomplete structured construct at or before this point in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc (arr:int[]) = \n        match arr with\n        | [|x|] -> acc\n        | [|x|] -> acc\n        | x::xs -> \n            let res = sort_array' (acc + x) xs\n            sort_array' res xs\n    sort_array' 0 arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwwvxzzf9.fsx(13,11): error FS0001: This expression was expected to have type\n    'int[]'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc (arr: 'a array) =\n        match arr with\n        | [] -> acc\n        | x::xs ->\n            let xs = xs |> Array.sort\n            let xs = xs |> Array.map (fun x -> x - x % 2)\n            sort_array_rec (x::acc) xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps7x9mtfg.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) =\n        let rec sort_array_rec' (arr: 'T[]) =\n            let rec sort_array_rec'' (arr: 'T[]) =\n                if arr.Length = 0 then\n                    arr\n                else\n                    let temp = arr.[0]\n                    arr.[0] <- arr.[arr.Length - 1]\n                    arr.[arr.Length - 1] <- temp\n                    sort_array_rec'' arr\n            sort_array_rec'' arr\n        sort_array_rec' arr\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppw0vgeo9.fsx(24,21): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        match arr with\n        | [] -> arr\n        | x::xs -> \n            let xs = xs |> Array.sort\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6y5u_rgk.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        match arr with \n        | [] -> arr\n        | x::xs -> \n            let xs = xs |> Array.sortInPlace\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzg7laerk.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        let rec sort_array_rec' (arr: 'a array) =\n            let rec sort_array_rec'' (arr: 'a array) =\n                let rec sort_array_rec'' (arr: 'a array) =\n                    let rec sort_array_rec'' (arr: 'a array) =\n                        let rec sort_array_rec'' (arr: 'a array) =\n                            let rec sort_array_rec'' (arr: 'a array) =\n                                let rec sort_array_rec'' (arr: 'a array) =\n                                    let rec sort_array_rec'' (arr: 'a array) =\n                                        let rec sort_array_rec'' (arr: 'a array) =\n                                            let rec sort_array_rec'' (arr: 'a array) =\n                                                let rec sort_array_rec'' (arr: 'a array) =\n                                                    let rec sort_array_rec'' (arr: 'a array) =\n                                                        let rec sort_array_rec'' (arr: 'a array) =\n                                                            let rec sort_array_rec'' (arr: 'a array) =\n                                                                let rec sort_array_rec'' (arr: 'a array) =\n                                                                    let rec sort_array_rec'' (arr: 'a array) =\n                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                let rec sort_array_rec' (arr: 'a array) =\n                                                                                    let rec sort_array_rec' (arr: 'a array) =\n                                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                                   let rec sort_array_rec' (arr: 'a array) =\n                                                                                                       let rec sort_array_rec' (arr: 'a array) =\n                                                                                                           let rec sort_array_rec' (arr: 'a array)\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoa2xcapw.fsx(35,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) = \n        let rec sort_array_rec' (arr: 'T[]) = \n            let rec sort_array_rec'' (arr: 'T[]) = \n                let rec sort_array_rec'' (arr: 'T[]) = \n                    let rec sort_array_rec'' (arr: 'T[]) = \n                        let rec sort_array_rec'' (arr: 'T[]) = \n                            let rec sort_array_rec'' (arr: 'T[]) = \n                                let rec sort_array_rec'' (arr: 'T[]) = \n                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                        let rec sort_array_rec'' (arr: 'T[]) = \n                                            let rec sort_array_rec'' (arr: 'T[]) = \n                                                let rec sort_array_rec'' (arr: 'T[]) = \n                                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                                        let rec sort_array_rec'' (arr: 'T[]) = \n                                                            let rec sort_array_rec'' (arr: 'T[]) = \n                                                                let rec sort_array_rec'' (arr: 'T[]) = \n                                                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                let rec sort_array_rec' (arr: 'T[]) = \n                                                                                    let rec sort_array_rec' (arr: 'T[]) = \n                                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                   let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                       let rec sort_array_rec' (arr: '\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjfleho_0.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjfleho_0.fsx(34,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected identifier or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array' (arr: 'a []) = \n                                                                                    let rec sort_array' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) =\n        match arr with\n        | [| |] -> arr\n        | [| x |] -> [| x |]\n        | [| x; y |] -> [| x; y |]\n        | xs ->\n            let rec sort_array_rec' (xs: 'T[]) =\n                match xs with\n                | [| |] -> xs\n                | [| x |] -> [| x |]\n                | [| x; y |] -> [| x; y |]\n                | xs ->\n                    let rec sort_array_rec'' (xs: 'T[]) =\n                        match xs with\n                        | [| |] -> xs\n                        | [| x |] -> [| x |]\n                        | [| x; y |] -> [| x; y |]\n                        | xs ->\n                            let rec sort_array_rec''' (xs: 'T[]) =\n                                match xs with\n                                | [| |] -> xs\n                                | [| x |] -> [| x |]\n                                | [| x; y |] -> [| x; y |]\n                                | xs ->\n                                    let rec sort_array_rec'''' (xs: 'T[]) =\n                                        match xs with\n                                        | [| |] -> xs\n                                        | [| x |] -> [| x |]\n                                        | [| x; y |] -> [| x; y |]\n                                        | xs ->\n                                            let rec sort_array_rec'''' (xs: 'T[]) =\n                                                match xs with\n                                                | [| |] -> xs\n                                                | [| x |] -> [| x |]\n                                                | [| x; y |] -> [| x; y |]\n                                                | xs ->\n                                                    let rec sort_array_rec'''' (xs: 'T[]) =\n                                                        match xs with\n                                                        | [| |] -> xs\n                                                        | [| x |] -> [| x |]\n                                                        | [| x; y |] -> [| x; y |]\n                                                        | xs ->\n                                                            let rec sort_array_rec'''' (xs:\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1vm9h6cb.fsx(52,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (51:61). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1vm9h6cb.fsx(52,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: _[]) =\n        match arr with\n        | [|x;y|] -> if x > y then [x;y] else [y;x]\n        | _ ->\n            let rec sort_array' (arr: _[]) =\n                match arr with\n                | [|x;y|] -> if x > y then [x;y] else [y;x]\n                | _ ->\n                    let rec sort_array' (arr: _[]) =\n                        match arr with\n                        | [|x;y|] -> if x > y then [x;y] else [y;x]\n                        | _ ->\n                            let rec sort_array' (arr: _[]) =\n                                match arr with\n                                | [|x;y|] -> if x > y then [x;y] else [y;x]\n                                | _ ->\n                                    let rec sort_array' (arr: _[]) =\n                                        match arr with\n                                        | [|x;y|] -> if x > y then [x;y] else [y;x]\n                                        | _ ->\n                                            let rec sort_array' (arr: _[]) =\n                                                match arr with\n                                                | [|x;y|] -> if x > y then [x;y] else [y;x]\n                                                | _ ->\n                                                    let rec sort_array' (arr: _[]) =\n                                                        match arr with\n                                                        | [|x;y|] -> if x > y then [x;y] else [y;x]\n                                                        | _ ->\n                                                            let rec sort_array' (arr: _[]) =\n                                                               match arr with\n                                                               | [|x;y|] -> if x > y then [x;y] else [y;x]\n                                                               | _ ->\n                                                                   let rec sort_array' (arr: _[]) =\n                                                                       match arr with\n                                                                       | [|x;y|] -> if x > y then [x;y] else [y;x]\n                                                                       | _ ->\n                                                                           let rec sort_array' (arr: _[]) =\n                                                                               match arr with\n                                                                               | [|\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1uf67ugr.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:80). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1uf67ugr.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:80). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1uf67ugr.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:80). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1uf67ugr.fsx(48,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected '|]' or other token.\n\n\n\n/tmp/tmp1uf67ugr.fsx(60,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:80). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1uf67ugr.fsx(60,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:80). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1uf67ugr.fsx(60,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:80). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1uf67ugr.fsx(60,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (46:80). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc = function\n        | [] -> acc\n        | x::xs ->\n            let rec sort_array'' acc' xs =\n                match xs with\n                | [] -> acc'\n                | x::xs ->\n                    let acc' = x::acc\n                    sort_array'' acc' xs\n            sort_array'' acc' xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxq6ik1iv.fsx(18,26): error FS0039: The value or constructor 'acc'' is not defined. Maybe you want one of the following:\n   acc\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) =\n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let xs = xs |> Array.sortInPlace\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpulzxepnx.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc (arr:array<int>) = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let xs = x::xs\n            let x = xs.[0]\n            let y = xs.[1]\n            let z = xs.[2]\n            let x = if x = y then z else x\n            sort_array' (x::acc) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn_eu9qtw.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc (arr: _[]) = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let x = x\n            let y = x\n            let z = x\n            if y > z then sort_array_rec (y::acc) xs\n            else sort_array_rec (z::acc) xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpztcqm08b.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        let rec sort_array'' (arr: 'a array) = \n            let rec sort_array'' (arr: 'a array) = \n                let rec sort_array'' (arr: 'a array) = \n                    let rec sort_array'' (arr: 'a array) = \n                        let rec sort_array'' (arr: 'a array) = \n                            let rec sort_array'' (arr: 'a array) = \n                                let rec sort_array'' (arr: 'a array) = \n                                    let rec sort_array'' (arr: 'a array) = \n                                        let rec sort_array'' (arr: 'a array) = \n                                            let rec sort_array'' (arr: 'a array) = \n                                                let rec sort_array'' (arr: 'a array) = \n                                                    let rec sort_array'' (arr: 'a array) = \n                                                        let rec sort_array'' (arr: 'a array) = \n                                                            let rec sort_array'' (arr: 'a array) = \n                                                                let rec sort_array'' (arr: 'a array) = \n                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                let rec sort_array'' (arr: 'a array) = \n                                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                                        let rec sort_array' (arr: 'a array) = \n                                                                                            let rec sort_array' (arr: 'a array) = \n                                                                                                   let rec sort_array' (arr: 'a array) = \n                                                                                                       let rec sort_array' (arr: 'a array) = \n                                                                                                           let rec sort_array' (arr: 'a array) = \n                                                                                                               let rec sort_array' (arr: 'a array) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphethbdgh.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let xs = xs |> Array.sortInPlace\n            sort_array_rec xs\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkehaztk7.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        match arr with \n        | [| |] -> arr\n        | [| x |] -> [| x |]\n        | xs -> \n            let rec sort_array'' xs = \n                match xs with \n                | [| |] -> xs\n                | [| x |] -> [| x |]\n                | xs -> \n                    let rec sort_array''' xs = \n                        match xs with \n                        | [| |] -> xs\n                        | [| x |] -> [| x |]\n                        | xs -> \n                            let rec sort_array'''' xs = \n                                match xs with \n                                | [| |] -> xs\n                                | [| x |] -> [| x |]\n                                | xs -> \n                                    let rec sort_array''''' xs = \n                                        match xs with \n                                        | [| |] -> xs\n                                        | [| x |] -> [| x |]\n                                        | xs -> \n                                            let rec sort_array''''' xs = \n                                                match xs with \n                                                | [| |] -> xs\n                                                | [| x |] -> [| x |]\n                                                | xs -> \n                                                    let rec sort_array''''' xs = \n                                                        match xs with \n                                                        | [| |] -> xs\n                                                        | [| x |] -> [| x |]\n                                                        | xs -> \n                                                            let rec sort_array''''' xs = \n                                                                match xs with \n                                                                | [| |] -> xs\n                                                                | [| x |] -> [| x |]\n                                                                | xs -> \n                                                                    let rec sort_array''''' xs = \n                                                                        match xs with \n                                                                        | [| |] -> xs\n                                                                        | [| x |] -> [| x |]\n                                                                        | xs -> \n                                                                            let rec sort_array''''' xs = \n                                                                                match xs with \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj6lhvmlp.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:81). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpj6lhvmlp.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:81). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpj6lhvmlp.fsx(56,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n\n\n/tmp/tmpj6lhvmlp.fsx(68,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:81). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpj6lhvmlp.fsx(68,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:81). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        let rec sort_array'' (arr: 'a array) = \n            let rec sort_array'' (arr: 'a array) = \n                let rec sort_array'' (arr: 'a array) = \n                    let rec sort_array'' (arr: 'a array) = \n                        let rec sort_array'' (arr: 'a array) = \n                            let rec sort_array'' (arr: 'a array) = \n                                let rec sort_array'' (arr: 'a array) = \n                                    let rec sort_array'' (arr: 'a array) = \n                                        let rec sort_array'' (arr: 'a array) = \n                                            let rec sort_array'' (arr: 'a array) = \n                                                let rec sort_array'' (arr: 'a array) = \n                                                    let rec sort_array'' (arr: 'a array) = \n                                                        let rec sort_array'' (arr: 'a array) = \n                                                            let rec sort_array'' (arr: 'a array) = \n                                                                let rec sort_array'' (arr: 'a array) = \n                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                let rec sort_array'' (arr: 'a array) = \n                                                                                    let rec sort_array' (arr: 'a array) = \n                                                                                        let rec sort_array' (arr: 'a array) = \n                                                                                            let rec sort_array' (arr: 'a array) = \n                                                                                                   let rec sort_array' (arr: 'a array) = \n                                                                                                       let rec sort_array' (arr: 'a array) = \n                                                                                                           let rec sort_array' (arr: 'a array) = \n                                                                                                               let rec sort_array' (arr: 'a array) = \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1tl1bo.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(35,112): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        match arr with\n        | null -> arr\n        | _ ->\n            let mutable i = 0\n            let mutable j = 0\n            let mutable result = null\n            while i < arr.Length && j < arr.Length do\n                if arr.[i] > arr.[j] then\n                    result <- arr.[i]\n                    i <- i + 1\n                    j <- j + 1\n                else\n                    result <- arr.[j]\n                    j <- j + 1\n            result\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphsqbdhkk.fsx(24,13): error FS0001: Type mismatch. Expecting a\n    ''T[]'    \nbut given a\n    ''T'    \nThe types ''T' and ''T[]' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let x = x\n            let y = x\n            let z = x\n            if y > z then\n                sort_array_rec xs\n            else\n                sort_array_rec ys\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6m85yeww.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array'' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafk8yq57.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: _[]) =\n        let rec sort_array' (arr: _[]) =\n            let rec sort_array' (arr: _[]) =\n                let rec sort_array' (arr: _[]) =\n                    let rec sort_array' (arr: _[]) =\n                        let rec sort_array' (arr: _[]) =\n                            let rec sort_array' (arr: _[]) =\n                                let rec sort_array' (arr: _[]) =\n                                    let rec sort_array' (arr: _[]) =\n                                        let rec sort_array' (arr: _[]) =\n                                            let rec sort_array' (arr: _[]) =\n                                                let rec sort_array' (arr: _[]) =\n                                                    let rec sort_array' (arr: _[]) =\n                                                        let rec sort_array' (arr: _[]) =\n                                                            let rec sort_array' (arr: _[]) =\n                                                                let rec sort_array' (arr: _[]) =\n                                                                    let rec sort_array' (arr: _[]) =\n                                                                        let rec sort_array' (arr: _[]) =\n                                                                            let rec sort_array' (arr: _[]) =\n                                                                                let rec sort_array' (arr: _[]) =\n                                                                                    let rec sort_array' (arr: _[]) =\n                                                                                        let rec sort_array' (arr: _[]) =\n                                                                                            let rec sort_array' (arr: _[]) =\n                                                                                                   let rec sort_array' (arr: _[]) =\n                                                                                                       let rec sort_array' (arr: _[]) =\n                                                                                                           let rec sort_array' (arr: _[]) =\n                                                                                                               let rec sort_array' (arr: _[]) =\n                                                                                                                   let rec sort_array' (arr: _[]) =\n                                                                                                                       let rec sort_array' (arr: _[]) =\n                                                                                                                           let rec sort_array' (arr: _[]) =\n                                                                                                                                  let rec sort_array' (arr: _[]) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmperc7l98x.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:131). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmperc7l98x.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:131). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmperc7l98x.fsx(52,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:131). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmperc7l98x.fsx(52,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:131). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmperc7l98x.fsx(52,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:131). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmperc7l98x.fsx(39,131): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) =\n        let rec sort_array'' (arr: 'a array) =\n            let rec sort_array'' (arr: 'a array) =\n                let rec sort_array'' (arr: 'a array) =\n                    let rec sort_array'' (arr: 'a array) =\n                        let rec sort_array'' (arr: 'a array) =\n                            let rec sort_array'' (arr: 'a array) =\n                                let rec sort_array'' (arr: 'a array) =\n                                    let rec sort_array'' (arr: 'a array) =\n                                        let rec sort_array'' (arr: 'a array) =\n                                            let rec sort_array'' (arr: 'a array) =\n                                                let rec sort_array'' (arr: 'a array) =\n                                                    let rec sort_array'' (arr: 'a array) =\n                                                        let rec sort_array'' (arr: 'a array) =\n                                                            let rec sort_array'' (arr: 'a array) =\n                                                                let rec sort_array'' (arr: 'a array) =\n                                                                    let rec sort_array'' (arr: 'a array) =\n                                                                        let rec sort_array'' (arr: 'a array) =\n                                                                            let rec sort_array' (arr: 'a array) =\n                                                                                let rec sort_array' (arr: 'a array) =\n                                                                                    let rec sort_array' (arr: 'a array) =\n                                                                                        let rec sort_array' (arr: 'a array) =\n                                                                                            let rec sort_array' (arr: 'a array) =\n                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                       let rec sort_array' (arr: 'a array) =\n                                                                                                           let rec sort_array' (arr: 'a array) =\n                                                                                                               let rec sort_array' (arr: 'a array) =\n                                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkfghfpba.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc elem =\n        match elem with\n        | [] -> acc\n        | x::xs ->\n            let new_elem = x::acc\n            sort_array_rec new_elem xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        match arr with\n        | [|a; b|] ->\n            if a < b then\n                let temp = a\n                a <- b\n                b <- temp\n                sort_array' b\n            else\n                let temp = b\n                b <- a\n                a <- temp\n                sort_array' a\n        | _ ->\n            let temp = arr.Length\n            arr.Length <- 0\n            arr.[0] <- 0\n            arr.[1..] <- arr.[0..1]\n            arr.[2..] <- arr.[0..2]\n            arr.[3..] <- arr.[0..3]\n            arr.[4..] <- arr.[0..4]\n            arr.[5..] <- arr.[0..5]\n            arr.[6..] <- arr.[0..6]\n            arr.[7..] <- arr.[0..7]\n            arr.[8..] <- arr.[0..8]\n            arr.[9..] <- arr.[0..9]\n            arr.[10..] <- arr.[0..10]\n            arr.[11..] <- arr.[0..11]\n            arr.[12..] <- arr.[0..12]\n            arr.[13..] <- arr.[0..13]\n            arr.[14..] <- arr.[0..14]\n            arr.[15..] <- arr.[0..15]\n            arr.[16..] <- arr.[0..16]\n            arr.[17..] <- arr.[0..17]\n            arr.[18..] <- arr.[0..18]\n            arr.[19..] <- arr.[0..19]\n            arr.[20..] <- arr.[0..20]\n            arr.[21..] <- arr.[0..21]\n            arr.[22..] <- arr.[0..22]\n            arr.[23..] <- arr.[0..23]\n            arr.[24..] <- arr.[0..24]\n            arr.[25..] <- arr.[0..25]\n            arr.[26..] <- arr.[0..26]\n            arr.[27..] <- arr.[0..27]\n            arr.[28..] <- arr.[0..28]\n            arr.[29..\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsxl5a_9j.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpsxl5a_9j.fsx(55,1): error FS0010: Unexpected keyword 'let' or 'use' in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) = \n        match arr with\n        | [] -> arr\n        | _ -> \n            let rec sort_array_rec_rec (arr: 'a array) = \n                match arr with\n                | [] -> arr\n                | _ -> \n                    let rec sort_array_rec_rec_rec (arr: 'a array) = \n                        match arr with\n                        | [] -> arr\n                        | _ -> \n                            let rec sort_array_rec_rec_rec_rec (arr: 'a array) = \n                                match arr with\n                                | [] -> arr\n                                | _ -> \n                                    let rec sort_array_rec_rec_rec_rec_rec (arr: 'a array) = \n                                        match arr with\n                                        | [] -> arr\n                                        | _ -> \n                                            let rec sort_array_rec_rec_rec_rec_rec_rec (arr: 'a array) = \n                                                match arr with\n                                                | [] -> arr\n                                                | _ -> \n                                                    let rec sort_array_rec_rec_rec_rec_rec_rec (arr: 'a array) = \n                                                        match arr with\n                                                        | [] -> arr\n                                                        | _ -> \n                                                            let rec sort_array_rec_rec_rec_rec_rec_rec (arr: 'a array) = \n                                                                match arr with\n                                                                | [] -> arr\n                                                                | _ -> \n                                                                    let rec sort_array_rec_rec_rec_rec_rec_rec (arr: 'a array) = \n                                                                        match arr with\n                                                                        | [] -> arr\n                                                                        | _ -> \n                                                                            let rec sort_array_rec_rec_rec_rec_rec_rec (arr: 'a array) = \n                                                                                match arr with\n                                                                                | [] -> arr\n                                                                                | _ -> \n                                                                                    let rec sort_array_rec_rec_rec_rec_rec_rec (arr: 'a array) = \n                                                                                        match arr with\n                                                                                        | [] -> arr\n                                                                                        | _ -> \n                                                                                            let\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp74zwlk_z.fsx(54,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        match arr with\n        | [] -> arr\n        | x::xs -> \n            let x = x\n            let y = x\n            if y < x then sort_array' xs\n            else sort_array' ys\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpze8ts1q6.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc (arr: 'a []) =\n        match arr with\n        | [] -> acc\n        | x::xs ->\n            let x = x\n            let y = x\n            if y > x then\n                sort_array' (y::acc) xs\n            else\n                sort_array' (x::acc) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2xms2_qb.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array' (arr: 'a []) = \n                                                                                    let rec sort_array' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let xs = xs |> Array.sortInPlace\n            sort_array_rec xs\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkehaztk7.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) = \n        let rec sort_array_rec' (arr: 'a []) = \n            let rec sort_array_rec'' (arr: 'a []) = \n                let rec sort_array_rec'' (arr: 'a []) = \n                    let rec sort_array_rec'' (arr: 'a []) = \n                        let rec sort_array_rec'' (arr: 'a []) = \n                            let rec sort_array_rec'' (arr: 'a []) = \n                                let rec sort_array_rec'' (arr: 'a []) = \n                                    let rec sort_array_rec'' (arr: 'a []) = \n                                        let rec sort_array_rec'' (arr: 'a []) = \n                                            let rec sort_array_rec'' (arr: 'a []) = \n                                                let rec sort_array_rec'' (arr: 'a []) = \n                                                    let rec sort_array_rec'' (arr: 'a []) = \n                                                        let rec sort_array_rec'' (arr: 'a []) = \n                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                let rec sort_array_rec' (arr: 'a []) = \n                                                                    let rec sort_array_rec' (arr: 'a []) = \n                                                                        let rec sort_array_rec' (arr: 'a []) = \n                                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                                let rec sort_array_rec' (arr: 'a []) = \n                                                                                    let rec sort_array_rec' (arr: 'a []) = \n                                                                                        let rec sort_array_rec' (arr: 'a []) = \n                                                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                                                   let rec sort_array_rec' (arr: 'a []) = \n                                                                                                       let rec sort_array_rec' (arr: 'a [])\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpd1aocfg7.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array'' (arr: 'a []) = \n                                                                                    let rec sort_array' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) = \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpugb7pika.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) = \n        let rec sort_array_rec' (arr: 'a []) = \n            let rec sort_array_rec'' (arr: 'a []) = \n                let rec sort_array_rec''' (arr: 'a []) = \n                    let rec sort_array_rec''' (arr: 'a []) = \n                        let rec sort_array_rec''' (arr: 'a []) = \n                            let rec sort_array_rec''' (arr: 'a []) = \n                                let rec sort_array_rec''' (arr: 'a []) = \n                                    let rec sort_array_rec''' (arr: 'a []) = \n                                        let rec sort_array_rec''' (arr: 'a []) = \n                                            let rec sort_array_rec''' (arr: 'a []) = \n                                                let rec sort_array_rec''' (arr: 'a []) = \n                                                    let rec sort_array_rec'' (arr: 'a []) = \n                                                        let rec sort_array_rec'' (arr: 'a []) = \n                                                            let rec sort_array_rec'' (arr: 'a []) = \n                                                                let rec sort_array_rec'' (arr: 'a []) = \n                                                                    let rec sort_array_rec' (arr: 'a []) = \n                                                                        let rec sort_array_rec' (arr: 'a []) = \n                                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                                let rec sort_array_rec' (arr: 'a []) = \n                                                                                    let rec sort_array_rec' (arr: 'a []) = \n                                                                                        let rec sort_array_rec' (arr: 'a []) = \n                                                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                                                   let rec sort_array_rec' (arr: 'a []) = \n                                                                                                       let rec sort_\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9k147tmt.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) = \n        match arr with\n        | [] -> arr\n        | x::xs -> \n            let xs = xs |> Array.sortInPlace\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            sort_array_rec xs\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpefwc6pkl.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        let rec sort_array_rec_rec (arr: 'a array) =\n            let rec sort_array_rec_rec_rec (arr: 'a array) =\n                let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                    let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                        let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                            let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                    let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                        let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                            let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                    let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                        let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                            let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                                let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                                    let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                                        let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                                            let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                                                let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                                                    let rec sort_array_rec_rec_rec_rec (arr: 'a array) =\n                                                                                        let rec sort_array_rec_rec_rec_rec (arr: 'a array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppg46mknn.fsx(31,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (30:89). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppg46mknn.fsx(31,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc = function\n        | [] -> acc\n        | x::xs ->\n            let acc' = x::acc\n            sort_array' acc' xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc = function\n        | [] -> acc\n        | x::xs ->\n            let xs = x::xs\n            let xs = sort_array' (acc @ [x]) xs\n            sort_array' (acc @ [x]) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        match arr with \n        | [] -> arr\n        | x::xs -> \n            let x = x\n            let xs = xs |> Array.sortInPlace\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm19rkl7q.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: _[]) =\n        match arr with\n        | [|_|] -> arr\n        | [|_;_|] -> arr\n        | [|_;_;_|] -> arr\n        | [|_;_;_;_|] -> arr\n        | [|_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_;_;_;_;_|] -> arr\n        | [|_\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqn52uwnc.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpqn52uwnc.fsx(42,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected '|]' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr:array<int>) =\n        match arr with\n        | null -> arr\n        | _ ->\n            let rec sort_array' (arr:array<int>) =\n                match arr with\n                | null -> arr\n                | _ ->\n                    let rec sort_array' (arr:array<int>) =\n                        match arr with\n                        | null -> arr\n                        | _ ->\n                            let rec sort_array' (arr:array<int>) =\n                                match arr with\n                                | null -> arr\n                                | _ ->\n                                    let rec sort_array' (arr:array<int>) =\n                                        match arr with\n                                        | null -> arr\n                                        | _ ->\n                                            let rec sort_array' (arr:array<int>) =\n                                                match arr with\n                                                | null -> arr\n                                                | _ ->\n                                                    let rec sort_array' (arr:array<int>) =\n                                                        match arr with\n                                                        | null -> arr\n                                                        | _ ->\n                                                            let rec sort_array' (arr:array<int>) =\n                                                                match arr with\n                                                                | null -> arr\n                                                                | _ ->\n                                                                    let rec sort_array' (arr:array<int>) =\n                                                                        match arr with\n                                                                        | null -> arr\n                                                                        | _ ->\n                                                                            let rec sort_array' (arr:array<int>) =\n                                                                                match arr with\n                                                                                | null -> arr\n                                                                                | _ ->\n                                                                                    let rec sort_array' (arr:array<int>) =\n                                                                                        match arr with\n                                                                                        | null -> arr\n                                                                                        | _ ->\n                                                                                            let rec sort_array' (arr:array<int>) =\n                                                                                               match arr with\n                                                                                               | null -> arr\n                                                                                               | _ ->\n                                                                                                   let rec sort_array' (arr:array<int>) =\n                                                                                                       match arr with\n                                                                                                       | null -> arr\n                                                                                                       | _ ->\n                                                                                                           let rec sort_array' (arr:array<int>) =\n                                                                                                               match arr with\n                                                                                             \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe05oz2jt.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (62:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpe05oz2jt.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (62:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpe05oz2jt.fsx(64,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n\n\n/tmp/tmpe05oz2jt.fsx(76,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (62:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpe05oz2jt.fsx(76,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (62:112). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) = \n        let rec sort_array_rec' (arr: 'T[]) = \n            let rec sort_array_rec'' (arr: 'T[]) = \n                let rec sort_array_rec''' (arr: 'T[]) = \n                    let rec sort_array_rec''' (arr: 'T[]) = \n                        let rec sort_array_rec''' (arr: 'T[]) = \n                            let rec sort_array_rec''' (arr: 'T[]) = \n                                let rec sort_array_rec''' (arr: 'T[]) = \n                                    let rec sort_array_rec''' (arr: 'T[]) = \n                                        let rec sort_array_rec''' (arr: 'T[]) = \n                                            let rec sort_array_rec''' (arr: 'T[]) = \n                                                let rec sort_array_rec''' (arr: 'T[]) = \n                                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                                        let rec sort_array_rec'' (arr: 'T[]) = \n                                                            let rec sort_array_rec'' (arr: 'T[]) = \n                                                                let rec sort_array_rec' (arr: 'T[]) = \n                                                                    let rec sort_array_rec' (arr: 'T[]) = \n                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                let rec sort_array_rec' (arr: 'T[]) = \n                                                                                    let rec sort_array_rec' (arr: 'T[]) = \n                                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                   let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx_w90x1p.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) = \n        let rec sort_array'' (arr: 'T[]) = \n            let rec sort_array'' (arr: 'T[]) = \n                let rec sort_array'' (arr: 'T[]) = \n                    let rec sort_array'' (arr: 'T[]) = \n                        let rec sort_array'' (arr: 'T[]) = \n                            let rec sort_array'' (arr: 'T[]) = \n                                let rec sort_array'' (arr: 'T[]) = \n                                    let rec sort_array'' (arr: 'T[]) = \n                                        let rec sort_array'' (arr: 'T[]) = \n                                            let rec sort_array'' (arr: 'T[]) = \n                                                let rec sort_array'' (arr: 'T[]) = \n                                                    let rec sort_array'' (arr: 'T[]) = \n                                                        let rec sort_array'' (arr: 'T[]) = \n                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                let rec sort_array'' (arr: 'T[]) = \n                                                                    let rec sort_array'' (arr: 'T[]) = \n                                                                        let rec sort_array'' (arr: 'T[]) = \n                                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                                let rec sort_array' (arr: 'T[]) = \n                                                                                    let rec sort_array' (arr: 'T[]) = \n                                                                                        let rec sort_array' (arr: 'T[]) = \n                                                                                            let rec sort_array' (arr: 'T[]) = \n                                                                                                   let rec sort_array' (arr: 'T[]) = \n                                                                                                       let rec sort_array' (arr: 'T[]) = \n                                                                                                           let rec sort_array' (arr: 'T[]) = \n                                                                                                               let rec sort_array' (arr: 'T[]) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdwyea240.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(35,112): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) =\n        let rec sort_array_rec_rec (arr: 'T[]) =\n            match arr with\n            | null -> arr\n            | _ ->\n                let mutable i = 0\n                let mutable j = 0\n                let mutable k = 0\n                let mutable l = arr.Length\n                while i < l do\n                    if arr.[i] > arr.[j] then\n                        arr.[j] <- arr.[i]\n                        i <- i + 1\n                    else\n                        arr.[j] <- arr.[i]\n                        j <- j + 1\n                    if j < l then\n                        k <- k + 1\n                        sort_array_rec_rec (arr.[j])\n                arr.[k]\n        sort_array_rec_rec arr\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxla4rzy4.fsx(27,25): error FS0001: This 'if' expression is missing an 'else' branch. Because 'if' is an expression, and not a statement, add an 'else' branch which also returns a value of type ''T[]'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x::xs ->\n            let xs = x::xs\n            let rec sort_array_rec_rec acc = function\n                | [] -> acc\n                | x::xs ->\n                    let xs = x::xs\n                    let rec sort_array_rec_rec_rec acc = function\n                        | [] -> acc\n                        | x::xs ->\n                            let xs = x::xs\n                            let rec sort_array_rec_rec_rec acc = function\n                                | [] -> acc\n                                | x::xs ->\n                                    let xs = x::xs\n                                    let rec sort_array_rec_rec_rec acc = function\n                                        | [] -> acc\n                                        | x::xs ->\n                                            let xs = x::xs\n                                            let rec sort_array_rec_rec_rec acc = function\n                                                | [] -> acc\n                                                | x::xs ->\n                                                    let xs = x::xs\n                                                    let rec sort_array_rec_rec_rec acc = function\n                                                        | [] -> acc\n                                                        | x::xs ->\n                                                            let xs = x::xs\n                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                | [] -> acc\n                                                                | x::xs ->\n                                                                    let xs = x::xs\n                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                        | [] -> acc\n                                                                        | x::xs ->\n                                                                            let xs = x::xs\n                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                | [] -> acc\n                                                                                | x::xs ->\n                                                                                    let xs = x::xs\n                                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                                        | [] -> acc\n                                                                                        | x::xs ->\n                                                                                            let xs = x::xs\n                                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                               | [] -> acc\n                                                                                               | x::xs ->\n                                                                                                   let xs = x::xs\n                                                                                                   let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5ijbbyor.fsx(58,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) =\n        let rec sort_array_rec' (arr: 'T[]) =\n            let rec sort_array_rec'' (arr: 'T[]) =\n                let rec sort_array_rec'' (arr: 'T[]) =\n                    let rec sort_array_rec'' (arr: 'T[]) =\n                        let rec sort_array_rec'' (arr: 'T[]) =\n                            let rec sort_array_rec'' (arr: 'T[]) =\n                                let rec sort_array_rec'' (arr: 'T[]) =\n                                    let rec sort_array_rec'' (arr: 'T[]) =\n                                        let rec sort_array_rec'' (arr: 'T[]) =\n                                            let rec sort_array_rec'' (arr: 'T[]) =\n                                                let rec sort_array_rec'' (arr: 'T[]) =\n                                                    let rec sort_array_rec'' (arr: 'T[]) =\n                                                        let rec sort_array_rec'' (arr: 'T[]) =\n                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                let rec sort_array_rec' (arr: 'T[]) =\n                                                                    let rec sort_array_rec' (arr: 'T[]) =\n                                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                                let rec sort_array_rec' (arr: 'T[]) =\n                                                                                    let rec sort_array_rec' (arr: 'T[]) =\n                                                                                        let rec sort_array_rec' (arr: 'T[]) =\n                                                                                            let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                   let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                       let rec sort_array_rec' (arr: 'T[]) =\n                                                                                                           let rec sort_array_rec' (arr: 'T[]) =\n                               \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy4vtc1n4.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpy4vtc1n4.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpy4vtc1n4.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpy4vtc1n4.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpy4vtc1n4.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a[]) =\n        let rec sort_array_rec' (arr: 'a[]) =\n            let rec sort_array_rec'' (arr: 'a[]) =\n                let rec sort_array_rec'' (arr: 'a[]) =\n                    let rec sort_array_rec'' (arr: 'a[]) =\n                        let rec sort_array_rec'' (arr: 'a[]) =\n                            let rec sort_array_rec'' (arr: 'a[]) =\n                                let rec sort_array_rec'' (arr: 'a[]) =\n                                    let rec sort_array_rec'' (arr: 'a[]) =\n                                        let rec sort_array_rec'' (arr: 'a[]) =\n                                            let rec sort_array_rec'' (arr: 'a[]) =\n                                                let rec sort_array_rec'' (arr: 'a[]) =\n                                                    let rec sort_array_rec'' (arr: 'a[]) =\n                                                        let rec sort_array_rec'' (arr: 'a[]) =\n                                                            let rec sort_array_rec' (arr: 'a[]) =\n                                                                let rec sort_array_rec' (arr: 'a[]) =\n                                                                    let rec sort_array_rec' (arr: 'a[]) =\n                                                                        let rec sort_array_rec' (arr: 'a[]) =\n                                                                            let rec sort_array_rec' (arr: 'a[]) =\n                                                                                let rec sort_array_rec' (arr: 'a[]) =\n                                                                                    let rec sort_array_rec' (arr: 'a[]) =\n                                                                                        let rec sort_array_rec' (arr: 'a[]) =\n                                                                                            let rec sort_array_rec' (arr: 'a[]) =\n                                                                                                   let rec sort_array_rec' (arr: 'a[]) =\n                                                                                                       let rec sort_array_rec' (arr: 'a[]) =\n                                                                                                           let rec sort_array_rec' (arr: 'a[]) =\n                               \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmhleqfrw.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpmhleqfrw.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpmhleqfrw.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpmhleqfrw.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpmhleqfrw.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpmhleqfrw.fsx(34,108): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        let rec sort_array'' (arr: 'a array) = \n            let rec sort_array'' (arr: 'a array) = \n                let rec sort_array'' (arr: 'a array) = \n                    let rec sort_array'' (arr: 'a array) = \n                        let rec sort_array'' (arr: 'a array) = \n                            let rec sort_array'' (arr: 'a array) = \n                                let rec sort_array'' (arr: 'a array) = \n                                    let rec sort_array'' (arr: 'a array) = \n                                        let rec sort_array'' (arr: 'a array) = \n                                            let rec sort_array'' (arr: 'a array) = \n                                                let rec sort_array'' (arr: 'a array) = \n                                                    let rec sort_array'' (arr: 'a array) = \n                                                        let rec sort_array'' (arr: 'a array) = \n                                                            let rec sort_array'' (arr: 'a array) = \n                                                                let rec sort_array'' (arr: 'a array) = \n                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                let rec sort_array'' (arr: 'a array) = \n                                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                                        let rec sort_array' (arr: 'a array) = \n                                                                                            let rec sort_array' (arr: 'a array) = \n                                                                                                   let rec sort_array' (arr: 'a array) = \n                                                                                                       let rec sort_array' (arr: 'a array) = \n                                                                                                           let rec sort_array' (arr: 'a array) = \n                                                                                                               let rec sort_array' (arr: 'a array) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphethbdgh.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a[]) = \n        let rec sort_array'' (arr: 'a[]) = \n            let rec sort_array'' (arr: 'a[]) = \n                let rec sort_array'' (arr: 'a[]) = \n                    let rec sort_array'' (arr: 'a[]) = \n                        let rec sort_array'' (arr: 'a[]) = \n                            let rec sort_array'' (arr: 'a[]) = \n                                let rec sort_array'' (arr: 'a[]) = \n                                    let rec sort_array'' (arr: 'a[]) = \n                                        let rec sort_array'' (arr: 'a[]) = \n                                            let rec sort_array'' (arr: 'a[]) = \n                                                let rec sort_array'' (arr: 'a[]) = \n                                                    let rec sort_array'' (arr: 'a[]) = \n                                                        let rec sort_array'' (arr: 'a[]) = \n                                                            let rec sort_array'' (arr: 'a[]) = \n                                                                let rec sort_array'' (arr: 'a[]) = \n                                                                    let rec sort_array'' (arr: 'a[]) = \n                                                                        let rec sort_array'' (arr: 'a[]) = \n                                                                            let rec sort_array'' (arr: 'a[]) = \n                                                                                let rec sort_array' (arr: 'a[]) = \n                                                                                    let rec sort_array' (arr: 'a[]) = \n                                                                                        let rec sort_array' (arr: 'a[]) = \n                                                                                            let rec sort_array' (arr: 'a[]) = \n                                                                                                   let rec sort_array' (arr: 'a[]) = \n                                                                                                       let rec sort_array' (arr: 'a[]) = \n                                                                                                           let rec sort_array' (arr: 'a[]) = \n                                                                                                               let rec sort_array' (arr: 'a[]) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4t702t2i.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4t702t2i.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4t702t2i.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4t702t2i.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4t702t2i.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4t702t2i.fsx(35,112): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        let rec sort_array_rec' (arr: 'a array) =\n            let rec sort_array_rec'' (arr: 'a array) =\n                let rec sort_array_rec'' (arr: 'a array) =\n                    let rec sort_array_rec'' (arr: 'a array) =\n                        let rec sort_array_rec'' (arr: 'a array) =\n                            let rec sort_array_rec'' (arr: 'a array) =\n                                let rec sort_array_rec'' (arr: 'a array) =\n                                    let rec sort_array_rec'' (arr: 'a array) =\n                                        let rec sort_array_rec'' (arr: 'a array) =\n                                            let rec sort_array_rec'' (arr: 'a array) =\n                                                let rec sort_array_rec'' (arr: 'a array) =\n                                                    let rec sort_array_rec'' (arr: 'a array) =\n                                                        let rec sort_array_rec'' (arr: 'a array) =\n                                                            let rec sort_array_rec'' (arr: 'a array) =\n                                                                let rec sort_array_rec'' (arr: 'a array) =\n                                                                    let rec sort_array_rec'' (arr: 'a array) =\n                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                let rec sort_array_rec' (arr: 'a array) =\n                                                                                    let rec sort_array_rec' (arr: 'a array) =\n                                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                                   let rec sort_array_rec' (arr: 'a array) =\n                                                                                                       let rec sort_array_rec' (arr: 'a array) =\n                                                                                                           let rec sort_array_rec' (arr: 'a array)\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoa2xcapw.fsx(35,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x::xs ->\n            let xs = x::xs\n            let xs = sort_array_rec (acc@xs) xs\n            sort_array_rec (acc@xs) xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) =\n        if arr.Length = 0 then\n            arr\n        else\n            let rec sort_array_rec' (arr: 'a []) =\n                if arr.Length = 0 then\n                    arr\n                else\n                    let rec sort_array_rec'' (arr: 'a []) =\n                        if arr.Length = 0 then\n                            arr\n                        else\n                            let rec sort_array_rec''' (arr: 'a []) =\n                                if arr.Length = 0 then\n                                    arr\n                                else\n                                    let rec sort_array_rec''' (arr: 'a []) =\n                                        if arr.Length = 0 then\n                                            arr\n                                        else\n                                            let rec sort_array_rec''' (arr: 'a []) =\n                                                if arr.Length = 0 then\n                                                    arr\n                                                else\n                                                    let rec sort_array_rec''' (arr: 'a []) =\n                                                        if arr.Length = 0 then\n                                                            arr\n                                                        else\n                                                            let rec sort_array_rec''' (arr: 'a []) =\n                                                                if arr.Length = 0 then\n                                                                    arr\n                                                                else\n                                                                    let rec sort_array_rec''' (arr: 'a []) =\n                                                                        if arr.Length = 0 then\n                                                                            arr\n                                                                        else\n                                                                            let rec sort_array_rec''' (arr: 'a []) =\n                                                                                if arr.Length = 0 then\n                                                                                    arr\n                                                                                else\n                                                                                    let rec sort_array_rec''' (arr: 'a []) =\n                                                                                        if arr.Length = 0 then\n                                                                                            arr\n                                                                                        else\n                                                                                            let rec sort_array_rec''' (arr: 'a []) =\n                                                                                               if arr.Length = 0 then\n                                                                                                   arr\n                                                                                               else\n                                                                                                   let rec sort_array_rec''' (arr: 'a []) =\n                                                                                                       if arr.Length = 0 then\n                                                                                                           arr\n                                                              \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp513bjkr5.fsx(57,100): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr:array<int>) = \n        match arr with \n        | [] -> arr\n        | x::xs -> \n            let xs = xs |> Array.sortInPlace\n            if xs.Length > 0 then \n                sort_array' xs\n            else \n                arr\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnlreqluv.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        match arr with\n        | [||] -> arr\n        | [|a|] -> arr\n        | [|a; b|] -> sort_array' (a::b)\n        | a::b -> sort_array' (a::b)\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyhojx3_k.fsx(13,36): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a[]) = \n        let rec sort_array' (arr: 'a[]) = \n            let rec sort_array' (arr: 'a[]) = \n                let rec sort_array' (arr: 'a[]) = \n                    let rec sort_array' (arr: 'a[]) = \n                        let rec sort_array' (arr: 'a[]) = \n                            let rec sort_array' (arr: 'a[]) = \n                                let rec sort_array' (arr: 'a[]) = \n                                    let rec sort_array' (arr: 'a[]) = \n                                        let rec sort_array' (arr: 'a[]) = \n                                            let rec sort_array' (arr: 'a[]) = \n                                                let rec sort_array' (arr: 'a[]) = \n                                                    let rec sort_array' (arr: 'a[]) = \n                                                        let rec sort_array' (arr: 'a[]) = \n                                                            let rec sort_array' (arr: 'a[]) = \n                                                                let rec sort_array' (arr: 'a[]) = \n                                                                    let rec sort_array' (arr: 'a[]) = \n                                                                        let rec sort_array' (arr: 'a[]) = \n                                                                            let rec sort_array' (arr: 'a[]) = \n                                                                                let rec sort_array' (arr: 'a[]) = \n                                                                                    let rec sort_array' (arr: 'a[]) = \n                                                                                        let rec sort_array' (arr: 'a[]) = \n                                                                                            let rec sort_array' (arr: 'a[]) = \n                                                                                                   let rec sort_array' (arr: 'a[]) = \n                                                                                                       let rec sort_array' (arr: 'a[]) = \n                                                                                                           let rec sort_array' (arr: 'a[]) = \n                                                                                                               let rec sort_array' (arr: 'a[]) = \n                                                                                                                   let rec sort_array' (arr: 'a[]) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph2ct765p.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmph2ct765p.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmph2ct765p.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmph2ct765p.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmph2ct765p.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:116). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc (arr: 'a array) =\n        match arr with\n        | [] -> acc\n        | x::xs ->\n            let x = x\n            let xs = xs |> Array.sort\n            let xs = xs |> Array.map (fun x -> x - x % 2)\n            sort_array' (x::acc) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxmnzpes1.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc (arr:array<int>) = \n        match arr with \n        | [] -> acc\n        | x::xs -> \n            let xs = xs |> Array.sortInPlace\n            let xs = xs |> Array.map (fun x -> x - 1)\n            sort_array' (x::acc) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkfp4mqgy.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        let rec sort_array' (arr: 'T[]) =\n            let rec sort_array' (arr: 'T[]) =\n                let rec sort_array' (arr: 'T[]) =\n                    let rec sort_array' (arr: 'T[]) =\n                        let rec sort_array' (arr: 'T[]) =\n                            let rec sort_array' (arr: 'T[]) =\n                                let rec sort_array' (arr: 'T[]) =\n                                    let rec sort_array' (arr: 'T[]) =\n                                        let rec sort_array' (arr: 'T[]) =\n                                            let rec sort_array' (arr: 'T[]) =\n                                                let rec sort_array' (arr: 'T[]) =\n                                                    let rec sort_array' (arr: 'T[]) =\n                                                        let rec sort_array' (arr: 'T[]) =\n                                                            let rec sort_array' (arr: 'T[]) =\n                                                                let rec sort_array' (arr: 'T[]) =\n                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                let rec sort_array' (arr: 'T[]) =\n                                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                       let rec sort_array' (arr: 'T[]) =\n                                                                                                           let rec sort_array' (arr: 'T[]) =\n                                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                                       let rec sort_array' (arr: 'T[]) =\n                                                                                                                           let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplga6fzs9.fsx(39,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x::xs -> \n            let rec sort_array_rec_rec acc = function\n                | [] -> acc\n                | x::xs -> \n                    let rec sort_array_rec_rec_rec acc = function\n                        | [] -> acc\n                        | x::xs -> \n                            let rec sort_array_rec_rec_rec acc = function\n                                | [] -> acc\n                                | x::xs -> \n                                    let rec sort_array_rec_rec_rec acc = function\n                                        | [] -> acc\n                                        | x::xs -> \n                                            let rec sort_array_rec_rec_rec acc = function\n                                                | [] -> acc\n                                                | x::xs -> \n                                                    let rec sort_array_rec_rec_rec acc = function\n                                                        | [] -> acc\n                                                        | x::xs -> \n                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                | [] -> acc\n                                                                | x::xs -> \n                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                        | [] -> acc\n                                                                        | x::xs -> \n                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                | [] -> acc\n                                                                                | x::xs -> \n                                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                                        | [] -> acc\n                                                                                        | x::xs -> \n                                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                                       | [] -> acc\n                                                                                                       | x::xs -> \n                                                                                                           let rec sort_array_rec_rec_rec acc = function\n                                                                                                               | [] -> acc\n                                                                                                               | x::xs -> \n                                                                                                                   let rec sort_array_rec_rec_rec acc = function\n                                                                                                                       | [] -> acc\n                                                                                                                       | x::xs -> \n                                                                                                                           let rec sort_array_rec_rec_rec acc = function\n                                                                                                                                                  | [] -> acc\n                                                                                                                                                  | x::xs -> \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpd75inj0q.fsx(54,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:147). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpd75inj0q.fsx(54,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:147). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpd75inj0q.fsx(66,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:147). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpd75inj0q.fsx(66,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:147). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpd75inj0q.fsx(66,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:147). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpd75inj0q.fsx(51,124): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc (arr: 'a array) =\n        match arr with\n        | [] -> acc\n        | x::xs ->\n            let x = x\n            let y = x\n            if y < x then sort_array' (x::acc) xs\n            else sort_array' (y::acc) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmped1zh_ni.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a[]) =\n        let rec sort_array'' (arr: 'a[]) =\n            match arr with\n            | [||] -> arr\n            | x::xs ->\n                let x = x\n                let y = x\n                let z = x\n                if y < z then\n                    sort_array' xs\n                else\n                    sort_array' ys\n        sort_array'' arr\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5lkm686f.fsx(13,15): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) =\n        let rec sort_array_rec' (arr: 'a []) =\n            let rec sort_array_rec'' (arr: 'a []) =\n                let rec sort_array_rec'' (arr: 'a []) =\n                    let rec sort_array_rec'' (arr: 'a []) =\n                        let rec sort_array_rec'' (arr: 'a []) =\n                            let rec sort_array_rec'' (arr: 'a []) =\n                                let rec sort_array_rec'' (arr: 'a []) =\n                                    let rec sort_array_rec'' (arr: 'a []) =\n                                        let rec sort_array_rec'' (arr: 'a []) =\n                                            let rec sort_array_rec'' (arr: 'a []) =\n                                                let rec sort_array_rec'' (arr: 'a []) =\n                                                    let rec sort_array_rec'' (arr: 'a []) =\n                                                        let rec sort_array_rec' (arr: 'a []) =\n                                                            let rec sort_array_rec' (arr: 'a []) =\n                                                                let rec sort_array_rec' (arr: 'a []) =\n                                                                    let rec sort_array_rec' (arr: 'a []) =\n                                                                        let rec sort_array_rec' (arr: 'a []) =\n                                                                            let rec sort_array_rec' (arr: 'a []) =\n                                                                                let rec sort_array_rec' (arr: 'a []) =\n                                                                                    let rec sort_array_rec' (arr: 'a []) =\n                                                                                        let rec sort_array_rec' (arr: 'a []) =\n                                                                                            let rec sort_array_rec' (arr: 'a []) =\n                                                                                               let rec sort_array_rec' (arr: 'a []) =\n                                                                                                   let rec sort_array_rec' (arr: 'a []) =\n                                                                                                       let rec sort_array_rec' (arr: 'a []) =\n                                                              \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt5ldxoh0.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt5ldxoh0.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt5ldxoh0.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt5ldxoh0.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpt5ldxoh0.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:104). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) =\n        let rec sort_array'' (arr: 'a array) =\n            let rec sort_array'' (arr: 'a array) =\n                let rec sort_array'' (arr: 'a array) =\n                    let rec sort_array'' (arr: 'a array) =\n                        let rec sort_array'' (arr: 'a array) =\n                            let rec sort_array'' (arr: 'a array) =\n                                let rec sort_array'' (arr: 'a array) =\n                                    let rec sort_array'' (arr: 'a array) =\n                                        let rec sort_array'' (arr: 'a array) =\n                                            let rec sort_array'' (arr: 'a array) =\n                                                let rec sort_array'' (arr: 'a array) =\n                                                    let rec sort_array'' (arr: 'a array) =\n                                                        let rec sort_array'' (arr: 'a array) =\n                                                            let rec sort_array'' (arr: 'a array) =\n                                                                let rec sort_array'' (arr: 'a array) =\n                                                                    let rec sort_array'' (arr: 'a array) =\n                                                                        let rec sort_array'' (arr: 'a array) =\n                                                                            let rec sort_array'' (arr: 'a array) =\n                                                                                let rec sort_array'' (arr: 'a array) =\n                                                                                    let rec sort_array' (arr: 'a array) =\n                                                                                        let rec sort_array' (arr: 'a array) =\n                                                                                            let rec sort_array' (arr: 'a array) =\n                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                       let rec sort_array' (arr: 'a array) =\n                                                                                                           let rec sort_array' (arr: 'a array) =\n                                                                                                               let rec sort_array' (arr: 'a array) =\n                                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                                       let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsyy0t_os.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) = \n        let rec sort_array_rec' (arr: 'a []) = \n            let rec sort_array_rec'' (arr: 'a []) = \n                let rec sort_array_rec'' (arr: 'a []) = \n                    let rec sort_array_rec''' (arr: 'a []) = \n                        let rec sort_array_rec''' (arr: 'a []) = \n                            let rec sort_array_rec''' (arr: 'a []) = \n                                let rec sort_array_rec''' (arr: 'a []) = \n                                    let rec sort_array_rec''' (arr: 'a []) = \n                                        let rec sort_array_rec''' (arr: 'a []) = \n                                            let rec sort_array_rec''' (arr: 'a []) = \n                                                let rec sort_array_rec''' (arr: 'a []) = \n                                                    let rec sort_array_rec''' (arr: 'a []) = \n                                                        let rec sort_array_rec'' (arr: 'a []) = \n                                                            let rec sort_array_rec'' (arr: 'a []) = \n                                                                let rec sort_array_rec'' (arr: 'a []) = \n                                                                    let rec sort_array_rec'' (arr: 'a []) = \n                                                                        let rec sort_array_rec' (arr: 'a []) = \n                                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                                let rec sort_array_rec' (arr: 'a []) = \n                                                                                    let rec sort_array_rec' (arr: 'a []) = \n                                                                                        let rec sort_array_rec' (arr: 'a []) = \n                                                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                                                   let rec sort_array_rec' (arr: 'a []) = \n                                                                                                       let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqg5oqsnm.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) = \n        if Array.isEmpty arr then\n            arr\n        else\n            let first = Array.head arr\n            let rest = Array.tail arr\n            let first_index = Array.findIndex ((=) first) first\n            let rest_index = Array.findIndex ((=) rest) rest\n            if first_index <> rest_index then\n                let temp = arr.[first_index]\n                arr.[first_index] <- arr.[rest_index]\n                arr.[rest_index] <- temp\n                sort_array_rec rest\n            else\n                arr\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj6i5qi_w.fsx(15,59): error FS0001: Type mismatch. Expecting a\n    ''T[]'    \nbut given a\n    ''T'    \nThe types ''T' and ''T[]' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr:array<int>) = \n        match arr with \n        | [] -> arr\n        | x::xs -> \n            let xs = x::xs\n            let xs = sort_array' xs\n            let xs = sort_array' xs\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpouz304hg.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array' (arr: 'a []) = \n                                                                                    let rec sort_array' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        match arr with \n        | [] -> arr\n        | x::xs -> \n            let xs = xs |> Array.sortInPlace\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6308srkw.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) = \n        let rec sort_array_rec' (arr: 'a array) = \n            let rec sort_array_rec'' (arr: 'a array) = \n                let rec sort_array_rec''' (arr: 'a array) = \n                    let rec sort_array_rec''' (arr: 'a array) = \n                        let rec sort_array_rec''' (arr: 'a array) = \n                            let rec sort_array_rec''' (arr: 'a array) = \n                                let rec sort_array_rec''' (arr: 'a array) = \n                                    let rec sort_array_rec''' (arr: 'a array) = \n                                        let rec sort_array_rec''' (arr: 'a array) = \n                                            let rec sort_array_rec''' (arr: 'a array) = \n                                                let rec sort_array_rec''' (arr: 'a array) = \n                                                    let rec sort_array_rec''' (arr: 'a array) = \n                                                        let rec sort_array_rec'' (arr: 'a array) = \n                                                            let rec sort_array_rec'' (arr: 'a array) = \n                                                                let rec sort_array_rec'' (arr: 'a array) = \n                                                                    let rec sort_array_rec' (arr: 'a array) = \n                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                let rec sort_array_rec' (arr: 'a array) = \n                                                                                    let rec sort_array_rec' (arr: 'a array) = \n                                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                                   let rec sort_array_rec' (arr: 'a array) = \n                                                                                                       let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp09vxhu1a.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc = function\n        | [] -> acc\n        | x :: xs ->\n            let rec sort_array'' acc' xs =\n                match xs with\n                | [] -> acc'\n                | x :: xs ->\n                    let x = x\n                    let y = x\n                    if y > x then\n                        sort_array' (x::acc) xs\n                    else\n                        sort_array' (x::acc) xs\n            sort_array' acc' xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp81czudia.fsx(22,25): error FS0039: The value or constructor 'acc'' is not defined. Maybe you want one of the following:\n   acc\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        let rec sort_array'' (arr: 'a array) = \n            let rec sort_array'' (arr: 'a array) = \n                let rec sort_array'' (arr: 'a array) = \n                    let rec sort_array'' (arr: 'a array) = \n                        let rec sort_array'' (arr: 'a array) = \n                            let rec sort_array'' (arr: 'a array) = \n                                let rec sort_array'' (arr: 'a array) = \n                                    let rec sort_array'' (arr: 'a array) = \n                                        let rec sort_array'' (arr: 'a array) = \n                                            let rec sort_array'' (arr: 'a array) = \n                                                let rec sort_array'' (arr: 'a array) = \n                                                    let rec sort_array'' (arr: 'a array) = \n                                                        let rec sort_array'' (arr: 'a array) = \n                                                            let rec sort_array'' (arr: 'a array) = \n                                                                let rec sort_array'' (arr: 'a array) = \n                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                let rec sort_array'' (arr: 'a array) = \n                                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                                   let rec sort_array'' (arr: 'a array) = \n                                                                                                       let rec sort_array'' (arr: 'a array) = \n                                                                                                           let rec sort_array'' (arr: 'a array) = \n                                                                                                               let rec sort_array'' (arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc90dkrmz.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpc90dkrmz.fsx(36,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) =\n        let rec sort_array'' (arr: 'a array) =\n            let rec sort_array'' (arr: 'a array) =\n                let rec sort_array'' (arr: 'a array) =\n                    let rec sort_array'' (arr: 'a array) =\n                        let rec sort_array'' (arr: 'a array) =\n                            let rec sort_array'' (arr: 'a array) =\n                                let rec sort_array'' (arr: 'a array) =\n                                    let rec sort_array'' (arr: 'a array) =\n                                        let rec sort_array'' (arr: 'a array) =\n                                            let rec sort_array'' (arr: 'a array) =\n                                                let rec sort_array'' (arr: 'a array) =\n                                                    let rec sort_array'' (arr: 'a array) =\n                                                        let rec sort_array'' (arr: 'a array) =\n                                                            let rec sort_array'' (arr: 'a array) =\n                                                                let rec sort_array'' (arr: 'a array) =\n                                                                    let rec sort_array'' (arr: 'a array) =\n                                                                        let rec sort_array'' (arr: 'a array) =\n                                                                            let rec sort_array'' (arr: 'a array) =\n                                                                                let rec sort_array' (arr: 'a array) =\n                                                                                    let rec sort_array' (arr: 'a array) =\n                                                                                        let rec sort_array' (arr: 'a array) =\n                                                                                            let rec sort_array' (arr: 'a array) =\n                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                       let rec sort_array' (arr: 'a array) =\n                                                                                                           let rec sort_array' (arr: 'a array) =\n                                                                                                               let rec sort_array' (arr: 'a array) =\n                                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                                       let rec sort_\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppv48j476.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) =\n        let rec sort_array'' (arr: 'a array) =\n            let rec sort_array'' (arr: 'a array) =\n                let rec sort_array'' (arr: 'a array) =\n                    let rec sort_array'' (arr: 'a array) =\n                        let rec sort_array'' (arr: 'a array) =\n                            let rec sort_array'' (arr: 'a array) =\n                                let rec sort_array'' (arr: 'a array) =\n                                    let rec sort_array'' (arr: 'a array) =\n                                        let rec sort_array'' (arr: 'a array) =\n                                            let rec sort_array'' (arr: 'a array) =\n                                                let rec sort_array'' (arr: 'a array) =\n                                                    let rec sort_array'' (arr: 'a array) =\n                                                        let rec sort_array'' (arr: 'a array) =\n                                                            let rec sort_array'' (arr: 'a array) =\n                                                                let rec sort_array'' (arr: 'a array) =\n                                                                    let rec sort_array'' (arr: 'a array) =\n                                                                        let rec sort_array'' (arr: 'a array) =\n                                                                            let rec sort_array' (arr: 'a array) =\n                                                                                let rec sort_array' (arr: 'a array) =\n                                                                                    let rec sort_array' (arr: 'a array) =\n                                                                                        let rec sort_array' (arr: 'a array) =\n                                                                                            let rec sort_array' (arr: 'a array) =\n                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                       let rec sort_array' (arr: 'a array) =\n                                                                                                           let rec sort_array' (arr: 'a array) =\n                                                                                                               let rec sort_array' (arr: 'a array) =\n                                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkfghfpba.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) = \n        let rec sort_array_rec' (arr: 'a array) = \n            let rec sort_array_rec'' (arr: 'a array) = \n                let rec sort_array_rec''' (arr: 'a array) = \n                    let rec sort_array_rec''' (arr: 'a array) = \n                        let rec sort_array_rec''' (arr: 'a array) = \n                            let rec sort_array_rec''' (arr: 'a array) = \n                                let rec sort_array_rec''' (arr: 'a array) = \n                                    let rec sort_array_rec''' (arr: 'a array) = \n                                        let rec sort_array_rec''' (arr: 'a array) = \n                                            let rec sort_array_rec''' (arr: 'a array) = \n                                                let rec sort_array_rec''' (arr: 'a array) = \n                                                    let rec sort_array_rec'' (arr: 'a array) = \n                                                        let rec sort_array_rec'' (arr: 'a array) = \n                                                            let rec sort_array_rec'' (arr: 'a array) = \n                                                                let rec sort_array_rec' (arr: 'a array) = \n                                                                    let rec sort_array_rec' (arr: 'a array) = \n                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                let rec sort_array_rec' (arr: 'a array) = \n                                                                                    let rec sort_array_rec' (arr: 'a array) = \n                                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                                   let rec sort_array_rec' (arr: 'a array) = \n                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpww27ohmn.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x :: xs -> sort_array_rec (x :: acc) xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        let rec sort_array_rec' (arr: 'a array) =\n            let rec sort_array_rec'' (arr: 'a array) =\n                let rec sort_array_rec'' (arr: 'a array) =\n                    let rec sort_array_rec'' (arr: 'a array) =\n                        let rec sort_array_rec'' (arr: 'a array) =\n                            let rec sort_array_rec'' (arr: 'a array) =\n                                let rec sort_array_rec'' (arr: 'a array) =\n                                    let rec sort_array_rec'' (arr: 'a array) =\n                                        let rec sort_array_rec'' (arr: 'a array) =\n                                            let rec sort_array_rec'' (arr: 'a array) =\n                                                let rec sort_array_rec'' (arr: 'a array) =\n                                                    let rec sort_array_rec'' (arr: 'a array) =\n                                                        let rec sort_array_rec'' (arr: 'a array) =\n                                                            let rec sort_array_rec'' (arr: 'a array) =\n                                                                let rec sort_array_rec'' (arr: 'a array) =\n                                                                    let rec sort_array_rec'' (arr: 'a array) =\n                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                let rec sort_array_rec' (arr: 'a array) =\n                                                                                    let rec sort_array_rec' (arr: 'a array) =\n                                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                               let rec sort_array_rec' (arr: 'a array) =\n                                                                                                   let rec sort_array_rec' (arr: 'a array) =\n                                                                                                       let rec sort_array_rec' (arr: 'a array)\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7jdqksj6.fsx(35,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr:array<int>) = \n        let rec sort_array_rec' (arr:array<int>) = \n            let rec sort_array_rec'' (arr:array<int>) = \n                let rec sort_array_rec'' (arr:array<int>) = \n                    let rec sort_array_rec'' (arr:array<int>) = \n                        let rec sort_array_rec'' (arr:array<int>) = \n                            let rec sort_array_rec'' (arr:array<int>) = \n                                let rec sort_array_rec'' (arr:array<int>) = \n                                    let rec sort_array_rec'' (arr:array<int>) = \n                                        let rec sort_array_rec'' (arr:array<int>) = \n                                            let rec sort_array_rec'' (arr:array<int>) = \n                                                let rec sort_array_rec'' (arr:array<int>) = \n                                                    let rec sort_array_rec'' (arr:array<int>) = \n                                                        let rec sort_array_rec'' (arr:array<int>) = \n                                                            let rec sort_array_rec'' (arr:array<int>) = \n                                                                let rec sort_array_rec'' (arr:array<int>) = \n                                                                    let rec sort_array_rec'' (arr:array<int>) = \n                                                                        let rec sort_array_rec' (arr:array<int>) = \n                                                                            let rec sort_array_rec' (arr:array<int>) = \n                                                                                let rec sort_array_rec' (arr:array<int>) = \n                                                                                    let rec sort_array_rec' (arr:array<int>) = \n                                                                                        let rec sort_array_rec' (arr:array<int>) = \n                                                                                            let rec sort_array_rec' (arr:array<int>) = \n                                                                                                   let rec sort_array_rec' (arr:array<int>) = \n                                                                                                       let rec sort_array_rec' (arr:array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp618h6tjc.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp618h6tjc.fsx(34,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a[]) =\n        match arr with\n        | [|a; b|] ->\n            if a > b then\n                let temp = a\n                a <- b\n                b <- temp\n                sort_array' b\n            else\n                let temp = b\n                b <- a\n                a <- temp\n                sort_array' a\n        | _ ->\n            let temp = arr.[0]\n            arr.[0] <- arr.[1]\n            arr.[1] <- arr.[2]\n            arr.[2] <- arr.[3]\n            arr.[3] <- arr.[4]\n            arr.[4] <- arr.[5]\n            arr.[5] <- arr.[6]\n            arr.[6] <- arr.[7]\n            arr.[7] <- arr.[8]\n            arr.[8] <- arr.[9]\n            arr.[9] <- arr.[10]\n            arr.[10] <- arr.[11]\n            arr.[11] <- arr.[12]\n            arr.[12] <- arr.[13]\n            arr.[13] <- arr.[14]\n            arr.[14] <- arr.[15]\n            arr.[15] <- arr.[16]\n            arr.[16] <- arr.[17]\n            arr.[17] <- arr.[18]\n            arr.[18] <- arr.[19]\n            arr.[19] <- arr.[20]\n            arr.[20] <- arr.[21]\n            arr.[21] <- arr.[22]\n            arr.[22] <- arr.[23]\n            arr.[23] <- arr.[24]\n            arr.[24] <- arr.[25]\n            arr.[25] <- arr.[26]\n            arr.[26] <- arr.[27]\n            arr.[27] <- arr.[28]\n            arr.[28] <- arr.[29]\n            arr.[29] <- arr.[30]\n            arr.[30] <- arr.[31]\n            arr.[31] <- arr.[32]\n            arr.[32] <- arr.[33]\n            arr.[33] <- arr.[34]\n            arr.[34] <- arr.[35]\n            arr.[35] <- arr.[36]\n            arr.[36] <- arr.[37]\n            arr.[37\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkrjurpe7.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkrjurpe7.fsx(62,1): error FS0010: Unexpected keyword 'let' or 'use' in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        let rec sort_array'' (arr: 'a array) = \n            let rec sort_array'' (arr: 'a array) = \n                let rec sort_array'' (arr: 'a array) = \n                    let rec sort_array'' (arr: 'a array) = \n                        let rec sort_array'' (arr: 'a array) = \n                            let rec sort_array'' (arr: 'a array) = \n                                let rec sort_array'' (arr: 'a array) = \n                                    let rec sort_array'' (arr: 'a array) = \n                                        let rec sort_array'' (arr: 'a array) = \n                                            let rec sort_array'' (arr: 'a array) = \n                                                let rec sort_array'' (arr: 'a array) = \n                                                    let rec sort_array'' (arr: 'a array) = \n                                                        let rec sort_array'' (arr: 'a array) = \n                                                            let rec sort_array'' (arr: 'a array) = \n                                                                let rec sort_array'' (arr: 'a array) = \n                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                let rec sort_array'' (arr: 'a array) = \n                                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                                            let rec sort_array' (arr: 'a array) = \n                                                                                                   let rec sort_array' (arr: 'a array) = \n                                                                                                       let rec sort_array' (arr: 'a array) = \n                                                                                                           let rec sort_array' (arr: 'a array) = \n                                                                                                               let rec sort_array' (arr: 'a array)\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe00z3dxm.fsx(36,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x :: xs ->\n            let rec sort_array_rec_rec acc = function\n                | [] -> acc\n                | x :: xs ->\n                    let rec sort_array_rec_rec_rec acc = function\n                        | [] -> acc\n                        | x :: xs ->\n                            let rec sort_array_rec_rec_rec acc = function\n                                | [] -> acc\n                                | x :: xs ->\n                                    let rec sort_array_rec_rec_rec acc = function\n                                        | [] -> acc\n                                        | x :: xs ->\n                                            let rec sort_array_rec_rec_rec acc = function\n                                                | [] -> acc\n                                                | x :: xs ->\n                                                    let rec sort_array_rec_rec_rec acc = function\n                                                        | [] -> acc\n                                                        | x :: xs ->\n                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                | [] -> acc\n                                                                | x :: xs ->\n                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                        | [] -> acc\n                                                                        | x :: xs ->\n                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                | [] -> acc\n                                                                                | x :: xs ->\n                                                                                    let rec sort_array_rec_rec_rec acc = function\n                                                                                        | [] -> acc\n                                                                                        | x :: xs ->\n                                                                                            let rec sort_array_rec_rec_rec acc = function\n                                                                                               | [] -> acc\n                                                                                               | x :: xs ->\n                                                                                                   let rec sort_array_rec_rec_rec acc = function\n                                                                                                       | [] -> acc\n                                                                                                       | x :: xs ->\n                                                                                                           let rec sort_array_rec_rec_rec acc = function\n                                                                                                               | [] -> acc\n                                                                                                               | x :: xs ->\n                                                                                                                   let rec sort_array_rec_rec_rec acc = function\n                                                                                                                       | [] -> acc\n                                                                                                                       | x :: xs ->\n                               \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq7zcu0p9.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq7zcu0p9.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq7zcu0p9.fsx(67,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq7zcu0p9.fsx(67,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpq7zcu0p9.fsx(67,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:120). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array' (arr: 'a []) = \n                                                                                    let rec sort_array' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc (arr:array<int>) = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let xs = xs |> Array.sortInPlace\n            sort_array' (x::acc) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6nqfqbd3.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) = \n        let rec sort_array_rec' (arr: 'a array) = \n            let rec sort_array_rec'' (arr: 'a array) = \n                let rec sort_array_rec'' (arr: 'a array) = \n                    let rec sort_array_rec''' (arr: 'a array) = \n                        let rec sort_array_rec''' (arr: 'a array) = \n                            let rec sort_array_rec''' (arr: 'a array) = \n                                let rec sort_array_rec''' (arr: 'a array) = \n                                    let rec sort_array_rec''' (arr: 'a array) = \n                                        let rec sort_array_rec''' (arr: 'a array) = \n                                            let rec sort_array_rec''' (arr: 'a array) = \n                                                let rec sort_array_rec''' (arr: 'a array) = \n                                                    let rec sort_array_rec''' (arr: 'a array) = \n                                                        let rec sort_array_rec'' (arr: 'a array) = \n                                                            let rec sort_array_rec'' (arr: 'a array) = \n                                                                let rec sort_array_rec'' (arr: 'a array) = \n                                                                    let rec sort_array_rec'' (arr: 'a array) = \n                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                let rec sort_array_rec' (arr: 'a array) = \n                                                                                    let rec sort_array_rec' (arr: 'a array) = \n                                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                                   let rec sort_array_rec' (arr: 'a array) = \n                                                                                                       let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0lmlyez8.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr:array<int>) = \n        let rec sort_array'' (arr:array<int>) = \n            let rec sort_array'' (arr:array<int>) = \n                let rec sort_array'' (arr:array<int>) = \n                    let rec sort_array'' (arr:array<int>) = \n                        let rec sort_array'' (arr:array<int>) = \n                            let rec sort_array'' (arr:array<int>) = \n                                let rec sort_array'' (arr:array<int>) = \n                                    let rec sort_array'' (arr:array<int>) = \n                                        let rec sort_array'' (arr:array<int>) = \n                                            let rec sort_array'' (arr:array<int>) = \n                                                let rec sort_array'' (arr:array<int>) = \n                                                    let rec sort_array'' (arr:array<int>) = \n                                                        let rec sort_array'' (arr:array<int>) = \n                                                            let rec sort_array'' (arr:array<int>) = \n                                                                let rec sort_array'' (arr:array<int>) = \n                                                                    let rec sort_array'' (arr:array<int>) = \n                                                                        let rec sort_array'' (arr:array<int>) = \n                                                                            let rec sort_array'' (arr:array<int>) = \n                                                                                let rec sort_array'' (arr:array<int>) = \n                                                                                    let rec sort_array'' (arr:array<int>) = \n                                                                                        let rec sort_array' (arr:array<int>) = \n                                                                                            let rec sort_array' (arr:array<int>) = \n                                                                                                   let rec sort_array' (arr:array<int>) = \n                                                                                                       let rec sort_array' (arr:array<int>) = \n                                                                                                           let rec sort_array' (arr:array<int>) = \n                                                                                                               let rec sort_array' (arr:array<int>) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbsamm_yy.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbsamm_yy.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbsamm_yy.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbsamm_yy.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbsamm_yy.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array'' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafk8yq57.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x::xs ->\n            let xs = x::xs\n            let rec sort_array_rec acc = function\n                | [] -> acc\n                | x::xs ->\n                    let xs = x::xs\n                    let rec sort_array_rec acc = function\n                        | [] -> acc\n                        | x::xs ->\n                            let xs = x::xs\n                            let rec sort_array_rec acc = function\n                                | [] -> acc\n                                | x::xs ->\n                                    let xs = x::xs\n                                    let rec sort_array_rec acc = function\n                                        | [] -> acc\n                                        | x::xs ->\n                                            let xs = x::xs\n                                            let rec sort_array_rec acc = function\n                                                | [] -> acc\n                                                | x::xs ->\n                                                    let xs = x::xs\n                                                    let rec sort_array_rec acc = function\n                                                        | [] -> acc\n                                                        | x::xs ->\n                                                            let xs = x::xs\n                                                            let rec sort_array_rec acc = function\n                                                                | [] -> acc\n                                                                | x::xs ->\n                                                                    let xs = x::xs\n                                                                    let rec sort_array_rec acc = function\n                                                                        | [] -> acc\n                                                                        | x::xs ->\n                                                                            let xs = x::xs\n                                                                            let rec sort_array_rec acc = function\n                                                                                | [] -> acc\n                                                                                | x::xs ->\n                                                                                    let xs = x::xs\n                                                                                    let rec sort_array_rec acc = function\n                                                                                        | [] -> acc\n                                                                                        | x::xs ->\n                                                                                            let xs = x::xs\n                                                                                            let rec sort_array_rec acc = function\n                                                                                               | [] -> acc\n                                                                                               | x::xs ->\n                                                                                                   let xs = x::xs\n                                                                                                   let rec sort_array_rec acc = function\n                                                                                                       | [] -> acc\n                                                                                                       | x::xs ->\n                                                                                                           let xs = x::xs\n                                                                                             \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqs4nnif7.fsx(60,108): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x::xs ->\n            let acc = x::acc\n            sort_array_rec acc xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let xs = xs |> Array.sortInPlace\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            let xs = xs |> Array.map (fun x -> x.ToString())\n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphqy2m5z5.fsx(34,13): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array' (arr: 'a []) =\n                                                                let rec sort_array' (arr: 'a []) =\n                                                                    let rec sort_array' (arr: 'a []) =\n                                                                        let rec sort_array' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array' (arr:\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjosqbdkr.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjosqbdkr.fsx(38,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array'' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafk8yq57.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: _[]) =\n        let rec sort_array'' (arr: _[]) =\n            let rec sort_array'' (arr: _[]) =\n                let rec sort_array'' (arr: _[]) =\n                    let rec sort_array'' (arr: _[]) =\n                        let rec sort_array'' (arr: _[]) =\n                            let rec sort_array'' (arr: _[]) =\n                                let rec sort_array'' (arr: _[]) =\n                                    let rec sort_array'' (arr: _[]) =\n                                        let rec sort_array'' (arr: _[]) =\n                                            let rec sort_array'' (arr: _[]) =\n                                                let rec sort_array'' (arr: _[]) =\n                                                    let rec sort_array'' (arr: _[]) =\n                                                        let rec sort_array'' (arr: _[]) =\n                                                            let rec sort_array'' (arr: _[]) =\n                                                                let rec sort_array'' (arr: _[]) =\n                                                                    let rec sort_array'' (arr: _[]) =\n                                                                        let rec sort_array'' (arr: _[]) =\n                                                                            let rec sort_array'' (arr: _[]) =\n                                                                                let rec sort_array' (arr: _[]) =\n                                                                                    let rec sort_array' (arr: _[]) =\n                                                                                        let rec sort_array' (arr: _[]) =\n                                                                                            let rec sort_array' (arr: _[]) =\n                                                                                                   let rec sort_array' (arr: _[]) =\n                                                                                                       let rec sort_array' (arr: _[]) =\n                                                                                                           let rec sort_array' (arr: _[]) =\n                                                                                                               let rec sort_array' (arr: _[]) =\n                                                                                                                   let rec sort_array' (arr: _[]) =\n                                                                                                                       let rec sort_array' (arr: _[]) =\n                                                                                                                           let rec sort_array' (arr: _[]) =\n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgmgq82zm.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (38:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgmgq82zm.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (38:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgmgq82zm.fsx(52,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (38:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgmgq82zm.fsx(52,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (38:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgmgq82zm.fsx(52,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (38:124). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr:array<int>) = \n        match arr with\n        | [] -> arr\n        | x::xs -> \n            let xs = xs |> Array.sortInPlace\n            let xs = xs |> Array.map (fun x -> x - x % 2)\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8rdhvkkp.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        let rec sort_array'' (arr: 'T[]) =\n            let rec sort_array'' (arr: 'T[]) =\n                let rec sort_array'' (arr: 'T[]) =\n                    let rec sort_array'' (arr: 'T[]) =\n                        let rec sort_array'' (arr: 'T[]) =\n                            let rec sort_array'' (arr: 'T[]) =\n                                let rec sort_array'' (arr: 'T[]) =\n                                    let rec sort_array'' (arr: 'T[]) =\n                                        let rec sort_array'' (arr: 'T[]) =\n                                            let rec sort_array'' (arr: 'T[]) =\n                                                let rec sort_array'' (arr: 'T[]) =\n                                                    let rec sort_array'' (arr: 'T[]) =\n                                                        let rec sort_array'' (arr: 'T[]) =\n                                                            let rec sort_array'' (arr: 'T[]) =\n                                                                let rec sort_array'' (arr: 'T[]) =\n                                                                    let rec sort_array'' (arr: 'T[]) =\n                                                                        let rec sort_array'' (arr: 'T[]) =\n                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                let rec sort_array' (arr: 'T[]) =\n                                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                       let rec sort_array' (arr: 'T[]) =\n                                                                                                           let rec sort_array' (arr: 'T[]) =\n                                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                                   let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpevagl1iy.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array'' (arr: 'a []) = \n                                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpipb0yczu.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpipb0yczu.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpipb0yczu.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpipb0yczu.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpipb0yczu.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        let rec sort_array_rec' (arr: 'a array) =\n            let rec sort_array_rec'' (arr: 'a array) =\n                let rec sort_array_rec'' (arr: 'a array) =\n                    let rec sort_array_rec'' (arr: 'a array) =\n                        let rec sort_array_rec'' (arr: 'a array) =\n                            let rec sort_array_rec'' (arr: 'a array) =\n                                let rec sort_array_rec'' (arr: 'a array) =\n                                    let rec sort_array_rec'' (arr: 'a array) =\n                                        let rec sort_array_rec'' (arr: 'a array) =\n                                            let rec sort_array_rec'' (arr: 'a array) =\n                                                let rec sort_array_rec'' (arr: 'a array) =\n                                                    let rec sort_array_rec'' (arr: 'a array) =\n                                                        let rec sort_array_rec'' (arr: 'a array) =\n                                                            let rec sort_array_rec'' (arr: 'a array) =\n                                                                let rec sort_array_rec'' (arr: 'a array) =\n                                                                    let rec sort_array_rec'' (arr: 'a array) =\n                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                let rec sort_array_rec' (arr: 'a array) =\n                                                                                    let rec sort_array_rec' (arr: 'a array) =\n                                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                                   let rec sort_array_rec' (arr: 'a array) =\n                                                                                                       let rec sort_array_rec' (arr: 'a array) =\n                                                                                                           let rec sort_array_rec' (arr: 'a array)\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoa2xcapw.fsx(35,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        match arr with\n        | [] -> arr\n        | _ ->\n            let rec sort_array'' (arr: 'a array) = \n                match arr with\n                | [] -> arr\n                | _ ->\n                    let rec sort_array''' (arr: 'a array) = \n                        match arr with\n                        | [] -> arr\n                        | _ ->\n                            let rec sort_array''' (arr: 'a array) = \n                                match arr with\n                                | [] -> arr\n                                | _ ->\n                                    let rec sort_array''' (arr: 'a array) = \n                                        match arr with\n                                        | [] -> arr\n                                        | _ ->\n                                            let rec sort_array''' (arr: 'a array) = \n                                                match arr with\n                                                | [] -> arr\n                                                | _ ->\n                                                    let rec sort_array''' (arr: 'a array) = \n                                                        match arr with\n                                                        | [] -> arr\n                                                        | _ ->\n                                                            let rec sort_array''' (arr: 'a array) = \n                                                                match arr with\n                                                                | [] -> arr\n                                                                | _ ->\n                                                                    let rec sort_array''' (arr: 'a array) = \n                                                                        match arr with\n                                                                        | [] -> arr\n                                                                        | _ ->\n                                                                            let rec sort_array''' (arr: 'a array) = \n                                                                                match arr with\n                                                                                | [] -> arr\n                                                                                | _ ->\n                                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                                        match arr with\n                                                                                        | [] -> arr\n                                                                                        | _ ->\n                                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                               match arr with\n                                                                                               | [] -> arr\n                                                                                               | _ ->\n                                                                                                   let rec sort_array' (arr: 'a array) = \n                                                                                                       match arr with\n                                                                                                       | [] -> arr\n                                                                                                       | _\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpaoxgny0s.fsx(61,1): error FS0010: Incomplete structured construct at or before this point in pattern matching. Expected '->' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        let rec sort_array'' (arr: 'T[]) =\n            let rec sort_array'' (arr: 'T[]) =\n                let rec sort_array'' (arr: 'T[]) =\n                    let rec sort_array'' (arr: 'T[]) =\n                        let rec sort_array'' (arr: 'T[]) =\n                            let rec sort_array'' (arr: 'T[]) =\n                                let rec sort_array'' (arr: 'T[]) =\n                                    let rec sort_array'' (arr: 'T[]) =\n                                        let rec sort_array'' (arr: 'T[]) =\n                                            let rec sort_array'' (arr: 'T[]) =\n                                                let rec sort_array'' (arr: 'T[]) =\n                                                    let rec sort_array'' (arr: 'T[]) =\n                                                        let rec sort_array'' (arr: 'T[]) =\n                                                            let rec sort_array' (arr: 'T[]) =\n                                                                let rec sort_array' (arr: 'T[]) =\n                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                let rec sort_array' (arr: 'T[]) =\n                                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                       let rec sort_array' (arr: 'T[]) =\n                                                                                                           let rec sort_array' (arr: 'T[]) =\n                                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                                   let rec sort_array' (arr:\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpacittu2_.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpacittu2_.fsx(38,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) =\n        let rec sort_array_rec' (arr: 'a array) =\n            let rec sort_array_rec'' (arr: 'a array) =\n                let rec sort_array_rec'' (arr: 'a array) =\n                    let rec sort_array_rec'' (arr: 'a array) =\n                        let rec sort_array_rec'' (arr: 'a array) =\n                            let rec sort_array_rec'' (arr: 'a array) =\n                                let rec sort_array_rec'' (arr: 'a array) =\n                                    let rec sort_array_rec'' (arr: 'a array) =\n                                        let rec sort_array_rec'' (arr: 'a array) =\n                                            let rec sort_array_rec'' (arr: 'a array) =\n                                                let rec sort_array_rec'' (arr: 'a array) =\n                                                    let rec sort_array_rec'' (arr: 'a array) =\n                                                        let rec sort_array_rec'' (arr: 'a array) =\n                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                let rec sort_array_rec' (arr: 'a array) =\n                                                                    let rec sort_array_rec' (arr: 'a array) =\n                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                let rec sort_array_rec' (arr: 'a array) =\n                                                                                    let rec sort_array_rec' (arr: 'a array) =\n                                                                                        let rec sort_array_rec' (arr: 'a array) =\n                                                                                            let rec sort_array_rec' (arr: 'a array) =\n                                                                                                   let rec sort_array_rec' (arr: 'a array) =\n                                                                                                       let rec sort_array_rec' (arr: 'a array) =\n                                                                                                           let rec sort_array_rec' (arr: 'a array) =\n                               \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0bqpcei6.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0bqpcei6.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0bqpcei6.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0bqpcei6.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0bqpcei6.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array'' (arr: 'a []) = \n                                                                                    let rec sort_array' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) = \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpugb7pika.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpugb7pika.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array' (arr: 'a []) = \n                                                                                    let rec sort_array' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        match arr with\n        | [| |] -> arr\n        | [| x |] -> arr\n        | x :: xs ->\n            let xs = xs |> Array.sortInPlace\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph46__fe4.fsx(13,11): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr:array<int>) = \n        match arr with\n        | [] -> arr\n        | x::xs -> \n            let xs = xs |> Array.sortInPlace\n            let xs = xs |> Array.map (fun x -> x - x % 2)\n            sort_array_rec xs\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2g40dks7.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) =\n        let rec sort_array_rec_rec (arr: 'a []) =\n            let rec sort_array_rec_rec_rec (arr: 'a []) =\n                let rec sort_array_rec_rec_rec (arr: 'a []) =\n                    let rec sort_array_rec_rec_rec (arr: 'a []) =\n                        let rec sort_array_rec_rec_rec (arr: 'a []) =\n                            let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                    let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                        let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                            let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                    let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                        let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                            let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                                let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                                    let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                                        let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                                            let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                                                let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                                                    let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                                                        let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                                                            let rec sort_array_rec_rec_rec (arr: 'a []) =\n                                                                                               let rec sort_array_rec_\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfl6fbekv.fsx(33,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                let rec sort_array' (arr: 'a []) = \n                                                                                    let rec sort_array' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) = \n                               \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpeekz_z7u.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpeekz_z7u.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpeekz_z7u.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpeekz_z7u.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpeekz_z7u.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpeekz_z7u.fsx(35,112): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) = \n        let rec sort_array_rec_rec (arr: 'a array) = \n            match arr with\n            | [] -> arr\n            | x::xs -> \n                let x = x\n                let xs = xs |> Array.sortInPlace\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x -> x.ToString())\n                let xs = xs |> Array.map (fun x ->\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz9w84gj4.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpz9w84gj4.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpz9w84gj4.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpz9w84gj4.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpz9w84gj4.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:17). Try indenting this t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array'' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwefutcfy.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        let rec sort_array' (arr: 'T[]) =\n            let rec sort_array' (arr: 'T[]) =\n                let rec sort_array' (arr: 'T[]) =\n                    let rec sort_array' (arr: 'T[]) =\n                        let rec sort_array' (arr: 'T[]) =\n                            let rec sort_array' (arr: 'T[]) =\n                                let rec sort_array' (arr: 'T[]) =\n                                    let rec sort_array' (arr: 'T[]) =\n                                        let rec sort_array' (arr: 'T[]) =\n                                            let rec sort_array' (arr: 'T[]) =\n                                                let rec sort_array' (arr: 'T[]) =\n                                                    let rec sort_array' (arr: 'T[]) =\n                                                        let rec sort_array' (arr: 'T[]) =\n                                                            let rec sort_array' (arr: 'T[]) =\n                                                                let rec sort_array' (arr: 'T[]) =\n                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                let rec sort_array' (arr: 'T[]) =\n                                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                       let rec sort_array' (arr: 'T[]) =\n                                                                                                           let rec sort_array' (arr: 'T[]) =\n                                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                                       let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpygvvkp18.fsx(39,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) =\n        match arr with\n        | [|a; b|] ->\n            if a = b then\n                arr\n            else\n                let temp = a\n                a\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x + 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x - 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x + 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x - 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x + 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x - 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x + 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x - 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x + 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x - 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x + 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x - 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x + 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x - 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x + 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x - 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x + 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x - 1)\n                |> Array.sortInPlace\n                |> Array.map (fun x -> x + 1)\n                |\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoajqdsg8.fsx(55,17): error FS0010: Unexpected symbol '|' in if/then/else expression. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x::xs -> \n            let xs = x::xs\n            let ys = sort_array_rec (acc@xs) xs\n            ys@acc\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: _[]) =\n        match arr with\n        | [|a; b|] ->\n            let a = if a > b then a else b\n            sort_array' (Array.sortInPlace a)\n        | _ ->\n            let a = Array.sortInPlace arr\n            sort_array' (a)\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpstcn31xd.fsx(13,26): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    'unit'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc = function\n        | [] -> acc\n        | x :: xs ->\n            let xs = xs |> List.rev\n            let xs = xs |> List.sortInPlace\n            sort_array' (x::acc) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_jxlej6n.fsx(13,33): error FS0039: The value, constructor, namespace or type 'sortInPlace' is not defined. Maybe you want one of the following:\n   sort\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: _[]) = \n        let rec sort_array'' (arr: _[]) = \n            let rec sort_array'' (arr: _[]) = \n                let rec sort_array'' (arr: _[]) = \n                    let rec sort_array'' (arr: _[]) = \n                        let rec sort_array'' (arr: _[]) = \n                            let rec sort_array'' (arr: _[]) = \n                                let rec sort_array'' (arr: _[]) = \n                                    let rec sort_array'' (arr: _[]) = \n                                        let rec sort_array'' (arr: _[]) = \n                                            let rec sort_array'' (arr: _[]) = \n                                                let rec sort_array'' (arr: _[]) = \n                                                    let rec sort_array'' (arr: _[]) = \n                                                        let rec sort_array'' (arr: _[]) = \n                                                            let rec sort_array'' (arr: _[]) = \n                                                                let rec sort_array'' (arr: _[]) = \n                                                                    let rec sort_array'' (arr: _[]) = \n                                                                        let rec sort_array'' (arr: _[]) = \n                                                                            let rec sort_array'' (arr: _[]) = \n                                                                                let rec sort_array'' (arr: _[]) = \n                                                                                    let rec sort_array' (arr: _[]) = \n                                                                                        let rec sort_array' (arr: _[]) = \n                                                                                            let rec sort_array' (arr: _[]) = \n                                                                                                   let rec sort_array' (arr: _[]) = \n                                                                                                       let rec sort_array' (arr: _[]) = \n                                                                                                           let rec sort_array' (arr: _[]) = \n                                                                                                               let rec sort_array' (arr: _[]) = \n                                                                                                                   let rec sort_array' (arr: _[]) = \n                                                                                                                       let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfnf5rn8i.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr:array<int>) = \n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let xs = x::xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\n            let xs = sort_array_rec xs\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxd_oy59s.fsx(49,13): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) = \n        let rec sort_array_rec' (arr: 'T[]) = \n            let rec sort_array_rec'' (arr: 'T[]) = \n                let rec sort_array_rec'' (arr: 'T[]) = \n                    let rec sort_array_rec'' (arr: 'T[]) = \n                        let rec sort_array_rec'' (arr: 'T[]) = \n                            let rec sort_array_rec'' (arr: 'T[]) = \n                                let rec sort_array_rec'' (arr: 'T[]) = \n                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                        let rec sort_array_rec'' (arr: 'T[]) = \n                                            let rec sort_array_rec'' (arr: 'T[]) = \n                                                let rec sort_array_rec'' (arr: 'T[]) = \n                                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                                        let rec sort_array_rec'' (arr: 'T[]) = \n                                                            let rec sort_array_rec'' (arr: 'T[]) = \n                                                                let rec sort_array_rec'' (arr: 'T[]) = \n                                                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                let rec sort_array_rec' (arr: 'T[]) = \n                                                                                    let rec sort_array_rec' (arr: 'T[]) = \n                                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                   let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                       let rec sort_array_rec' (arr: '\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjfleho_0.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjfleho_0.fsx(34,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected identifier or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) =\n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let x = x\n            let y = x\n            let z = x\n            if y > z then\n                sort_array_rec xs\n            else\n                sort_array_rec ys\n    sort_array_rec arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptvmmfrk5.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) = \n        let rec sort_array_rec' (arr: 'a []) = \n            let rec sort_array_rec'' (arr: 'a []) = \n                let rec sort_array_rec'' (arr: 'a []) = \n                    let rec sort_array_rec'' (arr: 'a []) = \n                        let rec sort_array_rec'' (arr: 'a []) = \n                            let rec sort_array_rec'' (arr: 'a []) = \n                                let rec sort_array_rec'' (arr: 'a []) = \n                                    let rec sort_array_rec'' (arr: 'a []) = \n                                        let rec sort_array_rec'' (arr: 'a []) = \n                                            let rec sort_array_rec'' (arr: 'a []) = \n                                                let rec sort_array_rec'' (arr: 'a []) = \n                                                    let rec sort_array_rec'' (arr: 'a []) = \n                                                        let rec sort_array_rec'' (arr: 'a []) = \n                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                let rec sort_array_rec' (arr: 'a []) = \n                                                                    let rec sort_array_rec' (arr: 'a []) = \n                                                                        let rec sort_array_rec' (arr: 'a []) = \n                                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                                let rec sort_array_rec' (arr: 'a []) = \n                                                                                    let rec sort_array_rec' (arr: 'a []) = \n                                                                                        let rec sort_array_rec' (arr: 'a []) = \n                                                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                                               let rec sort_array_rec' (arr: 'a []) = \n                                                                                                   let rec sort_array_rec' (arr: 'a [])\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp09ee388b.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) = \n        let rec sort_array'' (arr: 'T[]) = \n            let rec sort_array'' (arr: 'T[]) = \n                let rec sort_array'' (arr: 'T[]) = \n                    let rec sort_array'' (arr: 'T[]) = \n                        let rec sort_array'' (arr: 'T[]) = \n                            let rec sort_array'' (arr: 'T[]) = \n                                let rec sort_array'' (arr: 'T[]) = \n                                    let rec sort_array'' (arr: 'T[]) = \n                                        let rec sort_array'' (arr: 'T[]) = \n                                            let rec sort_array'' (arr: 'T[]) = \n                                                let rec sort_array'' (arr: 'T[]) = \n                                                    let rec sort_array'' (arr: 'T[]) = \n                                                        let rec sort_array'' (arr: 'T[]) = \n                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                let rec sort_array'' (arr: 'T[]) = \n                                                                    let rec sort_array'' (arr: 'T[]) = \n                                                                        let rec sort_array'' (arr: 'T[]) = \n                                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                                let rec sort_array' (arr: 'T[]) = \n                                                                                    let rec sort_array' (arr: 'T[]) = \n                                                                                        let rec sort_array' (arr: 'T[]) = \n                                                                                            let rec sort_array' (arr: 'T[]) = \n                                                                                                   let rec sort_array' (arr: 'T[]) = \n                                                                                                       let rec sort_array' (arr: 'T[]) = \n                                                                                                           let rec sort_array' (arr: 'T[]) = \n                                                                                                               let rec sort_array' (arr: 'T[]) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdwyea240.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(35,112): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc (arr: 'a array) = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let xs = xs |> Array.sortInPlace\n            sort_array_rec (acc @ [x]) xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu0yemglb.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) = \n        if Array.isEmpty arr then\n            arr\n        else\n            let rec sort_array_rec' (arr: 'T[]) = \n                if Array.isEmpty arr then\n                    arr\n                else\n                    let temp = arr.[0]\n                    let temp2 = arr.[1]\n                    let temp3 = arr.[2]\n                    let temp4 = arr.[3]\n                    let temp5 = arr.[4]\n                    let temp6 = arr.[5]\n                    let temp7 = arr.[6]\n                    let temp8 = arr.[7]\n                    let temp9 = arr.[8]\n                    let temp10 = arr.[9]\n                    let temp11 = arr.[10]\n                    let temp12 = arr.[11]\n                    let temp13 = arr.[12]\n                    let temp14 = arr.[13]\n                    let temp15 = arr.[14]\n                    let temp16 = arr.[15]\n                    let temp17 = arr.[16]\n                    let temp18 = arr.[17]\n                    let temp19 = arr.[18]\n                    let temp20 = arr.[19]\n                    let temp21 = arr.[20]\n                    let temp22 = arr.[21]\n                    let temp23 = arr.[22]\n                    let temp24 = arr.[23]\n                    let temp25 = arr.[24]\n                    let temp26 = arr.[25]\n                    let temp27 = arr.[26]\n                    let temp28 = arr.[27]\n                    let temp29 = arr.[28]\n                    let temp30 = arr.[29]\n                    let temp31 = arr.[30]\n                    let temp32 = arr.[31]\n                    let temp33 = arr.[32]\n                    let temp34 = arr.[33]\n                    let temp35 = arr.[34]\n                    let temp36 = arr.[35]\n                    let temp37 = arr.[36]\n                    let temp38 = arr.[37]\n                    let temp39 = arr.[38]\n                    let temp40 = arr.[39]\n                    let temp41 = arr.[40]\n                    let temp42 = arr.[41]\n                    let temp43 = arr.[42]\n                    let temp44 = arr.[43]\n                    let temp45 = arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1uo_e8uu.fsx(61,21): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array'\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph6usihu2.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) = \n        let rec sort_array_rec' (arr: 'T[]) = \n            let rec sort_array_rec'' (arr: 'T[]) = \n                let rec sort_array_rec'' (arr: 'T[]) = \n                    let rec sort_array_rec'' (arr: 'T[]) = \n                        let rec sort_array_rec'' (arr: 'T[]) = \n                            let rec sort_array_rec'' (arr: 'T[]) = \n                                let rec sort_array_rec'' (arr: 'T[]) = \n                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                        let rec sort_array_rec'' (arr: 'T[]) = \n                                            let rec sort_array_rec'' (arr: 'T[]) = \n                                                let rec sort_array_rec'' (arr: 'T[]) = \n                                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                                        let rec sort_array_rec'' (arr: 'T[]) = \n                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                let rec sort_array_rec' (arr: 'T[]) = \n                                                                    let rec sort_array_rec' (arr: 'T[]) = \n                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                let rec sort_array_rec' (arr: 'T[]) = \n                                                                                    let rec sort_array_rec' (arr: 'T[]) = \n                                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                               let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                   let rec sort_array_rec' (arr: 'T[])\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc49oxx_1.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) =\n        match arr with\n        | null -> arr\n        | _ ->\n            let rec sort_array'' (arr: 'a array) =\n                match arr with\n                | null -> arr\n                | _ ->\n                    let rec sort_array''' (arr: 'a array) =\n                        match arr with\n                        | null -> arr\n                        | _ ->\n                            let rec sort_array''' (arr: 'a array) =\n                                match arr with\n                                | null -> arr\n                                | _ ->\n                                    let rec sort_array''' (arr: 'a array) =\n                                        match arr with\n                                        | null -> arr\n                                        | _ ->\n                                            let rec sort_array''' (arr: 'a array) =\n                                                match arr with\n                                                | null -> arr\n                                                | _ ->\n                                                    let rec sort_array''' (arr: 'a array) =\n                                                        match arr with\n                                                        | null -> arr\n                                                        | _ ->\n                                                            let rec sort_array''' (arr: 'a array) =\n                                                                match arr with\n                                                                | null -> arr\n                                                                | _ ->\n                                                                    let rec sort_array''' (arr: 'a array) =\n                                                                        match arr with\n                                                                        | null -> arr\n                                                                        | _ ->\n                                                                            let rec sort_array''' (arr: 'a array) =\n                                                                                match arr with\n                                                                                | null -> arr\n                                                                                | _ ->\n                                                                                    let rec sort_array'' (arr: 'a array) =\n                                                                                        match arr with\n                                                                                        | null -> arr\n                                                                                        | _ ->\n                                                                                            let rec sort_array' (arr: 'a array) =\n                                                                                               match arr with\n                                                                                               | null -> arr\n                                                                                               | _ ->\n                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                       match arr with\n                                                                                                       | null -> arr\n                                                                                                       | _ ->\n                                                                                                           let rec sort_array' (arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx7qi4q0z.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (61:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpx7qi4q0z.fsx(62,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) =\n        let rec sort_array'' (arr: 'a array) =\n            let rec sort_array'' (arr: 'a array) =\n                let rec sort_array'' (arr: 'a array) =\n                    let rec sort_array'' (arr: 'a array) =\n                        let rec sort_array'' (arr: 'a array) =\n                            let rec sort_array'' (arr: 'a array) =\n                                let rec sort_array'' (arr: 'a array) =\n                                    let rec sort_array'' (arr: 'a array) =\n                                        let rec sort_array'' (arr: 'a array) =\n                                            let rec sort_array'' (arr: 'a array) =\n                                                let rec sort_array'' (arr: 'a array) =\n                                                    let rec sort_array'' (arr: 'a array) =\n                                                        let rec sort_array'' (arr: 'a array) =\n                                                            let rec sort_array'' (arr: 'a array) =\n                                                                let rec sort_array'' (arr: 'a array) =\n                                                                    let rec sort_array'' (arr: 'a array) =\n                                                                        let rec sort_array'' (arr: 'a array) =\n                                                                            let rec sort_array' (arr: 'a array) =\n                                                                                let rec sort_array' (arr: 'a array) =\n                                                                                    let rec sort_array' (arr: 'a array) =\n                                                                                        let rec sort_array' (arr: 'a array) =\n                                                                                            let rec sort_array' (arr: 'a array) =\n                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                       let rec sort_array' (arr: 'a array) =\n                                                                                                           let rec sort_array' (arr: 'a array) =\n                                                                                                               let rec sort_array' (arr: 'a array) =\n                                                                                                                   let rec sort_array' (arr: 'a array) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkfghfpba.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array' (arr: 'a []) =\n                                                                    let rec sort_array' (arr: 'a []) =\n                                                                        let rec sort_array' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array' (arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0t7an5b8.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:120). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0t7an5b8.fsx(38,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array' (arr: 'a []) =\n            let rec sort_array' (arr: 'a []) =\n                let rec sort_array' (arr: 'a []) =\n                    let rec sort_array' (arr: 'a []) =\n                        let rec sort_array' (arr: 'a []) =\n                            let rec sort_array' (arr: 'a []) =\n                                let rec sort_array' (arr: 'a []) =\n                                    let rec sort_array' (arr: 'a []) =\n                                        let rec sort_array' (arr: 'a []) =\n                                            let rec sort_array' (arr: 'a []) =\n                                                let rec sort_array' (arr: 'a []) =\n                                                    let rec sort_array' (arr: 'a []) =\n                                                        let rec sort_array' (arr: 'a []) =\n                                                            let rec sort_array' (arr: 'a []) =\n                                                                let rec sort_array' (arr: 'a []) =\n                                                                    let rec sort_array' (arr: 'a []) =\n                                                                        let rec sort_array' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                                           let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpin1y1ng4.fsx(39,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a []) = \n        let rec sort_array_rec' (arr: 'a []) = \n            let rec sort_array_rec'' (arr: 'a []) = \n                let rec sort_array_rec'' (arr: 'a []) = \n                    let rec sort_array_rec''' (arr: 'a []) = \n                        let rec sort_array_rec''' (arr: 'a []) = \n                            let rec sort_array_rec''' (arr: 'a []) = \n                                let rec sort_array_rec''' (arr: 'a []) = \n                                    let rec sort_array_rec''' (arr: 'a []) = \n                                        let rec sort_array_rec''' (arr: 'a []) = \n                                            let rec sort_array_rec''' (arr: 'a []) = \n                                                let rec sort_array_rec''' (arr: 'a []) = \n                                                    let rec sort_array_rec''' (arr: 'a []) = \n                                                        let rec sort_array_rec''' (arr: 'a []) = \n                                                            let rec sort_array_rec''' (arr: 'a []) = \n                                                                let rec sort_array_rec''' (arr: 'a []) = \n                                                                    let rec sort_array_rec''' (arr: 'a []) = \n                                                                        let rec sort_array_rec'' (arr: 'a []) = \n                                                                            let rec sort_array_rec'' (arr: 'a []) = \n                                                                                let rec sort_array_rec' (arr: 'a []) = \n                                                                                    let rec sort_array_rec' (arr: 'a []) = \n                                                                                        let rec sort_array_rec' (arr: 'a []) = \n                                                                                            let rec sort_array_rec' (arr: 'a []) = \n                                                                                                   let rec sort_array_rec' (arr: 'a []) = \n                               \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpisw6elt8.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (32:100). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpisw6elt8.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (32:100). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpisw6elt8.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (32:100). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpisw6elt8.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (32:100). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpisw6elt8.fsx(46,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (32:100). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a[]) =\n        let rec sort_array'' (arr: 'a[]) =\n            let rec sort_array'' (arr: 'a[]) =\n                let rec sort_array'' (arr: 'a[]) =\n                    let rec sort_array'' (arr: 'a[]) =\n                        let rec sort_array'' (arr: 'a[]) =\n                            let rec sort_array'' (arr: 'a[]) =\n                                let rec sort_array'' (arr: 'a[]) =\n                                    let rec sort_array'' (arr: 'a[]) =\n                                        let rec sort_array'' (arr: 'a[]) =\n                                            let rec sort_array'' (arr: 'a[]) =\n                                                let rec sort_array'' (arr: 'a[]) =\n                                                    let rec sort_array'' (arr: 'a[]) =\n                                                        let rec sort_array'' (arr: 'a[]) =\n                                                            let rec sort_array'' (arr: 'a[]) =\n                                                                let rec sort_array'' (arr: 'a[]) =\n                                                                    let rec sort_array'' (arr: 'a[]) =\n                                                                        let rec sort_array'' (arr: 'a[]) =\n                                                                            let rec sort_array' (arr: 'a[]) =\n                                                                                let rec sort_array' (arr: 'a[]) =\n                                                                                    let rec sort_array' (arr: 'a[]) =\n                                                                                        let rec sort_array' (arr: 'a[]) =\n                                                                                            let rec sort_array' (arr: 'a[]) =\n                                                                                               let rec sort_array' (arr: 'a[]) =\n                                                                                                   let rec sort_array' (arr: 'a[]) =\n                                                                                                       let rec sort_array' (arr: 'a[]) =\n                                                                                                           let rec sort_array' (arr: 'a[]) =\n                                                                                                               let rec sort_array' (arr: 'a[]) =\n                                                                                                                   let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9026w9tn.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        match arr with\n        | [| |] -> arr\n        | [| x |] -> arr\n        | xs ->\n            let rec sort_array'' (xs: 'T[]) =\n                match xs with\n                | [| |] -> xs\n                | [| x |] -> xs\n                | xs ->\n                    let rec sort_array''' (xs: 'T[]) =\n                        match xs with\n                        | [| |] -> xs\n                        | [| x |] -> xs\n                        | xs ->\n                            let rec sort_array'''' (xs: 'T[]) =\n                                match xs with\n                                | [| |] -> xs\n                                | [| x |] -> xs\n                                | xs ->\n                                    let rec sort_array''''' (xs: 'T[]) =\n                                        match xs with\n                                        | [| |] -> xs\n                                        | [| x |] -> xs\n                                        | xs ->\n                                            let rec sort_array''''' (xs: 'T[]) =\n                                                match xs with\n                                                | [| |] -> xs\n                                                | [| x |] -> xs\n                                                | xs ->\n                                                    let rec sort_array''''' (xs: 'T[]) =\n                                                        match xs with\n                                                        | [| |] -> xs\n                                                        | [| x |] -> xs\n                                                        | xs ->\n                                                            let rec sort_array''''' (xs: 'T[]) =\n                                                                match xs with\n                                                                | [| |] -> xs\n                                                                | [| x |] -> xs\n                                                                | xs ->\n                                                                    let rec sort_array''''' (xs: 'T[]) =\n                                                                        match xs with\n                                                                        | [| |] -> xs\n                                                                        | [| x |] -> xs\n                                                                        | xs ->\n                                                                            let rec sort_array''''' (xs: 'T[]) =\n                                                                                match xs with\n                                                              \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf_ybdgqu.fsx(57,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:81). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf_ybdgqu.fsx(57,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:81). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf_ybdgqu.fsx(57,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n\n\n/tmp/tmpf_ybdgqu.fsx(69,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:81). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpf_ybdgqu.fsx(69,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:81). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array'' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafk8yq57.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) =\n        match arr with\n        | [] -> arr\n        | x::xs ->\n            let xs = xs |> Array.sortInPlace\n            let xs = xs |> Array.map (fun x -> x.ToString())\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm3p2r5cy.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        match arr with \n        | [||] -> arr\n        | [|x|] -> [|x|]\n        | [|x;y|] -> [|x;y|]\n        | xs -> \n            let xs = Array.sortInPlace xs\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnmryobff.fsx(16,25): error FS0001: This expression was expected to have type\n    ''a[]'    \nbut here has type\n    'unit'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc elem =\n        match elem with\n        | [] -> acc\n        | x::xs ->\n            let xs' = x::xs\n            sort_array' (x::acc) xs'\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376517,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc (arr:array<int>) = \n        match arr with \n        | [] -> acc\n        | x::xs -> \n            let x = x - 1\n            let y = xs.[x]\n            if y < 0 then sort_array_rec (y::acc) xs\n            else sort_array_rec (y::acc) xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwsjg8gj3.fsx(11,11): error FS0001: This expression was expected to have type\n    'int array'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc (arr: 'a array) =\n        match arr with\n        | [] -> acc\n        | x::xs ->\n            let xs = xs |> Array.sort\n            let xs = xs |> Array.map (fun x -> x - x % 2)\n            sort_array' (x::acc) xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm3jbkq86.fsx(11,11): error FS0001: This expression was expected to have type\n    ''a array'    \nbut here has type\n    ''b list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a[]) = \n        match arr with\n        | [| |] -> arr\n        | [| x |] -> arr\n        | xs -> \n            let rec sort_array'' (xs: 'a[]) = \n                match xs with\n                | [| |] -> xs\n                | [| x |] -> xs\n                | xs -> \n                    let x = x\n                    let y = xs\n                    if x < y then\n                        sort_array'' ys\n                    else\n                        sort_array' xs\n            sort_array'' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi1w38yf9.fsx(19,29): error FS0039: The value or constructor 'x' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) = \n        let rec sort_array_rec' (arr: 'T[]) = \n            let rec sort_array_rec'' (arr: 'T[]) = \n                let rec sort_array_rec'' (arr: 'T[]) = \n                    let rec sort_array_rec'' (arr: 'T[]) = \n                        let rec sort_array_rec'' (arr: 'T[]) = \n                            let rec sort_array_rec'' (arr: 'T[]) = \n                                let rec sort_array_rec'' (arr: 'T[]) = \n                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                        let rec sort_array_rec'' (arr: 'T[]) = \n                                            let rec sort_array_rec'' (arr: 'T[]) = \n                                                let rec sort_array_rec'' (arr: 'T[]) = \n                                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                                        let rec sort_array_rec'' (arr: 'T[]) = \n                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                let rec sort_array_rec' (arr: 'T[]) = \n                                                                    let rec sort_array_rec' (arr: 'T[]) = \n                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                let rec sort_array_rec' (arr: 'T[]) = \n                                                                                    let rec sort_array_rec' (arr: 'T[]) = \n                                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                   let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                       let rec sort_array_rec' (arr: 'T[])\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp93w85ttk.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        let rec sort_array'' (arr: 'T[]) =\n            let rec sort_array'' (arr: 'T[]) =\n                let rec sort_array'' (arr: 'T[]) =\n                    let rec sort_array'' (arr: 'T[]) =\n                        let rec sort_array'' (arr: 'T[]) =\n                            let rec sort_array'' (arr: 'T[]) =\n                                let rec sort_array'' (arr: 'T[]) =\n                                    let rec sort_array'' (arr: 'T[]) =\n                                        let rec sort_array'' (arr: 'T[]) =\n                                            let rec sort_array'' (arr: 'T[]) =\n                                                let rec sort_array'' (arr: 'T[]) =\n                                                    let rec sort_array'' (arr: 'T[]) =\n                                                        let rec sort_array'' (arr: 'T[]) =\n                                                            let rec sort_array'' (arr: 'T[]) =\n                                                                let rec sort_array'' (arr: 'T[]) =\n                                                                    let rec sort_array'' (arr: 'T[]) =\n                                                                        let rec sort_array'' (arr: 'T[]) =\n                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                let rec sort_array' (arr: 'T[]) =\n                                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                       let rec sort_array' (arr: 'T[]) =\n                                                                                                           let rec sort_array' (arr: 'T[]) =\n                                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                                   let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpevagl1iy.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array'' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafk8yq57.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array'' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafk8yq57.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'T[]) = \n        let rec sort_array_rec' (arr: 'T[]) = \n            let rec sort_array_rec'' (arr: 'T[]) = \n                let rec sort_array_rec'' (arr: 'T[]) = \n                    let rec sort_array_rec'' (arr: 'T[]) = \n                        let rec sort_array_rec'' (arr: 'T[]) = \n                            let rec sort_array_rec'' (arr: 'T[]) = \n                                let rec sort_array_rec'' (arr: 'T[]) = \n                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                        let rec sort_array_rec'' (arr: 'T[]) = \n                                            let rec sort_array_rec'' (arr: 'T[]) = \n                                                let rec sort_array_rec'' (arr: 'T[]) = \n                                                    let rec sort_array_rec'' (arr: 'T[]) = \n                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                let rec sort_array_rec' (arr: 'T[]) = \n                                                                    let rec sort_array_rec' (arr: 'T[]) = \n                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                let rec sort_array_rec' (arr: 'T[]) = \n                                                                                    let rec sort_array_rec' (arr: 'T[]) = \n                                                                                        let rec sort_array_rec' (arr: 'T[]) = \n                                                                                            let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                   let rec sort_array_rec' (arr: 'T[]) = \n                                                                                                       let rec sort_array_rec' (arr: 'T[]) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgnjo__cs.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgnjo__cs.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgnjo__cs.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgnjo__cs.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgnjo__cs.fsx(46,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (33:104). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr:array<int>) =\n        match arr with\n        | null -> arr\n        | _ ->\n            let rec sort_array_rec' (arr:array<int>) =\n                match arr with\n                | null -> arr\n                | _ ->\n                    let rec sort_array_rec'' (arr:array<int>) =\n                        match arr with\n                        | null -> arr\n                        | _ ->\n                            let rec sort_array_rec''' (arr:array<int>) =\n                                match arr with\n                                | null -> arr\n                                | _ ->\n                                    let rec sort_array_rec''' (arr:array<int>) =\n                                        match arr with\n                                        | null -> arr\n                                        | _ ->\n                                            let rec sort_array_rec''' (arr:array<int>) =\n                                                match arr with\n                                                | null -> arr\n                                                | _ ->\n                                                    let rec sort_array_rec''' (arr:array<int>) =\n                                                        match arr with\n                                                        | null -> arr\n                                                        | _ ->\n                                                            let rec sort_array_rec''' (arr:array<int>) =\n                                                                match arr with\n                                                                | null -> arr\n                                                                | _ ->\n                                                                    let rec sort_array_rec''' (arr:array<int>) =\n                                                                        match arr with\n                                                                        | null -> arr\n                                                                        | _ ->\n                                                                            let rec sort_array_rec''' (arr:array<int>) =\n                                                                                match arr with\n                                                                                | null -> arr\n                                                                                | _ ->\n                                                                                    let rec sort_array_rec''' (arr:array<int>) =\n                                                                                        match arr with\n                                                                                        | null -> arr\n                                                                                        | _ ->\n                                                                                            let rec sort_array_rec''' (arr:array<int>) =\n                                                                                               match arr with\n                                                                                               | null -> arr\n                                                                                               | _ ->\n                                                                                                   let rec sort_array_rec'' (arr:array<int>) =\n                                                                                                       match arr with\n                                                              \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4_5pezcv.fsx(60,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4_5pezcv.fsx(60,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4_5pezcv.fsx(60,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n\n\n/tmp/tmp4_5pezcv.fsx(72,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4_5pezcv.fsx(72,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) = \n        let rec sort_array'' (arr: 'T[]) = \n            let rec sort_array'' (arr: 'T[]) = \n                let rec sort_array'' (arr: 'T[]) = \n                    let rec sort_array'' (arr: 'T[]) = \n                        let rec sort_array'' (arr: 'T[]) = \n                            let rec sort_array'' (arr: 'T[]) = \n                                let rec sort_array'' (arr: 'T[]) = \n                                    let rec sort_array'' (arr: 'T[]) = \n                                        let rec sort_array'' (arr: 'T[]) = \n                                            let rec sort_array'' (arr: 'T[]) = \n                                                let rec sort_array'' (arr: 'T[]) = \n                                                    let rec sort_array'' (arr: 'T[]) = \n                                                        let rec sort_array'' (arr: 'T[]) = \n                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                let rec sort_array'' (arr: 'T[]) = \n                                                                    let rec sort_array'' (arr: 'T[]) = \n                                                                        let rec sort_array'' (arr: 'T[]) = \n                                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                                let rec sort_array'' (arr: 'T[]) = \n                                                                                    let rec sort_array' (arr: 'T[]) = \n                                                                                        let rec sort_array' (arr: 'T[]) = \n                                                                                            let rec sort_array' (arr: 'T[]) = \n                                                                                                   let rec sort_array' (arr: 'T[]) = \n                                                                                                       let rec sort_array' (arr: 'T[]) = \n                                                                                                           let rec sort_array' (arr: 'T[]) = \n                                                                                                               let rec sort_array' (arr: 'T[]) = \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpopts6e_i.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpopts6e_i.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpopts6e_i.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpopts6e_i.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpopts6e_i.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) =\n        let rec sort_array'' (arr: 'a []) =\n            let rec sort_array'' (arr: 'a []) =\n                let rec sort_array'' (arr: 'a []) =\n                    let rec sort_array'' (arr: 'a []) =\n                        let rec sort_array'' (arr: 'a []) =\n                            let rec sort_array'' (arr: 'a []) =\n                                let rec sort_array'' (arr: 'a []) =\n                                    let rec sort_array'' (arr: 'a []) =\n                                        let rec sort_array'' (arr: 'a []) =\n                                            let rec sort_array'' (arr: 'a []) =\n                                                let rec sort_array'' (arr: 'a []) =\n                                                    let rec sort_array'' (arr: 'a []) =\n                                                        let rec sort_array'' (arr: 'a []) =\n                                                            let rec sort_array'' (arr: 'a []) =\n                                                                let rec sort_array'' (arr: 'a []) =\n                                                                    let rec sort_array'' (arr: 'a []) =\n                                                                        let rec sort_array'' (arr: 'a []) =\n                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                let rec sort_array' (arr: 'a []) =\n                                                                                    let rec sort_array' (arr: 'a []) =\n                                                                                        let rec sort_array' (arr: 'a []) =\n                                                                                            let rec sort_array' (arr: 'a []) =\n                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                       let rec sort_array' (arr: 'a []) =\n                                                                                                           let rec sort_array' (arr: 'a []) =\n                                                                                                               let rec sort_array' (arr: 'a []) =\n                                                                                                                   let rec sort_array' (arr: 'a []) =\n                                                                                                                       let rec sort_array\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafk8yq57.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x::xs ->\n            let xs = x::xs\n            let xs = sort_array_rec (acc@xs) xs\n            sort_array_rec (acc@xs) xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) = \n        let rec sort_array'' (arr: 'T[]) = \n            let rec sort_array'' (arr: 'T[]) = \n                let rec sort_array'' (arr: 'T[]) = \n                    let rec sort_array'' (arr: 'T[]) = \n                        let rec sort_array'' (arr: 'T[]) = \n                            let rec sort_array'' (arr: 'T[]) = \n                                let rec sort_array'' (arr: 'T[]) = \n                                    let rec sort_array'' (arr: 'T[]) = \n                                        let rec sort_array'' (arr: 'T[]) = \n                                            let rec sort_array'' (arr: 'T[]) = \n                                                let rec sort_array'' (arr: 'T[]) = \n                                                    let rec sort_array'' (arr: 'T[]) = \n                                                        let rec sort_array'' (arr: 'T[]) = \n                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                let rec sort_array'' (arr: 'T[]) = \n                                                                    let rec sort_array'' (arr: 'T[]) = \n                                                                        let rec sort_array'' (arr: 'T[]) = \n                                                                            let rec sort_array'' (arr: 'T[]) = \n                                                                                let rec sort_array' (arr: 'T[]) = \n                                                                                    let rec sort_array' (arr: 'T[]) = \n                                                                                        let rec sort_array' (arr: 'T[]) = \n                                                                                            let rec sort_array' (arr: 'T[]) = \n                                                                                                   let rec sort_array' (arr: 'T[]) = \n                                                                                                       let rec sort_array' (arr: 'T[]) = \n                                                                                                           let rec sort_array' (arr: 'T[]) = \n                                                                                                               let rec sort_array' (arr: 'T[]) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdwyea240.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdwyea240.fsx(35,112): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        let rec sort_array'' (arr: 'a array) = \n            let rec sort_array'' (arr: 'a array) = \n                let rec sort_array'' (arr: 'a array) = \n                    let rec sort_array'' (arr: 'a array) = \n                        let rec sort_array'' (arr: 'a array) = \n                            let rec sort_array'' (arr: 'a array) = \n                                let rec sort_array'' (arr: 'a array) = \n                                    let rec sort_array'' (arr: 'a array) = \n                                        let rec sort_array'' (arr: 'a array) = \n                                            let rec sort_array'' (arr: 'a array) = \n                                                let rec sort_array'' (arr: 'a array) = \n                                                    let rec sort_array'' (arr: 'a array) = \n                                                        let rec sort_array'' (arr: 'a array) = \n                                                            let rec sort_array'' (arr: 'a array) = \n                                                                let rec sort_array'' (arr: 'a array) = \n                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                let rec sort_array' (arr: 'a array) = \n                                                                                    let rec sort_array' (arr: 'a array) = \n                                                                                        let rec sort_array' (arr: 'a array) = \n                                                                                            let rec sort_array' (arr: 'a array) = \n                                                                                                   let rec sort_array' (arr: 'a array) = \n                                                                                                       let rec sort_array' (arr: 'a array) = \n                                                                                                           let rec sort_array' (arr: 'a array) = \n                                                                                                               let rec sort_array' (arr: 'a array) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpeb6oya6m.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpeb6oya6m.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpeb6oya6m.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpeb6oya6m.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpeb6oya6m.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr:array<int>) =\n        let rec sort_array_rec' (arr:array<int>) =\n            let rec sort_array_rec'' (arr:array<int>) =\n                let rec sort_array_rec'' (arr:array<int>) =\n                    let rec sort_array_rec'' (arr:array<int>) =\n                        let rec sort_array_rec'' (arr:array<int>) =\n                            let rec sort_array_rec'' (arr:array<int>) =\n                                let rec sort_array_rec'' (arr:array<int>) =\n                                    let rec sort_array_rec'' (arr:array<int>) =\n                                        let rec sort_array_rec'' (arr:array<int>) =\n                                            let rec sort_array_rec'' (arr:array<int>) =\n                                                let rec sort_array_rec'' (arr:array<int>) =\n                                                    let rec sort_array_rec'' (arr:array<int>) =\n                                                        let rec sort_array_rec' (arr:array<int>) =\n                                                            let rec sort_array_rec' (arr:array<int>) =\n                                                                let rec sort_array_rec' (arr:array<int>) =\n                                                                    let rec sort_array_rec' (arr:array<int>) =\n                                                                        let rec sort_array_rec' (arr:array<int>) =\n                                                                            let rec sort_array_rec' (arr:array<int>) =\n                                                                                let rec sort_array_rec' (arr:array<int>) =\n                                                                                    let rec sort_array_rec' (arr:array<int>) =\n                                                                                        let rec sort_array_rec' (arr:array<int>) =\n                                                                                            let rec sort_array_rec' (arr:array<int>) =\n                                                                                                   let rec sort_array_rec' (arr:array<int>) =\n                                                                                                       let rec sort_array_rec' (arr:array<int>) =\n                                                                                                           let rec sort_array_rec' (arr:array<int>) =\n                                                              \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcg_fob_d.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpcg_fob_d.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpcg_fob_d.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpcg_fob_d.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpcg_fob_d.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (34:108). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpcg_fob_d.fsx(34,108): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec (arr: 'a array) = \n        let rec sort_array_rec' (arr: 'a array) = \n            let rec sort_array_rec'' (arr: 'a array) = \n                let rec sort_array_rec'' (arr: 'a array) = \n                    let rec sort_array_rec''' (arr: 'a array) = \n                        let rec sort_array_rec''' (arr: 'a array) = \n                            let rec sort_array_rec''' (arr: 'a array) = \n                                let rec sort_array_rec''' (arr: 'a array) = \n                                    let rec sort_array_rec''' (arr: 'a array) = \n                                        let rec sort_array_rec''' (arr: 'a array) = \n                                            let rec sort_array_rec''' (arr: 'a array) = \n                                                let rec sort_array_rec''' (arr: 'a array) = \n                                                    let rec sort_array_rec''' (arr: 'a array) = \n                                                        let rec sort_array_rec'' (arr: 'a array) = \n                                                            let rec sort_array_rec'' (arr: 'a array) = \n                                                                let rec sort_array_rec'' (arr: 'a array) = \n                                                                    let rec sort_array_rec'' (arr: 'a array) = \n                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                let rec sort_array_rec' (arr: 'a array) = \n                                                                                    let rec sort_array_rec' (arr: 'a array) = \n                                                                                        let rec sort_array_rec' (arr: 'a array) = \n                                                                                            let rec sort_array_rec' (arr: 'a array) = \n                                                                                                   let rec sort_array_rec' (arr: 'a array) = \n                                                                                                       let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0lmlyez8.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x :: xs -> sort_array_rec (x::acc) xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376517,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array_rec acc = function\n        | [] -> acc\n        | x :: xs -> sort_array_rec (x :: acc) xs\n    sort_array_rec [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc = function\n        | [] -> acc\n        | x::xs ->\n            let rec sort_array' acc' = function\n                | [] -> acc'\n                | x::xs ->\n                    let c = compare x acc\n                    if c < 0 then sort_array' (x::acc) xs\n                    elif c = 0 then sort_array' acc xs\n                    else sort_array' (x::acc) xs\n            sort_array' acc' xs\n    sort_array' [] arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376517,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwpzj6_kg.fsx(16,51): error FS0001: Type mismatch. Expecting a\n    ''a list'    \nbut given a\n    ''a'    \nThe types ''a' and ''a list' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        let rec sort_array'' (arr: 'a array) = \n            let rec sort_array'' (arr: 'a array) = \n                let rec sort_array'' (arr: 'a array) = \n                    let rec sort_array'' (arr: 'a array) = \n                        let rec sort_array'' (arr: 'a array) = \n                            let rec sort_array'' (arr: 'a array) = \n                                let rec sort_array'' (arr: 'a array) = \n                                    let rec sort_array'' (arr: 'a array) = \n                                        let rec sort_array'' (arr: 'a array) = \n                                            let rec sort_array'' (arr: 'a array) = \n                                                let rec sort_array'' (arr: 'a array) = \n                                                    let rec sort_array'' (arr: 'a array) = \n                                                        let rec sort_array'' (arr: 'a array) = \n                                                            let rec sort_array'' (arr: 'a array) = \n                                                                let rec sort_array'' (arr: 'a array) = \n                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                let rec sort_array'' (arr: 'a array) = \n                                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                                        let rec sort_array' (arr: 'a array) = \n                                                                                            let rec sort_array' (arr: 'a array) = \n                                                                                                   let rec sort_array' (arr: 'a array) = \n                                                                                                       let rec sort_array' (arr: 'a array) = \n                                                                                                           let rec sort_array' (arr: 'a array) = \n                                                                                                               let rec sort_array' (arr: 'a array) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376511,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphethbdgh.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphethbdgh.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a[]) = \n        let rec sort_array' (arr: 'a[]) = \n            let rec sort_array' (arr: 'a[]) = \n                let rec sort_array' (arr: 'a[]) = \n                    let rec sort_array' (arr: 'a[]) = \n                        let rec sort_array' (arr: 'a[]) = \n                            let rec sort_array' (arr: 'a[]) = \n                                let rec sort_array' (arr: 'a[]) = \n                                    let rec sort_array' (arr: 'a[]) = \n                                        let rec sort_array' (arr: 'a[]) = \n                                            let rec sort_array' (arr: 'a[]) = \n                                                let rec sort_array' (arr: 'a[]) = \n                                                    let rec sort_array' (arr: 'a[]) = \n                                                        let rec sort_array' (arr: 'a[]) = \n                                                            let rec sort_array' (arr: 'a[]) = \n                                                                let rec sort_array' (arr: 'a[]) = \n                                                                    let rec sort_array' (arr: 'a[]) = \n                                                                        let rec sort_array' (arr: 'a[]) = \n                                                                            let rec sort_array' (arr: 'a[]) = \n                                                                                let rec sort_array' (arr: 'a[]) = \n                                                                                    let rec sort_array' (arr: 'a[]) = \n                                                                                        let rec sort_array' (arr: 'a[]) = \n                                                                                            let rec sort_array' (arr: 'a[]) = \n                                                                                                   let rec sort_array' (arr: 'a[]) = \n                                                                                                       let rec sort_array' (arr: 'a[]) = \n                                                                                                           let rec sort_array' (arr: 'a[]) = \n                                                                                                               let rec sort_array' (arr: 'a[]) = \n                                                                                                                   let rec sort_array' (arr: 'a[]) =\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376513,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph2ct765p.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmph2ct765p.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmph2ct765p.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmph2ct765p.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmph2ct765p.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (36:116). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        match arr with \n        | [| |] -> arr\n        | [| x |] -> arr\n        | xs -> \n            let xs = Array.sort xs\n            let xs = Array.sortWith (fun x y -> \n                let x = x * 10\n                let y = y * 10\n                if x < y then -1\n                elif x > y then 1\n                else 0) xs\n            sort_array' xs\n    sort_array' arr\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376517,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv02bi56q.fsx(20,25): warning FS0064: This construct causes code to be less generic than indicated by the type annotations. The type variable 'a has been constrained to be type 'int'.\n\n\n\n/tmp/tmpv02bi56q.fsx(25,21): error FS0001: This expression was expected to have type\n    'int[]'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a []) = \n        let rec sort_array'' (arr: 'a []) = \n            let rec sort_array'' (arr: 'a []) = \n                let rec sort_array'' (arr: 'a []) = \n                    let rec sort_array'' (arr: 'a []) = \n                        let rec sort_array'' (arr: 'a []) = \n                            let rec sort_array'' (arr: 'a []) = \n                                let rec sort_array'' (arr: 'a []) = \n                                    let rec sort_array'' (arr: 'a []) = \n                                        let rec sort_array'' (arr: 'a []) = \n                                            let rec sort_array'' (arr: 'a []) = \n                                                let rec sort_array'' (arr: 'a []) = \n                                                    let rec sort_array'' (arr: 'a []) = \n                                                        let rec sort_array'' (arr: 'a []) = \n                                                            let rec sort_array'' (arr: 'a []) = \n                                                                let rec sort_array'' (arr: 'a []) = \n                                                                    let rec sort_array'' (arr: 'a []) = \n                                                                        let rec sort_array'' (arr: 'a []) = \n                                                                            let rec sort_array'' (arr: 'a []) = \n                                                                                let rec sort_array' (arr: 'a []) = \n                                                                                    let rec sort_array' (arr: 'a []) = \n                                                                                        let rec sort_array' (arr: 'a []) = \n                                                                                            let rec sort_array' (arr: 'a []) = \n                                                                                                   let rec sort_array' (arr: 'a []) = \n                                                                                                       let rec sort_array' (arr: 'a []) = \n                                                                                                           let rec sort_array' (arr: 'a []) = \n                                                                                                               let rec sort_array' (arr: 'a []) = \n\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_37zkby9.fsx(49,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting th",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' acc = function\n        | [] -> acc\n        | x::xs ->\n            let xs = x::xs\n            let rec sort_array' acc' = function\n                | [] -> acc'\n                | x::xs ->\n                    let xs = x::xs\n                    let rec sort_array' acc' = function\n                        | [] -> acc'\n                        | x::xs ->\n                            let xs = x::xs\n                            let rec sort_array' acc' = function\n                                | [] -> acc'\n                                | x::xs ->\n                                    let xs = x::xs\n                                    let rec sort_array' acc' = function\n                                        | [] -> acc'\n                                        | x::xs ->\n                                            let xs = x::xs\n                                            let rec sort_array' acc' = function\n                                                | [] -> acc'\n                                                | x::xs ->\n                                                    let xs = x::xs\n                                                    let rec sort_array' acc' = function\n                                                        | [] -> acc'\n                                                        | x::xs ->\n                                                            let xs = x::xs\n                                                            let rec sort_array' acc' = function\n                                                                | [] -> acc'\n                                                                | x::xs ->\n                                                                    let xs = x::xs\n                                                                    let rec sort_array' acc' = function\n                                                                        | [] -> acc'\n                                                                        | x::xs ->\n                                                                            let xs = x::xs\n                                                                            let rec sort_array' acc' = function\n                                                                                | [] -> acc'\n                                                                                | x::xs ->\n                                                                                    let xs = x::xs\n                                                                                    let rec sort_array' acc' = function\n                                                                                        | [] -> acc'\n                                                                                        | x::xs ->\n                                                                                            let xs = x::xs\n                                                                                            let rec sort_array' acc' = function\n                                                                                               | [] -> acc'\n                                                                                               | x::xs ->\n                                                                                                   let xs = x::xs\n                                                                                                   let rec sort_array' acc' = function\n                                                                                                       | [] -> acc'\n                                                                                                       | x::xs ->\n                                                                                                           \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376510,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa_w_x42u.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpa_w_x42u.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpa_w_x42u.fsx(73,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpa_w_x42u.fsx(73,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpa_w_x42u.fsx(73,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (58:104). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        let rec sort_array' (arr: 'T[]) =\n            let rec sort_array' (arr: 'T[]) =\n                let rec sort_array' (arr: 'T[]) =\n                    let rec sort_array' (arr: 'T[]) =\n                        let rec sort_array' (arr: 'T[]) =\n                            let rec sort_array' (arr: 'T[]) =\n                                let rec sort_array' (arr: 'T[]) =\n                                    let rec sort_array' (arr: 'T[]) =\n                                        let rec sort_array' (arr: 'T[]) =\n                                            let rec sort_array' (arr: 'T[]) =\n                                                let rec sort_array' (arr: 'T[]) =\n                                                    let rec sort_array' (arr: 'T[]) =\n                                                        let rec sort_array' (arr: 'T[]) =\n                                                            let rec sort_array' (arr: 'T[]) =\n                                                                let rec sort_array' (arr: 'T[]) =\n                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                let rec sort_array' (arr: 'T[]) =\n                                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                       let rec sort_array' (arr: 'T[]) =\n                                                                                                           let rec sort_array' (arr: 'T[]) =\n                                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                                       let rec sort_array' (arr: 'T[]) =\n                                                                                                                           let rec sort\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376514,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplga6fzs9.fsx(39,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'a array) = \n        let rec sort_array'' (arr: 'a array) = \n            let rec sort_array'' (arr: 'a array) = \n                let rec sort_array'' (arr: 'a array) = \n                    let rec sort_array'' (arr: 'a array) = \n                        let rec sort_array'' (arr: 'a array) = \n                            let rec sort_array'' (arr: 'a array) = \n                                let rec sort_array'' (arr: 'a array) = \n                                    let rec sort_array'' (arr: 'a array) = \n                                        let rec sort_array'' (arr: 'a array) = \n                                            let rec sort_array'' (arr: 'a array) = \n                                                let rec sort_array'' (arr: 'a array) = \n                                                    let rec sort_array'' (arr: 'a array) = \n                                                        let rec sort_array'' (arr: 'a array) = \n                                                            let rec sort_array'' (arr: 'a array) = \n                                                                let rec sort_array'' (arr: 'a array) = \n                                                                    let rec sort_array'' (arr: 'a array) = \n                                                                        let rec sort_array'' (arr: 'a array) = \n                                                                            let rec sort_array'' (arr: 'a array) = \n                                                                                let rec sort_array'' (arr: 'a array) = \n                                                                                    let rec sort_array' (arr: 'a array) = \n                                                                                        let rec sort_array' (arr: 'a array) = \n                                                                                            let rec sort_array' (arr: 'a array) = \n                                                                                                   let rec sort_array' (arr: 'a array) = \n                                                                                                       let rec sort_array' (arr: 'a array) = \n                                                                                                           let rec sort_array' (arr: 'a array) = \n                                                                                                               let rec sort_array' (arr: 'a array) = \nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376512,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1tl1bo.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(48,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:112). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfg1tl1bo.fsx(35,112): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n    let rec sort_array' (arr: 'T[]) =\n        let rec sort_array'' (arr: 'T[]) =\n            let rec sort_array'' (arr: 'T[]) =\n                let rec sort_array'' (arr: 'T[]) =\n                    let rec sort_array'' (arr: 'T[]) =\n                        let rec sort_array'' (arr: 'T[]) =\n                            let rec sort_array'' (arr: 'T[]) =\n                                let rec sort_array'' (arr: 'T[]) =\n                                    let rec sort_array'' (arr: 'T[]) =\n                                        let rec sort_array'' (arr: 'T[]) =\n                                            let rec sort_array'' (arr: 'T[]) =\n                                                let rec sort_array'' (arr: 'T[]) =\n                                                    let rec sort_array' (arr: 'T[]) =\n                                                        let rec sort_array' (arr: 'T[]) =\n                                                            let rec sort_array' (arr: 'T[]) =\n                                                                let rec sort_array' (arr: 'T[]) =\n                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                let rec sort_array' (arr: 'T[]) =\n                                                                                    let rec sort_array' (arr: 'T[]) =\n                                                                                        let rec sort_array' (arr: 'T[]) =\n                                                                                            let rec sort_array' (arr: 'T[]) =\n                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                   let rec sort_array' (arr: 'T[]) =\n                                                                                                       let rec sort_array' (arr: 'T[]) =\n                                                                                                           let rec sort_array' (arr: 'T[]) =\n                                                                                                               let rec sort_array' (arr: 'T[]) =\n                                                                                                                   let rec sort_array' (arr: 'T\nlet test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()",
      "timestamp": 1675376516,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy6jgrglu.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpy6jgrglu.fsx(38,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}