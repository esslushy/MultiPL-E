{
  "name": "HumanEval_13_greatest_common_divisor",
  "language": "fs",
  "prompt": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n",
  "tests": "let test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a\n        else greatest_common_divisor_a (b-1) (a%b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz4jc5iwx.fsx(9,14): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop a b = \n        match b with\n        | 0 -> a\n        | _ -> greatest_common_divisor_loop (a / b) (a % b)\n    greatest_common_divisor_loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | _ -> greatest_common_divisor_a (a / b) (b / a)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_syxhp0q.fsx(10,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) = \n        if a = b then a\n        else GreatestCommonDivisor (a % b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        if a = b then\n            a\n        else\n            let a' = greatest_common_divisor_rec a b\n            let b' = greatest_common_divisor_rec b a\n            if a' <> b' then\n                greatest_common_divisor_rec a' b'\n            else\n                a'\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a, b) =\n        if a = b then a\n        else greatest_common_divisor_rec (a / b, b / a)\n    greatest_common_divisor_rec (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a\n        else greatest_common_divisor_a (b - 1)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449503,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuket6kl4.fsx(7,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = b then a\n        else greatest_common_divisor_rec (a + 1) (b - 1)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (a - 1) (b - 1)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b =\n        if b = 0 then\n            a\n        else\n            let a' = greatest_common_divisor_a b\n            let b' = greatest_common_divisor_a b\n            if a' = b' then\n                a'\n            else\n                greatest_common_divisor_a b\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | _ -> greatest_common_divisor_a (a / b) (b / a)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_syxhp0q.fsx(10,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with\n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b-1) (a % b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6y6a_tcc.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        match b with\n        | 0 -> a\n        | _ -> greatest_common_divisor_rec a (b / 2)\n    greatest_common_divisor_rec a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then b\n        else greatest_common_divisor_rec (a % b) (a / b)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop acc a b = \n        match a, b with \n        | 0, 0 -> acc\n        | 0, _ -> acc\n        | _, 0 -> acc\n        | _, _ -> greatest_common_divisor_loop (a % b) (a / b) (b % a)\n    greatest_common_divisor_loop 0 a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop acc a b =\n        match b with\n        | 0 -> acc\n        | _ -> greatest_common_divisor_loop (a + 1) (a + b) (b - 1)\n    greatest_common_divisor_loop 0 a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with \n        | 0 -> 0\n        | 1 -> 1\n        | _ -> greatest_common_divisor_a (b / 2) (b % 2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdydnot_2.fsx(11,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop acc a b = \n        if a = b then acc\n        else greatest_common_divisor_loop (a % b) (a / b) (b / a)\n    greatest_common_divisor_loop 0 a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | _ -> greatest_common_divisor_a (a / b) (b / a)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_syxhp0q.fsx(10,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        let rec greatest_common_divisor_b b = \n            let rec greatest_common_divisor_b' b = \n                let rec greatest_common_divisor_b'' b = \n                    let rec greatest_common_divisor_b'' b = \n                        let rec greatest_common_divisor_b'' b = \n                            let rec greatest_common_divisor_b'' b = \n                                let rec greatest_common_divisor_b'' b = \n                                    let rec greatest_common_divisor_b'' b = \n                                        let rec greatest_common_divisor_b'' b = \n                                            let rec greatest_common_divisor_b'' b = \n                                                let rec greatest_common_divisor_b'' b = \n                                                    let rec greatest_common_divisor_b'' b = \n                                                        let rec greatest_common_divisor_b'' b = \n                                                            let rec greatest_common_divisor_b'' b = \n                                                                let rec greatest_common_divisor_b'' b = \n                                                                    let rec greatest_common_divisor_b'' b = \n                                                                        let rec greatest_common_divisor_b'' b = \n                                                                            let rec greatest_common_divisor_b'' b = \n                                                                                let rec greatest_common_divisor_b'' b = \n                                                                                    let rec greatest_common_divisor_b'' b = \n                                                                                        let rec greatest_common_divisor_b'' b = \n                                                                                            let rec greatest_common_divisor_b'' b = \n                                                                                                   let rec greatest_common_divisor_b'' b = \n                                                                                                       let rec greatest_common_divisor_b'' b = \n                                                                                                           let rec greatest_common_divisor_b'' b = \n                                                                                                               let rec greatest_common_divisor_b''\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449503,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3gt5qhl3.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        let rec greatest_common_divisor_b b = \n            let rec greatest_common_divisor_b' b = \n                let rec greatest_common_divisor_b'' b = \n                    let rec greatest_common_divisor_b'' b = \n                        let rec greatest_common_divisor_b'' b = \n                            let rec greatest_common_divisor_b'' b = \n                                let rec greatest_common_divisor_b'' b = \n                                    let rec greatest_common_divisor_b'' b = \n                                        let rec greatest_common_divisor_b'' b = \n                                            let rec greatest_common_divisor_b'' b = \n                                                let rec greatest_common_divisor_b'' b = \n                                                    let rec greatest_common_divisor_b'' b = \n                                                        let rec greatest_common_divisor_b'' b = \n                                                            let rec greatest_common_divisor_b'' b = \n                                                                let rec greatest_common_divisor_b'' b = \n                                                                    let rec greatest_common_divisor_b'' b = \n                                                                        let rec greatest_common_divisor_b'' b = \n                                                                            let rec greatest_common_divisor_b'' b = \n                                                                                let rec greatest_common_divisor_b'' b = \n                                                                                    let rec greatest_common_divisor_b'' b = \n                                                                                        let rec greatest_common_divisor_b'' b = \n                                                                                            let rec greatest_common_divisor_b'' b = \n                                                                                               let rec greatest_common_divisor_b'' b = \n                                                                                                   let rec greatest_common_divisor_b'' b = \n                                                                                                       let rec greatest_common_divisor_b'' b = \n                                                                                                           let rec greatest_common_divisor_b''\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449503,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn865hyon.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) =\n        if a = b then a\n        else GreatestCommonDivisor (a % b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop i =\n        if i = 0 then a\n        else loop (i - 1)\n    loop (a / b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) =\n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (b/a) (b%a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | 1 -> 1\n        | n -> greatest_common_divisor_a (n-1) (n-2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwwsiy69t.fsx(11,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b-1) (a%b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwqrfxfyj.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b - 1)\n    let rec greatest_common_divisor_b b = \n        if b = 0 then 0\n        else greatest_common_divisor_b (b - 1)\n    let rec greatest_common_divisor_a_b = \n        if a = 0 then 0\n        else greatest_common_divisor_a (a - 1)\n    let rec greatest_common_divisor_b_a = \n        if b = 0 then 0\n        else greatest_common_divisor_b (b - 1)\n    let rec greatest_common_divisor_a_b_c = \n        if a = 0 then 0\n        else greatest_common_divisor_a (a - 1)\n    let rec greatest_common_divisor_b_a_c = \n        if b = 0 then 0\n        else greatest_common_divisor_b (b - 1)\n    let rec greatest_common_divisor_a_b_c_d = \n        if a = 0 then 0\n        else greatest_common_divisor_a (a - 1)\n    let rec greatest_common_divisor_b_a_c_d = \n        if b = 0 then 0\n        else greatest_common_divisor_b (b - 1)\n    let rec greatest_common_divisor_a_b_c_d_e = \n        if a = 0 then 0\n        else greatest_common_divisor_a (a - 1)\n    let rec greatest_common_divisor_b_a_c_d_e = \n        if b = 0 then 0\n        else greatest_common_divisor_b (b - 1)\n    let rec greatest_common_divisor_a_b_c_d_e_f = \n        if a = 0 then 0\n        else greatest_common_divisor_a (a - 1)\n    let rec greatest_common_divisor_b_a_c_d_e\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449503,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgmk6uxfb.fsx(41,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        match b with\n        | 0 -> a\n        | _ -> greatest_common_divisor_rec a (b / 2)\n    greatest_common_divisor_rec a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | 1 -> 1\n        | _ -> greatest_common_divisor_a (b / 2) (b % 2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbamtw3ee.fsx(11,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with\n        | 0 -> a\n        | _ -> greatest_common_divisor_rec a (b / 2)\n    greatest_common_divisor_rec a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a else greatest_common_divisor_a (b-1)\n    greatest_common_divisor_a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (b/a) (b%a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then b else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) =\n        if a = b then a\n        else GreatestCommonDivisor (a % b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop acc a b = \n        if a = b then acc\n        else greatest_common_divisor_loop (a % b) (a / b) (b % a)\n    greatest_common_divisor_loop 0 a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        elif a % b = 0 then a / b\n        else greatest_common_divisor_a (b - 1) (a / b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3728wne6.fsx(10,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        let rec greatest_common_divisor_b b = \n            let rec greatest_common_divisor_b' b = \n                let rec greatest_common_divisor_b'' b = \n                    let rec greatest_common_divisor_b'' b = \n                        let rec greatest_common_divisor_b'' b = \n                            let rec greatest_common_divisor_b'' b = \n                                let rec greatest_common_divisor_b'' b = \n                                    let rec greatest_common_divisor_b'' b = \n                                        let rec greatest_common_divisor_b'' b = \n                                            let rec greatest_common_divisor_b'' b = \n                                                let rec greatest_common_divisor_b'' b = \n                                                    let rec greatest_common_divisor_b'' b = \n                                                        let rec greatest_common_divisor_b'' b = \n                                                            let rec greatest_common_divisor_b'' b = \n                                                                let rec greatest_common_divisor_b'' b = \n                                                                    let rec greatest_common_divisor_b'' b = \n                                                                        let rec greatest_common_divisor_b'' b = \n                                                                            let rec greatest_common_divisor_b'' b = \n                                                                                let rec greatest_common_divisor_b'' b = \n                                                                                    let rec greatest_common_divisor_b'' b = \n                                                                                        let rec greatest_common_divisor_b'' b = \n                                                                                            let rec greatest_common_divisor_b'' b = \n                                                                                                   let rec greatest_common_divisor_b'' b = \n                                                                                                       let rec greatest_common_divisor_b'' b = \n                                                                                                           let rec greatest_common_divisor_b'' b = \n                                                                                                               let rec greatest_common_divisor_b''\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449503,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3gt5qhl3.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | 1 -> 1\n        | _ -> greatest_common_divisor_a (a / b) (b / a)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp97a56l9s.fsx(11,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with \n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (a % b)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a else greatest_common_divisor_a (b - 1)\n    greatest_common_divisor_a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        if a = b then\n            a\n        else\n            let a' = greatest_common_divisor_rec a b\n            let b' = greatest_common_divisor_rec b a'\n            if a' > b' then\n                a'\n            else\n                b'\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) =\n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (b/a) (b%a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        match a, b with \n        | 0, 0 -> 0\n        | 0, _ -> b\n        | _, 0 -> a\n        | _, _ -> loop (a / b) (b / a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) = \n        if a = b then a\n        else GreatestCommonDivisor (a % b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if b = 0 then a\n        else loop (a / b) (b / a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        if a = b then a\n        else greatest_common_divisor_loop (a / b, b / a)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        let rec greatest_common_divisor_b b = \n            let rec greatest_common_divisor_b' b = \n                let rec greatest_common_divisor_b'' b = \n                    let rec greatest_common_divisor_b'' b = \n                        let rec greatest_common_divisor_b'' b = \n                            let rec greatest_common_divisor_b'' b = \n                                let rec greatest_common_divisor_b'' b = \n                                    let rec greatest_common_divisor_b'' b = \n                                        let rec greatest_common_divisor_b'' b = \n                                            let rec greatest_common_divisor_b'' b = \n                                                let rec greatest_common_divisor_b'' b = \n                                                    let rec greatest_common_divisor_b'' b = \n                                                        let rec greatest_common_divisor_b'' b = \n                                                            let rec greatest_common_divisor_b'' b = \n                                                                let rec greatest_common_divisor_b'' b = \n                                                                    let rec greatest_common_divisor_b'' b = \n                                                                        let rec greatest_common_divisor_b'' b = \n                                                                            let rec greatest_common_divisor_b'' b = \n                                                                                let rec greatest_common_divisor_b'' b = \n                                                                                    let rec greatest_common_divisor_b'' b = \n                                                                                        let rec greatest_common_divisor_b'' b = \n                                                                                            let rec greatest_common_divisor_b'' b = \n                                                                                                   let rec greatest_common_divisor_b'' b = \n                                                                                                       let rec greatest_common_divisor_b'' b = \n                                                                                                           let rec greatest_common_divisor_b'' b = \n                                                                                                               let rec greatest_common_divisor_b''\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449503,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3gt5qhl3.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a\n        else greatest_common_divisor_a (b-1) (a/b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwz5jiiqv.fsx(9,14): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with \n        | 0 -> 0\n        | _ -> greatest_common_divisor_a (a / b) (b / a)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpumj2za3w.fsx(10,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b =\n        let rec greatest_common_divisor_b b =\n            let rec greatest_common_divisor_b' b =\n                let rec greatest_common_divisor_b' b =\n                    let rec greatest_common_divisor_b' b =\n                        let rec greatest_common_divisor_b' b =\n                            let rec greatest_common_divisor_b' b =\n                                let rec greatest_common_divisor_b' b =\n                                    let rec greatest_common_divisor_b' b =\n                                        let rec greatest_common_divisor_b' b =\n                                            let rec greatest_common_divisor_b' b =\n                                                let rec greatest_common_divisor_b' b =\n                                                    let rec greatest_common_divisor_b' b =\n                                                        let rec greatest_common_divisor_b' b =\n                                                            let rec greatest_common_divisor_b' b =\n                                                                let rec greatest_common_divisor_b' b =\n                                                                    let rec greatest_common_divisor_b' b =\n                                                                        let rec greatest_common_divisor_b' b =\n                                                                            let rec greatest_common_divisor_b' b =\n                                                                                let rec greatest_common_divisor_b' b =\n                                                                                    let rec greatest_common_divisor_b' b =\n                                                                                        let rec greatest_common_divisor_b' b =\n                                                                                            let rec greatest_common_divisor_b' b =\n                                                                                                   let rec greatest_common_divisor_b' b =\n                                                                                                       let rec greatest_common_divisor_b' b =\n                                                                                                           let rec greatest_common_divisor_b' b =\n                                                                                                               let rec greatest_common_divisor_b' b =\n                                                                                                                   let rec greatest_common_divisor_b' b =\n                                                                                                                       let rec greatest_common_divisor_b' b =\n                                                                                                                           let rec greatest_common\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxeadon76.fsx(37,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with \n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        if a = b then a\n        else greatest_common_divisor_loop (a / b, b / a)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b =\n        if a = b then\n            a\n        else\n            let a' = a / b\n            let b' = b / a\n            if a' < b' then loop a' b'\n            else loop b' a'\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) = \n        if a = b then a\n        else GreatestCommonDivisor (a / b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        if a = b then a\n        else greatest_common_divisor_loop (a / b, b / a)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) = \n        if a = b then a\n        else GreatestCommonDivisor (a % b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop acc a b = \n        match a, b with\n        | 0, 0 -> acc\n        | 0, _ -> acc\n        | _, 0 -> acc\n        | _, _ -> greatest_common_divisor_loop (acc + 1) a b\n    greatest_common_divisor_loop 0 a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b - 1)\n    \n    if a = 0 then 0\n    else greatest_common_divisor_a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | _ -> greatest_common_divisor_a (a / b) (b / a)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_syxhp0q.fsx(10,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop acc a b =\n        if a = b then acc\n        else greatest_common_divisor_loop (a * b) (a / b) (b / a)\n    greatest_common_divisor_loop 0 a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | 1 -> 1\n        | _ -> greatest_common_divisor_a (b / 2) (b % 2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbamtw3ee.fsx(11,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) = \n        if a = b then a\n        else GreatestCommonDivisor (a % b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        elif b = 1 then 1\n        elif b = 2 then 2\n        elif b = 3 then 3\n        elif b = 4 then 5\n        elif b = 5 then 6\n        else greatest_common_divisor_a (b-1) (b-2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpke29m1eb.fsx(14,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b-1) (a%b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwqrfxfyj.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match a, b with \n        | 0, 0 -> 0\n        | 0, _ -> 0\n        | _, 0 -> 0\n        | _, _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b - 1) (a / b)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz87uh8kp.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop a b = \n        if a = b then a\n        else greatest_common_divisor_loop (a % b) (b % a)\n    greatest_common_divisor_loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | _ -> greatest_common_divisor_a (a / b)\n    greatest_common_divisor_a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b-1) (a % b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6y6a_tcc.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then b else greatest_common_divisor_rec (a / b) (a % b)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop i =\n        if i = 0 then a\n        elif i % 2 = 0 then loop (i / 2)\n        else loop (i / 2) + (i % 2)\n    loop b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b - 1) (a % b)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp12slng78.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a\n        else greatest_common_divisor_a (b-1)\n    greatest_common_divisor_a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a, b) = \n        if a = b then a\n        else greatest_common_divisor_rec (a / b, b / a)\n    greatest_common_divisor_rec (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b-1) (a%b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwqrfxfyj.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        let rec greatest_common_divisor_b b = \n            let rec greatest_common_divisor_a_b b = \n                let rec greatest_common_divisor_a_b_b b = \n                    let rec greatest_common_divisor_a_b_c b = \n                        let rec greatest_common_divisor_a_b_c_b b = \n                            let rec greatest_common_divisor_a_b_c_c b = \n                                let rec greatest_common_divisor_a_b_c_d b = \n                                    let rec greatest_common_divisor_a_b_c_d_b b = \n                                        let rec greatest_common_divisor_a_b_c_d_c b = \n                                            let rec greatest_common_divisor_a_b_c_d_d b = \n                                                let rec greatest_common_divisor_a_b_c_d_e b = \n                                                    let rec greatest_common_divisor_a_b_c_d_f b = \n                                                        let rec greatest_common_divisor_a_b_c_d_g b = \n                                                            let rec greatest_common_divisor_a_b_c_d_h b = \n                                                                let rec greatest_common_divisor_a_b_c_d_i b = \n                                                                    let rec greatest_common_divisor_a_b_c_d_j b = \n                                                                        let rec greatest_common_divisor_a_b_c_d_k b = \n                                                                            let rec greatest_common_divisor_a_b_c_d_l b = \n                                                                                let rec greatest_common_divisor_a_b_c_d_m b = \n                                                                                    let rec greatest_common_divisor_a_b_c_d_n b = \n                                                                                        let rec greatest_common_divisor_a_b_c_d_o b = \nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpejcmnr1a.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:89). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpejcmnr1a.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:89). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpejcmnr1a.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:89). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpejcmnr1a.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:89). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpejcmnr1a.fsx(37,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (28:89). Try indenting this t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (b-1) (a-1)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (a / b) (b - 1)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4cm6wgz8.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        let (a, b) = \n            if a = b then (a, b)\n            else greatest_common_divisor_loop (a / b, b)\n        if a = b then (a, b)\n        else greatest_common_divisor_loop (a / b, b)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0q61kmvm.fsx(16,27): error FS0001: This expression was expected to have type\n    'int * int'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        if a = b then\n            a\n        else\n            let a' = greatest_common_divisor_rec a b\n            let b' = greatest_common_divisor_rec b a'\n            if a' < b' then\n                greatest_common_divisor_rec a' b'\n            else\n                b'\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then \n            a\n        else \n            let a' = greatest_common_divisor_rec a b\n            let b' = greatest_common_divisor_rec b a\n            if a' < b' then \n                greatest_common_divisor_rec a' b'\n            else \n                b'\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with \n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        if a = b then a\n        else greatest_common_divisor_loop (a / b, b / a)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b-1) (a/b)\n    greatest_common_divisor_a b a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp47cth8la.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) = \n        if a = b then a\n        else GreatestCommonDivisor (a % b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a, b) = \n        if a = b then a\n        else greatest_common_divisor_rec (a / b, b / a)\n    greatest_common_divisor_rec (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with \n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (a % b)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a, b) = \n        if a = b then a\n        else greatest_common_divisor_rec (a / b, b / a)\n    greatest_common_divisor_rec (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (b/a) (b%a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        if a = b then\n            a\n        else\n            let a' = greatest_common_divisor_rec a b\n            let b' = greatest_common_divisor_rec b a'\n            if a' < b' then\n                greatest_common_divisor_rec a' b'\n            else\n                b'\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop acc x y = \n        if x = 0 || y = 0 then acc\n        else greatest_common_divisor_loop (x - 1) (y - 1) (x - y)\n    greatest_common_divisor_loop 0 0 (a % b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match a, b with \n        | 0, 0 -> 0\n        | 0, _ -> 1\n        | _, 0 -> 1\n        | _, _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with\n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = b then a\n        else greatest_common_divisor_rec (a/b) (b/a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b / 2) (b % 2)\n    if a = 0 then 0\n    else greatest_common_divisor_a (a / 2) (a % 2)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp76ieq2ay.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) =\n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (a/b) (b/a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        match b with\n        | 0 -> a\n        | _ -> loop (a/b) (b/a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        let rec greatest_common_divisor_b b = \n            let rec greatest_common_divisor_b' b = \n                let rec greatest_common_divisor_b'' b = \n                    let rec greatest_common_divisor_b'' b = \n                        let rec greatest_common_divisor_b'' b = \n                            let rec greatest_common_divisor_b'' b = \n                                let rec greatest_common_divisor_b'' b = \n                                    let rec greatest_common_divisor_b'' b = \n                                        let rec greatest_common_divisor_b'' b = \n                                            let rec greatest_common_divisor_b'' b = \n                                                let rec greatest_common_divisor_b'' b = \n                                                    let rec greatest_common_divisor_b'' b = \n                                                        let rec greatest_common_divisor_b'' b = \n                                                            let rec greatest_common_divisor_b'' b = \n                                                                let rec greatest_common_divisor_b'' b = \n                                                                    let rec greatest_common_divisor_b'' b = \n                                                                        let rec greatest_common_divisor_b'' b = \n                                                                            let rec greatest_common_divisor_b'' b = \n                                                                                let rec greatest_common_divisor_b'' b = \n                                                                                    let rec greatest_common_divisor_b'' b = \n                                                                                        let rec greatest_common_divisor_b'' b = \n                                                                                            let rec greatest_common_divisor_b'' b = \n                                                                                                   let rec greatest_common_divisor_b'' b = \n                                                                                                       let rec greatest_common_divisor_b'' b = \n                                                                                                           let rec greatest_common_divisor_b'' b = \n                                                                                                               let rec greatest_common_divisor_b''\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449503,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3gt5qhl3.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then b\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with\n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop acc a b = \n        if a = b then acc\n        else greatest_common_divisor_loop (a % b) (a / b) (b / a)\n    greatest_common_divisor_loop 0 a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) =\n        if a = b then a\n        else\n            let rec GreatestCommonDivisor' (a, b) =\n                if a = b then a\n                else\n                    let rec GreatestCommonDivisor' (a, b) =\n                        if a = b then a\n                        else\n                            let rec GreatestCommonDivisor' (a, b) =\n                                if a = b then a\n                                else\n                                    let rec GreatestCommonDivisor' (a, b) =\n                                        if a = b then a\n                                        else\n                                            let rec GreatestCommonDivisor' (a, b) =\n                                                if a = b then a\n                                                else\n                                                    let rec GreatestCommonDivisor' (a, b) =\n                                                        if a = b then a\n                                                        else\n                                                            let rec GreatestCommonDivisor' (a, b) =\n                                                                if a = b then a\n                                                                else\n                                                                    let rec GreatestCommonDivisor' (a, b) =\n                                                                        if a = b then a\n                                                                        else\n                                                                            let rec GreatestCommonDivisor' (a, b) =\n                                                                                if a = b then a\n                                                                                else\n                                                                                    let rec GreatestCommonDivisor' (a, b) =\n                                                                                        if a = b then a\n                                                                                        else\n                                                                                            let rec GreatestCommonDivisor' (a, b) =\n                                                                                               if a = b then a\n                                                                                               else\n                                                                                                   let rec GreatestCommonDivisor' (a, b) =\n                                                                                                       if a = b then a\n                                                                                                       else\n                                                                                                           let rec GreatestCommonDivisor' (a, b) =\n                                                                                                               if a = b then a\n                                                                                                               else\n                                                                                                                   let rec GreatestCommonDivisor' (a, b) =\n                                                                                                                       if a = b then a\n                                                                                                                       else\n                                                                                                                           let rec GreatestCommonDivisor' (a, b) =\n                                                                                                                              if a = b then a\n                                                                                                                              else\n                                                                                             \nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpw8nfb39f.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw8nfb39f.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw8nfb39f.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw8nfb39f.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw8nfb39f.fsx(64,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a\n        else greatest_common_divisor_a (b - 1)\n    greatest_common_divisor_a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        if a = b then a\n        else greatest_common_divisor_loop (a / b, b / a)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) = \n        if a = b then a\n        else GreatestCommonDivisor (a % b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        if a = b then a\n        else greatest_common_divisor_loop (a / b, b / a)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with \n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        elif b % 2 = 0 then greatest_common_divisor_a (b / 2)\n        else greatest_common_divisor_a (b / 2) + greatest_common_divisor_a (b / 2)\n    greatest_common_divisor_a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        if a = b then a\n        else greatest_common_divisor_loop (a / b, a % b)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b - 1) (a % b)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp12slng78.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) =\n        if a = b then a\n        else greatest_common_divisor_rec (a + 1) (b - 1)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        if a = b then a\n        else greatest_common_divisor_loop (a / b, b / a)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) = \n        if a = b then a\n        else GreatestCommonDivisor (a % b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b-1) (a % b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6y6a_tcc.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then \n            a\n        else\n            let a_prime = a / b\n            let b_prime = b / a\n            let a_prime_prime = a_prime * b_prime\n            let b_prime_prime = b_prime * a_prime\n            let a_prime_prime_prime = a_prime_prime * b_prime_prime\n            let b_prime_prime_prime = b_prime_prime_prime * a_prime_prime_prime\n            let a_prime_prime_prime_prime = a_prime_prime_prime_prime * b_prime_prime_prime_prime\n            let b_prime_prime_prime_prime = b_prime_prime_prime_prime * a_prime_prime_prime_prime\n            let a_prime_prime_prime_prime = a_prime_prime_prime_prime * b_prime_prime_prime_prime\n            let b_prime_prime_prime_prime = b_prime_prime_prime_prime * a_prime_prime_prime_prime\n            let a_prime_prime_prime_prime = a_prime_prime_prime_prime * b_prime_prime_prime_prime\n            let b_prime_prime_prime_prime = b_prime_prime_prime_prime * a_prime_prime_prime_prime\n            let a_prime_prime_prime_prime = a_prime_prime_prime_prime * b_prime_prime_prime_prime\n            let b_prime_prime_prime_prime = b_prime_prime_prime_prime * a_prime_prime_prime_prime\n            let a_prime_prime_prime_prime = a_prime_prime_prime_prime * b_prime_prime_prime_prime\n            let b_prime_prime_prime_prime = b_prime_prime_prime_prime * a_prime_prime_prime_prime\n            let a_prime_prime_prime_prime = a_prime_prime_prime_prime * b_prime_prime_prime_prime\n            let b_prime_prime_prime_prime = b_prime_prime_prime_prime * a_prime_prime_prime\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl9xb2yrv.fsx(28,13): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then \n            a\n        else\n            let a' = greatest_common_divisor_rec a b\n            let b' = greatest_common_divisor_rec b a'\n            if a' < b' then\n                greatest_common_divisor_rec a' b'\n            else\n                b'\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop acc a b = \n        if a = b then acc\n        else greatest_common_divisor_loop (a % b) (a / b) (b % a)\n    greatest_common_divisor_loop 0 a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b-1) (a/b)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgf57on_s.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) =\n        if a = b then a\n        else greatest_common_divisor_loop (a / b, a % b)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then b\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) = \n        if a = b then a\n        else GreatestCommonDivisor (a % b, b % a)\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a else greatest_common_divisor_a (b-1)\n    greatest_common_divisor_a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with \n        | 0 -> 0\n        | 1 -> 1\n        | _ -> greatest_common_divisor_a (b / 2) (b % 2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdydnot_2.fsx(11,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) =\n        if a = b then a\n        else\n            let a' = GreatestCommonDivisor (a / b, b / a)\n            if a' <> b then a'\n            else GreatestCommonDivisor (a', b')\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp83wzgx6t.fsx(12,45): error FS0039: The value or constructor 'b'' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b =\n        match b with\n        | 0 -> 0\n        | _ -> greatest_common_divisor_a (a / b) (b / a)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpym1ajtib.fsx(10,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        match b with\n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop acc =\n        if a = b then acc\n        else loop (a % b)\n    loop (a / b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (b/a) (b%a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with\n        | 0 -> a\n        | _ -> greatest_common_divisor_rec a (b / 2)\n    greatest_common_divisor_rec a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (a / b) (b - 1)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4cm6wgz8.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with\n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        let rec greatest_common_divisor_b b = \n            let rec greatest_common_divisor_a_b = \n                let rec greatest_common_divisor_a_b_b = \n                    let rec greatest_common_divisor_a_b_b_b = \n                        let rec greatest_common_divisor_a_b_b_b_b = \n                            let rec greatest_common_divisor_a_b_b_b_b_b = \n                                let rec greatest_common_divisor_a_b_b_b_b_b_b = \n                                    let rec greatest_common_divisor_a_b_b_b_b_b_b_b = \n                                        let rec greatest_common_divisor_a_b_b_b_b_b_b_b_b_b = \n                                            let rec greatest_common_divisor_a_b_b_b_b_b_b_b_b_b_b_b_b = \n                                                let rec greatest_common_divisor_a_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_b_\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkw344vv9.fsx(19,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = b then a\n        else greatest_common_divisor_rec (a/b) (b/a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        if a = b then a\n        else greatest_common_divisor_loop (a / b, b / a)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | 1 -> 1\n        | _ -> greatest_common_divisor_a (b / 2) (b % 2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbamtw3ee.fsx(11,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b =\n        match b with\n        | 0 -> a\n        | _ -> loop (a / b) (b / a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then \n            a\n        else\n            let a_prime = a / b\n            let b_prime = b / a\n            if a_prime > b_prime then greatest_common_divisor_rec a_prime b_prime\n            else greatest_common_divisor_rec a_prime b_prime\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b =\n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) =\n        if a = b then a\n        else greatest_common_divisor_rec (a + b) (b - a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a else greatest_common_divisor_a (b-1)\n    greatest_common_divisor_a a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b / 2) (b % 2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphz0hcd9q.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with\n        | 0 -> 0\n        | 1 -> 1\n        | _ -> greatest_common_divisor_a (b / 2) (b % 2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbamtw3ee.fsx(11,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with \n        | 0 -> 0\n        | 1 -> 1\n        | _ -> greatest_common_divisor_a (b / 2) (b % 2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdydnot_2.fsx(11,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a\n        else greatest_common_divisor_a (b - 1)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449503,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuket6kl4.fsx(7,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        match b with\n        | 0 -> a\n        | _ -> loop (a/b) (b/a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a, b) = \n        if a = b then a\n        else greatest_common_divisor_rec (a / b, b / a)\n    greatest_common_divisor_rec (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        else greatest_common_divisor_a (b / 2) (b % 2)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphz0hcd9q.fsx(9,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if b = 0 then a\n        else loop (a / b) (b / a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) =\n        if a = b then a\n        else\n            let mutable c = a\n            let mutable d = b\n            while c <> 0 do\n                let mutable q = c\n                let mutable r = c\n                while r <> 0 do\n                    let mutable s = r\n                    let mutable t = r\n                    while s <> 0 do\n                        let mutable u = s\n                        let mutable v = s\n                        while u <> 0 do\n                            let mutable w = u\n                            let mutable x = u\n                            while w <> 0 do\n                                let mutable y = w\n                                let mutable z = w\n                                while y <> 0 do\n                                    let mutable z' = y\n                                    let mutable x' = y\n                                    while z' <> 0 do\n                                        let mutable y' = z'\n                                        let mutable z'' = z'\n                                        while y' <> 0 do\n                                            let mutable z''' = y'\n                                            let mutable x'' = y'\n                                            while z''' <> 0 do\n                                                let mutable x''' = z'''\n                                                let mutable y''' = z'''\n                                                while x''' <> 0 do\n                                                    let mutable x'''' = x'''\n                                                    let mutable y'''' = y'''\n                                                    while x'''' <> 0 do\n                                                        let mutable x''''' = x''''\n                                                        let mutable y'''' = y''''\n                                                        while x''''' <> 0 do\n                                                            let mutable x''''' = x'''''\n                                                            let mutable y'''''' = y''''''\n                                                            while x'''''' <> 0 do\n                                                                 let mutable x''''''' = x'''''''\n                                                                 let mutable y'''''''' = y'''''''''\n                                                                 while x'''''''' <> 0 do\n                                                                     let mutable x''''''''' = x'''''''''\n                                                                     let mutable y'''''''' = y''''\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp14vj2exl.fsx(53,70): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) =\n        if a = b then a\n        else\n            let mutable c = a\n            let mutable d = b\n            while c <> 0 do\n                let mutable q = c\n                let mutable r = c\n                while r <> 0 do\n                    let mutable s = r\n                    let mutable t = r\n                    while s <> 0 do\n                        let mutable u = s\n                        let mutable v = s\n                        while u <> 0 do\n                            let mutable w = u\n                            let mutable x = u\n                            while w <> 0 do\n                                let mutable y = w\n                                let mutable z = w\n                                while y <> 0 do\n                                    let mutable z' = y\n                                    let mutable x' = y\n                                    while z' <> 0 do\n                                        let mutable z'' = z'\n                                        let mutable x'' = z''\n                                        while x'' <> 0 do\n                                            let mutable x''' = x''\n                                            let mutable y''' = x'''\n                                            while y''' <> 0 do\n                                                let mutable y'''' = y'''\n                                                let mutable z''' = y''''\n                                                while z''' <> 0 do\n                                                    let mutable z''''' = z'''\n                                                    let mutable x'''' = z'''''\n                                                    while x'''' <> 0 do\n                                                        let mutable x'''''' = x''''''\n                                                        let mutable y'''''' = y''''''''\n                                                        while y'''''' <> 0 do\n                                                            let mutable y'''''''' = y''''''''''\n                                                            let mutable z'''''''' = z''''''''''\n                                                            while z'''''''' <> 0 do\n                                                                 let mutable z'''''''''' = z''''''''''''\n                                                                 let mutable x'''''''' = x''''''''''''\n                                                                 while x'''''''''' <> 0 do\n                                                                     let mutable x'''''''''' = x''''''''\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb4jsiesz.fsx(52,70): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (b/a) (b%a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec GreatestCommonDivisor (a, b) =\n        if a = b then a\n        else\n            let (a', b') = GreatestCommonDivisor (a/b, b/a)\n            if a' = b' then a'\n            else GreatestCommonDivisor (a', b')\n    GreatestCommonDivisor (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph7m5eygs.fsx(10,53): error FS0001: Expecting a type supporting the operator '/' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (a/b) (b/a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449509,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with \n        | 0 -> 0\n        | _ -> greatest_common_divisor_a (a / b) (b / a)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpumj2za3w.fsx(10,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) = \n        if a = b then a\n        else greatest_common_divisor_rec (a/b) (b/a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match b with \n        | 0 -> a\n        | _ -> greatest_common_divisor_rec (a / b) (a % b)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then b\n        else greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449509,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        match a, b with\n        | 0, 0 -> 0\n        | 0, _ -> 1\n        | _, 0 -> 1\n        | _, _ -> greatest_common_divisor_rec (a / b) (b / a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449509,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        match b with \n        | 0 -> 0\n        | _ -> greatest_common_divisor_a (a / b) (b / a)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpumj2za3w.fsx(10,16): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec a b = \n        if a = b then a\n        else greatest_common_divisor_rec (a % b) (b % a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        if a = b then a\n        else loop (a % b) (b % a)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a, b) = \n        if a = b then a\n        else greatest_common_divisor_loop (a / b, b / a)\n    greatest_common_divisor_loop (a, b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449506,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_rec (a:int) (b:int) =\n        if a = 0 then b\n        elif b = 0 then a\n        else greatest_common_divisor_rec (a/b) (b/a)\n    greatest_common_divisor_rec a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        elif a % b = 0 then a / b\n        else greatest_common_divisor_a (b - 1) (a / b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3728wne6.fsx(10,14): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then a else greatest_common_divisor_a (b-1)\n    greatest_common_divisor_a a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449509,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpda4ja58n.fsx(9,31): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a -> 'b'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a:int) (b:int) =\n        if a = b then a\n        else greatest_common_divisor_loop (a + 1) (b - 1)\n    greatest_common_divisor_loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449509,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_loop (a:int) (b:int) =\n        if a = b then a\n        else greatest_common_divisor_loop (a/b) (b/a)\n    greatest_common_divisor_loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449509,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec loop a b = \n        match a, b with \n        | 0, 0 -> 0\n        | 0, _ -> b\n        | _, 0 -> a\n        | _, _ -> loop (a - 1) (b - 1)\n    loop a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449509,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor a b = \n    let rec greatest_common_divisor_a b = \n        if b = 0 then 0\n        elif b < a then greatest_common_divisor_a (b-1)\n        else greatest_common_divisor_a (a-b)\n    greatest_common_divisor_a b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675449509,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}