{
  "name": "HumanEval_104_unique_digits",
  "language": "fs",
  "prompt": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n",
  "tests": "let test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x :: xs -> \n            match x with \n            | x when x % 2 = 0 -> loop (acc + x) xs\n            | _ -> loop (acc + x) xs\n    loop 0 []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyz5bozx5.fsx(15,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + xs)\n            else loop (acc + xs)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv7jyn4rm.fsx(16,10): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x :: xs -> \n            match x with \n            | 0 -> loop (acc @ [0])\n            | 1 -> loop (acc @ [1])\n            | _ -> loop (acc @ [x])\n    loop []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_o9aydt.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            let new_acc = \n                match acc with\n                | [] -> []\n                | x::xs -> \n                    if x % 2 = 0 then \n                        loop (x::acc)\n                    else \n                        acc\n            loop new_acc\n    loop []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc) xs\n            else loop (acc + x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl9i1osyb.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            let new_acc = \n                match acc with\n                | [] -> []\n                | x::acc -> \n                    if x % 2 = 0 then acc\n                    else loop (x::acc)\n            loop new_acc\n    loop []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with \n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxdsgu1z2.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            let acc = acc + x\n            if acc = 0 then loop acc\n            else loop (acc - 1)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4nrmbqq1.fsx(20,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_o9aydt.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop i acc = \n        if i = x then acc\n        else loop (i+1) (acc + i)\n    loop 0 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3zvyx02e.fsx(16,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with \n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxdsgu1z2.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc)\n            else loop (acc + x::acc)\n    loop []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu6vhdqwy.fsx(14,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc)\n            else loop (acc + x::acc)\n    loop []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy1_mfk42.fsx(14,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> if x % 2 = 0 then loop (x::acc) xs else loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc + x :: acc) xs\n            else loop (acc + x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2khn8of8.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc) xs\n            else loop (acc + x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl9i1osyb.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc) xs\n            else loop (acc + x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6k6jyjh7.fsx(14,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc) xs\n            else loop (acc + x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl9i1osyb.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x :: xs -> \n            let acc = acc + x\n            loop (acc + x) xs\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjrugtob7.fsx(15,13): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with \n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxdsgu1z2.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc + xs)\n            else loop (acc + xs)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpra1ch745.fsx(16,10): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let acc = acc @ [x]\n            loop acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            let acc = acc + x\n            if acc % 2 = 0 then loop (acc/2) xs\n            else loop acc xs\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpim92p1d9.fsx(19,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            let acc = List.rev acc\n            if List.contains x acc then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x) xs\n            else loop (acc + x) xs\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpupcdhm1d.fsx(14,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc) xs\n            else loop (acc + x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl9i1osyb.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc) xs\n            else loop (acc + x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl9i1osyb.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_o9aydt.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then loop (acc + x::acc) xs\n            else loop (acc + x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvumqmerl.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_o9aydt.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc) xs\n            else loop (acc + x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl9i1osyb.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            let acc = List.filter (fun y -> y % 2 = 0) acc\n            loop acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop i = \n        if i = x then \n            [0]\n        else\n            let n = i % 10\n            if n = 0 then \n                loop (i / 10)\n            else\n                loop (i / 10)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355731,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprh3d94d7.fsx(22,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x :: xs -> \n            if (x % 2 = 0) then loop (acc + xs)\n            else loop (acc + xs)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355731,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzz3hmhd9.fsx(16,10): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let acc = List.append acc xs\n            loop acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with \n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxdsgu1z2.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> if x % 2 = 0 then loop (x::acc) xs else loop (x::acc) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355731,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkgcfwxef.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop i = \n        if i < x then \n            loop (i + 1)\n        else \n            [i]\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355731,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwfd0matk.fsx(18,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x :: xs -> \n            if (x % 2 = 0) then loop (acc + x) xs\n            else loop (acc + x) xs\n    loop 0 []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355731,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpaxek78yo.fsx(14,33): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x :: xs -> \n            let new_acc = \n                match acc with \n                | [] -> acc\n                | x :: xs -> \n                    if x % 2 = 0 then \n                        loop (x :: acc)\n                    else\n                        acc\n            loop new_acc\n    loop []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x)\n            else loop (acc + x)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph3mf_6hz.fsx(19,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let new_acc = \n                match acc with\n                | [] -> []\n                | x :: xs -> \n                    if x % 2 = 0 then \n                        loop (x :: acc) xs\n                    else\n                        acc\n            loop new_acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop i =\n        if i = x then []\n        else\n            let num = int x - int i\n            if num % 2 = 0 then loop (i + 1)\n            else loop (i + 1)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8l_ju1jt.fsx(19,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let acc = acc @ [x]\n            loop acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x :: xs -> \n            let acc = acc + 1\n            if acc = 1 then loop acc\n            else loop (acc - 1) :: acc :: loop acc xs\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355731,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphekfs5h4.fsx(16,18): error FS0001: All branches of an 'if' expression must return values implicitly convertible to the type of the first branch, which here is 'int'. This branch returns a value of type ''a list'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            let acc = List.rev acc\n            loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            let acc = x::acc\n            loop acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x)\n            else loop (acc + x)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph3mf_6hz.fsx(19,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | [] -> acc\n        | x :: xs -> \n            let acc = \n                if x % 2 = 0 then acc\n                else loop (acc + x) xs\n            loop acc xs\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqmhzdd1z.fsx(21,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc + x :: acc) xs\n            else loop (acc + x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2khn8of8.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (acc + x :: acc) xs\n            else loop (acc + x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp22_k_8ce.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            let acc = acc + x\n            if acc % 2 = 0 then loop acc\n            else loop acc\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwq823umk.fsx(20,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc) xs\n            else loop (acc + x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl9i1osyb.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop i acc = \n        if i = x then acc\n        else loop (i+1) (acc + (i-1)*(i-1))\n    loop 0 []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphp87qunn.fsx(13,12): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop i = \n        if i = x then []\n        else \n            let first = x |> List.head\n            let rest = x |> List.tail\n            let rest' = loop (i + 1)\n            if first = 0 then rest' else first::rest'\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp68fsh5y2.fsx(15,35): error FS0001: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc + x :: acc) xs\n            else loop (acc + x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2khn8of8.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc + x :: acc) xs\n            else loop (acc + x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2khn8of8.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop i =\n        if i = x then\n            []\n        else\n            let n = int (Math.Pow(float i, 2.0))\n            if n % 2 = 0 then\n                loop (n / 2)\n            else\n                loop (n / 2)\n    loop x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp17lnfagi.fsx(14,31): error FS0039: The value, constructor, namespace or type 'Pow' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop i = \n        if i = x then []\n        else \n            let first = i % 10\n            let second = i / 10\n            if first < second then loop (first + 1)\n            elif second < first then loop (second + 1)\n            else loop (i + 1)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmmu4ejqy.fsx(21,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | x when x % 2 = 0 -> loop (acc + x)\n            | _ -> loop (acc + x)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9nia9lgn.fsx(20,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            let new_acc = \n                if x % 2 = 0 then acc\n                else loop (acc + xs)\n            loop new_acc\n    loop []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy1v48zj8.fsx(18,10): error FS0001: None of the types ''a list, int list' support the operator '+'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let acc = List.fold (fun acc x -> acc |> List.append x) acc xs\n            loop acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzga3siez.fsx(18,22): error FS0001: This expression was expected to have type\n    ''a list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x)\n            else loop (acc + x)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355732,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph3mf_6hz.fsx(19,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let new_acc = x::acc\n            loop new_acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc @ [x])\n            else loop (acc @ [x])\n    loop []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let acc = List.filter (fun y -> y % 2 = 0) acc\n            loop (acc @ xs) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc@[x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let acc = List.filter (fun y -> y < x) acc\n            loop acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            let new_acc = \n                if x % 2 = 0 then acc\n                else loop (acc + 1) xs\n            loop new_acc\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmxto1tey.fsx(16,22): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            let acc = x::acc\n            loop acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let new_acc = List.fold (fun acc x -> acc + x) acc xs\n            loop new_acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe74a2n3g.fsx(18,22): error FS0001: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_o9aydt.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            let acc = acc + x\n            if acc = 0 then loop acc\n            else loop (acc - 1)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4nrmbqq1.fsx(20,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            let acc = acc + x\n            if acc % 2 = 0 then loop (acc / 2) xs\n            else loop (acc / 2) xs\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_yaher49.fsx(19,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            let acc = acc + x\n            loop acc\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwptx_qw6.fsx(19,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_o9aydt.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let acc = acc @ [x]\n            loop acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with \n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxdsgu1z2.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if (x % 2 = 0) then loop (acc + xs)\n            else loop (acc + xs)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvll2zv8n.fsx(16,10): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            let new_acc = \n                match acc with\n                | [] -> []\n                | x::acc -> \n                    if x % 2 = 0 then acc else loop (x::acc)\n            loop new_acc\n    loop []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if (x % 2 = 0) then loop (acc + x)\n            else loop (acc + x)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3qjc63a3.fsx(19,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop i = \n        if i = x then []\n        else \n            let n = int (Math.Ceiling (float i))\n            if n % 2 = 0 then loop (n / 2)\n            else loop (n / 2) @ [i]\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3dzuuzmc.fsx(13,31): error FS0039: The value, constructor, namespace or type 'Ceiling' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc + x :: acc) xs\n            else loop (acc + x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2khn8of8.fsx(13,41): error FS0043: The type 'int' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + xs)\n            else loop (acc + xs)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv7jyn4rm.fsx(16,10): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x =\n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355734,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjtt_35za.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            let acc = List.rev acc\n            if List.contains x acc then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then loop (acc @ [x]) xs\n            else loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_o9aydt.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x :: xs -> \n            match x with\n            | x when x % 2 = 0 -> loop (acc + x) xs\n            | _ -> loop (acc + x) xs\n    loop 0 []\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu64518d9.fsx(15,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs ->\n            let acc = x::acc\n            loop acc xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpifh50lvv.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            let acc = acc + x\n            if acc = x then loop acc\n            else loop (acc + x)\n    loop 0\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355734,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5d1rnl7h.fsx(20,41): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x::acc) xs\n            else loop (acc + x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6k6jyjh7.fsx(14,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x =\n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355734,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjtt_35za.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc x = \n        match x with\n        | 0 -> acc\n        | _ -> loop (acc + 1) (x - 1)\n    loop 0 x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg1bxz2e.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_o9aydt.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] x\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits x = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] xs\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675355730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_o9aydt.fsx(13,13): error FS0039: The value or constructor 'xs' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}