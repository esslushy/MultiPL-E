{
  "name": "HumanEval_121_solution",
  "language": "fs",
  "prompt": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n",
  "tests": "let test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = lst |> List.filter (fun i -> i % 2 = 0)\n    odd |> List.sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements (acc + x) xs\n            else sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392819,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnikxmm35.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then sumEvens (acc + 1) xs\n            else sumEvens (acc + 1) xs\n    sumEvens 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392819,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjotl4p4_.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | x when x % 2 = 0 -> sumOddElements (acc + x)\n            | _ -> sumOddElements (acc + x)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then \n                sumOddElements (acc + x)\n            else \n                sumOddElements (acc + x) + sumOddElements (acc + x)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumEvens xs\n            | _ -> sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements (acc + x) xs\n            else sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392819,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnikxmm35.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) (acc2:int list) =\n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then\n                acc2\n            else\n                sumOddElements (acc@[x]) (acc2@[x])\n    sumOddElements [] []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvwhhl3b6.fsx(18,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (lst:int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then\n                sumOddElements (acc + x)\n            else\n                sumOddElements (acc + x)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then\n                sumOddElements (acc + x)\n            else\n                sumOddElements (acc + x)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvensInList lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvensInList xs\n            else sumOfEvensInList xs\n    sumOfEvensInList lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs (acc + 1)\n            | x -> sumOddElements xs (acc + 1)\n    sumOddElements lst 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (lst:int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens (xs@[x])\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumEvens xs\n            | _ -> sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvensInList lst = \n        match lst with \n        | [] -> 0\n        | x :: xs -> \n            match x with \n            | x when x % 2 = 0 -> sumOfEvensInList xs\n            | _ -> sumOfEvensInList xs\n    sumOfEvensInList lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = lst |> List.filter (fun x -> x % 2 = 0)\n    odd |> List.sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs -> if x % 2 = 0 then sumOddElements xs else sumOddElements (xs @ [x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens (i:int) =\n        if i % 2 = 0 then i\n        else sumEvens (i - 1)\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbnotwpgj.fsx(13,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then\n                sumOddElements (acc + x)\n            else\n                sumOddElements (acc + x)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (i:int) = \n        if i % 2 = 0 then \n            i + 1\n        else \n            i + 1\n    List.fold (fun acc elem -> acc + elem) 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with \n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = lst |> List.filter (fun x -> x % 2 = 0)\n    odd |> List.sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOfEvens xs\n            | _ -> sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (accumulator:int) (accumulator2:int) (accumulator3:int) (accumulator4:int) (accumulator5:int) (accumulator6:int) (accumulator7:int) (accumulator8:int) (accumulator9:int) (accumulator10:int) (accumulator11:int) (accumulator12:int) = \n        match lst with\n        | [] -> accumulator\n        | x :: xs -> \n            if accumulator = 0 then accumulator2\n            else sumOddElements accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator accumulator\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392819,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprakhsnom.fsx(7,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then \n                sumOddElements (acc + x) xs\n            else \n                sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392819,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlafi7c8.fsx(12,17): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + x) xs\n            | x -> sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + 1) xs\n            | x -> sumOddElements (acc + 1) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb_k2510q.fsx(12,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (lst:int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements (acc + x) xs\n            else sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392819,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnikxmm35.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (i:int) = \n        if i % 2 = 0 then i\n        else sumOddElements (i - 1)\n    let rec sumEvenElements (i:int) = \n        if i % 2 = 0 then i\n        else sumEvenElements (i - 1)\n    sumOddElements lst\n    |> fun x -> x + sumEvenElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1ye4qozb.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun i -> i % 2 = 0) lst\n    odd.Length\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvenNumbers lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOfEvenNumbers xs\n            | _ -> sumOfEvenNumbers xs\n    sumOfEvenNumbers lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + x) xs\n            | x -> sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp26cw6mpj.fsx(12,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem =\n        match elem with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then\n                sumOddElems (acc + 1) xs\n            else\n                sumOddElems acc xs\n    sumOddElems 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x::xs -> if x % 2 = 0 then sumOddElements xs else sumOddElements (xs@lst)\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumEvens (acc + x) xs\n            else sumEvens (acc + x) xs\n    sumEvens 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyodwa1x8.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc: int list) (acc2: int list) =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then\n                sumOddElements (acc2@[x]) xs\n            else\n                sumOddElements (acc2@[x]) (acc@[x])\n    sumOddElements [] []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphoamx31e.fsx(18,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) (acc2:int list) =\n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then acc2\n            else sumOddElements acc xs\n    sumOddElements [] [] lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpynrj5b1z.fsx(13,5): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs (acc + 1)\n            | _ -> sumOddElements xs acc\n    sumOddElements lst 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = lst |> List.filter (fun i -> i % 2 = 0)\n    odd |> List.sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = lst |> List.filter (fun x -> x % 2 = 0)\n    odd |> List.sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOfEvens xs\n            | _ -> sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + 1) xs\n            | _ -> sumOddElements (acc + 1) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjtg_9l7f.fsx(12,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then sumOddElements (acc + x)\n            else sumOddElements (acc + x)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then\n                acc + sumOddElements (acc + 1) xs\n            else\n                acc + sumOddElements (acc + 1) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnrg54yq1.fsx(12,45): error FS0001: The type 'int' does not match the type ''a -> 'b'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvenNumbers lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOfEvenNumbers xs\n            | _ -> sumOfEvenNumbers xs\n    sumOfEvenNumbers lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + 1) xs\n            | _ -> sumOddElements (acc + 1) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjtg_9l7f.fsx(12,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvenNumbers = function\n        | [] -> 0\n        | x :: xs -> sumOfEvenNumbers xs + 1\n    sumOfEvenNumbers lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens (lst:int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumEvens xs\n            else sumEvens (xs@[x])\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (accumulator: int list) =\n        match lst with\n        | [] -> accumulator\n        | x :: xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOddElements (accumulator @ [x])\n            | x -> sumOddElements (accumulator @ [x])\n    sumOddElements []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp89hq_ajf.fsx(17,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens (xs@[x])\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEven (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumEven xs\n            else sumEven (xs@lst)\n    sumEven lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem =\n        if elem = 0 then acc\n        else sumOddElems (acc + elem) (elem - 1)\n    List.fold (fun acc elem -> sumOddElems acc elem) 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = lst |> List.filter (fun x -> x % 2 = 0)\n    odd |> List.sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens (lst: int list) = \n        match lst with \n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens (xs@[x])\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens (lst:int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun x -> x % 2 = 0) lst\n    List.sum odd\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens lst = \n        match lst with \n        | [] -> 0\n        | x::xs -> \n            match x with \n            | x when x % 2 = 0 -> sumEvens xs\n            | _ -> sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc: int list) = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements (acc@[x])\n            else sumOddElements (acc@[x])\n    sumOddElements []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb_pzyqgq.fsx(16,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with \n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) (acc2:int list) =\n        match lst with\n        | [] -> acc\n        | h::t ->\n            if h % 2 = 0 then\n                acc2\n            else\n                sumOddElements acc (h::acc)\n    sumOddElements [] []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqmjn44oy.fsx(18,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (i:int) =\n        if i % 2 = 0 then sumOddElements (i/2)\n        else i\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprqqndgs5.fsx(13,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem = \n        match elem with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then \n                sumOddElems (acc + x) xs\n            else\n                sumOddElems (acc + x) xs\n    sumOddElems 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + x) xs\n            | _ -> sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2q5mjsh2.fsx(12,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x :: xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvenNumbers (numbers:int list) =\n        match numbers with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvenNumbers xs\n            else sumOfEvenNumbers (xs@[x])\n    sumOfEvenNumbers lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun i -> i % 2 = 0) lst\n    let even = List.filter (fun i -> i % 2 = 1) lst\n    odd + even\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplgdm7j5z.fsx(9,11): error FS0001: The type 'int list' does not support the operator '+'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOdd (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x::xs -> if x % 2 = 0 then sumOdd xs else sumOdd (xs@lst)\n    sumOdd lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun i -> i % 2 = 0) lst\n    let even = List.filter (fun i -> i % 2 = 1) lst\n    odd + even\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplgdm7j5z.fsx(9,11): error FS0001: The type 'int list' does not support the operator '+'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs (acc + 1)\n            | _ -> sumOddElements xs (acc + 1)\n    sumOddElements lst 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens lst =\n        match lst with\n        | [] -> 0\n        | x::xs -> if x % 2 = 0 then sumEvens xs else sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x :: xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvensInList lst acc = \n        match lst with\n        | [] -> acc\n        | x :: xs -> sumOfEvensInList xs (acc + x)\n    sumOfEvensInList lst 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc: int list) (acc2: int list) =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if acc2 |> List.contains x then\n                sumOddElements acc xs\n            else\n                sumOddElements (acc2 @ [x]) xs\n    sumOddElements [] lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392823,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzyrzxjdc.fsx(18,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem = \n        match elem with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOddElems (acc + 1) xs\n            else sumOddElems acc xs\n    sumOddElems 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) (acc2:int list) =\n        match acc, acc2 with\n        | [], [] -> acc\n        | [], _ -> acc2\n        | _, [] -> acc\n        | _, _ -> sumOddElements (acc2) (acc)\n    sumOddElements [] lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392823,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp25jb4erm.fsx(16,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens (lst: int list) =\n        match lst with\n        | [] -> 0\n        | hd::tl ->\n            if hd % 2 = 0 then sumEvens tl\n            else sumEvens tl\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x :: xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs @ [x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = lst |> List.filter (fun i -> i % 2 = 0)\n    odd |> List.sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs (acc + 1)\n            else sumOddElements xs acc\n    sumOddElements lst 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then \n                sumOddElements (acc + x)\n            else\n                sumOddElements (acc + x)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = lst |> List.filter (fun x -> x % 2 = 0)\n    odd |> List.sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then sumOddElements (acc + x) xs\n            else sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392823,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpikc8kkjs.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then \n                sumEvens (acc + x)\n            else \n                sumEvens (acc + x)\n    sumEvens 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumEvens xs\n            | _ -> sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with \n        | [] -> 0\n        | x::xs -> \n            match x with \n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens (acc:int list) =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then\n                sumEvens (acc@[x])\n            else\n                sumEvens (acc@[x])\n    sumEvens []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz7pmdd86.fsx(18,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun x -> x % 2 = 0) lst\n    let even = List.filter (fun x -> x % 2 = 1) lst\n    odd.Length + even.Length\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOdd (i:int) =\n        if i % 2 = 0 then i\n        else sumOdd (i - 1)\n    lst |> List.sumBy (fun x -> if x % 2 = 0 then x else sumOdd (x - 1))\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (i:int) =\n        if i % 2 = 0 then i\n        else sumOddElements (i - 1)\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8e8648ed.fsx(13,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc: int list) =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc @ [x])\n            | _ -> sumOddElements (acc @ [x])\n    sumOddElements []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjh0xefgy.fsx(17,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs |> List.filter (fun x -> x % 2 = 0))\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem =\n        match elem with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then sumOddElems (acc + 1) xs\n            else sumOddElems acc xs\n    sumOddElems 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOfEvens xs\n            | _ -> sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then\n                sumOddElements (acc@[x])\n            else\n                sumOddElements (acc@[x])\n    sumOddElements []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8zqoiubs.fsx(18,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOdd (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x :: xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOdd xs\n            | _ -> sumOdd xs\n    sumOdd lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun x -> x % 2 = 0) lst\n    let even = List.filter (fun x -> x % 2 = 1) lst\n    odd + even\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwf5qj2gx.fsx(9,11): error FS0001: The type 'int list' does not support the operator '+'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun x -> x % 2 = 0) lst\n    let even = List.filter (fun x -> x % 2 = 1) lst\n    odd.Length + even.Length\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem =\n        match elem with\n        | 0 -> acc\n        | 1 -> acc\n        | _ -> sumOddElems (acc + 1) (elem - 1)\n    sumOddElems 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7oqw90c1.fsx(15,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs -> if x % 2 = 0 then sumOddElements xs else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumEvens xs\n            | _ -> sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            let oddElements = List.filter (fun y -> x % 2 = 0) xs\n            sumOddElements oddElements\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements (acc + 1) xs\n            else sumOddElements (acc + 1) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptc5i3cwv.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then \n                sumOddElements (acc@[x])\n            else \n                sumOddElements (acc@[x])\n    sumOddElements []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbovfe4zf.fsx(18,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs |> List.filter (fun y -> y % 2 = 0))\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements (acc + xs)\n            else sumOddElements (acc + xs)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392825,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwshks5kr.fsx(13,20): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens (acc:int list) =\n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens (acc@[x])\n            else sumOfEvens (acc@[x])\n    sumOfEvens []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392825,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpw4d86tsa.fsx(16,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvensInList lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOfEvensInList xs\n            | _ -> sumOfEvensInList xs\n    sumOfEvensInList lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem = \n        match elem with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElems acc xs\n            | x -> sumOddElems (acc + x) xs\n    sumOddElems 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumEvens xs\n            else sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfOddElements (acc: int list) =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then sumOfOddElements (acc@[x])\n            else sumOfOddElements (acc@[x])\n    sumOfOddElements []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392825,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp96w1hasb.fsx(16,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then\n                sumOddElements (acc + x)\n            else\n                sumOddElements (acc + x)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfOddElements xs\n            else sumOfOddElements (xs@[x])\n    sumOfOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements (acc + 1) xs\n            else sumOddElements (acc + 1) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptc5i3cwv.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) (acc2:int list) =\n        match acc, acc2 with\n        | [], [] -> acc\n        | _, [] -> acc2\n        | _, _ -> sumOddElements (acc2@acc) (acc@acc2)\n    sumOddElements [] [] lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392825,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplcjp_ls_.fsx(12,5): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int) (acc2:int) (acc3:int) (acc4:int) (acc5:int) (acc6:int) (acc7:int) (acc8:int) (acc9:int) (acc10:int) (acc11:int) (acc12:int) (acc13:int) (acc14:int) (acc15:int) (acc16:int) (acc17:int) (acc18:int) (acc19:int) (acc20:int) (acc21:int) (acc22:int) (acc23:int) (acc24:int) (acc25:int) (acc26:int) (acc27:int) (acc28:int) (acc29:int) (acc30:int) (acc31:int) =\n    match lst with\n    | [] -> acc\n    | x::xs ->\n        let acc' = acc + x\n        if acc' = acc then acc'\n        else sumOddElements acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc' acc'\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392825,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa86w4pm0.fsx(8,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (7:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpa86w4pm0.fsx(8,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (7:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpa86w4pm0.fsx(7,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens (lst: int list) =\n        match lst with\n        | [] -> 0\n        | hd::tl -> if hd % 2 = 0 then sumEvens tl else sumEvens tl\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumEvens xs\n            | _ -> sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) (acc2:int list) =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then\n                acc2\n            else\n                sumOddElements (acc@[x]) (acc2@[x])\n    sumOddElements [] []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392825,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafngu10w.fsx(18,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun i -> i % 2 = 0) lst\n    let even = List.filter (fun i -> i % 2 = 1) lst\n    odd + even\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplgdm7j5z.fsx(9,11): error FS0001: The type 'int list' does not support the operator '+'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs |> List.filter (fun x -> x % 2 = 0))\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = lst |> List.filter (fun x -> x % 2 = 0)\n    odd |> List.sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + x) xs\n            | _ -> sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2q5mjsh2.fsx(12,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then \n                sumOddElements xs (acc + x)\n            else \n                sumOddElements xs (acc + x)\n    sumOddElements lst 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) (acc2:int list) =\n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then acc2\n            else sumOddElements acc xs\n    sumOddElements [] []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392825,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr_mavn9r.fsx(16,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then\n                sumOddElements (acc@[x])\n            else\n                sumOddElements (acc@[x])\n    sumOddElements []\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8zqoiubs.fsx(18,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOfEvens xs\n            | _ -> sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst =\n        match lst with\n        | [] -> 0\n        | hd::tl -> sumOfEvens tl\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOfEvens xs\n            | _ -> sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + x) xs\n            | _ -> sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (acc:int list) (acc2:int list) =\n        match acc with\n        | [] -> acc2\n        | hd::tl ->\n            if hd = 0 then sumOddElements tl acc\n            else sumOddElements (hd::acc) (hd::acc2)\n    sumOddElements [] lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfbikf7dr.fsx(16,36): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEven (lst: int list) =\n        match lst with\n        | [] -> 0\n        | hd::tl ->\n            if hd % 2 = 0 then sumEven tl\n            else sumEven tl\n    sumEven lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens acc = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens (acc + x) xs\n            else sumOfEvens (acc + x) xs\n    sumOfEvens 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392825,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfyvk4q0o.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens (xs@[x])\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x :: xs ->\n            if x % 2 = 0 then sumOddElements (acc + xs)\n            else sumOddElements (acc + xs)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8lf64oo0.fsx(13,20): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun i -> i % 2 = 0) lst\n    let even = List.filter (fun i -> i % 2 = 1) lst\n    odd + even\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplgdm7j5z.fsx(9,11): error FS0001: The type 'int list' does not support the operator '+'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + x) xs\n            | x -> sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdga2lktg.fsx(12,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (accumulator:int) (accumulator2:int) (accumulator3:int) (accumulator4:int) (accumulator5:int) (accumulator6:int) (accumulator7:int) (accumulator8:int) (accumulator9:int) (accumulator10:int) (accumulator11:int) (accumulator12:int) (accumulator13:int) (accumulator14:int) (accumulator15:int) (accumulator16:int) (accumulator17:int) (accumulator18:int) (accumulator19:int) (accumulator20:int) (accumulator21:int) (accumulator22:int) (accumulator23:int) (accumulator24:int) (accumulator25:int) (accumulator26:int) (accumulator27:int) (accumulator28:int) (accumulator29:int) (accumulator30:int) =\n        let mutable accumulator = accumulator\n        let mutable accumulator2 = accumulator2\n        let mutable accumulator3 = accumulator3\n        let mutable accumulator4 = accumulator4\n        let mutable accumulator5 = accumulator5\n        let mutable accumulator6 = accumulator6\n        let mutable accumulator7 = accumulator7\n        let mutable accumulator8 = accumulator8\n        let mutable accumulator9 = accumulator9\n        let mutable accumulator10 = accumulator10\n        let mutable accumulator11 = accumulator11\n        let mutable accumulator12 = accumulator12\n        let mutable accumulator13 = accumulator13\n        let mutable accumulator14 = accumulator14\n        let mutable accumulator15 = accumulator15\n        let mutable accumulator16 = accumulator16\n        let mutable accumulator17 = accumulator17\n        let mutable accumulator18 = accumulator18\n        let mutable accumulator19 = accumulator19\n        let mutable accumulator20 = accumulator20\n        let mutable accumulator21 = accumulator21\n        let mutable accumulator22 = accumulator22\n        \nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpg5tuhm0_.fsx(29,9): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | hd::tl -> \n            if hd % 2 = 0 then sumOddElements (acc + hd)\n            else sumOddElements (acc + hd) + sumOddElements (acc + tl)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplqhprggf.fsx(12,38): error FS0043: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst acc =\n        match lst with\n        | [] -> acc\n        | x::xs -> sumOddElements xs (acc + x)\n    sumOddElements lst 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens (lst:int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens (xs@lst)\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + x) xs\n            | x -> sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp26cw6mpj.fsx(12,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with \n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun i -> i % 2 = 0) lst\n    let even = List.filter (fun i -> i % 2 = 1) lst\n    odd + even\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplgdm7j5z.fsx(9,11): error FS0001: The type 'int list' does not support the operator '+'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens (lst: int list) =\n        match lst with\n        | [] -> 0\n        | hd::tl ->\n            match hd with\n            | hd when hd % 2 = 0 -> sumEvens tl\n            | _ -> sumEvens tl\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let odd = List.filter (fun i -> i % 2 = 0) lst\n    let even = List.filter (fun i -> i % 2 = 1) lst\n    odd + even\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplgdm7j5z.fsx(9,11): error FS0001: The type 'int list' does not support the operator '+'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements (lst:int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens (i:int) =\n        if i % 2 = 0 then sumOfEvens (i / 2)\n        else i\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpblikqd7p.fsx(13,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then sumEvens (acc + xs)\n            else sumEvens (acc + xs)\n    sumEvens 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_3rfh18e.fsx(13,14): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElements xs\n            else sumOddElements (xs@[x])\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem =\n        if elem = 0 then acc\n        else sumOddElems (acc + 1) (elem - 1)\n    sumOddElems 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpd9zf6_hf.fsx(13,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens lst =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | x when x % 2 = 0 -> sumEvens xs\n            | _ -> sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements xs\n            | _ -> sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + 1) xs\n            | _ -> sumOddElements (acc + 1) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfj83ctjv.fsx(12,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem =\n        match elem with\n        | [] -> acc\n        | x::xs ->\n            if x % 2 = 0 then sumOddElems (acc + 1) xs\n            else sumOddElems acc xs\n    sumOddElems 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOfEvens xs\n            | _ -> sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc =\n        match lst with\n        | [] -> acc\n        | x :: xs -> sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp68ne5r71.fsx(10,22): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then \n                sumOddElements (acc + x)\n            else\n                sumOddElements (acc + x) + sumOddElements (acc + x)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements lst =\n        match lst with\n        | [] -> 0\n        | x::xs -> if x % 2 = 0 then sumOddElements xs else sumOddElements xs\n    sumOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens (acc + x) xs\n            else sumOfEvens (acc + x) xs\n    sumOfEvens 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp54lcobrr.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens (lst:int list) =\n        match lst with\n        | [] -> 0\n        | x::xs -> if x % 2 = 0 then sumEvens xs else sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem =\n        match elem with\n        | [] -> acc\n        | x::xs -> sumOddElems (acc + x) xs\n    sumOddElems 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOdd (i:int) =\n        if i % 2 = 0 then i\n        else sumOdd (i - 1)\n    sumOdd lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2k25r2_w.fsx(13,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvenNumbers = function\n        | [] -> 0\n        | x::xs -> x + sumOfEvenNumbers xs\n    sumOfEvenNumbers lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvensInList lst = \n        match lst with \n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvensInList xs\n            else sumOfEvensInList xs\n    sumOfEvensInList lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOddElements (acc + x) xs\n            | x -> sumOddElements (acc + x) xs\n    sumOddElements 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392821,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp26cw6mpj.fsx(12,35): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens xs\n            else sumOfEvens (xs@[x])\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumOfEvens xs\n            | _ -> sumOfEvens xs\n    sumOfEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfOddElements (lst:int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumOfOddElements xs\n            else sumOfOddElements (xs@[x])\n    sumOfOddElements lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOfEvens acc =\n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sumOfEvens (acc + x) xs\n            else sumOfEvens acc xs\n    sumOfEvens 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp81ca58oy.fsx(11,31): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumEvens xs\n            else sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392826,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumOddElems xs\n            else sumOddElems (xs@[x])\n    sumOddElems lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOdd (i:int) =\n        if i % 2 = 0 then i\n        else sumOdd (i - 1)\n    sumOdd lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2k25r2_w.fsx(13,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElems acc elem =\n        if elem = 0 then acc\n        else sumOddElems (acc + elem) (elem - 1)\n    sumOddElems 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdp8g9ii1.fsx(13,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumEvens (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x::xs -> if x % 2 = 0 then sumEvens xs else sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution lst = \n    let rec sumOddElements acc = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | x when x % 2 = 0 -> sumOddElements (acc + x)\n            | _ -> sumOddElements (acc + x)\n    sumOddElements 0\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675392820,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}