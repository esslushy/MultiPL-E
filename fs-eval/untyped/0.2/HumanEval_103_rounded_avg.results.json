{
  "name": "HumanEval_103_rounded_avg",
  "language": "fs",
  "prompt": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n",
  "tests": "let test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuocg4zrc.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x < 0 then loop (n / m) (m - x)\n            elif x = 0 then loop (n / m) (m + x)\n            else loop (n / m) (m - x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdqa7214b.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else\n            let n' = n + 1\n            if n' = m then -1\n            else loop (n' - 1) (m - n')\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2y0xfbjh.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' < m' then loop n' m'\n            else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp547ri5n4.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m) \n            if x = 0 then loop (n / m) (m - x)\n            else loop (n / m) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoxkv8o19.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m =\n        if n = m then\n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then\n                n'\n            else\n                loop n' m'\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpw271ycea.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n + m) / 2\n            if x < n then loop x m\n            else loop x m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyj8y271q.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then 0\n        else \n            let x = (n % m)\n            loop (n / m) (x + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9ym34p4o.fsx(19,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x < 0 then loop (x - 1) m\n            elif x = 0 then loop (n / m) m\n            else loop (x - 1) (n / m)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8g2bpg0p.fsx(22,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            if n' = m then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuocg4zrc.fsx(23,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' > m' then \n                loop n' m'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb3qjlzkk.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                loop n' m\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqtoxwkas.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpd0q_m6y4.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            0b11uy\n        else\n            let b = (n % m)\n            if b = 0b00uy then \n                loop (n / m) (m - 1)\n            else \n                loop (n / m) (m + 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4qerqpem.fsx(19,33): error FS0043: The type 'byte' does not match the type 'int'. See also /tmp/tmp4qerqpem.fsx(19,32)-(19,33).\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then -1\n        else \n            let n' = n + 1\n            if n' = m then n'\n            else loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp86ezv9iu.fsx(20,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n / m\n            if x > 0 then loop (x - 1) (m - x)\n            else loop (x - 1) (m + x)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0dvomh0f.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = n % m\n            if x = 0 then loop (n / m) m\n            else loop (n / m) (x - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyud0wlpk.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpd0q_m6y4.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let x = (n % m)\n            if x = 0 then loop (x - 1) (m - 1)\n            else loop (x - 1) (m - 1)\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7ktx38fc.fsx(21,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nlet rounded_avg n m = \n    let rec loop n m = \n        if n = m then \n            -1\n        else\n            let n' = n + 1\n            let m' = m - 1\n            if n' = m' then \n                n'\n            else\n                loop n' m\n    loop n m\nlet test() = \n  let candidate = rounded_avg\n  assert (candidate 1 5 = \"0b11\")\n  assert (candidate 7 13 = \"0b1010\")\n  assert (candidate 964 977 = \"0b1111001010\")\n  assert (candidate 996 997 = \"0b1111100100\")\n  assert (candidate 560 851 = \"0b1011000010\")\n  assert (candidate 185 546 = \"0b101101110\")\n  assert (candidate 362 496 = \"0b110101101\")\n  assert (candidate 350 902 = \"0b1001110010\")\n  assert (candidate 197 233 = \"0b11010111\")\n  assert (candidate 7 5 = -1)\n  assert (candidate 5 1 = -1)\n  assert (candidate 5 5 = \"0b101\")\n  0\n\ntest()",
      "timestamp": 1675480251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpd0q_m6y4.fsx(24,27): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}