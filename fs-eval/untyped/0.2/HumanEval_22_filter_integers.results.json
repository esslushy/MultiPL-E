{
  "name": "HumanEval_22_filter_integers",
  "language": "fs",
  "prompt": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n",
  "tests": "let test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    let rec filter_integers_rec acc = function\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | (y, z) when y = z -> filter_integers_rec (y::acc) xs\n            | _ -> filter_integers_rec (y::acc) xs\n    filter_integers_rec [] values\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0_2bdscv.fsx(12,41): error FS0039: The value or constructor 'y' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    let rec filter_integers_rec (values:list<'a>) = \n        match values with \n        | [] -> values\n        | x::xs -> \n            match x with \n            | x when x = 'a' -> filter_integers_rec xs\n            | x when x = 'b' -> filter_integers_rec xs\n            | x when x = 'c' -> filter_integers_rec xs\n            | x when x = 'd' -> filter_integers_rec xs\n            | x when x = 'e' -> filter_integers_rec xs\n            | x when x = 'f' -> filter_integers_rec xs\n            | x when x = 'g' -> filter_integers_rec xs\n            | x when x = 'h' -> filter_integers_rec xs\n            | x when x = 'i' -> filter_integers_rec xs\n            | x when x = 'j' -> filter_integers_rec xs\n            | x when x = 'k' -> filter_integers_rec xs\n            | x when x = 'l' -> filter_integers_rec xs\n            | x when x = 'm' -> filter_integers_rec xs\n            | x when x = 'n' -> filter_integers_rec xs\n            | x when x = 'o' -> filter_integers_rec xs\n            | x when x = 'p' -> filter_integers_rec xs\n            | x when x = 'q' -> filter_integers_rec xs\n            | x when x = 'r' -> filter_integers_rec xs\n            | x when x = 's' -> filter_integers_rec xs\n            | x when x = 't' -> filter_integers_rec xs\n            | x when x = 'u' -> filter_integers_rec xs\n            | x when x = 'v' -> filter_integers_rec xs\n            | x when x = 'w' -> filter_integers_rec xs\n            | x when x = 'x' -> filter_integers_rec xs\n            | x when x = 'y' ->\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpab_pm54z.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpab_pm54z.fsx(37,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpab_pm54z.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpab_pm54z.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpab_pm54z.fsx(44,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpab_pm54z.fsx(7,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.map (fun v -> \n        match v with\n        | 'a' -> Some v\n        | 'b' -> Some v\n        | 'c' -> Some v\n        | 'd' -> Some v\n        | 'e' -> Some v\n        | 'f' -> Some v\n        | 'g' -> Some v\n        | 'h' -> Some v\n        | 'i' -> Some v\n        | 'j' -> Some v\n        | 'k' -> Some v\n        | 'l' -> Some v\n        | 'm' -> Some v\n        | 'n' -> Some v\n        | 'o' -> Some v\n        | 'p' -> Some v\n        | 'q' -> Some v\n        | 'r' -> Some v\n        | 's' -> Some v\n        | 't' -> Some v\n        | 'u' -> Some v\n        | 'v' -> Some v\n        | 'w' -> Some v\n        | 'x' -> Some v\n        | 'y' -> Some v\n        | 'z' -> Some v\n        | _ -> None)\n    |> List.filter (fun v -> v <> None)\n    |> List.map (fun v -> v.Value)\n    |> List.filter (fun v -> v <> None)\n    |> List.map (fun v -> v.Value)\n    |> List.filter (fun v -> v <> None)\n    |> List.map (fun v -> v.Value)\n    |> List.filter (fun v -> v <> None)\n    |> List.map (fun v -> v.Value)\n    |> List.filter (fun v -> v <> None)\n    |> List.map (fun v -> v.Value)\n    |> List.filter (fun v -> v <> None)\n    |> List.map (fun v -> v.Value)\n    |> List.filter (fun v -> v <> None)\n    |> List.map (fun v -> v.Value)\n    |> List.filter (fun v -> v <> None)\n    |> List.map (fun v -> v.Value)\n    |>\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjsmz1udc.fsx(54,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (7:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjsmz1udc.fsx(54,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (7:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjsmz1udc.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (7:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjsmz1udc.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (7:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjsmz1udc.fsx(39,35): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    ''a option'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <>\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxp4pvo71.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(39,20): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <>\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxp4pvo71.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(39,20): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <>\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxp4pvo71.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(39,20): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp92dxzqvu.fsx(43,26): error FS0010: Unexpected identifier in lambda expression. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> x.Value)\n    |> List.filter (fun x -> x <> None)\n    |> List.\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1bdazonc.fsx(40,12): error FS0599: Missing qualification after '.'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    let rec filter_integers_acc (acc: Set<int>) (values: Set<string>) = \n        match values with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | 'a' -> filter_integers_acc acc xs\n            | 'b' -> filter_integers_acc acc xs\n            | 'c' -> filter_integers_acc acc xs\n            | 'd' -> filter_integers_acc acc xs\n            | 'e' -> filter_integers_acc acc xs\n            | 'f' -> filter_integers_acc acc xs\n            | 'g' -> filter_integers_acc acc xs\n            | 'h' -> filter_integers_acc acc xs\n            | 'i' -> filter_integers_acc acc xs\n            | 'j' -> filter_integers_acc acc xs\n            | 'k' -> filter_integers_acc acc xs\n            | 'l' -> filter_integers_acc acc xs\n            | 'm' -> filter_integers_acc acc xs\n            | 'n' -> filter_integers_acc acc xs\n            | 'o' -> filter_integers_acc acc xs\n            | 'p' -> filter_integers_acc acc xs\n            | 'q' -> filter_integers_acc acc xs\n            | 'r' -> filter_integers_acc acc xs\n            | 's' -> filter_integers_acc acc xs\n            | 't' -> filter_integers_acc acc xs\n            | 'u' -> filter_integers_acc acc xs\n            | 'v' -> filter_integers_acc acc xs\n            | 'w' -> filter_integers_acc acc xs\n            | 'x' -> filter_integers_acc acc xs\n            | 'y' -> filter_integers_acc acc xs\n            | 'z' -> filter_integers_acc acc xs\n            | '0' -> filter_integers_acc acc xs\n            | '1' -> filter_integers_acc acc xs\n            | '2' -> filter_integers_acc\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdflbm_fq.fsx(7,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"0\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp92dxzqvu.fsx(43,26): error FS0010: Unexpected identifier in lambda expression. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values \n    |> List.map (fun x -> if x > 0 then Some x else None)\n    |> List.filter (fun x -> x <> None)\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5t5naif4.fsx(13,25): error FS0193: Type constraint mismatch. The type \n    'Map<'a,'b>'    \nis not compatible with type\n    'int'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    let rec filter_integers' acc values = \n        match values with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | (:? int as x) when x < 0 -> filter_integers' (x::acc) xs\n            | _ -> filter_integers' (x::acc) xs\n    filter_integers' [] values\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2amuc0_4.fsx(12,16): error FS0008: This runtime coercion or type test from type\n    'a    \n to \n    int    \ninvolves an indeterminate type based on information prior to this program point. Runtime type tests are not allowed on some types. Further type annotations are needed.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |> List.map (fun x -> x |> List.map (fun y -> if y = x then 1 else 0))\n    |> List.filter (fun x -> x <> [])\n    |>\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphhumzjgk.fsx(31,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (7:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphhumzjgk.fsx(31,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (7:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphhumzjgk.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (7:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphhumzjgk.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (7:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmphhumzjgk.fsx(8,58): error FS0001: Type mismatch. Expecting a\n    ''a'    \nbut given a\n    ''a list'    \nThe types ''a' and ''a list' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    let rec filter_integers_rec (values: 'a list) =\n        match values with\n        | [] -> values\n        | x::xs ->\n            match x with\n            | x when x = 'a' -> filter_integers_rec xs\n            | x when x = 'b' -> filter_integers_rec xs\n            | x when x = 'c' -> filter_integers_rec xs\n            | x when x = 'd' -> filter_integers_rec xs\n            | x when x = 'e' -> filter_integers_rec xs\n            | x when x = 'f' -> filter_integers_rec xs\n            | x when x = 'g' -> filter_integers_rec xs\n            | x when x = 'h' -> filter_integers_rec xs\n            | x when x = 'i' -> filter_integers_rec xs\n            | x when x = 'j' -> filter_integers_rec xs\n            | x when x = 'k' -> filter_integers_rec xs\n            | x when x = 'l' -> filter_integers_rec xs\n            | x when x = 'm' -> filter_integers_rec xs\n            | x when x = 'n' -> filter_integers_rec xs\n            | x when x = 'o' -> filter_integers_rec xs\n            | x when x = 'p' -> filter_integers_rec xs\n            | x when x = 'q' -> filter_integers_rec xs\n            | x when x = 'r' -> filter_integers_rec xs\n            | x when x = 's' -> filter_integers_rec xs\n            | x when x = 't' -> filter_integers_rec xs\n            | x when x = 'u' -> filter_integers_rec xs\n            | x when x = 'v' -> filter_integers_rec xs\n            | x when x = 'w' -> filter_integers_rec xs\n            | x when x = 'x' -> filter_integers_rec xs\n            | x when x = 'y' -> filter_integers_\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe1dwd_k5.fsx(7,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    let rec filter_integers_rec acc values = \n        match values with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | Int x -> filter_integers_rec (acc |> List.filter (fun y -> y <> x)) xs\n            | Float x -> filter_integers_rec (acc |> List.filter (fun y -> y <> x)) xs\n            | String x -> filter_integers_rec (acc |> List.filter (fun y -> y <> x)) xs\n            | _ -> acc\n    filter_integers_rec [] values\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphjz00ek_.fsx(12,15): error FS0039: The pattern discriminator 'Int' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values \n    |> List.map (fun v -> \n        match v with\n        | 'a' -> Some v\n        | 'b' -> Some v\n        | 'c' -> Some v\n        | 'd' -> Some v\n        | 'e' -> Some v\n        | 'f' -> Some v\n        | 'g' -> Some v\n        | 'h' -> Some v\n        | 'i' -> Some v\n        | 'j' -> Some v\n        | 'k' -> Some v\n        | 'l' -> Some v\n        | 'm' -> Some v\n        | 'n' -> Some v\n        | 'o' -> Some v\n        | 'p' -> Some v\n        | 'q' -> Some v\n        | 'r' -> Some v\n        | 's' -> Some v\n        | 't' -> Some v\n        | 'u' -> Some v\n        | 'v' -> Some v\n        | 'w' -> Some v\n        | 'x' -> Some v\n        | 'y' -> Some v\n        | 'z' -> Some v\n        | 'A' -> Some v\n        | 'B' -> Some v\n        | 'C' -> Some v\n        | 'D' -> Some v\n        | 'E' -> Some v\n        | 'F' -> Some v\n        | 'G' -> Some v\n        | 'H' -> Some v\n        | 'I' -> Some v\n        | 'J' -> Some v\n        | 'K' -> Some v\n        | 'L' -> Some v\n        | 'M' -> Some v\n        | 'N' -> Some v\n        | 'O' -> Some v\n        | 'P' -> Some v\n        | 'Q' -> Some v\n        | 'R' -> Some v\n        | 'S' -> Some v\n        | 'T' -> Some v\n        | 'U' -> Some v\n        | 'V' -> Some v\n        | 'W' -> Some v\n        | 'X' -> Some v\n        | 'Y' -> Some v\n        | 'Z' -> Some v\n        | 'A' -> Some v\n        | 'B' -> Some v\n        | 'C'\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbaclr58g.fsx(65,1): error FS0010: Incomplete structured construct at or before this point in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmpbaclr58g.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (6:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |> List.map (fun x -> if x = 'a' then Some x else None)\n    |> List.filter (fun x -> x <> None)\n    |\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3l8gmdt_.fsx(34,5): error FS0010: Unexpected symbol '|' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <> \"\")\n    |> List.map (fun x -> x.ToString())\n    |> List.filter (fun x -> x <>\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxp4pvo71.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(40,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(47,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (39:30). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxp4pvo71.fsx(39,20): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.map (fun x -> x |> List.filter (fun y -> y <> '0'))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.ToString()))\n    |> List.map (fun x -> x |> List.map (fun y -> y.\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520729,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqwdibq4a.fsx(26,52): error FS0599: Missing qualification after '.'\n\n\n\n/tmp/tmpqwdibq4a.fsx(27,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (6:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers values = \n    values\n    |> List.map (fun x -> if x < 0 then None else Some x)\n    |> List.filter (fun x -> x.IsSome)\n    |> List.map (fun x -> x.Value)\nlet test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()",
      "timestamp": 1675520730,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpumxf655a.fsx(14,25): error FS0193: Type constraint mismatch. The type \n    'Map<'a,'b>'    \nis not compatible with type\n    'int'    \n\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}