{
  "name": "HumanEval_145_order_by_points",
  "language": "fs",
  "prompt": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n",
  "tests": "let test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums \n    |> List.map (fun x -> x.ToString())\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_m_8jvpq.fsx(14,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums |> List.map (fun x -> x.ToString()) |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpk9f91cy8.fsx(12,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnoeq3ahs.fsx(14,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnoeq3ahs.fsx(14,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums \n    |> List.map (fun x -> x.ToString())\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_m_8jvpq.fsx(14,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums\n    |> List.map (fun x -> x * 10)\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnoeq3ahs.fsx(14,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnoeq3ahs.fsx(14,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums |> List.map (fun x -> x.ToString()) |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpk9f91cy8.fsx(12,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums \n    |> List.sortBy (fun x -> x)\n    |> List.map (fun x -> x.ToString())\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7tld0yqw.fsx(14,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums \n    |> List.map (fun x -> x * 10)\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    let rec sort_nums nums = \n        match nums with\n        | [] -> []\n        | x::xs -> \n            let nums = x::nums\n            let rec sort_nums' nums = \n                match nums with\n                | [] -> []\n                | x::xs -> \n                    let nums = x::nums\n                    let rec sort_nums'' nums = \n                        match nums with\n                        | [] -> []\n                        | x::xs -> \n                            let nums = x::nums\n                            let rec sort_nums''' nums = \n                                match nums with\n                                | [] -> []\n                                | x::xs -> \n                                    let nums = x::nums\n                                    let rec sort_nums''' nums = \n                                        match nums with\n                                        | [] -> []\n                                        | x::xs -> \n                                            let nums = x::nums\n                                            let rec sort_nums''' nums = \n                                                match nums with\n                                                | [] -> []\n                                                | x::xs -> \n                                                    let nums = x::nums\n                                                    let rec sort_nums''' nums = \n                                                        match nums with\n                                                        | [] -> []\n                                                        | x::xs -> \n                                                            let nums = x::nums\n                                                            let rec sort_nums''' nums = \n                                                                match nums with\n                                                                | [] -> []\n                                                                | x::xs -> \n                                                                    let nums = x::nums\n                                                                    let rec sort_nums''' nums = \n                                                                        match nums with\n                                                                        | [] -> []\n                                                                        | x::xs -> \n                                                                            let nums = x::nums\n                                                                            let rec sort_nums''' nums = \n                                                                                match nums with\n                                                                                | [] -> []\n                                                                                | x::xs -> \n                                                                                    let nums = x::nums\n                                                                                    let rec sort_nums''' nums = \n                                                                                        match nums with\n                                                                                        | [] -> []\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9pyeyqbn.fsx(59,85): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnoeq3ahs.fsx(14,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    let rec order_by_nums (nums:int list) = \n        match nums with\n        | [] -> []\n        | x::xs -> \n            let nums = x::nums\n            let nums = nums |> List.rev\n            let nums = nums |> List.map (fun x -> x - x % 10)\n            order_by_nums nums\n    order_by_nums nums\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums |> List.map (fun x -> x * 10)\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnoeq3ahs.fsx(14,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnoeq3ahs.fsx(14,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums |> List.sortBy (fun x -> x.Sum)\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqc7phlcq.fsx(9,35): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums\n    |> List.map (fun x -> x * 10)\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n    nums |> List.map (fun x -> x.ToString()) |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675520629,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpk9f91cy8.fsx(12,46): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}