{
  "name": "HumanEval_59_largest_prime_factor",
  "language": "fs",
  "prompt": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n",
  "tests": "let test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n =\n        if n = 0 then 0\n        else\n            let rec largest_prime_factor'' n =\n                if n = 0 then 0\n                else\n                    let p = (n - 1) * (n - 2) / 2\n                    if p = 2 then p\n                    else largest_prime_factor'' (p - 1)\n            largest_prime_factor'' n\n    largest_prime_factor' n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor_n n = \n        if n = 0 then 0\n        elif n % 2 = 0 then n / 2\n        else n / 2 + largest_prime_factor_n (n / 2)\n    largest_prime_factor_n n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n = \n        if n = 0 then 0\n        else \n            let rec largest_prime_factor'' n = \n                if n = 0 then 0\n                else \n                    let rec largest_prime_factor''' n = \n                        if n = 0 then 0\n                        else \n                            let rec largest_prime_factor''' n = \n                                if n = 0 then 0\n                                else \n                                    let rec largest_prime_factor''' n = \n                                        if n = 0 then 0\n                                        else \n                                            let rec largest_prime_factor''' n = \n                                                if n = 0 then 0\n                                                else \n                                                    let rec largest_prime_factor''' n = \n                                                        if n = 0 then 0\n                                                        else \n                                                            let rec largest_prime_factor''' n = \n                                                                if n = 0 then 0\n                                                                else \n                                                                    let rec largest_prime_factor''' n = \n                                                                        if n = 0 then 0\n                                                                        else \n                                                                            let rec largest_prime_factor''' n = \n                                                                                if n = 0 then 0\n                                                                                else \n                                                                                    let rec largest_prime_factor''' n = \n                                                                                        if n = 0 then 0\n                                                                                        else \n                                                                                            let rec largest_prime_factor''' n = \n                                                                                               if n = 0 then 0\n                                                                                               else \n                                                                                                   let rec largest_prime_factor''' n = \n                                                                                                       if n = 0 then 0\n                                                                                                       else \n                                                                                                           let rec largest_prime_factor''' n = \n                                                                                                               if n = 0 then 0\n                                                                                                               else \n                                                                                                                   let rec largest_prime_factor''' n = \n                                                                                                                       if n = 0 then 0\n                                                                                                                       else \n                                                                                                                           let rec largest_prime_factor''' n = \n                                                                                                                              if n = 0 then 0\n                                                                                                                              else \n                                                                                                                                  \nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpho4h89bg.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpho4h89bg.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpho4h89bg.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpho4h89bg.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpho4h89bg.fsx(65,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n = \n        if n = 0 then 1\n        elif n = 1 then 1\n        elif n % 2 = 0 then largest_prime_factor' (n / 2)\n        else largest_prime_factor' (n / 2) + largest_prime_factor' (n / 2 - 1)\n    largest_prime_factor' n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor_n n =\n        if n <= 0 then 0\n        else\n            let largest_prime_factor_n_prime = largest_prime_factor_n (n-1)\n            if n % largest_prime_factor_n_prime = 0 then n\n            else largest_prime_factor_n_prime\n    largest_prime_factor_n n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n = \n        if n = 0 then 0 \n        else\n            let rec largest_prime_factor'' n = \n                if n = 0 then 0 \n                else\n                    let rec largest_prime_factor'' n = \n                        if n = 0 then 0 \n                        else\n                            let rec largest_prime_factor'' n = \n                                if n = 0 then 0 \n                                else\n                                    let rec largest_prime_factor'' n = \n                                        if n = 0 then 0 \n                                        else\n                                            let rec largest_prime_factor'' n = \n                                                if n = 0 then 0 \n                                                else\n                                                    let rec largest_prime_factor'' n = \n                                                        if n = 0 then 0 \n                                                        else\n                                                            let rec largest_prime_factor'' n = \n                                                                if n = 0 then 0 \n                                                                else\n                                                                    let rec largest_prime_factor'' n = \n                                                                        if n = 0 then 0 \n                                                                        else\n                                                                            let rec largest_prime_factor'' n = \n                                                                                if n = 0 then 0 \n                                                                                else\n                                                                                    let rec largest_prime_factor'' n = \n                                                                                        if n = 0 then 0 \n                                                                                        else\n                                                                                            let rec largest_prime_factor'' n = \n                                                                                               if n = 0 then 0 \n                                                                                               else\n                                                                                                   let rec largest_prime_factor'' n = \n                                                                                                       if n = 0 then 0 \n                                                                                                       else\n                                                                                                           let rec largest_prime_factor'' n = \n                                                                                                               if n = 0 then 0 \n                                                                                                               else\n                                                                                                                   let rec largest_prime_factor'' n = \n                                                                                                                       if n = 0 then 0 \n                                                                                                                       else\n                                                                                                                           let rec largest_prime_factor'' n = \n                                                                                                                              if n = 0 then 0 \n                                                                                                                              else\n                                                                                                                                  let rec largest_prime_factor'' n = \n                               \nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp25o0mzc.fsx(57,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:131). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpp25o0mzc.fsx(57,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:131). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpp25o0mzc.fsx(66,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:131). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpp25o0mzc.fsx(66,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:131). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpp25o0mzc.fsx(66,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:131). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpp25o0mzc.fsx(55,131): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n = \n        if n = 0 then 0\n        elif n = 1 then 1\n        elif n = 2 then 2\n        elif n = 3 then 3\n        elif n = 4 then 5\n        elif n = 5 then 6\n        elif n = 7 then 9\n        elif n = 8 then 11\n        elif n = 9 then 13\n        elif n = 10 then 17\n        elif n = 11 then 19\n        elif n = 12 then 23\n        elif n = 13 then 29\n        elif n = 14 then 31\n        elif n = 15 then 37\n        elif n = 16 then 41\n        elif n = 17 then 43\n        elif n = 18 then 47\n        elif n = 19 then 53\n        elif n = 20 then 57\n        elif n = 21 then 61\n        elif n = 22 then 67\n        elif n = 23 then 71\n        elif n = 24 then 73\n        elif n = 25 then 79\n        elif n = 26 then 83\n        elif n = 27 then 89\n        elif n = 28 then 93\n        elif n = 29 then 99\n        elif n = 30 then 103\n        elif n = 31 then 109\n        elif n = 32 then 113\n        elif n = 33 then 119\n        elif n = 34 then 127\n        elif n = 35 then 131\n        elif n = 36 then 137\n        elif n = 37 then 141\n        elif n = 38 then 147\n        elif n = 39 then 151\n        elif n = 40 then 157\n        elif n = 41 then 163\n        elif n = 42 then 169\n        elif n = 43 then 173\n        elif n = 44 then 179\n        elif n = 45 then 181\n        elif n = 46 then 187\n        elif n = 47 then 191\n        elif n = 48 then 197\n        elif n = 49 then 199\n        elif n = 50 then 203\n        elif n = 51 then 209\n        elif n = 52 then 213\n        elif n = 53 then 217\n        elif n = 54 then 221\n        elif n = 55 then 227\n        elif n =\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzees7ap5.fsx(63,16): error FS3156: Unexpected token '=' or incomplete expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor_rec (n:int) =\n        if n = 0 then\n            1\n        else\n            let p = n / 2\n            if p = 0 then\n                p\n            else\n                let p' = largest_prime_factor_rec (p - 1)\n                if p' > p then\n                    p'\n                else\n                    largest_prime_factor_rec (p' + 1)\n    largest_prime_factor_rec n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n = \n        if n = 0 then 0\n        else\n            let lp = (n % 2) + 1\n            if lp = 0 then n / 2\n            else largest_prime_factor' (n / 2) + largest_prime_factor' (n / 2 - lp)\n    largest_prime_factor' n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor_n n = \n        if n <= 0 then 0\n        else\n            let mutable largest_prime_factor_n_prime = 0\n            let mutable largest_prime_factor_n_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0\n            let mutable largest_prime_factor_n_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb8cz_rzm.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor_n n = \n        if n = 0 then 0\n        else\n            let largest_prime_factor_n_prime = largest_prime_factor_n (n-1)\n            if n % largest_prime_factor_n_prime = 0 then n\n            else largest_prime_factor_n_prime\n    largest_prime_factor_n n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n = \n        if n = 0 then 1\n        elif n % 2 = 0 then largest_prime_factor' (n / 2)\n        else largest_prime_factor' (n / 2) + largest_prime_factor' (n / 3)\n    largest_prime_factor' n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n = \n        if n <= 0 then 0\n        else \n            let rec largest_prime_factor'' n = \n                if n <= 0 then 0\n                else \n                    let rec largest_prime_factor''' n = \n                        if n <= 0 then 0\n                        else \n                            let rec largest_prime_factor''' n = \n                                if n <= 0 then 0\n                                else \n                                    let rec largest_prime_factor''' n = \n                                        if n <= 0 then 0\n                                        else \n                                            let rec largest_prime_factor''' n = \n                                                if n <= 0 then 0\n                                                else \n                                                    let rec largest_prime_factor''' n = \n                                                        if n <= 0 then 0\n                                                        else \n                                                            let rec largest_prime_factor''' n = \n                                                                if n <= 0 then 0\n                                                                else \n                                                                    let rec largest_prime_factor''' n = \n                                                                        if n <= 0 then 0\n                                                                        else \n                                                                            let rec largest_prime_factor''' n = \n                                                                                if n <= 0 then 0\n                                                                                else \n                                                                                    let rec largest_prime_factor''' n = \n                                                                                        if n <= 0 then 0\n                                                                                        else \n                                                                                            let rec largest_prime_factor''' n = \n                                                                                               if n <= 0 then 0\n                                                                                               else \n                                                                                                   let rec largest_prime_factor''' n = \n                                                                                                       if n <= 0 then 0\n                                                                                                       else \n                                                                                                           let rec largest_prime_factor''' n = \n                                                                                                               if n <= 0 then 0\n                                                                                                               else \n                                                                                                                   let rec largest_prime_factor''' n = \n                                                                                                                       if n <= 0 then 0\n                                                                                                                       else \n                                                                                                                           let rec largest_prime_factor''' n = \n                                                                                                                              if n <= 0 then 0\n                                                                                                                              else \n                                                                                                                                  \nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpadhnar1c.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpadhnar1c.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpadhnar1c.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpadhnar1c.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpadhnar1c.fsx(65,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:127). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor_n n =\n        if n = 0 then 0\n        else\n            let n' = n - 1\n            let n'' = n' - 1\n            if n'' = 0 then n'\n            else largest_prime_factor_n (n'')\n    largest_prime_factor_n n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n = \n        if n = 0 then 0\n        else\n            let largest_prime_factor' = largest_prime_factor' (n-1)\n            if n%largest_prime_factor' = 0 then n\n            else largest_prime_factor' (n/largest_prime_factor')\n    largest_prime_factor' n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1a3zt62c.fsx(12,18): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n = \n        if n = 0 then 0\n        elif n = 1 then 1\n        elif n % 2 = 0 then largest_prime_factor' (n / 2)\n        else largest_prime_factor' (n / 2) + largest_prime_factor' (n / 2 - 1)\n    largest_prime_factor' n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' n =\n        if n = 0 then\n            1\n        else\n            let rec largest_prime_factor'' n =\n                if n = 1 then\n                    1\n                else\n                    let p = n - 1\n                    let q = p - 1\n                    let r = p * q\n                    if r > n then\n                        r\n                    else\n                        largest_prime_factor'' r\n            largest_prime_factor'' n\n    largest_prime_factor' n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor' (n:int) = \n        if n = 0 then 0\n        elif n = 1 then 1\n        elif n = 2 then 2\n        elif n = 3 then 3\n        elif n = 4 then 5\n        elif n = 5 then 6\n        elif n = 7 then 9\n        elif n = 8 then 10\n        elif n = 11 then 13\n        elif n = 12 then 17\n        elif n = 17 then 31\n        elif n = 31 then 37\n        elif n = 37 then 53\n        elif n = 53 then 67\n        elif n = 67 then 83\n        elif n = 83 then 127\n        elif n = 127 then 163\n        elif n = 32768 then 1777\n        elif n = 1777 then 2397\n        elif n = 2397 then 2983\n        elif n = 2983 then 3797\n        elif n = 3797 then 4097\n        elif n = 4097 then 4397\n        elif n = 4397 then 5397\n        elif n = 5397 then 6397\n        elif n = 6397 then 8397\n        elif n = 8397 then 10397\n        elif n = 10397 then 13397\n        elif n = 13397 then 17397\n        elif n = 17397 then 23397\n        elif n = 23397 then 29397\n        elif n = 29397 then 3797\n        elif n = 3797 then 4097\n        elif n = 4097 then 4397\n        elif n = 4397 then 5397\n        elif n = 5397 then 6397\n        elif n = 6397 then 8397\n        elif n = 8397 then 10397\n        elif n = 10397 then 13397\n        elif n = 13397 then 17397\n        elif n = 17397 then 23397\n        elif n = 23397 then 29397\n        elif n = 29397 then 3797\n        elif n = 3797 then 4097\n        elif n = 4097 then 4397\n        elif n = 4397 then 5397\n        elif n = 5397 then 6397\n        elif n = 6397 then 8397\n        el\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520646,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp83dgyya0.fsx(7,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor_n n = \n        if n = 0 then 0\n        elif n = 1 then 1\n        elif n % 2 = 0 then largest_prime_factor_n (n / 2)\n        else largest_prime_factor_n (n / 2) + largest_prime_factor_n (n / 3)\n    largest_prime_factor_n n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n    let rec largest_prime_factor_rec (n:int) =\n        if n = 0 then\n            1\n        else\n            let prime_factor = (n % (n + 1)) / (n + 1)\n            if prime_factor = 0 then\n                1\n            else\n                largest_prime_factor_rec (n - prime_factor)\n    largest_prime_factor_rec n\nlet test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()",
      "timestamp": 1675520647,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}