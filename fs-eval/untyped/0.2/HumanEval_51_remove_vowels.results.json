{
  "name": "HumanEval_51_remove_vowels",
  "language": "fs",
  "prompt": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n",
  "tests": "let test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_without_vowels = ['A'..'Z']\n    let vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_without_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_without_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_v\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_gj3cvc7.fsx(32,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_to_remove = ['A'..'Z']\n    let vowels_to_remove_list = vowels |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list = vowels_to_remove |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list_list = vowels_to_remove_list |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list_list_list = vowels_to_remove_list_list |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list_list_list = vowels_to_remove_list_list_list |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list_list_list = vowels_to_remove_list_list_list |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list_list_list = vowels_to_remove_list_list_list |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list_list_list = vowels_to_remove_list_list_list |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list_list_list = vowels_to_remove_list_list_list |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list_list_list = vowels_to_remove_list_list_list |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list_list_list = vowels_to_remove_list_list_list |> List.map (fun v -> v.ToString())\n    let vowels_to_remove_list_list_list_list = vowels_to_remove_list_list_list |> List\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppdvf35gc.fsx(26,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_to_remove = \n        [| for c in text -> c |]\n    let remove_vowels_from_list = \n        vowels |> List.filter (fun c -> not (vowels |> List.contains c))\n    let remove_vowels_from_list_with_vowels = \n        vowels |> List.filter (fun c -> not (vowels |> List.contains c))\n    let remove_vowels_from_list_with_vowels_and_vowels = \n        vowels |> List.filter (fun c -> not (vowels |> List.contains c))\n    let remove_vowels_from_list_with_vowels_and_vowels_and_vowels = \n        vowels |> List.filter (fun c -> not (vowels |> List.contains c))\n    let remove_vowels_from_list_with_vowels_and_vowels_and_vowels_and_vowels = \n        vowels |> List.filter (fun c -> not (vowels |> List.contains c))\n    let remove_vowels_from_list_with_vowels_and_vowels_and_vowels_and_vowels_and_vowels = \n        vowels |> List.filter (fun c -> not (vowels |> List.contains c))\n    let remove_vowels_from_list_with_vowels_and_vowels_and_vowels_and_vowels_and_vowels_and_vowels_and_vowels_and_vowels_and_vowels = \n        vowels |> List.filter (fun c -> not (vowels |> List.contains c))\n    let remove_vowels_from_list_with_vowels_and_vowels_and_vowels_and_vowels_and_vowels_and_v\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnplqo3zd.fsx(31,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    text\n    |> Seq.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> Seq.toList\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0o99bq9w.fsx(14,34): error FS0039: The value, namespace, type or module 'Char' is not defined. Maybe you want one of the following:\n   char\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a';'e';'i';'o';'u']\n    let vowels_to_remove = \n        vowels \n        |> List.filter (fun v -> not (vowels |> List.contains v))\n    let text = text.ToLower()\n    if text = \"\" then text\n    else text.Replace(vowels_to_remove, \"\")\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq5_fdf8e.fsx(17,16): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_to_remove = \n        vowels\n        |> List.filter (fun v -> not (List.contains v vowels))\n    text\n    |> remove_vowels_from_string\n    |> remove_vowels_from_string_with_vowels_to_remove\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels_to_remove_vowels\n    |> remove_vowels_from_string_with_vowels\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2ooa6rtu.fsx(18,8): error FS0039: The value or constructor 'remove_vowels_from_string' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_count = List.length vowels\n    let vowels_count_minus_one = List.length vowels - 1\n    let vowels_count_plus_one = List.length vowels + 1\n    let vowels_count_minus_one_minus_one = List.length vowels - 1 - List.length vowels_minus_one - List.length vowels_plus_one\n    let vowels_count_plus_one_minus_one_minus_one = List.length vowels - 1 - List.length vowels_minus_one_minus_one - List.length vowels_plus_one\n    let vowels_count_minus_one_minus_one_minus_one = List.length vowels - 1 - List.length vowels_minus_one_minus_one - List.length vowels_plus_one\n    let vowels_count_plus_one_minus_one_minus_one = List.length vowels - 1 - List.length vowels_minus_one_minus_one - List.length vowels_plus_one\n    let vowels_count_minus_one_minus_one_minus_one = List.length vowels - 1 - List.length vowels_minus_one_minus_one - List.length vowels_plus_one\n    let vowels_count_plus_one_minus_one_minus_one = List.length vowels - 1 - List.length vowels_minus_one_minus_one - List.length vowels_plus_one\n    let vowels_count_minus_one_minus_one_minus_one = List.length vowels - 1 - List.length vowels_minus_one_minus_one - List.length vowels_plus_one\n    let vowels_count_plus_one_minus_one_minus_one = List.length vowels - 1 - List.length vowels_minus_one_minus_one - List.length vowels_plus_one\n    let vowels_count_minus_one_minus_one_minus_one = List.length vowels - 1 - List.length vowels_minus_one_minus_one - List.length vowels_plus\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvqp0bysy.fsx(25,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    text\n    |> Seq.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> Seq.toList\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit c))\n    |> List.map (fun c -> c.ToString())\n    |> List.\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmfk49h31.fsx(41,12): error FS0599: Missing qualification after '.'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_count = List.length vowels\n    let vowels_count_minus_one = List.length vowels - 1\n    let vowels_count_minus_two = List.length vowels - 2\n    let vowels_count_plus_one = List.length vowels + 1\n    let vowels_count_minus_three = List.length vowels - 3\n    let vowels_count_plus_four = List.length vowels + 4\n    let vowels_count_minus_five = List.length vowels - 5\n    let vowels_count_plus_six = List.length vowels + 6\n    let vowels_count_minus_seven = List.length vowels - 7\n    let vowels_count_plus_eight = List.length vowels + 8\n    let vowels_count_minus_nine = List.length vowels - 9\n    let vowels_count_plus_ten = List.length vowels + 10\n    let vowels_count_minus_eleven = List.length vowels - 11\n    let vowels_count_plus_twelve = List.length vowels + 12\n    let vowels_count_minus_thirteen = List.length vowels - 13\n    let vowels_count_plus_fourteen = List.length vowels + 15\n    let vowels_count_minus_fifteen = List.length vowels - 16\n    let vowels_count_plus_sixteen = List.length vowels + 17\n    let vowels_count_minus_seventeen = List.length vowels - 18\n    let vowels_count_plus_eight = List.length vowels + 19\n    let vowels_count_minus_nine = List.length vowels - 20\n    let vowels_count_plus_ten = List.length vowels + 21\n    let vowels_count_minus_eleven = List.length vowels - 22\n    let vowels_count_plus_twelve = List.length vowels + 23\n    let vowels_count_minus_thirteen = List.length vowels - 24\n    let vowels_count_plus_fourteen = List.length vowels + 25\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp77f5hc4r.fsx(39,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    text.ToCharArray()\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> String.concat \"\"\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpage0j9n3.fsx(13,5): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_without_vowels = ['A'..'Z']\n    let vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_without_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_without_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_v\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_gj3cvc7.fsx(32,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_without_vowels = ['a'..'z'] |> List.filter (fun x -> not (List.contains x vowels))\n    let vowels_with_vowels = ['a'..'z'] |> List.filter (fun x -> List.contains x vowels)\n    let vowels_with_vowels_without_vowels = vowels_with_vowels |> List.filter (fun x -> not (List.contains x vowels_without_vowels))\n    let vowels_with_vowels_with_vowels = vowels_with_vowels |> List.filter (fun x -> List.contains x vowels_with_vowels)\n    let vowels_with_vowels_with_vowels_without_vowels = vowels_with_vowels_with_vowels |> List.filter (fun x -> List.contains x vowels_without_vowels)\n    let vowels_with_vowels_with_vowels_without_vowels = vowels_with_vowels_with_vowels |> List.filter (fun x -> List.contains x vowels_without_vowels)\n    let vowels_with_vowels_with_vowels_without_vowels = vowels_with_vowels_with_vowels |> List.filter (fun x -> List.contains x vowels_without_vowels)\n    let vowels_with_vowels_with_vowels_without_vowels = vowels_with_vowels_with_vowels |> List.filter (fun x -> List.contains x vowels_without_vowels)\n    let vowels_with_vowels_with_vowels_without_vowels = vowels_with_vowels_with_vowels |> List.filter (fun x -> List.contains x vowels_without_vowels)\n    let vowels_with_vowels_with_vowels_without_v\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcyc5kj5e.fsx(24,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'; 'e'; 'i'; 'o'; 'u']\n    let vowels_to_remove = \n        text \n        |> Seq.filter (fun c -> not (Seq.contains c vowels))\n        |> Seq.toList\n    if Seq.isEmpty vowels_to_remove then text\n    else\n        let first_vowel = vowels_to_remove |> Seq.head\n        let second_vowel = vowels_to_remove |> Seq.last\n        let first_vowel_to_remove = first_vowel |> Seq.filter (fun c -> not (Seq.contains c vowels))\n        let second_vowel_to_remove = second_vowel |> Seq.filter (fun c -> not (Seq.contains c vowels))\n        let first_vowel_to_remove_with_vowel = first_vowel_to_remove |> Seq.filter (fun c -> Seq.contains c vowels)\n        let second_vowel_to_remove_with_vowel = second_vowel_to_remove |> Seq.filter (fun c -> Seq.contains c vowels)\n        let first_vowel_to_remove_with_vowel = first_vowel_to_remove |> Seq.filter (fun c -> Seq.contains c vowels)\n        let second_vowel_to_remove_with_vowel = second_vowel_to_remove |> Seq.filter (fun c -> Seq.contains c vowels)\n        let first_vowel_to_remove_with_vowel = first_vowel_to_remove |> Seq.filter (fun c -> Seq.contains c vowels)\n        let second_vowel_to_remove_with_vowel = second_vowel_to_remove |> Seq.filter (fun c -> Seq.contains c vowels)\n        let first_vowel_to_remove_with_vowel = first_vowel\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2s7ln1c8.fsx(30,9): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_to_remove = ['a'..'z']\n    let vowels_to_remove_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_to_remove_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpd4pl3hbe.fsx(31,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'; 'e'; 'i'; 'o'; 'u']\n    let vowels_text = text.ToLower()\n    let vowels_text_lower = List.map (fun c -> c.ToLower()) vowels\n    let vowels_text_upper = List.map (fun c -> c.ToUpper()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToUpper()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToLower()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToUpper()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToLower()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToUpper()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToLower()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToUpper()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToLower()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToUpper()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToLower()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToUpper()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToLower()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToUpper()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToLower()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToUpper()) vowels\n    let vowels_text_upper_lower = List.map (fun c -> c.ToLower()) vowels\n    let vowels_\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp72nrzg29.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_to_remove = \n        vowels\n        |> List.filter (fun v -> not (List.contains v vowels))\n    if vowels_to_remove.Length = 0 then text\n    else\n        let text = text.Replace(vowels_to_remove, \"\")\n        text\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp14djxh7o.fsx(19,20): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_without_vowels = ['A'..'Z']\n    let vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_without_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_without_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['a'..'z']\n    let vowels_with_vowels_with_vowels_with_vowels = ['A'..'Z']\n    let vowels_with_v\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_gj3cvc7.fsx(32,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a'..'z']\n    let vowels_str = String.concat \"\" vowels\n    let vowels_str_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels_vowels_vowels = String.concat \"\" vowels\n    let vowels_str_vowels\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdya4a_nv.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    let vowels = ['a';'e';'i';'o';'u']\n    let vowels_to_remove = \n        text.ToCharArray()\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> not (Array.contains c vowels))\n        |> Array.map (\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx5qv9tdt.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpx5qv9tdt.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpx5qv9tdt.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpx5qv9tdt.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpx5qv9tdt.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpx5qv9tdt.fsx(55,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpx5qv9tdt.fsx(41,22): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels text = \n    text.ToCharArray()\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> String.concat \"\"\nlet test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\nghijklm\" = \"bcdf\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()",
      "timestamp": 1675520671,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpage0j9n3.fsx(13,5): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}