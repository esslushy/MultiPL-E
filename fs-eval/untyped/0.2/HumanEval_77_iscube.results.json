{
  "name": "HumanEval_77_iscube",
  "language": "fs",
  "prompt": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n",
  "tests": "let test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then \n        true\n    else\n        let rec iscube' a = \n            if a = 0 then \n                true\n            else\n                let rec iscube'' a = \n                    if a = 0 then \n                        true\n                    else\n                        let rec iscube''' a = \n                            if a = 0 then \n                                true\n                            else\n                                let rec iscube'''' a = \n                                    if a = 0 then \n                                        true\n                                    else\n                                        let rec iscube''''' a = \n                                            if a = 0 then \n                                                true\n                                            else\n                                                let rec iscube'''''' a = \n                                                    if a = 0 then \n                                                        true\n                                                    else\n                                                        let rec iscube''''''' a = \n                                                            if a = 0 then \n                                                                true\n                                                            else\n                                                                let rec iscube''''''' a = \n                                                                    if a = 0 then \n                                                                        true\n                                                                    else\n                                                                        let rec iscube''''''' a = \n                                                                            if a = 0 then \n                                                                                true\n                                                                            else\n                                                                                let rec iscube''''''' a = \n                                                                                    if a = 0 then \n                                                                                        true\n                                                                                    else\n                                                                                        let rec iscube''''''''' a = \n                                                                                            if a = 0 then \n                                                                                               true\n                                                                                            else\n                                                                                               let rec iscube''''''''' a = \n                                                                                                   if a = 0 then \n                                                                                                       true\n                                                                                                   else\n                                                                                                       let rec iscube''''''''' a = \n                                                                                                           if a = 0 then \n                                                                                                               true\n                                                                                                           else\n                                                                                                               let rec iscube''''''''' a = \n                                                                                                                   if a = 0 then \n                                                                                                                       true\n                                                                                                                   else\n                                                                                                                       let rec iscube''''''''' a = \n                                                                                                                           if a = 0 then \n                                                                                                                              true\n                                                                                                                           else\n                                                              \nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdqbtuzp_.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (72:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdqbtuzp_.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (72:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdqbtuzp_.fsx(88,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (72:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdqbtuzp_.fsx(88,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (72:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdqbtuzp_.fsx(88,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (72:124). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then\n        true\n    else\n        false\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then \n        true\n    else\n        let rec iscube' acc = \n            if a % 2 = 0 then \n                acc\n            else\n                iscube' (acc + 1)\n        iscube' 0\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3vnvvusw.fsx(20,9): error FS0001: This expression was expected to have type\n    'bool'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then \n        True\n    else\n        False\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxe37y6n.fsx(13,9): error FS0039: The value or constructor 'True' is not defined. Maybe you want one of the following:\n   truncate\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then \n        true\n    else\n        let rec iscube' acc a = \n            if a = 0 then \n                acc\n            else\n                iscube' (acc + 1) (a - 1)\n        iscube' 0 a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp56i4wq3b.fsx(20,9): error FS0001: This expression was expected to have type\n    'bool'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then\n        true\n    else\n        false\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then \n        true\n    else\n        false\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then \n        true\n    else\n        let rec iscube' a = \n            if a = 0 then \n                true\n            else\n                let rec iscube'' a = \n                    if a = 0 then \n                        true\n                    else\n                        let rec iscube''' a = \n                            if a = 0 then \n                                true\n                            else\n                                let rec iscube'''' a = \n                                    if a = 0 then \n                                        true\n                                    else\n                                        let rec iscube''''' a = \n                                            if a = 0 then \n                                                true\n                                            else\n                                                let rec iscube'''''' a = \n                                                    if a = 0 then \n                                                        true\n                                                    else\n                                                        let rec iscube''''''' a = \n                                                            if a = 0 then \n                                                                true\n                                                            else\n                                                                let rec iscube''''''' a = \n                                                                    if a = 0 then \n                                                                        true\n                                                                    else\n                                                                        let rec iscube''''''' a = \n                                                                            if a = 0 then \n                                                                                true\n                                                                            else\n                                                                                let rec iscube''''''''' a = \n                                                                                    if a = 0 then \n                                                                                        true\n                                                                                    else\n                                                                                        let rec iscube''''''''' a = \n                                                                                            if a = 0 then \n                                                                                               true\n                                                                                            else\n                                                                                               let rec iscube''''''''''' a = \n                                                                                                   if a = 0 then \n                                                                                                       true\n                                                                                                   else\n                                                                                                       let rec iscube''''''''''' a = \n                                                                                                           if a = 0 then \n                                                                                                               true\n                                                                                                           else\n                                                                                                               let rec iscube''''''''''' a = \n                                                                                                                   if a = 0 then \n                                                                                                                       true\n                                                                                                                   else\n                                                                                                                       let rec iscube''''''''''' a = \n                                                                                                                           if a = 0 then \n                                                                                                                              true\n                                                                                             \nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph1e7lnmx.fsx(71,120): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    let rec iscube' (a:int) = \n        if a = 0 then True\n        elif a = 1 then False\n        elif a = 2 then True\n        elif a = 3 then False\n        elif a = 4 then True\n        elif a = 5 then False\n        elif a = 6 then True\n        elif a = 7 then False\n        elif a = 8 then True\n        elif a = 9 then False\n        elif a = 10 then True\n        elif a = 11 then False\n        elif a = 12 then True\n        elif a = 13 then False\n        elif a = 14 then True\n        elif a = 15 then False\n        else iscube' (a-1)\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4_rhbz0e.fsx(13,23): error FS0039: The value or constructor 'True' is not defined. Maybe you want one of the following:\n   truncate\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    let rec iscube' acc = \n        match acc with\n        | [] -> false\n        | (x::xs) -> \n            if x = a then iscube' (x::acc)\n            else iscube' (x::acc)\n    iscube' []\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then true\n    else\n        let rec iscube' a =\n            if a = 0 then true\n            else\n                let rec iscube'' a =\n                    if a = 0 then true\n                    else\n                        let rec iscube''' a =\n                            if a = 0 then true\n                            else\n                                let rec iscube'''' a =\n                                    if a = 0 then true\n                                    else\n                                        let rec iscube''''' a =\n                                            if a = 0 then true\n                                            else\n                                                let rec iscube'''''' a =\n                                                    if a = 0 then true\n                                                    else\n                                                        let rec iscube''''''' a =\n                                                            if a = 0 then true\n                                                            else\n                                                                let rec iscube''''''''' a =\n                                                                    if a = 0 then true\n                                                                    else\n                                                                        let rec iscube''''''''' a =\n                                                                            if a = 0 then true\n                                                                            else\n                                                                                let rec iscube''''''''''' a =\n                                                                                    if a = 0 then true\n                                                                                    else\n                                                                                        let rec iscube''''''''''''' a =\n                                                                                            if a = 0 then true\n                                                                                            else\n                                                                                               let rec iscube''''''''''''' a =\n                                                                                                   if a = 0 then true\n                                                                                                   else\n                                                                                                       let rec iscube''''''''''''' a =\n                                                                                                           if a = 0 then true\n                                                                                                           else\n                                                                                                               let rec iscube''''''''''''''' a =\n                                                                                                                   if a = 0 then true\n                                                                                                                   else\n                                                                                                                       let rec iscube''''''''''''''' a =\n                                                                                                                           if a = 0 then true\n                                                                                                                           else\n                                                                                                                              let rec iscube''''''''''''''' a =\n                                                                                                                           if a = 0 then true\n                                                                                                                           else\n                                                                                                                              let rec iscube''''''''''''''' a =\n                                                                                                                           if a = 0 then true\n                                                                                                                           else\n                                                              \nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoi092qci.fsx(60,124): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (59:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpoi092qci.fsx(60,124): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (59:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpoi092qci.fsx(63,124): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (62:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpoi092qci.fsx(63,124): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (62:127). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpoi092qci.fsx(66,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (63:124). Try ind",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then \n        true\n    else\n        let rec iscube' a = \n            if a = 0 then \n                true\n            else\n                let rec iscube'' a = \n                    if a = 0 then \n                        true\n                    else\n                        let rec iscube''' a = \n                            if a = 0 then \n                                true\n                            else\n                                let rec iscube'''' a = \n                                    if a = 0 then \n                                        true\n                                    else\n                                        let rec iscube''''' a = \n                                            if a = 0 then \n                                                true\n                                            else\n                                                let rec iscube'''''' a = \n                                                    if a = 0 then \n                                                        true\n                                                    else\n                                                        let rec iscube''''''' a = \n                                                            if a = 0 then \n                                                                true\n                                                            else\n                                                                let rec iscube''''''' a = \n                                                                    if a = 0 then \n                                                                        true\n                                                                    else\n                                                                        let rec iscube''''''' a = \n                                                                            if a = 0 then \n                                                                                true\n                                                                            else\n                                                                                let rec iscube''''''' a = \n                                                                                    if a = 0 then \n                                                                                        true\n                                                                                    else\n                                                                                        let rec iscube''''''''' a = \n                                                                                            if a = 0 then \n                                                                                               true\n                                                                                            else\n                                                                                               let rec iscube''''''''' a = \n                                                                                                   if a = 0 then \n                                                                                                       true\n                                                                                                   else\n                                                                                                       let rec iscube''''''''' a = \n                                                                                                           if a = 0 then \n                                                                                                               true\n                                                                                                           else\n                                                                                                               let rec iscube''''''''' a = \n                                                                                                                   if a = 0 then \n                                                                                                                       true\n                                                                                                                   else\n                                                                                                                       let rec iscube''''''''' a = \n                                                                                                                           if a = 0 then \n                                                                                                                              true\n                                                                                                                           else\n                                                              \nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdqbtuzp_.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (72:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdqbtuzp_.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (72:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdqbtuzp_.fsx(88,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (72:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdqbtuzp_.fsx(88,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (72:124). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdqbtuzp_.fsx(88,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (72:124). Try indenting t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then\n        true\n    else\n        false\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then \n        true\n    else\n        false\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then \n        True\n    else\n        False\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxe37y6n.fsx(13,9): error FS0039: The value or constructor 'True' is not defined. Maybe you want one of the following:\n   truncate\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    let rec iscube' a = \n        if a = 0 then True\n        else if a = 1 then False\n        else iscube' (a - 1)\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6q85o2k5.fsx(13,23): error FS0039: The value or constructor 'True' is not defined. Maybe you want one of the following:\n   truncate\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    let rec iscube' a =\n        if a = 0 then\n            true\n        else\n            let rec iscube'' a =\n                if a = 0 then\n                    true\n                else\n                    let rec iscube''' a =\n                        if a = 0 then\n                            true\n                        else\n                            let rec iscube'''' a =\n                                if a = 0 then\n                                    true\n                                else\n                                    let rec iscube''''' a =\n                                        if a = 0 then\n                                            true\n                                        else\n                                            let rec iscube'''''' a =\n                                                if a = 0 then\n                                                    true\n                                                else\n                                                    let rec iscube''''''' a =\n                                                        if a = 0 then\n                                                            true\n                                                        else\n                                                            let rec iscube''''''' a =\n                                                                if a = 0 then\n                                                                    true\n                                                                else\n                                                                    let rec iscube''''''''' a =\n                                                                        if a = 0 then\n                                                                            true\n                                                                        else\n                                                                            let rec iscube''''''''' a =\n                                                                                if a = 0 then\n                                                                                    true\n                                                                                else\n                                                                                    let rec iscube''''''''' a =\n                                                                                        if a = 0 then\n                                                                                            true\n                                                                                        else\n                                                                                            let rec iscube''''''''' a =\n                                                                                               if a = 0 then\n                                                                                                   true\n                                                                                               else\n                                                                                                   let rec iscube''''''''' a =\n                                                                                                       if a = 0 then\n                                                                                                           true\n                                                                                                       else\n                                                                                                           let rec iscube''''''''' a =\n                                                                                                               if a = 0 then\n                                                                                                                   true\n                                                                                                               else\n                                                                                                                   let rec iscube''''''''' a =\n                                                                                                                   if a = 0 then\n                                                                                                                       true\n                                                                                                                   else\n                                                                                                                       let rec iscube''''''''' a =\n                                                                                                                           if a = 0 then\n                                                                                                                              true\n                                                                                                                           else\n                                                                                                                              let rec iscube''''''\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpd8fw_gyn.fsx(69,116): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (68:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpd8fw_gyn.fsx(69,116): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (68:116). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpd8fw_gyn.fsx(77,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    if a = 0 then \n        True\n    else\n        False\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520632,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxe37y6n.fsx(13,9): error FS0039: The value or constructor 'True' is not defined. Maybe you want one of the following:\n   truncate\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    let rec iscube' acc = \n        match acc with\n        | [] -> false\n        | x::xs -> \n            if x = a then iscube' (x::acc)\n            else iscube' (x::acc)\n    iscube' []\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube a = \n    let rec iscube' a = \n        match a with\n        | 0 -> true\n        | _ -> iscube' (a-1)\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675520633,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}