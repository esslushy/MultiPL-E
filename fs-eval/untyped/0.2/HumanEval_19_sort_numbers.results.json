{
  "name": "HumanEval_19_sort_numbers",
  "language": "fs",
  "prompt": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n",
  "tests": "let test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            let head = head.ToLower()\n            if head = 'zero' then \n                sort_numbers' tail\n            else \n                let tail = tail |> List.map (fun n -> n.ToLower())\n                if head = 'one' then \n                    sort_numbers' tail\n                else \n                    let tail = tail |> List.map (fun n -> n.ToLower())\n                    if head = 'two' then \n                        sort_numbers' tail\n                    else \n                        let tail = tail |> List.map (fun n -> n.ToLower())\n                        if head = 'three' then \n                            sort_numbers' tail\n                        else \n                            let tail = tail |> List.map (fun n -> n.ToLower())\n                            if head = 'four' then \n                                sort_numbers' tail\n                            else \n                                let tail = tail |> List.map (fun n -> n.ToLower())\n                                if head = 'five' then \n                                    sort_numbers' tail\n                                else \n                                    let tail = tail |> List.map (fun n -> n.ToLower())\n                                    if head = 'six' then \n                                        sort_numbers' tail\n                                    else \n                                        let tail = tail |> List.map (fun n -> n.ToLower())\n                                        if head = 'seven' then \n                                            sort_numbers' tail\n                                        else \n                                            let tail = tail |> List.map (fun n -> n.ToLower())\n                                            if head = 'eight' then \n                                                sort_numbers' tail\n                                            else \n                                                let tail = tail |> List.map (fun n -> n.ToLower())\n                                                if head = 'nine' then \n                                                    sort_numbers' tail\n                                                else \n                                                    let tail = tail |> List.map (fun n -> n.ToLower())\n                                                    if head = 'ten' then \n                                                        sort_numbers' tail\n                                                    else \n                               \nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9drl36h3.fsx(12,23): error FS0010: Unexpected quote symbol in expression\n\n\n\n/tmp/tmp9drl36h3.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:53). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9drl36h3.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:53). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9drl36h3.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:53). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9drl36h3.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:53). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9drl36h3.fsx(65,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (52:53). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head' = head.ToUpper()\n            if head' = 'Z' then\n                sort_numbers' tail\n            else\n                let tail' = tail |> List.map (fun n -> n.ToUpper())\n                if head' = 'Y' then\n                    sort_numbers' tail'\n                else\n                    sort_numbers' tail'\n    sort_numbers' numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuerdn_w6.fsx(12,24): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head = head.Trim()\n            let tail = tail |> List.map (fun n -> n.Trim())\n            if head = \"zero\" then\n                tail\n            else\n                sort_numbers' tail\n    sort_numbers' numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7vwnr0ae.fsx(20,21): error FS0001: This expression was expected to have type\n    'string list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            let head_numbers = head.Split(' ')\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwrpfvmzd.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (25:13). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpwrpfvmzd.fsx(26,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let head = head.ToUpper()\n            let tail = tail |> List.rev\n            if head = 'Z' then \n                sort_numbers' tail\n            else \n                let tail = tail |> List.rev\n                if head = '0' then \n                    sort_numbers' tail\n                else \n                    let tail = tail |> List.rev\n                    if head = '1' then \n                        sort_numbers' tail\n                    else \n                        let tail = tail |> List.rev\n                        if head = '2' then \n                            sort_numbers' tail\n                        else \n                            let tail = tail |> List.rev\n                            if head = '3' then \n                                sort_numbers' tail\n                            else \n                                let tail = tail |> List.rev\n                                if head = '4' then \n                                    sort_numbers' tail\n                                else \n                                    let tail = tail |> List.rev\n                                    if head = '5' then \n                                        sort_numbers' tail\n                                    else \n                                        let tail = tail |> List.rev\n                                        if head = '6' then \n                                            sort_numbers' tail\n                                        else \n                                            let tail = tail |> List.rev\n                                            if head = '7' then \n                                                sort_numbers' tail\n                                            else \n                                                let tail = tail |> List.rev\n                                                if head = '8' then \n                                                    sort_numbers' tail\n                                                else \n                                                    let tail = tail |> List.rev\n                                                    if head = '9' then \n                                                        sort_numbers' tail\n                                                    else \n                                                        let tail = tail |> List.rev\n                                                        if head = '0' then \n                                                            sort_numbers' tail\n                                                        else \n                                                            let tail = tail |> List.rev\n                                                            if head = '1' then \n                                                                sort_numbers' tail\n                                                            else \n                                                                let tail\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptbdu5qts.fsx(65,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToLower())\n            let head = head.ToUpper()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToCharArray()\n            let tail = tail |> List.map (fun x -> x.ToCharArray())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcwmzep6k.fsx(37,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head_numbers = head.Split(' ')\n            let head_numbers = head_numbers |> List.map (fun x -> int x)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc4mc6ue9.fsx(35,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let x = x.ToCharArray()\n            let y = xs |> List.sort |> List.toArray\n            sort_numbers' (y::xs)\n    sort_numbers' numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzdy8souy.fsx(13,28): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'string[]'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head = head.Trim()\n            let tail = tail |> List.map (fun n -> n.Trim())\n            if head = \"zero\" then\n                tail\n            else\n                let tail = tail |> List.map (fun n -> n.Trim())\n                if head = \"one\" then\n                    tail\n                else\n                    let tail = tail |> List.map (fun n -> n.Trim())\n                    if head = \"two\" then\n                        tail\n                    else\n                        let tail = tail |> List.map (fun n -> n.Trim())\n                        if head = \"three\" then\n                            tail\n                        else\n                            let tail = tail |> List.map (fun n -> n.Trim())\n                            if head = \"four\" then\n                                tail\n                            else\n                                let tail = tail |> List.map (fun n -> n.Trim())\n                                if head = \"five\" then\n                                    tail\n                                else\n                                    let tail = tail |> List.map (fun n -> n.Trim())\n                                    if head = \"six\" then\n                                        tail\n                                    else\n                                        let tail = tail |> List.map (fun n -> n.Trim())\n                                        if head = \"seven\" then\n                                            tail\n                                        else\n                                            let tail = tail |> List.map (fun n -> n.Trim())\n                                            if head = \"eight\" then\n                                                tail\n                                            else\n                                                let tail = tail |> List.map (fun n -> n.Trim())\n                                                    if head = \"nine\" then\n                                                        tail\n                                                    else\n                                                        let tail = tail |> List.map (fun n -> n.Trim())\n                                                            if head = \"ten\" then\n                                                                tail\n                                                            else\n                                                                let tail = tail |> List.map (fun n -> n.Trim())\n                                                                    if head = \"eleven\" then\n                                                                        tail\n                                                                    else\n                                                                        let tail = tail |> List.map (fun n ->\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpexunwtud.fsx(49,53): error FS0010: Unexpected keyword 'if' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpexunwtud.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (60:73). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpexunwtud.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (60:73). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpexunwtud.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (60:73). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpexunwtud.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (60:73). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpexunwtud.fsx(70,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (60:73). Try indenting this t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' n = \n        match n with\n        | 0 -> numbers\n        | 1 -> numbers\n        | 2 -> numbers\n        | 3 -> numbers\n        | 4 -> numbers\n        | 5 -> numbers\n        | 6 -> numbers\n        | 7 -> numbers\n        | 8 -> numbers\n        | 9 -> numbers\n        | _ -> numbers\n    sort_numbers' numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn5qt9wjl.fsx(23,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head_numbers = sort_numbers' tail\n            let head_numbers = head::head_numbers\n            sort_numbers' head_numbers\n    sort_numbers' numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjyfsf0y5.fsx(17,21): error FS0001: This expression was expected to have type\n    'string list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let x = x.Trim()\n            let y = x.Substring(0,1)\n            let z = x.Substring(1)\n            if y <> z then \n                sort_numbers' xs\n            else\n                sort_numbers' y::xs\n    sort_numbers' numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj8bw388v.fsx(17,17): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'string list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun n -> n.ToLower())\n            let head = head.ToUpper()\n            let tail = tail |> List.map (fun n -> n.ToUpper())\n            let head = head.ToCharArray()\n            let tail = tail |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnpltvtfi.fsx(35,13): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:int list) = \n        match numbers with \n        | [] -> numbers\n        | x::xs -> \n            let x = x - 1\n            let y = xs.[x]\n            let z = xs.[y]\n            if z < x then sort_numbers' xs\n            elif z > x then sort_numbers' ys\n            else sort_numbers' (xs@ys)\n    sort_numbers' numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsqqzifdi.fsx(15,43): error FS0039: The value or constructor 'ys' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let x = x.ToCharArray() |> Array.rev\n            let y = xs |> List.rev |> List.sort\n            sort_numbers' y\n    sort_numbers' numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoxaignoo.fsx(17,21): error FS0001: This expression was expected to have type\n    'string list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:int list) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let x = x - 1\n            let y = x - numbers.[x]\n            if y < 0 then \n                sort_numbers' xs\n            else \n                sort_numbers' (xs @ [y])\n    sort_numbers' numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprk1c8zis.fsx(20,21): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let x = x.Trim()\n            let y = x.Split(' ')\n            let z = y |> List.map (fun y -> y.Trim())\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp11cy9foz.fsx(27,13): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head = head.Trim()\n            let tail = tail |> List.rev\n            if head = 'zero' then\n                sort_numbers' tail\n            else\n                let tail = tail |> List.rev\n                if head = 'one' then\n                    sort_numbers' tail\n                else\n                    let tail = tail |> List.rev\n                    if head = 'two' then\n                        sort_numbers' tail\n                    else\n                        let tail = tail |> List.rev\n                        if head = 'three' then\n                            sort_numbers' tail\n                        else\n                            let tail = tail |> List.rev\n                            if head = 'four' then\n                                sort_numbers' tail\n                            else\n                                let tail = tail |> List.rev\n                                if head = 'five' then\n                                    sort_numbers' tail\n                                else\n                                    let tail = tail |> List.rev\n                                    if head = 'six' then\n                                        sort_numbers' tail\n                                    else\n                                        let tail = tail |> List.rev\n                                        if head = 'seven' then\n                                            sort_numbers' tail\n                                        else\n                                            let tail = tail |> List.rev\n                                            if head = 'eight' then\n                                                sort_numbers' tail\n                                            else\n                                                let tail = tail |> List.rev\n                                                if head = 'nine' then\n                                                    sort_numbers' tail\n                                                else\n                                                    let tail = tail |> List.rev\n                                                    if head = 'ten' then\n                                                        sort_numbers' tail\n                                                    else\n                                                        let tail = tail |> List.rev\n                                                        if head = 'eleven' then\n                                                            sort_numbers' tail\n                                                        else\n                                                            let tail = tail |> List.rev\n                                                            if head = 'twelve' then\n                                                                sort_numbers' tail\n                                                            else\n                                                                let tail = tail |> List.rev\n                                                                if head = 'thirteen' then\n                                                                    sort_numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpecoygrds.fsx(13,23): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:string list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToLower())\n            if head = 'zero' then \n                sort_numbers' tail\n            else\n                let tail = tail |> List.map (fun x -> x.ToLower())\n                if head = 'one' then \n                    sort_numbers' tail\n                else\n                    let tail = tail |> List.map (fun x -> x.ToLower())\n                    if head = 'two' then \n                        sort_numbers' tail\n                    else\n                        let tail = tail |> List.map (fun x -> x.ToLower())\n                        if head = 'three' then \n                            sort_numbers' tail\n                        else\n                            let tail = tail |> List.map (fun x -> x.ToLower())\n                            if head = 'four' then \n                                sort_numbers' tail\n                            else\n                                let tail = tail |> List.map (fun x -> x.ToLower())\n                                if head = 'five' then \n                                    sort_numbers' tail\n                                else\n                                    let tail = tail |> List.map (fun x -> x.ToLower())\n                                    if head = 'six' then \n                                        sort_numbers' tail\n                                    else\n                                        let tail = tail |> List.map (fun x -> x.ToLower())\n                                        if head = 'seven' then \n                                            sort_numbers' tail\n                                        else\n                                            let tail = tail |> List.map (fun x -> x.ToLower())\n                                            if head = 'eight' then \n                                                sort_numbers' tail\n                                            else\n                                                let tail = tail |> List.map (fun x -> x.ToLower())\n                                                if head = 'nine' then \n                                                    sort_numbers' tail\n                                                else\n                                                    let tail = tail |> List.map (fun x -> x.ToLower())\n                                                    if head = 'ten' then \n                                                        sort_numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyo237x8u.fsx(13,23): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n    let rec sort_numbers' (numbers:int list) = \n        match numbers with \n        | [] -> numbers\n        | x::xs -> \n            let x = x - 1\n            let y = x - 1\n            if x <> y then \n                sort_numbers' (xs@[x])\n            else \n                sort_numbers' (xs@[y])\n    sort_numbers' numbers\nlet test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()",
      "timestamp": 1675520531,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp176evi6u.fsx(20,21): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}