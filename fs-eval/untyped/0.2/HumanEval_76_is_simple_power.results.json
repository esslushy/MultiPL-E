{
  "name": "HumanEval_76_is_simple_power",
  "language": "fs",
  "prompt": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n",
  "tests": "let test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_rec x n = \n        if n = 0 then true\n        elif n = x then true\n        else is_simple_power_rec (n-1) (n-1)\n    is_simple_power_rec x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    if x = n then true\n    else false\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    if n = x then true\n    else\n        let rec is_simple_power_rec x n = \n            if n = x then true\n            else\n                if n % x = 0 then is_simple_power_rec x (n/x)\n                else false\n        is_simple_power_rec x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_rec x n = \n        if x = n then true\n        else is_simple_power_rec (x/n) (n/x)\n    is_simple_power_rec x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_n x n = \n        if n = x then true\n        else if n = 0 then false\n        else is_simple_power_n (n-1) (n-1)\n    is_simple_power_n x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_rec x n = \n        if n = x then true\n        else is_simple_power_rec (n*x) (n-x)\n    is_simple_power_rec x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_n x n =\n        if n = x then true\n        else is_simple_power_n x (n-x)\n    is_simple_power_n x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    if n = x then true\n    else\n        let rec is_power n x =\n            if n = x then true\n            else\n                let rec is_power_n n x =\n                    if n = x then true\n                    else\n                        if n%x = 0 then is_power_n n (x/n)\n                        else false\n                is_power_n n x\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp17lrfh60.fsx(14,9): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    if n = 0 then false\n    elif n = 1 then true\n    else x % n = 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    if n = x then true\n    else\n        let rec is_power_of_n x =\n            if x = n then true\n            else\n                let rec is_power_of_n_x =\n                    if x = n then true\n                    else\n                        let rec is_power_of_n_x_x =\n                            if x = n then true\n                            else\n                                let rec is_power_of_n_x_x_x =\n                                    if x = n then true\n                                    else\n                                        let rec is_power_of_n_x_x_x_x =\n                                            if x = n then true\n                                            else\n                                                let rec is_power_of_n_x_x_x_x_x =\n                                                    if x = n then true\n                                                    else\n                                                        let rec is_power_of_n_x_x_x_x_x_x =\n                                                            if x = n then true\n                                                            else\n                                                                let rec is_power_of_n_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxn1utym0.fsx(36,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_n x n = \n        match x with\n        | 0 -> false\n        | _ -> is_simple_power_n (x-1) (n-1)\n    is_simple_power_n x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_rec x n = \n        match n with \n        | 0 -> true\n        | _ -> is_simple_power_rec x (n-1)\n    is_simple_power_rec x x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7dsmtr4x.fsx(16,5): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_rec x n = \n        if n = x then true\n        else if n = 0 then false\n        else is_simple_power_rec (n-1) (n-1)\n    is_simple_power_rec x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    if n = x then true\n    else\n        let rec is_power n =\n            if n = 0 then true\n            else\n                let rec is_power_n n =\n                    if n = 0 then true\n                    else\n                        let rec is_power_n_n =\n                            if n = n then true\n                            else\n                                let rec is_power_n_n_n =\n                                    if n = n then true\n                                    else\n                                        let rec is_power_n_n_n_n =\n                                            if n = n then true\n                                            else\n                                                let rec is_power_n_n_n_n_n =\n                                                    if n = n then true\n                                                    else\n                                                        let rec is_power_n_n_n_n_n_n =\n                                                            if n = n then true\n                                                            else\n                                                                let rec is_power_n_n_n_n_n_n_n_n =\n                                                                    if n = n then true\n                                                                    else\n                                                                        let rec is_power_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3roltmnl.fsx(39,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_rec x n = \n        if n = 0 then true\n        elif n = x then is_simple_power_rec x (n-1)\n        else false\n    is_simple_power_rec x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_rec x n = \n        match n with\n        | 0 -> true\n        | _ -> \n            let rec is_simple_power_rec_rec x n = \n                match n with\n                | 0 -> true\n                | _ -> \n                    let rec is_simple_power_rec_rec_rec x n = \n                        match n with\n                        | 0 -> true\n                        | _ -> \n                            let rec is_simple_power_rec_rec_rec_rec x n = \n                                match n with\n                                | 0 -> true\n                                | _ -> \n                                    let rec is_simple_power_rec_rec_rec_rec x n = \n                                        match n with\n                                        | 0 -> true\n                                        | _ -> \n                                            let rec is_simple_power_rec_rec_rec_rec x n = \n                                                match n with\n                                                | 0 -> true\n                                                | _ -> \n                                                    let rec is_simple_power_rec_rec_rec_rec x n = \n                                                        match n with\n                                                        | 0 -> true\n                                                        | _ -> \n                                                            let rec is_simple_power_rec_rec_rec_rec x n = \n                                                                match n with\n                                                                | 0 -> true\n                                                                | _ -> \n                                                                    let rec is_simple_power_rec_rec_rec_rec x n = \n                                                                        match n with\n                                                                        | 0 -> true\n                                                                        | _ -> \n                                                                            let rec is_simple_power_rec_rec_rec_rec x n = \n                                                                                match n with\n                                                                                | 0 -> true\n                                                                                | _ -> \n                                                                                    let rec is_simple_power_rec_rec_rec_rec x n = \n                                                                                        match n with\n                                                                                        | 0 -> true\n                                                                                        | _ -> \n                                                                                            let rec is_simple_power_rec_rec_rec_rec x n = \n                                                                                               match n with\n                                                                                               | 0 -> true\n                                                                                               | _ -> \n                                                                                                   let rec is_simple_power_rec_\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpaij4qkp7.fsx(61,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_rec x n =\n        if n = 0 then true\n        elif n = x then true\n        else is_simple_power_rec (n-1) (n-1)\n    is_simple_power_rec x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    let rec is_simple_power_n x n = \n        if x = n then true\n        else if n = x then is_simple_power_n x (n+1)\n        else is_simple_power_n x (n+1)\n    is_simple_power_n x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    if n = 0 then false\n    else\n        let rec loop i =\n            if i = x then true\n            else\n                let rec loop i =\n                    if i = n then false\n                    else loop (i-1)\n                loop i\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520507,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1snmb_nz.fsx(14,9): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    if n = x then true\n    else\n        let rec is_simple_power_n x n =\n            if n = x then true\n            else\n                if n%x = 0 then is_simple_power_n x (n/x)\n                else false\n        is_simple_power_n x n\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675520508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}