{
  "name": "HumanEval_117_select_words",
  "language": "fs",
  "prompt": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n",
  "tests": "let test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let words = s.Split(' ')\n    let words = words |> Array.filter (fun w -> w <> \"\")\n    words |> Array.map (fun w -> w.ToLower())\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi8czmylv.fsx(13,17): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let rec loop acc = \n        match s with\n        | \"\" -> acc\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> Array.map (fun word -> word.Trim())\n            if words.Length > n then loop (words |> List.filter (fun word -> word.Length > n) |> List.rev)\n            else loop (words |> List.filter (fun word -> word.Length <= n) |> List.rev)\n    loop []\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqs0txduh.fsx(20,53): error FS0001: The type 'string[]' does not match the type ''a list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let words = \n        s.ToCharArray()\n        |> Array.filter (fun c -> c <> ' ' && c <> '\\t')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmvks4ibm.fsx(44,33): error FS0599: Missing qualification after '.'\n\n\n\n/tmp/tmpmvks4ibm.fsx(45,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (13:5). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let words = \n        s \n        |> Seq.filter (fun c -> c <> ' ' && c <> '\\t')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfbg5plrs.fsx(13,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let rec select_words_rec s n = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> List.ofArray\n                |> List.filter (fun w -> w.Length > n)\n                |> List.map (fun w -> w.Trim())\n            select_words_rec s (n - words.Length)\n    select_words_rec s n\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let words = \n        s \n        |> Seq.filter (fun c -> c <> ' ' && c <> '\\t' && c <> '\\n' && c <> '\\r')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.toList\n    words |> List.filter (fun w -> w.Length >= n)\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let rec select_words_rec (s:string) (n:int) = \n        if s.Length = 0 then \n            []\n        else\n            let words = s.ToCharArray()\n            let words = words |> Array.filter (fun w -> w <> ' ')\n            if words.Length = n then\n                words\n            else\n                words |> Array.map (fun w -> w.ToString()) |> Array.filter (fun w -> w <> ' ')\n    select_words_rec s n\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpffpx_f9g.fsx(20,17): error FS0001: All branches of an 'if' expression must return values implicitly convertible to the type of the first branch, which here is ''a list'. This branch returns a value of type 'char[]'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    if s = \"\" then []\n    else\n        let words = \n            s.Split(' ')\n            |> Array.filter (fun word -> word.Length > n)\n            |> Array.map (fun word -> word.Trim())\n        words\n        |> List.ofArray\n        |> List.filter (fun word -> word.Length <= n)\n        |> List.map (fun word -> word.Trim())\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let words = \n        s.Split(' ')\n        |> Array.map (fun word -> word.ToLower())\n        |> Array.filter (fun word -> word.Length > n)\n        |> Array.map (fun word -> word.ToLower())\n    words\n    |> Array.filter (fun word -> word.Length > n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length < n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpds814be2.fsx(14,9): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let words = \n        s.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n        |> Array.map (fun s -> s.Trim())\n    if words.Length <> n then \n        failwith \"The number of words in the string s does not match the number of words in the string s\"\n    words\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6gajx3ou.fsx(14,9): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    if s = \"\" then []\n    else \n        let words = s.Split([| ' ' |], StringSplitOptions.RemoveEmptyEntries)\n        words \n        |> Array.filter (fun word -> word.Length = n)\n        |> Array.map (fun word -> word.ToLower())\n        |> Array.toList\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplr5j8laj.fsx(15,40): error FS0039: The value, namespace, type or module 'StringSplitOptions' is not defined. Maybe you want one of the following:\n   String\n   string\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let rec select_words_rec s n = \n        if n = 0 then []\n        else\n            let words = \n                s.Split(' ')\n                |> Array.filter (fun w -> w.Length > n)\n            if words.Length = n then words else select_words_rec s (n - 1)\n    select_words_rec s n\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpogt8b7qj.fsx(17,17): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let words = \n        s.Split(' ')\n        |> Array.map (fun s -> s.Trim())\n        |> Array.filter (fun s -> s.Length > n)\n    words\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphapbjl_k.fsx(14,9): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let rec select_words' (s:string) (n:int) = \n        match s.Length with\n        | 0 -> []\n        | _ when n = 0 -> []\n        | _ when n = 1 -> [s]\n        | _ when n = n -> [s]\n        | _ -> \n            let words = \n                s.ToCharArray()\n                |> Array.filter (fun c -> c <> ' ' && c <> '\\t')\n                |> Array.map (fun c -> c.ToString())\n                |> Array.filter (fun c -> c <> ' ')\n                |> Array.map (fun c -> c.ToString())\n            let words = words |> Array.filter (fun c -> c <> ' ')\n            words |> Array.map (fun c -> c.ToString())\n    select_words' s n\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprmyszalj.fsx(24,48): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let rec select_words_rec s n = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> Array.map (fun word -> word.Trim())\n            if words.Length = n then words else select_words_rec s (n-words.Length)\n    select_words_rec s n\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmwvjoy91.fsx(20,38): error FS0001: The 'if' expression needs to have type ''a list' to satisfy context type requirements. It currently has type 'string[]'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let rec select_words_rec s n = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> List.ofArray\n                |> List.filter (fun w -> w.Length <= n)\n                |> List.map (fun w -> w.Trim())\n            select_words_rec s (n-w.Length) words\n    select_words_rec s n\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuvk2h5bz.fsx(22,13): error FS0003: This value is not a function and cannot be applied.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let rec select_words' (s:string) (n:int) =\n        if n = 0 then\n            s.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n            |> List.ofArray\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph99k7hql.fsx(45,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmph99k7hql.fsx(45,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let rec select_words_rec (s:string) (n:int) = \n        if s.Length = 0 then \n            [], n\n        else\n            let words = s.Split(' ')\n            if words.Length <> n then \n                [], n\n            else\n                let words = words |> Array.take n\n                words |> Array.map (fun word -> word.Trim())\n                |> Array.map (fun word -> word.ToLower())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToLower())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjwgkuskw.fsx(48,1): error FS0010: Incomplete structured construct at or before this point in lambda expression\n\n\n\n/tmp/tmpjwgkuskw.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (18:13). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let rec select_words_rec s n = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> Array.map (fun word -> word.Trim())\n                |> Array.filter (fun word -> word.Length > n)\n            words |> List.ofArray\n    select_words_rec s n\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n    let words = \n        s.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n        |> Array.map (fun x -> x.Trim())\n        |> Array.filter (fun x -> x <> \"\")\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675520675,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpww9tvh7y.fsx(45,1): error FS0010: Incomplete structured construct at or before this point in lambda expression. Expected '->' or other token.\n\n\n\n/tmp/tmpww9tvh7y.fsx(45,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (13:5). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}