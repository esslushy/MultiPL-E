{
  "name": "HumanEval_47_median",
  "language": "fs",
  "prompt": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n",
  "tests": "let test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i l =\n        match l with\n        | [] -> 0.0\n        | x::xs ->\n            if i = 0 then\n                let m = x / float (List.length xs)\n                loop (i-1) xs\n            else\n                let m = x / float (List.length xs)\n                loop (i-1) xs\n                m\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520544,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp_jmuvfx.fsx(16,17): warning FS0020: The result of this expression has type 'float' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop acc l = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            let (x', xs') = List.partition (fun y -> x = y) xs\n            loop (x'@acc) xs'\n    loop [] l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuarmit7n.fsx(16,39): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop acc l = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            let xs = List.rev xs\n            let rec loop acc xs = \n                match xs with \n                | [] -> acc\n                | x::xs -> loop (x::acc) xs\n            loop acc xs\n    loop [] l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgpxcn76q.fsx(20,39): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i = \n        if i < l then loop (i + 1)\n        else i\n    loop 0\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmcqv8nes.fsx(13,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i l =\n        match l with\n        | [] -> 0.0\n        | x::xs ->\n            if i = 0 then\n                x\n            else\n                loop (i-1) xs\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i acc = \n        if i = l then acc\n        else loop (i - 1) (acc + (l - i) / 2.0)\n    loop 0.0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjlc006e0.fsx(9,42): error FS0043: The type 'float' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i l = \n        if i = l then l else loop (i - 1) (l - 1)\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpngb4pm94.fsx(12,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i l =\n        match l with\n        | [] -> 0.0\n        | x::xs ->\n            let xs = x::xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i-1) xs\n            let xs = loop (i+1) xs\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8v4qenh7.fsx(45,13): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i l =\n        match l with\n        | [] -> 0.0\n        | x::xs ->\n            let xs = x::xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\n            let xs = loop (i+1) xs\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf1ktjxkj.fsx(45,13): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop acc l = \n        match l with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsdbl2hxt.fsx(14,39): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            let xs' = List.rev xs\n            let xs'' = List.rev acc\n            loop (x::xs')\n    loop []\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz_ytpw8f.fsx(17,39): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i l = \n        match l with \n        | [] -> 0.0\n        | x::xs -> \n            if i = 0 then \n                loop (i-1) xs\n            else \n                let x' = List.item (i-1) xs\n                let x'' = List.item (i-1) xs\n                if x' < x'' then loop (i-1) xs\n                else loop (i-1) xs\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop acc l = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            let xs = List.rev xs\n            let xs = List.sort xs\n            let xs = List.rev xs\n            let xs = List.sort xs\n            let xs = List.rev xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\n            let xs = List.sort xs\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdp62lvwf.fsx(54,13): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i l = \n        match l with \n        | [] -> 0.0\n        | x::xs -> \n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx46_h2sl.fsx(54,13): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop acc l = \n        match l with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsdbl2hxt.fsx(14,39): error FS0001: This expression was expected to have type\n    'int list'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i l = \n        if i = l then l else loop (i - 1) (l - 1)\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpngb4pm94.fsx(12,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv2e8l_m8.fsx(10,20): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i = \n        if i < l.Length then \n            let x = l.[i]\n            let y = loop (i+1)\n            if x < y then loop (i+1)\n            else y\n        else l.Length-1\n    loop 0\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa701slg9.fsx(8,16): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop i l = \n        if i = l then \n            l\n        else \n            let mid = (i + l) / 2\n            let x = l - mid\n            if x < 0 then loop (i - 1) x\n            elif x > 0 then loop (i + 1) x\n            else loop (i - 1) x\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplbz9m19c.fsx(19,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median l = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc + x) xs\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675520543,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjeky24r6.fsx(14,49): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'float'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}