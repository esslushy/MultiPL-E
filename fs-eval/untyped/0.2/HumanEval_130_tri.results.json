{
  "name": "HumanEval_130_tri",
  "language": "fs",
  "prompt": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n",
  "tests": "let test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n = 0 then []\n    elif n = 1 then [1]\n    elif n = 2 then [1; 2]\n    elif n = 3 then [1; 2; 3]\n    elif n = 4 then [3; 2; 1]\n    else [1; 2; 3; 4]\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    let rec fib n = \n        if n = 0 then []\n        elif n % 2 = 0 then [1; n / 2]\n        else fib (n / 2) @ (fib (n / 2) @ [n / 2])\n    fib n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    let rec fib n = \n        if n < 0 then []\n        else\n            let x = n + 1\n            let y = fib (n - 1)\n            [x; y]\n    fib n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520523,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkbo0mfxf.fsx(22,17): error FS0001: All elements of a list must be implicitly convertible to the type of the first element, which here is 'int'. This element has type 'int list'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n = 0 then []\n    elif n = 1 then [1]\n    elif n = 2 then [1; 2]\n    elif n = 3 then [1; 2; 3]\n    elif n = 4 then [1; 2; 3; 4]\n    else [1; 2; 3; 4; 5]\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    let rec fib n =\n        if n = 0 then []\n        elif n % 2 = 0 then [n / 2]\n        else fib (n / 2) @ [n / 2]\n    fib n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    let rec fib n = \n        if n = 0 then []\n        else \n            let x = n / 2\n            let y = n - x\n            if x < y then fib (x + 1) @ fib (y + 1)\n            else fib (x + 1) @ fib (y + 1) @ fib (x + y)\n    fib n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n < 0 then failwith \"n must be positive\"\n    if n = 0 then []\n    else\n        let rec loop n =\n            if n = 0 then []\n            else\n                let (n1, n2) = (n / 2, n % 2)\n                if n1 = 0 then [n1, n2]\n                else loop (n1 + n2)\n        loop n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520523,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplz6is7tm.fsx(29,26): error FS0001: This expression was expected to have type\n    'int * int'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n = 0 then []\n    elif n = 1 then [1]\n    elif n = 2 then [1; 2]\n    elif n = 3 then [1; 2; 3]\n    else [1; 2; 3; 4]\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n = 0 then []\n    else\n        let rec fib n =\n            if n = 0 then []\n            else\n                let x = n / 2\n                let y = n - x\n                if y = 0 then [x]\n                else fib (y - 1) @ fib (x - 1)\n        fib n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n = 0 then []\n    elif n = 1 then [1]\n    elif n = 2 then [1; 2]\n    elif n = 3 then [1; 2; 3]\n    else [1; 2; 3; 4]\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n < 0 then failwith \"n must be non-negative\"\n    if n = 0 then []\n    else\n        let rec loop n =\n            if n = 0 then []\n            else\n                let first = n / 2\n                let second = n - first\n                [first; second]\n        loop n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n = 0 then []\n    else\n        let rec loop n =\n            if n = 0 then []\n            else\n                let x = n / 2\n                let y = n - x\n                if y = 0 then [x, y]\n                else loop (y)\n        loop n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520523,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp29515bbv.fsx(29,26): error FS0001: This expression was expected to have type\n    'int * int'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n = 0 then []\n    else\n        let rec loop n =\n            if n = 0 then []\n            else\n                let first = n / 2\n                let second = n - first\n                let third = first + second\n                [first; second; third]\n        loop n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n = 0 then []\n    elif n = 1 then [1]\n    elif n = 2 then [1; 2]\n    elif n = 3 then [1; 2; 3]\n    else [1; 2; 3; 4]\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    let rec fib n =\n        if n = 0 then []\n        else\n            let x = n / 2\n            let y = n - x\n            if y = 0 then [x]\n            else fib (y - 1) @ fib (x - 1) @ fib (y - 2)\n    fib n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    let rec fib n =\n        if n = 0 then [1]\n        elif n = 1 then [1]\n        elif n = 2 then [2]\n        elif n = 3 then [3]\n        elif n = 4 then [2; 3]\n        elif n = 5 then [3; 2]\n        elif n = 6 then [2; 3; 4]\n        elif n = 7 then [3; 2; 4]\n        elif n = 8 then [2; 3; 4; 5]\n        else [1; 2; 3; 4; 5; 6; 7; 8]\n    fib n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n = 0 then []\n    else\n        let rec loop n = \n            if n = 0 then []\n            else \n                let first = n / 2\n                let second = n - first\n                let third = n + second\n                [first; second; third]\n        loop n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    if n = 0 then []\n    else \n        let rec fib n = \n            if n = 0 then []\n            else \n                let x = n / 2\n                if n % 2 = 0 then fib (x + 1)\n                else fib (x + 2)\n        fib n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    let rec loop n = \n        if n = 0 then []\n        else \n            let first = n / 2\n            let second = n - first\n            [first; second]\n    loop n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri n = \n    let rec fib n =\n        if n = 0 then []\n        elif n % 2 = 0 then [1; n / 2]\n        else fib (n / 2) @ (n / 2) :: fib (n / 2)\n    fib n\nlet test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()",
      "timestamp": 1675520524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}