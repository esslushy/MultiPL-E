{
  "name": "HumanEval_66_digitSum",
  "language": "fs",
  "prompt": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n",
  "tests": "let test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.toArray |> Array.rev\n    let lower = s |> Seq.toArray |> Array.rev\n    let sum = Array.sum upper\n    let sum2 = Array.sum lower\n    sum + sum2\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy1hueihp.fsx(19,26): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.map (fun c -> c.ToString()) |> Seq.toArray\n    let lower = s |> Seq.map (fun c -> c.ToString()) |> Seq.toArray\n    let sum = Array.sum upper\n    let sum2 = Array.sum lower\n    sum + sum2\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplhe5ol2h.fsx(14,25): error FS0001: The type 'string' does not support the operator 'get_Zero'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upperChars = s |> Seq.map (fun c -> c.ToString()) |> Seq.toList\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let upperChars = upperChars |> List.map (fun c -> c.ToString())\n    let\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520724,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5wkj3wxp.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        sum <- sum + (int s.[i])\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy9vtkv07.fsx(13,18): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let rec digitSum' s = \n        match s with\n        | '0' -> 0\n        | '1' -> 1\n        | '2' -> 2\n        | '3' -> 3\n        | '4' -> 4\n        | '5' -> 5\n        | '6' -> 6\n        | '7' -> 7\n        | '8' -> 8\n        | '9' -> 9\n        | 'A' -> 10\n        | 'B' -> 11\n        | 'C' -> 12\n        | 'D' -> 13\n        | 'E' -> 14\n        | 'F' -> 15\n        | 'G' -> 16\n        | 'H' -> 17\n        | 'I' -> 18\n        | 'J' -> 19\n        | 'K' -> 20\n        | 'L' -> 21\n        | 'M' -> 22\n        | 'N' -> 23\n        | 'O' -> 24\n        | 'P' -> 25\n        | 'Q' -> 26\n        | 'R' -> 27\n        | 'S' -> 28\n        | 'T' -> 29\n        | 'U' -> 30\n        | 'V' -> 31\n        | 'W' -> 32\n        | 'X' -> 33\n        | 'Y' -> 34\n        | 'Z' -> 35\n        | _ -> failwith \"Invalid character\"\n    digitSum' s\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsae7uh56.fsx(54,21): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.takeWhile (fun c -> c >= 'A' && c <= 'Z')\n    let lower = s |> Seq.skipWhile (fun c -> c >= 'A' && c <= 'Z')\n    let digits = upper |> Seq.map (fun c -> c.ToString()) |> Seq.toArray\n    let sum = digits |> Array.sum\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpof5x960g.fsx(15,25): error FS0001: The type 'string' does not support the operator 'get_Zero'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upperChars = s |> Seq.toArray |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upper\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520724,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpky6hidgu.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upperChars = s |> Seq.map (fun c -> c.ToString()) |> Seq.toArray\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let upperChars = upperChars |> Array.map (fun c -> c.ToString())\n    let\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520724,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6bup6hey.fsx(34,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.takeWhile (fun c -> c >= 'A' && c <= 'Z')\n    let lower = s |> Seq.skipWhile (fun c -> c >= 'a' && c <= 'z')\n    let digits = Seq.map (fun c -> (int c) - (int 'a')) upper\n    let digits' = Seq.map (fun c -> (int c) - (int 'A')) lower\n    Seq.sum digits'\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.toArray |> Array.rev |> Array.map (fun c -> c.ToString())\n    let lower = s |> Seq.toArray |> Array.rev |> Array.map (fun c -> c.ToString())\n    let sum = Array.fold (fun acc c -> acc + int c) 0 upper\n    let sum = Array.fold (fun acc c -> acc + int c) 0 lower\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let mutable sum = 0\n    for c in s do\n        sum <- sum + (int c)\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.toArray\n    let lower = s |> Seq.toArray |> Array.rev\n    let sum = Array.sum lower\n    let mutable sum = sum\n    for i = 0 to upper.Length - 1 do\n        sum <- sum + upper.[i]\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwnnzfoc9.fsx(21,26): error FS0001: This expression was expected to have type\n    'char'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.takeWhile (fun c -> c >= 'A' && c <= 'Z')\n    let lower = s |> Seq.skipWhile (fun c -> c >= 'A' && c <= 'Z')\n    let digits = Seq.takeWhile (fun c -> c >= '0' && c <= '9')\n    let digits2 = Seq.skipWhile (fun c -> c >= '0' && c <= '9')\n    let digits3 = Seq.takeWhile (fun c -> c >= 'A' && c <= 'Z')\n    let digits4 = Seq.skipWhile (fun c -> c >= 'A' && c <= 'Z')\n    let digits5 = Seq.takeWhile (fun c -> c >= '0' && c <= '9')\n    let digits6 = Seq.skipWhile (fun c -> c >= '0' && c <= '9')\n    let digits7 = Seq.takeWhile (fun c -> c >= 'A' && c <= 'Z')\n    let digits8 = Seq.skipWhile (fun c -> c >= 'A' && c <= 'Z')\n    let digits9 = Seq.takeWhile (fun c -> c >= '0' && c <= '9')\n    let digits10 = Seq.skipWhile (fun c -> c >= '0' && c <= '9')\n    let digits11 = Seq.takeWhile (fun c -> c >= 'A' && c <= 'Z')\n    let digits12 = Seq.skipWhile (fun c -> c >= 'A' && c <= 'Z')\n    let digits13 = Seq.takeWhile (fun c -> c >= '0' && c <= '9')\n    let digits14 = Seq.skipWhile (fun c -> c >= '0' && c <= '9')\n    let digits15 = Seq.takeWhile (fun c -> c >= 'A' && c <= 'Z')\n    let digits16 = Seq.skipWhile (fun c -> c >= 'A' && c <= 'Z')\n    let digits17 = Seq.takeWhile (fun c -> c >= '0' && c <= '9')\n    let digits18 = Seq.skipWhile (fun c -> c\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520724,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfrahit8s.fsx(32,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (31:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfrahit8s.fsx(32,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upperChars = s |> Seq.map (fun c -> c.ToString()) |> Seq.toArray\n    let upperChars = Array.mapi (fun i c -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map (fun (i, c) -> i, c) upperChars\n    let upperChars = Array.map\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520724,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6k88pzcy.fsx(32,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.toArray |> Array.map (fun c -> c.ToString()) |> Array.reduce (+)\n    let lower = s |> Seq.toArray |> Array.map (fun c -> c.ToString()) |> Array.reduce (fun a b -> a + b)\n    upper + lower\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ws8ykwe.fsx(17,26): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upperChars = s.ToCharArray()\n    let upperCharsLength = upperChars.Length\n    let mutable sum = 0\n    for i = 0 to upperCharsLength - 1 do\n        sum <- sum + (int upperChars.[i])\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520724,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplj8ypmfo.fsx(12,22): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let rec digitSum' s acc = \n        match s with\n        | \"\" -> acc\n        | _ -> digitSum' (s.Substring(1)) (acc + (int s.[0]))\n    digitSum' s 0\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.takeWhile (fun c -> c >= 'A' && c <= 'Z')\n    let lower = s |> Seq.skipWhile (fun c -> c >= 'a' && c <= 'z')\n    let digits = Seq.toArray upper\n    Seq.toArray lower\n    |> Array.map (fun c -> if c >= '0' && c <= '9' then int c else int 'A' - int '0')\n    |> Array.sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.takeWhile (fun c -> c <> 'A' && c <> 'Z')\n    let lower = s |> Seq.skipWhile (fun c -> c <> 'A' && c <> 'Z')\n    let digits = \n        upper \n        |> Seq.map (fun c -> \n            let upper = c |> Seq.takeWhile (fun c -> c <> 'A' && c <> 'Z')\n            let lower = c |> Seq.skipWhile (fun c -> c <> 'A' && c <> 'Z')\n            let digits = upper @ lower\n            digits |> Seq.map (fun c -> c.ToString()))\n    let upper = digits |> Seq.toList\n    let lower = digits |> Seq.toList\n    let sum = \n        upper \n        |> Seq.map (fun c -> \n            let upper = c |> Seq.takeWhile (fun c -> c <> 'A' && c <> 'Z')\n            let lower = c |> Seq.skipWhile (fun c -> c <> 'A' && c <> 'Z')\n            let digits = \n                upper \n                |> Seq.map (fun c -> \n                    let upper = c |> Seq.takeWhile (fun c -> c <> 'A' && c <> 'Z')\n                    let lower = c |> Seq.skipWhile (fun c -> c <> 'A' && c <> 'Z')\n                    let digits = upper @ lower\n                    digits |> Seq.map (fun c -> c.ToString()))\n            let digits = \n                digits |> Seq.toList\n            let upper = digits |> Seq.map (fun c -> c.ToString())\n            let lower = digits |> Seq.toList\n            let sum = upper @ lower\n            sum |> Seq.map (fun c -> c.ToString()))\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_brnovae.fsx(17,30): error FS0001: The type 'char' is not compatible with the type 'seq<'a>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum s = \n    let upper = s |> Seq.toArray |> Array.rev |> Array.map (fun c -> c.ToString())\n    let lower = s |> Seq.toArray |> Array.rev |> Array.map (fun c -> c.ToString())\n    let sum = upper |> Array.sumBy (fun c -> lower |> Array.sumBy (fun c -> if c = c then 1 else 0))\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675520725,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}