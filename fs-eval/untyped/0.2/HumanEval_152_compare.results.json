{
  "name": "HumanEval_152_compare",
  "language": "fs",
  "prompt": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n",
  "tests": "let test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.toList |> Array.sum\n    let diff = score - guess |> Array.toList |> Array.sum\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp73zyp6se.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> Array.map (fun x -> x.Score)\n    let guess = guess |> Array.toList\n    let score = score |> Array.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Score - score.[0])\n    diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmrwdzh5b.fsx(13,41): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength = Array.length guess\n    let guessLength\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4lkzi88d.fsx(64,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x.Value)\n    let score = guess |> Array.map (fun x -> x.Value)\n    let diff = Array.zip guess score\n    let diff = Array.map (fun (x,y) -> abs (x-y)) diff\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqjj5yer_.fsx(12,46): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let diff = score |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9wk214mw.fsx(13,82): error FS0001: Expecting a type supporting the operator '-' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.toList |> Array.map (fun x -> x - guess.[0])\n    let diff = score |> Array.map (fun x -> x / guess.Length)\n    let diff = diff |> Array.map (fun x -> abs x)\n    let diff = diff |> Array.map (fun x -> abs x)\n    diff |> Array.max\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdbf3ltt_.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.copy guess\n    let score = Array.copy guess\n    let rec loop guess score = \n        match guess with\n        | [] -> score\n        | x::xs -> \n            if x = score.[0] then loop xs score\n            else loop xs score\n    loop guess score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6_4pd62j.fsx(18,20): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq guess\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.ofSeq guess\n    let score = Array.ofSeq score\n    let guess = Array.\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7zfm3iru.fsx(58,22): error FS0599: Missing qualification after '.'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let rec loop guess score = \n        match guess, score with\n        | [], [] -> [0]\n        | _, [] -> [0]\n        | _, _ -> \n            let guess = guess |> List.rev\n            let score = score |> List.rev\n            let rec loop guess score = \n                match guess, score with\n                | [], [] -> [0]\n                | _, [] -> [0]\n                | _, _ -> \n                    let guess = guess |> List.rev\n                    let score = score |> List.rev\n                    let rec loop guess score = \n                        match guess, score with\n                        | [], [] -> [0]\n                        | _, [] -> [0]\n                        | _, _ -> \n                            let guess = guess |> List.rev\n                            let score = score |> List.rev\n                            let rec loop guess score = \n                                match guess, score with\n                                | [], [] -> [0]\n                                | _, [] -> [0]\n                                | _, _ -> \n                                    let guess = guess |> List.rev\n                                    let score = score |> List.rev\n                                    let rec loop guess score = \n                                        match guess, score with\n                                        | [], [] -> [0]\n                                        | _, [] -> [0]\n                                        | _, _ -> \n                                            let guess = guess |> List.rev\n                                            let score = score |> List.rev\n                                            let rec loop guess score = \n                                                match guess, score with\n                                                | [], [] -> [0]\n                                                | _, [] -> [0]\n                                                | _, _ -> \n                                                    let guess = guess |> List.rev\n                                                    let score = score |> List.rev\n                                                    let rec loop guess score = \n                                                        match guess, score with\n                                                        | [], [] -> [0]\n                                                        | _, [] -> [0]\n                                                        | _, _ -> \n                                                            let\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppjhbxh5n.fsx(64,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let guess = guess |> List.toArray\n    let score = score |> List.map (fun x -> x.Score)\n    let diff = guess |> List.map (fun x -> x.Score - score.[0])\n    diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4me9stm0.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList\n    let guess = guess |> Array.toList\n    let score = score |> Array.toList\n    let diff = guess |> List.map (fun guess -> guess - score) |> List.sum\n    if diff = 0 then\n        score\n    else\n        diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnmfpvc24.fsx(14,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let rec compare' guess score =\n        match guess with\n        | [] -> score\n        | x::xs -> \n            match x with\n            | x when x = guess -> score\n            | x when x = guess -> score\n            | _ -> compare' xs score\n    compare' guess 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkq0whyqv.fsx(17,26): error FS0001: Type mismatch. Expecting a\n    ''a'    \nbut given a\n    ''a list'    \nThe types ''a' and ''a list' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> Array.map (fun x -> x.Score) |> Array.sum\n    let diff = guess |> List.map (fun x -> x.Score - score) |> List.sum\n    if diff = 0 then guess\n    else [diff]\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx2ho0pf4.fsx(13,41): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'd[]'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.guess)\n    let score = guess |> Array.map (fun x -> x * game.score)\n    score\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpri6_7u3o.fsx(12,50): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x - game.[x])\n    let score = guess |> Array.map (fun x -> x * game.[x])\n    let diff = score |> Array.sum\n    if diff = 0 then 0 else diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa736hile.fsx(12,50): error FS0752: The operator 'expr.[idx]' has been used on an object of indeterminate type based on information prior to this program point. Consider adding further type constraints\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess.[x])\n    let score = guess |> Array.sumBy (fun (x,y) -> y - x)\n    let diff = score - guess.[0]\n    if diff < 0 then diff else 0\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuxmgg8ww.fsx(14,24): error FS0001: The type 'int * int' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = game |> Array.toList |> List.map (fun x -> x.Score)\n    let guess = guess |> List.map (fun x -> x.Guess)\n    let score = score |> List.map (fun x -> x.Score)\n    let diff = List.zip guess score\n    diff |> List.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9qyhwvt1.fsx(13,60): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    let diff = score |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    diff |> Array.max\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpibfqj7ix.fsx(13,82): error FS0001: Expecting a type supporting the operator '-' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.toList\n    let score = guess |> Array.toList |> Array.map (fun x -> x - guess.[0])\n    let diff = score |> Array.map (fun x -> x / guess.Length)\n    diff\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjveg43ui.fsx(13,26): error FS0001: Type mismatch. Expecting a\n    ''a list -> 'b'    \nbut given a\n    ''c[] -> 'c list'    \nThe type ''a list' does not match the type ''b[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nlet compare game guess = \n    let guess = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> x - y))\n    let score = guess |> Array.map (fun x -> x, guess |> Array.map (fun y -> y - x))\n    score |> Array.map (fun (x, y) -> abs (x - y)) |> Array.sum\nlet test() = \n  let candidate = compare\n  assert (candidate [1; 2; 3; 4; 5; 1] [1; 2; 3; 4; 2; -2] = [0; 0; 0; 0; 3; 3])\n  assert (candidate [0; 0; 0; 0; 0; 0] [0; 0; 0; 0; 0; 0] = [0; 0; 0; 0; 0; 0])\n  assert (candidate [1; 2; 3] [-1; -2; -3] = [2; 4; 6])\n  assert (candidate [1; 2; 3; 5] [-1; 2; 3; 4] = [2; 0; 0; 1])\n  0\n\ntest()",
      "timestamp": 1675520719,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn8v15ca9.fsx(13,82): error FS0001: Expecting a type supporting the operator '-' but given a tuple type\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}