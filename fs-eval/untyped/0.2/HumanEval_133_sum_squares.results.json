{
  "name": "HumanEval_133_sum_squares",
  "language": "fs",
  "prompt": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n",
  "tests": "let test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_acc lst acc = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            let acc = acc + x * x\n            sum_squares_acc xs (acc + x)\n    sum_squares_acc lst 0\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0nwzctg0.fsx(20,22): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'float'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_acc lst acc =\n        match lst with\n        | [] -> acc\n        | x :: xs -> sum_squares_acc xs (acc + x)\n    sum_squares_acc lst 0\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxncvrvw6.fsx(18,22): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'float'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec loop acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> loop (acc + x * x)\n    loop 0\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwjyj3vs_.fsx(18,22): error FS0001: The type 'int' does not match the type 'float'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_acc lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + (x + x)\n            sum_squares_acc xs\n    sum_squares_acc lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec loop acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> loop (acc + x * x) xs\n    loop 0 lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkcysnxu1.fsx(14,20): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_rec acc lst = \n        match lst with\n        | [] -> acc\n        | x :: xs -> sum_squares_rec (acc + x) xs\n    sum_squares_rec 0 lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkfq5_t3v.fsx(18,22): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'float'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x * xs) xs\n    loop 0 lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpthyg_wzf.fsx(17,22): error FS0001: The type 'float list' does not match the type 'float'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_acc lst acc = \n        match lst with\n        | [] -> acc\n        | x :: xs -> sum_squares_acc xs (acc + x * x)\n    sum_squares_acc lst 0\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzb36bued.fsx(18,22): error FS0001: The type 'int' does not match the type 'float'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec loop acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> loop (acc + x * x)\n    loop 0\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwjyj3vs_.fsx(18,22): error FS0001: The type 'int' does not match the type 'float'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_acc = function\n        | [] -> 0\n        | x::xs -> sum_squares_acc xs + sum_squares_acc xs\n    sum_squares_acc lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_acc lst acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> sum_squares_acc xs (acc + x*x)\n    sum_squares_acc lst 0\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm5hpqzru.fsx(18,22): error FS0001: The type 'int' does not match the type 'float'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_rec acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            let acc' = acc + x * x\n            sum_squares_rec acc'\n    sum_squares_rec 0\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdqpnsvxr.fsx(20,22): error FS0001: The type 'int' does not match the type 'float'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_acc = function\n        | [] -> 0\n        | x :: xs ->\n            let sum = x + (x + x) / 2\n            sum_squares_acc xs\n    sum_squares_acc lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwqhpjdro.fsx(19,22): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'float'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_rec acc lst = \n        match lst with\n        | [] -> acc\n        | x :: xs -> sum_squares_rec (acc + x) xs\n    sum_squares_rec 0 lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkfq5_t3v.fsx(18,22): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'float'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_acc lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            let sum_squares_acc_x = sum_squares_acc x\n            sum_squares_acc_x + (x*x)\n    sum_squares_acc lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxlckckk5.fsx(15,53): error FS0001: Type mismatch. Expecting a\n    ''a list'    \nbut given a\n    ''a'    \nThe types ''a' and ''a list' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_lst acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> sum_squares_lst (acc + x*x) xs\n    sum_squares_lst 0 lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmn4mwlc0.fsx(14,20): error FS0001: Type mismatch. Expecting a\n    ''a -> 'b'    \nbut given a\n    ''b'    \nThe types ''a' and ''b -> 'a' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_loop acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> sum_squares_loop (acc + x*x) xs\n    sum_squares_loop 0 lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb8fqhxs_.fsx(18,22): error FS0001: The type 'int' does not match the type 'float'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec loop acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9s0mpvfa.fsx(18,22): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'float'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec sum_squares_loop acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs -> sum_squares_loop (acc + x*x) xs\n    sum_squares_loop 0 lst\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpycw1fhie.fsx(18,22): error FS0001: The type 'int' does not match the type 'float'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n    let rec loop acc = \n        match lst with \n        | [] -> acc\n        | x::xs -> loop (acc + x * x)\n    loop 0\nlet test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()",
      "timestamp": 1675520638,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6h_3zks1.fsx(18,22): error FS0001: The type 'int' does not match the type 'float'\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}