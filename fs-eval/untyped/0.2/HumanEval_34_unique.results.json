{
  "name": "HumanEval_34_unique",
  "language": "fs",
  "prompt": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n",
  "tests": "let test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop i = \n        let acc = \n            match i with \n            | 0 -> []\n            | _ -> [i-1]\n        loop (i-1)\n    loop 0\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop i = \n        match i with \n        | 0 -> []\n        | _ -> \n            let newList = \n                l \n                |> List.map (fun x -> x + 1)\n            loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec aux acc = function\n        | [] -> acc\n        | x::xs -> aux (x::acc) xs\n    aux [] l\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] l\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            let acc = List.fold (fun acc x -> acc || loop (x::acc)) acc xs\n            loop acc\n    loop []\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520545,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyv6fzxl4.fsx(9,60): error FS0001: This expression was expected to have type\n    'bool'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop i = \n        match i with\n        | 0 -> []\n        | i -> \n            let newList = \n                match l with\n                | [] -> []\n                | h::t -> \n                    if h = i then \n                        [h]\n                    else \n                        loop (i-1)\n            loop (i-1)\n    loop 0\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop i = \n        match l with \n        | [] -> []\n        | x::xs -> \n            if i = 0 then x::xs\n            else loop (i-1)\n    loop 0\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc @ [x]) xs\n    loop [] l\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop acc =\n        match l with\n        | [] -> acc\n        | hd::tl ->\n            if hd = hd' then loop (hd::acc)\n            else loop (hd::acc)\n    loop []\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520545,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp4fn1etz.fsx(9,21): error FS0039: The value or constructor 'hd'' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec aux acc = function\n        | [] -> acc\n        | x::xs -> \n            let newAcc = List.fold (fun acc x -> aux (acc + x) x) acc xs\n            aux newAcc xs\n    aux [] l\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520545,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0nvnfe8q.fsx(8,71): error FS0001: Type mismatch. Expecting a\n    ''a list list'    \nbut given a\n    ''a list'    \nThe types ''a' and ''a list' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop i = \n        if i < l then \n            let x = l - i\n            if x <> 0 then \n                loop (i + 1)\n            else\n                i\n        else\n            i\n    loop 0\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520545,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp55quxfo_.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec aux acc = function\n        | [] -> acc\n        | x::xs ->\n            if List.contains x l then aux (x::acc) xs\n            else aux (x::acc) xs\n    aux [] l\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec aux acc = function\n        | [] -> acc\n        | x :: xs -> aux (x :: acc) xs\n    aux [] l\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop acc =\n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x = xs.[0] then loop (acc@[x])\n            else loop (acc@[x])\n    loop []\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop i = \n        if i = l then \n            [0..l-1]\n        else\n            let x = l - i\n            if x = 0 then \n                [i]\n            else\n                loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520545,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7v9oz4hv.fsx(17,21): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec aux acc = function\n        | [] -> acc\n        | x :: xs -> aux (x :: acc) xs\n    aux [] l\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop i =\n        match l with\n        | [] -> []\n        | x::xs ->\n            if i = 0 then x::xs\n            else loop (i-1)\n    loop 0\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec aux acc = function\n        | [] -> acc\n        | x::xs -> aux (x::acc) xs\n    aux [] l\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            let newAcc = List.map (fun y -> if y = x then 0 else 1) acc\n            loop newAcc\n    loop []\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique l = \n    let rec loop acc = \n        match l with \n        | [] -> acc\n        | hd::tl -> \n            if hd = hd' then loop (hd::acc)\n            else loop (hd::acc)\n    loop []\nlet test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()",
      "timestamp": 1675520545,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpru_fal_v.fsx(9,21): error FS0039: The value or constructor 'hd'' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}