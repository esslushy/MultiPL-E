{
  "name": "HumanEval_36_fizz_buzz",
  "language": "fs",
  "prompt": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n",
  "tests": "let test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = int (n % 11)\n            let remainder = n / 11\n            if remainder = 0 then digit\n            else fizzBuzz (remainder - 1)\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0\n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0 \n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0 \n        else \n            let digit = n % 11 \n            let remainder = n / 11 \n            if remainder = 0 then digit\n            else fizzBuzz (remainder)\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n =\n        if n = 0 then 0\n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz (n: int) = \n        if n = 0 then 0\n        elif n % 11 = 0 then n / 11\n        elif n % 13 = 0 then n / 13\n        else fizzBuzz (n / 11) + fizzBuzz (n % 11)\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = int (n % 11)\n            let remainder = n / 11\n            if remainder = 0 then digit\n            else fizzBuzz (remainder)\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = n % 11\n            if digit = 0 then fizzBuzz (n / 11)\n            else fizzBuzz (n / 11) + fizzBuzz (n % 11)\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec loop i = \n        if i = n then i\n        else loop (i + 1)\n    loop 0\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizz_buzz_rec (n: int) = \n        if n = 0 then 0\n        else\n            let digit = n % 11\n            if digit = 0 then fizz_buzz_rec (n / 11)\n            else fizz_buzz_rec (n / 11) + fizz_buzz_rec (n % 11)\n    fizz_buzz_rec n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = n % 11\n            let remainder = n / 11\n            if remainder = 0 then digit\n            else fizzBuzz (remainder - 1)\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0 \n        else \n            let digit = (n % 11) + 1\n            if digit = 7 then fizzBuzz (n / 11)\n            else fizzBuzz (n / 10) + fizzBuzz (digit - 1)\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0 \n        else if n % 11 = 0 then fizzBuzz (n / 11) + 1\n        else if n % 13 = 0 then fizzBuzz (n / 13) + 1\n        else if n % 17 = 0 then fizzBuzz (n / 17) + 1\n        else if n % 19 = 0 then fizzBuzz (n / 19) + 1\n        else if n % 31 = 0 then fizzBuzz (n / 31) + 1\n        else if n % 37 = 0 then fizzBuzz (n / 37) + 1\n        else if n % 41 = 0 then fizzBuzz (n / 41) + 1\n        else if n % 43 = 0 then fizzBuzz (n / 43) + 1\n        else if n % 47 = 0 then fizzBuzz (n / 47) + 1\n        else if n % 59 = 0 then fizzBuzz (n / 59) + 1\n        else if n % 61 = 0 then fizzBuzz (n / 61) + 1\n        else if n % 67 = 0 then fizzBuzz (n / 67) + 1\n        else if n % 71 = 0 then fizzBuzz (n / 71) + 1\n        else if n % 73 = 0 then fizzBuzz (n / 73) + 1\n        else if n % 77 = 0 then fizzBuzz (n / 77) + 1\n        else if n % 79 = 0 then fizzBuzz (n / 79) + 1\n        else if n % 83 = 0 then fizzBuzz (n / 83) + 1\n        else if n % 87 = 0 then fizzBuzz (n / 87) + 1\n        else if n % 89 = 0 then fizzBuzz (n / 89) + 1\n        else if n % 91 = 0 then fizzBuzz (n / 91) + 1\n        else if n % 93 = 0 then fizzBuzz (n / 93) + 1\n        else if n % 97 = 0 then fizzBuzz (n / 97) + 1\n        else if n % 99 = 0 then fizzBuzz (n / 99) + 1\n        else if n % 101 = 0 then fizzBuzz (n / 101) + 1\n        else if n % 103 = 0 then fizzBuzz (\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477033,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2s_eq1yl.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp2s_eq1yl.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp2s_eq1yl.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp2s_eq1yl.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp2s_eq1yl.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:9). Try indenting this token ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0 \n        else \n            let digit = (n % 11) + 1\n            let remainder = n / 11\n            fizzBuzz (remainder + digit)\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizz_buzz_n (n: int) = \n        if n = 0 then 0\n        elif n = 1 then 1\n        elif n = 2 then 2\n        elif n = 3 then 3\n        elif n = 4 then 4\n        elif n = 5 then 5\n        elif n = 6 then 6\n        elif n = 7 then 7\n        else fizz_buzz_n (n - 1)\n    fizz_buzz_n n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0 \n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0\n        elif n % 11 = 0 then n / 11\n        else n / 11 + fizzBuzz (n / 10)\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec loop i = \n        if i = n then i\n        else loop (i + 1)\n    loop 0\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0\n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz (n: int): int  = \n    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = int (n % 11)\n            let remainder = n / 11\n            fizzBuzz (remainder + digit)\n    fizzBuzz n\nlet test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()",
      "timestamp": 1675477034,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}