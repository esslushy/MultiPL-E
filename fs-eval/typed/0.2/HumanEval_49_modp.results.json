{
  "name": "HumanEval_49_modp",
  "language": "fs",
  "prompt": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n",
  "tests": "let test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop n p = \n        if n = p then p\n        else loop (n - 1) (p - 1)\n    loop n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec modp' (p: int) (n: int) = \n        if n = 0 then p\n        else if n % p = 0 then p\n        else modp' (p - 1) (n / p)\n    modp' p n\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop i = \n        if i < n then \n            loop (i + p)\n        else \n            i\n    loop (n - p)\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop n p =\n        if n = 0 then p\n        else loop (n - 1) (p % n)\n    loop n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop i =\n        if i = n then i\n        else loop (i + 1)\n    loop p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec modp' n p = \n        if n = 0 then p\n        elif n % p = 0 then n / p\n        else modp' (n / p) (p - 1)\n    modp' n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop n p = \n        if n = 0 then p\n        else loop (n-1) (p % n)\n    loop n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop n p = \n        if n = 0 then p\n        elif n % p = 0 then loop (n / p) (n % p)\n        else loop (n / p) (n % p)\n    loop n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop n p = \n        if n = 0 then p\n        elif n % p = 0 then loop (n / p) (p - 1)\n        else loop (n / p) (n % p)\n    loop n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop i =\n        if i < n then\n            let p' = p - i\n            if p' < 0 then\n                loop (i + p')\n            else\n                loop (i + p')\n        else\n            i\n    loop (n - p)\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec modp' (n: int) (p: int): int = \n        if n = 0 then p\n        elif n % p = 0 then n / p\n        else modp' (n / p) (p - 1)\n    modp' n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec modp' (n: int) (p: int) = \n        if n % p = 0 then n / p\n        else modp' (n / p) (p - 1)\n    modp' n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec modp' n p = \n        if n = 0 then p\n        else \n            let n' = n - 1\n            if n' = 0 then p\n            else \n                let p' = p - 1\n                if n' = 1 then p'\n                else \n                    let p'' = p' - 1\n                    if n' = 2 then p''\n                    else \n                        let p''' = p'' - 1\n                        if n' = 3 then p'''\n                        else \n                            let p'''' = p''' - 1\n                            if n' = 4 then p''''\n                            else \n                                let p'''''' = p''''' - 1\n                                if n' = 5 then p''''''\n                                else \n                                    let p'''''''' = p''''''' - 1\n                                    if n' = 6 then p''''''''\n                                    else \n                                        let p'''''''''' = p''''''''' - 1\n                                        if n' = 7 then p''''''''''\n                                        else \n                                            let p'''''''''''' = p''''''''''' - 1\n                                            if n' = 8 then p''''''''''''\n                                            else \n                                                let p'''''''''''''' = p''''''''''''' - 1\n                                                if n' = 9 then p''''''''''''''\n                                                else \n                                                    let p'''''''''''''''' = p''''''''''''''' - 1\n                                                    if n' = 10 then p''''''''''''''''\n                                                    else \n                                                        let p'''''''''''''''' = p''''''''''''''' - 1\n                                                        if n' = 11 then p''''''''''''''''\n                                                        else \n                                                            let p'''''''''''''''' = p''''''''''''''' - 1\n                                                            if n' = 12 then p''''''''''''''''\n                                                            else \n                                                                let p'''''''''''''''' = p''''''''''''''' - 1\n                                                                if n\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476901,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_53sp9of.fsx(57,1): error FS0010: Incomplete structured construct at or before this point in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec modp' n p = \n        if n = 0 then p\n        elif n % p = 0 then n / p\n        else modp' (n / p) (p - 1)\n    modp' n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop n p = \n        if n = p then n\n        else loop (n % p) (n / p)\n    loop n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop i =\n        if i = n then i\n        else loop (i % p)\n    loop (n % p)\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec modp' (n: int) (p: int) = \n        if n = 0 then p\n        elif n % p = 0 then n / p\n        else modp' (n / p) (n % p)\n    modp' n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop n p = \n        if n = 0 then p\n        else loop (n-1) (p % n)\n    loop n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop (p: int) (n: int) =\n        if n = 0 then\n            p\n        else\n            let p' = p % n\n            if p' = 0 then\n                loop p' (n - 1)\n            else\n                loop p' (n - 1)\n    loop p n\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp (n: int) (p: int): int  = \n    let rec loop n p = \n        if n = 0 then p\n        else loop (n-1) (p % n)\n    loop n p\nlet test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()",
      "timestamp": 1675476902,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}