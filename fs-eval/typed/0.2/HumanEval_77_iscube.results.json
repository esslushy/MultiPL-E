{
  "name": "HumanEval_77_iscube",
  "language": "fs",
  "prompt": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n",
  "tests": "let test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    if a < 0 then false\n    else if a > 64 then false\n    else if a = 0 then true\n    else if a = 64 then true\n    else if a = 180 then true\n    else if a = 180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\n    else if a = -1 then false\n    else if a = -64 then false\n    else if a = -180 then false\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_cruulue.fsx(63,10): error FS0001: This expression was expected to have type\n    'unit'    \nbut here has type\n    'bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a % 2 = 0 then iscube' (a / 2)\n        else iscube' (a / 2)\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a % 2 = 0 then iscube' (a / 2)\n        else iscube' (a / 2)\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' acc = \n        if a = 0 then acc\n        elif a % 2 = 0 then iscube' (acc + 1)\n        else iscube' (acc + 2)\n    iscube' 0\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnpuqk6qi.fsx(16,5): error FS0001: This expression was expected to have type\n    'bool'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a % 2 = 0 then iscube' (a / 2)\n        else iscube' (a / 2)\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a % 2 = 0 then iscube' (a / 2)\n        else iscube' (a / 2)\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a = 1 then false\n        elif a = 2 then true\n        elif a = 3 then false\n        elif a = 4 then true\n        elif a = 5 then false\n        elif a = 6 then true\n        elif a = 7 then false\n        elif a = 8 then true\n        elif a = 9 then false\n        elif a = 10 then true\n        elif a = 11 then false\n        elif a = 12 then true\n        elif a = 13 then false\n        elif a = 14 then true\n        elif a = 15 then false\n        else iscube' (a - 1)\n    iscube' (a - 1)\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' acc = \n        if a = 0 then acc\n        else iscube' (acc + 1)\n    iscube' 0\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdf6bwxwl.fsx(15,5): error FS0001: This expression was expected to have type\n    'bool'    \nbut here has type\n    'int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a = 1 then false\n        elif a = 2 then false\n        elif a = 3 then false\n        elif a = 4 then false\n        elif a = 5 then false\n        elif a = 6 then false\n        elif a = 7 then false\n        elif a = 8 then false\n        elif a = 9 then false\n        elif a = 10 then false\n        elif a = 11 then false\n        elif a = 12 then false\n        elif a = 13 then false\n        elif a = 14 then false\n        elif a = 15 then false\n        elif a = 16 then false\n        elif a = 17 then false\n        elif a = 18 then false\n        elif a = 19 then false\n        elif a = 20 then false\n        elif a = 21 then false\n        elif a = 22 then false\n        elif a = 23 then false\n        elif a = 24 then false\n        elif a = 25 then false\n        elif a = 26 then false\n        elif a = 27 then false\n        elif a = 28 then false\n        elif a = 29 then false\n        elif a = 30 then false\n        elif a = 31 then false\n        elif a = 32 then false\n        elif a = 33 then false\n        elif a = 34 then false\n        elif a = 35 then false\n        elif a = 36 then false\n        elif a = 37 then false\n        elif a = 38 then false\n        elif a = 39 then false\n        elif a = 40 then false\n        elif a = 41 then false\n        elif a = 42 then false\n        elif a = 43 then false\n        elif a = 44 then false\n        elif a = 45 then false\n        elif a = 46 then false\n        elif a = 47 then false\n        elif a = 48 then false\n        elif a = 49 then false\n        elif a = 50 then false\n        elif a = 51 then false\n        elif a = 52 then false\n        elif a = 53 then false\n        elif a = 54 then false\n        elif a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476976,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa188x_tu.fsx(69,1): error FS0010: Incomplete structured construct at or before this point in if/then/else expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a = 1 then false\n        elif a = 2 then true\n        elif a = 3 then true\n        elif a = 4 then true\n        elif a = 5 then true\n        elif a = 6 then true\n        elif a = 7 then true\n        elif a = 8 then true\n        elif a = 9 then true\n        elif a = 10 then true\n        elif a = 11 then true\n        elif a = 12 then true\n        elif a = 13 then true\n        elif a = 14 then true\n        elif a = 15 then true\n        elif a = 16 then true\n        elif a = 17 then true\n        elif a = 18 then true\n        elif a = 19 then true\n        elif a = 20 then true\n        elif a = 21 then true\n        elif a = 22 then true\n        elif a = 23 then true\n        elif a = 24 then true\n        elif a = 25 then true\n        elif a = 26 then true\n        elif a = 27 then true\n        elif a = 28 then true\n        elif a = 29 then true\n        elif a = 30 then true\n        elif a = 31 then true\n        elif a = 32 then true\n        elif a = 33 then true\n        elif a = 34 then true\n        elif a = 35 then true\n        elif a = 36 then true\n        elif a = 37 then true\n        elif a = 38 then true\n        elif a = 39 then true\n        elif a = 40 then true\n        elif a = 41 then true\n        elif a = 42 then true\n        elif a = 43 then true\n        elif a = 44 then true\n        elif a = 45 then true\n        elif a = 46 then true\n        elif a = 47 then true\n        elif a = 48 then true\n        elif a = 49 then true\n        elif a = 50 then true\n        elif a = 51 then true\n        elif a = 52 then true\n        elif a = 53 then true\n        elif a = 54 then true\n        elif a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476976,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptq8oxwtn.fsx(69,1): error FS0010: Incomplete structured construct at or before this point in if/then/else expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a = 1 then false\n        elif a = 2 then true\n        elif a = 3 then true\n        elif a = 4 then true\n        elif a = 5 then true\n        elif a = 6 then true\n        elif a = 7 then true\n        elif a = 8 then true\n        elif a = 9 then true\n        elif a = 10 then true\n        elif a = 11 then true\n        elif a = 12 then true\n        elif a = 13 then true\n        elif a = 14 then true\n        elif a = 15 then true\n        elif a = 16 then true\n        elif a = 17 then true\n        elif a = 18 then true\n        elif a = 19 then true\n        elif a = 20 then true\n        elif a = 21 then true\n        elif a = 22 then true\n        elif a = 23 then true\n        elif a = 24 then true\n        elif a = 25 then true\n        elif a = 26 then true\n        elif a = 27 then true\n        elif a = 28 then true\n        elif a = 29 then true\n        elif a = 30 then true\n        elif a = 31 then true\n        elif a = 32 then true\n        elif a = 33 then true\n        elif a = 34 then true\n        elif a = 35 then true\n        elif a = 36 then true\n        elif a = 37 then true\n        elif a = 38 then true\n        elif a = 39 then true\n        elif a = 40 then true\n        elif a = 41 then true\n        elif a = 42 then true\n        elif a = 43 then true\n        elif a = 44 then true\n        elif a = 45 then true\n        elif a = 46 then true\n        elif a = 47 then true\n        elif a = 48 then true\n        elif a = 49 then true\n        elif a = 50 then true\n        elif a = 51 then true\n        elif a = 52 then true\n        elif a = 53 then true\n        elif a = 54 then true\n        elif a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476976,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptq8oxwtn.fsx(69,1): error FS0010: Incomplete structured construct at or before this point in if/then/else expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a = 1 then false\n        elif a = 2 then true\n        elif a = 3 then true\n        elif a = 4 then true\n        elif a = 5 then true\n        elif a = 6 then true\n        elif a = 7 then true\n        elif a = 8 then true\n        elif a = 9 then true\n        elif a = 10 then true\n        elif a = 11 then true\n        elif a = 12 then true\n        elif a = 13 then true\n        elif a = 14 then true\n        elif a = 15 then true\n        elif a = 16 then true\n        elif a = 17 then true\n        elif a = 18 then true\n        elif a = 19 then true\n        elif a = 20 then true\n        elif a = 21 then true\n        elif a = 22 then true\n        elif a = 23 then true\n        elif a = 24 then true\n        elif a = 25 then true\n        elif a = 26 then true\n        elif a = 27 then true\n        elif a = 28 then true\n        elif a = 29 then true\n        elif a = 30 then true\n        elif a = 31 then true\n        elif a = 32 then true\n        elif a = 33 then true\n        elif a = 34 then true\n        elif a = 35 then true\n        elif a = 36 then true\n        elif a = 37 then true\n        elif a = 38 then true\n        elif a = 39 then true\n        elif a = 40 then true\n        elif a = 41 then true\n        elif a = 42 then true\n        elif a = 43 then true\n        elif a = 44 then true\n        elif a = 45 then true\n        elif a = 46 then true\n        elif a = 47 then true\n        elif a = 48 then true\n        elif a = 49 then true\n        elif a = 50 then true\n        elif a = 51 then true\n        elif a = 52 then true\n        elif a = 53 then true\n        elif a = 54 then true\n        elif a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476976,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptq8oxwtn.fsx(69,1): error FS0010: Incomplete structured construct at or before this point in if/then/else expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a = 1 then false\n        elif a = 2 then true\n        elif a = 3 then false\n        elif a = 4 then true\n        elif a = 5 then false\n        elif a = 6 then true\n        elif a = 7 then false\n        elif a = 8 then true\n        elif a = 9 then false\n        elif a = 10 then true\n        elif a = 11 then false\n        elif a = 12 then true\n        elif a = 13 then false\n        elif a = 14 then true\n        elif a = 15 then false\n        else false\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a % 2 = 0 then iscube' (a / 2)\n        else iscube' (a / 2)\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' acc =\n        match acc with\n        | 0 -> true\n        | _ -> iscube' (acc - 1)\n    iscube' 0\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a % 2 = 0 then iscube' (a / 2)\n        else iscube' (a / 2)\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' acc = \n        match acc with\n        | [] -> false\n        | x::xs -> \n            if x = a then true\n            else iscube' (x::acc)\n    iscube' []\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a = 1 then false\n        elif a = 2 then false\n        elif a = 3 then false\n        elif a = 4 then false\n        elif a = 5 then false\n        elif a = 6 then false\n        elif a = 7 then false\n        elif a = 8 then false\n        elif a = 9 then false\n        elif a = 10 then false\n        elif a = 11 then false\n        elif a = 12 then false\n        elif a = 13 then false\n        elif a = 14 then false\n        elif a = 15 then false\n        elif a = 16 then false\n        elif a = 17 then false\n        elif a = 18 then false\n        elif a = 19 then false\n        elif a = 20 then false\n        elif a = 21 then false\n        elif a = 22 then false\n        elif a = 23 then false\n        elif a = 24 then false\n        elif a = 25 then false\n        elif a = 26 then false\n        elif a = 27 then false\n        elif a = 28 then false\n        elif a = 29 then false\n        elif a = 30 then false\n        elif a = 31 then false\n        elif a = 32 then false\n        elif a = 33 then false\n        elif a = 34 then false\n        elif a = 35 then false\n        elif a = 36 then false\n        elif a = 37 then false\n        elif a = 38 then false\n        elif a = 39 then false\n        elif a = 40 then false\n        elif a = 41 then false\n        elif a = 42 then false\n        elif a = 43 then false\n        elif a = 44 then false\n        elif a = 45 then false\n        elif a = 46 then false\n        elif a = 47 then false\n        elif a = 48 then false\n        elif a = 49 then false\n        elif a = 50 then false\n        elif a = 51 then false\n        elif a = 52 then false\n        elif a = 53 then false\n        elif a = 54 then false\n        elif a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476976,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa188x_tu.fsx(69,1): error FS0010: Incomplete structured construct at or before this point in if/then/else expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then true\n        elif a % 2 = 0 then iscube' (a / 2)\n        else iscube' (a / 2)\n    iscube' a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    let rec iscube' (a: int) = \n        if a = 0 then True\n        elif a = 1 then False\n        elif a = 2 then True\n        elif a = 3 then True\n        elif a = 4 then True\n        elif a = 5 then True\n        elif a = 6 then True\n        elif a = 7 then True\n        elif a = 8 then True\n        elif a = 9 then True\n        elif a = 10 then True\n        elif a = 11 then True\n        elif a = 12 then True\n        elif a = 13 then True\n        elif a = 14 then True\n        elif a = 15 then True\n        elif a = 16 then True\n        elif a = 17 then True\n        elif a = 18 then True\n        elif a = 19 then True\n        elif a = 20 then True\n        elif a = 21 then True\n        elif a = 22 then True\n        elif a = 23 then True\n        elif a = 24 then True\n        elif a = 25 then True\n        elif a = 26 then True\n        elif a = 27 then True\n        elif a = 28 then True\n        elif a = 29 then True\n        elif a = 30 then True\n        elif a = 31 then True\n        elif a = 32 then True\n        elif a = 33 then True\n        elif a = 34 then True\n        elif a = 35 then True\n        elif a = 36 then True\n        elif a = 37 then True\n        elif a = 38 then True\n        elif a = 39 then True\n        elif a = 40 then True\n        elif a = 41 then True\n        elif a = 42 then True\n        elif a = 43 then True\n        elif a = 44 then True\n        elif a = 45 then True\n        elif a = 46 then True\n        elif a = 47 then True\n        elif a = 48 then True\n        elif a = 49 then True\n        elif a = 50 then True\n        elif a = 51 then True\n        elif a = 52 then True\n        elif a = 53 then True\n        elif a = 54 then True\n        elif a\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675476976,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnziv0mk6.fsx(69,1): error FS0010: Incomplete structured construct at or before this point in if/then/else expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}