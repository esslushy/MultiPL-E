{
  "name": "HumanEval_69_search",
  "language": "fs",
  "prompt": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n",
  "tests": "let test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (acc: int): int = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x <= acc then search' xs (acc + 1)\n            else search' xs (acc)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (n: int): int = \n        match lst with\n        | [] -> n\n        | x::xs -> \n            if x > n then search' xs (n+1)\n            else search' xs (x+1)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (acc: int): int = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then \n                search' xs (acc + 1)\n            else \n                search' xs (acc)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (acc: int): int = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then \n                search' xs (acc + 1)\n            else \n                search' xs (x + 1)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' acc i = \n        if i = lst.Length then acc\n        else if lst.[i] > acc then search' (lst.[i]) (i+1)\n        else search' (lst.[i]) (i+1)\n    search' 0 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (i: int) = \n        if i = lst.Length then i\n        else \n            let lst' = lst.[i] :: lst\n            search' lst' (i+1)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' acc i =\n        if i = 0 then acc\n        else\n            let n = lst.[i]\n            if n > acc then search' (n - 1) (i - 1)\n            else search' acc i\n    search' 0 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' acc i = \n        if i = 0 then acc\n        else if lst.[i] > acc then search' (i-1) (i-1)\n        else search' acc (i-1)\n    search' 0 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then \n                search' (x - 1) xs\n            else \n                search' acc xs\n    search' 0 lst\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (n: int): int = \n        match lst with\n        | [] -> n\n        | x::xs -> \n            if n <= x then n\n            else search' xs (n-1)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (current: int) =\n        match lst with\n        | [] -> current\n        | x :: xs ->\n            if current < x then\n                search' xs (current + 1)\n            else\n                search' xs (current - 1)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (acc: int): int = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then \n                search' xs (acc + 1)\n            else \n                search' xs (acc)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (acc: int) = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then \n                search' xs (acc + 1)\n            else \n                search' xs (acc)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (acc: int): int = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then \n                search' xs (acc + 1)\n            else \n                search' xs (acc)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) = \n        match lst with\n        | [] -> -1\n        | x::xs -> \n            if x > 0 then \n                search' xs\n            else\n                search' xs\n    search' lst\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' acc i =\n        if i = lst.Length then acc\n        else if lst.[i] > acc then search' (i+1) (i+1)\n        else search' acc (i+1)\n    search' 0 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (n: int): int =\n        match lst with\n        | [] -> n\n        | x::xs ->\n            if n <= x then\n                search' xs (n+1)\n            else\n                search' xs (n-1)\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then \n                search' (x+1) xs\n            else \n                search' acc xs\n    search' 0 lst\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' (lst: int list) (acc: int): int = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = \n                if x > acc then acc\n                else search' xs (acc' + 1)\n            search' xs acc'\n    search' lst 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvk8hi8fa.fsx(16,34): error FS0039: The value or constructor 'acc'' is not defined. Maybe you want one of the following:\n   acc\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlet search (lst: int list): int  = \n    let rec search' acc =\n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then search' (x-1)\n            else search' (acc+1)\n    search' 0\nlet test() = \n  let candidate = search\n  assert (candidate [5; 5; 5; 5; 1] = 1)\n  assert (candidate [4; 1; 4; 1; 4; 4] = 4)\n  assert (candidate [3; 3] = -1)\n  assert (candidate [8; 8; 8; 8; 8; 8; 8; 8] = 8)\n  assert (candidate [2; 3; 3; 2; 2] = 2)\n  assert (candidate [2; 7; 8; 8; 4; 8; 7; 3; 9; 6; 5; 10; 4; 3; 6; 7; 1; 7; 4; 10; 8; 1] = 1)\n  assert (candidate [3; 2; 8; 2] = 2)\n  assert (candidate [6; 7; 1; 8; 8; 10; 5; 8; 5; 3; 10] = 1)\n  assert (candidate [8; 8; 3; 6; 5; 6; 4] = -1)\n  assert (candidate [6; 9; 6; 7; 1; 4; 7; 1; 8; 8; 9; 8; 10; 10; 8; 4; 10; 4; 10; 1; 2; 9; 5; 7; 9] = 1)\n  assert (candidate [1; 9; 10; 1; 3] = 1)\n  assert (candidate [6; 9; 7; 5; 8; 7; 5; 3; 7; 5; 10; 10; 3; 6; 10; 2; 8; 6; 5; 4; 9; 5; 3; 10] = 5)\n  assert (candidate [1] = 1)\n  assert (candidate [8; 8; 10; 6; 4; 3; 5; 8; 2; 4; 2; 8; 4; 6; 10; 4; 2; 1; 10; 2; 1; 1; 5] = 4)\n  assert (candidate [2; 10; 4; 8; 2; 10; 5; 1; 2; 9; 5; 5; 6; 3; 8; 6; 4; 10] = 2)\n  assert (candidate [1; 6; 10; 1; 6; 9; 10; 8; 6; 8; 7; 3] = 1)\n  assert (candidate [9; 2; 4; 1; 5; 1; 5; 2; 5; 7; 7; 7; 3; 10; 1; 5; 4; 2; 8; 4; 1; 9; 10; 7; 10; 2; 8; 10; 9; 4] = 4)\n  assert (candidate [2; 6; 4; 2; 8; 7; 5; 6; 4; 10; 4; 6; 3; 7; 8; 8; 3; 1; 4; 2; 2; 10; 7] = 4)\n  assert (candidate [9; 8; 6; 10; 2; 6; 10; 2; 7; 8; 10; 3; 8; 2; 6; 2; 3; 1] = 2)\n  assert (candidate [5; 5; 3; 9; 5; 6; 3; 2; 8; 5; 6; 10; 10; 6; 8; 4; 10; 7; 7; 10; 8] = -1)\n  assert (candidate [10] = -1)\n  assert (candidate [9; 7; 7; 2; 4; 7; 2; 10; 9; 7; 5; 7; 2] = 2)\n  assert (candidate [5; 4; 10; 2; 1; 1; 10; 3; 6; 1; 8] = 1)\n  assert (candidate [7; 9; 9; 9; 3; 4; 1; 5; 9; 1; 2; 1; 1; 10; 7; 5; 6; 7; 6; 7; 7; 6] = 1)\n  assert (candidate [3; 10; 10; 9; 2] = -1)\n  0\n\ntest()",
      "timestamp": 1675477066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}