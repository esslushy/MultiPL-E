{
  "name": "HumanEval_92_any_int",
  "language": "fs",
  "prompt": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n",
  "tests": "let test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    x + y + z = x + y + z\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let rec any_int' (x: float) (y: float) (z: float): bool = \n        if x = y then \n            true\n        elif x < y then \n            any_int' x y z\n        else \n            any_int' y z x\n    any_int' x y z\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let rec any_int_rec x y z = \n        match x, y, z with \n        | x, y, z when x = y && y = z -> true\n        | _ -> \n            match x, y, z with \n            | x, y, z when x = y && y = z -> true\n            | _ -> \n                match x, y, z with \n                | x, y, z when x = y && y = z -> true\n                | _ -> \n                    match x, y, z with \n                    | x, y, z when x = y && y = z -> true\n                    | _ -> \n                        match x, y, z with \n                        | x, y, z when x = y && y = z -> true\n                        | _ -> \n                            match x, y, z with \n                            | x, y, z when x = y && y = z -> true\n                            | _ -> \n                                match x, y, z with \n                                | x, y, z when x = y && y = z -> true\n                                | _ -> \n                                    match x, y, z with \n                                    | x, y, z when x = y && y = z -> true\n                                    | _ -> \n                                        match x, y, z with \n                                        | x, y, z when x = y && y = z -> true\n                                        | _ -> \n                                            match x, y, z with \n                                            | x, y, z when x = y && y = z -> true\n                                            | _ -> \n                                                match x, y, z with \n                                                | x, y, z when x = y && y = z -> true\n                                                | _ -> \n                                                    match x, y, z with \n                                                    | x, y, z when x = y && y = z -> true\n                                                    | _ -> \n                                                        match x, y, z with \n                                                        | x, y, z when x = y && y = z -> true\n                                                        | _ -> \n                                                            match x, y, z with \n                                                            | x, y, z when x = y && y = z -> true\n                                                            | _ -> \n                               \nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476826,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp708rldp8.fsx(54,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (50:61). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp708rldp8.fsx(54,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (50:61). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp708rldp8.fsx(68,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (50:61). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp708rldp8.fsx(68,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (50:61). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp708rldp8.fsx(68,6): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (50:61). Try indenting this t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let rec sum = \n        match x, y, z with\n        | 0.0, 0.0, 0.0 -> true\n        | _, _, _ -> false\n        | x, y, z -> \n            match x, y, z with\n            | x, y, z when x = y -> sum\n            | _, _, _ -> sum\n            | _, _, _ -> sum\n    sum\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp147ls87n.fsx(14,11): warning FS0026: This rule will never be matched\n\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let rec any_int_rec (x: float) (y: float) (z: float) = \n        if x = y then \n            true\n        else\n            let x' = x + y\n            if x' = z then \n                true\n            else\n                any_int_rec x' y z\n    any_int_rec x y z\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let mutable x = x\n    let mutable y = y\n    let mutable z = z\n    let mutable result = false\n    while x > 0.0 && y > 0.0 && z > 0.0 do\n        if x + y + z = 0.0 then\n            result <- true\n        else\n            x <- x - y\n            y <- y - z\n            z <- z - x\n    result\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    if x + y + z = x + y + z then true\n    else false\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let x = x\n    let y = y\n    let z = z\n    let sum = x + y + z\n    if sum = x + y + z then true else false\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let mutable result = false\n    let mutable x = x\n    let mutable y = y\n    let mutable z = z\n    while not result && x < y do\n        result <- x = y\n        x <- x + 1.0\n        y <- y + 1.0\n        z <- z + 1.0\n    result\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let x' = x + y\n    let y' = y + z\n    x' = y' && x' = y'\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    if x + y + z = 0.0 then\n        true\n    else\n        false\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let mutable x = x\n    let mutable y = y\n    let mutable z = z\n    let mutable result = false\n    while x <> y && x <> z do\n        result <- result || x = y || x = z\n        x <- x + 1.0\n        y <- y + 1.0\n        z <- z + 1.0\n    result\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    x + y + z = x + y + z\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    if x = y then\n        true\n    else\n        false\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let rec any_int' x y z = \n        match x, y, z with\n        | x, y, z when x = y && y = z -> true\n        | _ -> false\n    any_int' x y z\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let mutable sum = 0.0\n    for i = 0 to x.GetType().GetInterfaces().Length - 1 do\n        sum <- sum + x.GetType().GetInterfaces().[i].GetMethod(\"Invoke\").Invoke(null, [|y;z|])\n    sum = x + y + z\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt9sj5psn.fsx(12,22): error FS0193: The type 'obj' does not match the type 'float'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let rec any_int_rec x y z = \n        match x, y, z with\n        | x, y, z when x = y && y = z -> true\n        | _ -> false\n    any_int_rec x y z\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let rec loop x y z = \n        match x, y, z with\n        | x, y, z when x = y && y = z -> true\n        | _ -> false\n    loop x y z\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    let rec loop acc = \n        match acc with\n        | x when x = y -> true\n        | x when x = z -> false\n        | _ -> loop (x + y + z)\n    loop true\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_a2avk_r.fsx(15,10): error FS0001: This expression was expected to have type\n    'float'    \nbut here has type\n    'bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n    if x + y + z = x + y + z then true\n    else false\nlet test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()",
      "timestamp": 1675476827,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}