{
  "name": "HumanEval_47_median",
  "language": "fs",
  "prompt": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n",
  "tests": "let test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i l = \n        match l with \n        | [] -> 0.0\n        | x::xs -> \n            let xs = x::xs\n            let xs = List.sort xs\n            let xs = List.take i xs\n            let xs = List.skip (i+1) xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs = List.rev xs\n            let xs\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm813w7h3.fsx(55,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop (acc: int list) (acc' : int list) = \n        match acc with\n        | [] -> acc'\n        | x :: xs -> \n            let x' = x + xs.[0]\n            loop xs (x' :: acc')\n    loop [] []\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpflz3hama.fsx(13,5): error FS0001: This expression was expected to have type\n    'float'    \nbut here has type\n    'int list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i = \n        if i < l.Length then \n            let x = l.[i]\n            let y = l.[i+1]\n            let z = l.[i+2]\n            loop (i+1)\n        else\n            l.[0]\n    loop 0\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop acc i = \n        if i < l.Length then \n            let x = l.[i]\n            let y = l.[i+1]\n            if x < y then loop (acc + (x-y)) (i+1)\n            else loop acc (i+1)\n        else acc\n    loop 0 0\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i l = \n        match l with \n        | [] -> 0.0\n        | x::xs -> \n            if i = 0 then x\n            else loop (i-1) xs\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfg6koaxo.fsx(13,12): error FS0001: Type mismatch. Expecting a\n    'float list'    \nbut given a\n    'int list'    \nThe type 'float' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop acc l = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            let xs' = List.rev xs\n            let xs'' = List.rev acc\n            if List.length xs' > List.length xs'' then\n                loop (List.append xs' xs'') xs\n            else\n                loop (List.append xs' xs'') xs\n    loop [] l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9oic7y7s.fsx(17,5): error FS0001: This expression was expected to have type\n    'float'    \nbut here has type\n    ''a list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i = \n        if i < 0 then 0.0\n        elif i = 0 then 0.0\n        else \n            let m = l |> List.sumBy (fun x -> x - i)\n            loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i = \n        if i < l.Length then\n            let x = l.[i]\n            loop (i + 1)\n        else\n            l.[l.Length / 2]\n    loop 0\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i = \n        if i < 0 then 0.0\n        else \n            let m = l |> List.sumBy (fun x -> x - i)\n            loop (i - 1)\n    loop 0\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i = \n        if i < 0 then 0.0 else \n        let l = List.rev l\n        let l = List.map (fun x -> x / 2.0) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List.map (fun x -> x * x) l\n        let l = List\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwscnaj72.fsx(38,9): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i l = \n        if i = 0 then l else \n        let x = l |> List.item (i-1)\n        let y = l |> List.item (i-1)\n        let z = l |> List.item (i-1)\n        loop (i-1) (x::y::z)\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvlfvts01.fsx(12,27): error FS0001: Type mismatch. Expecting a\n    ''a list'    \nbut given a\n    ''a'    \nThe types ''a' and ''a list' cannot be unified.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i acc = \n        if i = 0 then acc\n        else loop (i-1) (acc / 2.0)\n    loop 0.0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4fnqjlx_.fsx(10,10): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'float'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i acc = \n        if i = 0 then acc\n        else loop (i - 1) (acc / 2.0)\n    loop 0.0 (List.sum l)\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprw3c1mim.fsx(10,10): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'float'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop (l: int list) = \n        match l with \n        | [] -> 0.0\n        | x::xs -> \n            let xs' = x::xs\n            let xs'' = List.rev xs'\n            let xs''' = List.rev xs''\n            let xs'''' = List.rev xs'''\n            let xs''''' = List.rev xs'''''\n            let xs'''''' = List.rev xs'''''''\n            let xs''''''' = List.rev xs'''''''''\n            let xs'''''''' = List.rev xs'''''''''''\n            let xs''''''''' = List.rev xs'''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''''''''' = List.rev xs'''''''''''''\n            let xs''\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsv2fzwzd.fsx(35,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i l = \n        if i = l then 0.0 else \n        let x = l.[i]\n        let y = l.[i+1]\n        let z = l.[i+2]\n        let w = l.[i+3]\n        let x = l.[i+4]\n        let y = l.[i+5]\n        let z = l.[i+6]\n        let w = l.[i+7]\n        let x = l.[i+8]\n        let y = l.[i+9]\n        let z = l.[i+10]\n        let w = l.[i+11]\n        let x = l.[i+12]\n        let y = l.[i+13]\n        let z = l.[i+14]\n        let w = l.[i+15]\n        let x = l.[i+16]\n        let y = l.[i+17]\n        let z = l.[i+18]\n        let w = l.[i+19]\n        let x = l.[i+20]\n        let y = l.[i+21]\n        let z = l.[i+22]\n        let w = l.[i+23]\n        let x = l.[i+24]\n        let y = l.[i+25]\n        let z = l.[i+26]\n        let w = l.[i+27]\n        let x = l.[i+28]\n        let y = l.[i+29]\n        let z = l.[i+30]\n        let w = l.[i+31]\n        let x = l.[i+32]\n        let y = l.[i+33]\n        let z = l.[i+34]\n        let w = l.[i+35]\n        let x = l.[i+36]\n        let y = l.[i+37]\n        let z = l.[i+38]\n        let w = l.[i+39]\n        let x = l.[i+40]\n        let y = l.[i+41]\n        let z = l.[i+42]\n        let w = l.[i+43]\n        let x = l.[i+44\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo_hyep09.fsx(54,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (53:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo_hyep09.fsx(54,1): error FS0010: Unexpected keyword 'let' or 'use' in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop acc i = \n        if i < 0 then acc\n        else loop (acc + l.[i]) (i - 1)\n    loop 0 0\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i = \n        if i < 0 then\n            0.0\n        else\n            let x = l.[i]\n            let y = l.[i-1]\n            let z = l.[i-2]\n            let w = l.[i-3]\n            let x' = x + y + z + w\n            let y' = x' + y\n            let z' = x' + z\n            let w' = x' + w\n            loop (i-1)\n    loop 0\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i = \n        if i = 0 then 0.0\n        else \n            let sum = l.[i] + l.[i-1] + l.[i-2] + l.[i-3] + l.[i-4] + l.[i-5] + l.[i-6] + l.[i-7] + l.[i-8] + l.[i-9] + l.[i-10] + l.[i-11] + l.[i-12] + l.[i-13] + l.[i-14] + l.[i-15]\n            loop (i-1)\n    loop 0\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476879,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop (acc: int list) (l: int list) = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop acc xs\n            else loop (x::acc) xs\n    loop [] l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpav49hb1j.fsx(13,5): error FS0001: This expression was expected to have type\n    'float'    \nbut here has type\n    'int list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n    let rec loop i l = \n        match l with\n        | [] -> 0.0\n        | x :: xs -> \n            let x = x / 2.0\n            let y = xs |> List.sumBy (fun x -> x * x)\n            loop (i + 1) xs\n    loop 0 l\nlet test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()",
      "timestamp": 1675476878,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0v569tu9.fsx(14,12): error FS0001: Type mismatch. Expecting a\n    'float list'    \nbut given a\n    'int list'    \nThe type 'float' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}