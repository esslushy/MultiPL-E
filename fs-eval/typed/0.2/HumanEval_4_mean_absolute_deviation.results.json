{
  "name": "HumanEval_4_mean_absolute_deviation",
  "language": "fs",
  "prompt": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n",
  "tests": "let test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let mean_deviation = List.sum (List.map (fun x -> x - mean) numbers)\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let mean_deviation = List.sum (List.map (fun x -> abs x - mean) numbers)\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let x_mean = List.sum numbers\n    let x_mean_sq = x_mean * x_mean\n    let x_mean_sq_sq = x_mean_sq * x_mean_sq\n    let x_mean_sq_sq_sq = x_mean_sq_sq * x_mean_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476963,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9w6idhdx.fsx(25,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = numbers |> List.average\n    let mean_deviation = (numbers |> List.sumBy (fun x -> abs x - mean)) / (float numbers.Length)\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = numbers |> List.average\n    let mean_diff = numbers |> List.map (fun x -> x - mean) |> List.sum\n    mean_diff / (float (numbers.Length - 1))\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let mean_deviation = List.sum (List.map (fun x -> abs x - mean) numbers)\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let sum = List.sum numbers\n    let mean_deviation = mean - mean\n    let deviation = mean_deviation / sum\n    deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let mean_deviation = List.sum (List.map (fun x -> x - mean) numbers)\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = numbers |> List.average\n    let x_mean = numbers |> List.sum\n    (mean - x_mean) / (x_mean - mean)\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = numbers |> List.map (fun x -> x / float numbers.Length) |> List.sum\n    let mean_sq = mean * mean\n    let mean_sq_inv = 1.0 / mean_sq\n    let mean_sq_inv_inv = 1.0 / (1.0 + mean_sq_inv)\n    mean_sq_inv * mean_sq_inv_inv\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let mean_sq = List.sum (List.map (fun x -> x * x) numbers)\n    mean / mean_sq\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let mean_deviation = List.sum (List.map (fun x -> abs (x - mean)) numbers)\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let mean_diff = List.sum (List.map (fun x -> abs (x - mean)) numbers)\n    mean_diff / (List.sum numbers)\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let mean_deviation = List.sum (List.map (fun x -> abs (x - mean)) numbers)\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = numbers |> List.sumBy (fun x -> x * x)\n    let mean_deviation = (numbers |> List.map (fun x -> x - mean)) |> List.sum\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let sum = List.sum numbers\n    let sum_sq = List.sumBy (fun x -> x * x) numbers\n    let mean_sq = mean * mean\n    let dev = sum - mean_sq\n    dev / (sqrt (sum_sq - mean_sq) * sqrt (sum - mean))\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let mean_deviation = List.sum (List.map (fun x -> abs x - mean) numbers)\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let x_mean = List.sum numbers\n    let x_mean_sq = x_mean * x_mean\n    let x_sq = x_mean_sq * x_mean\n    let x_sq_inv = x_sq / (x_sq - x_mean)\n    let x_sq_inv_inv = x_sq_inv / (x_sq_inv - x_mean)\n    let x_sq_inv_inv_inv = x_sq_inv_inv / (x_sq_inv_inv - x_mean)\n    let x_sq_inv_inv_inv_inv = x_sq_inv_inv_inv / (x_sq_inv_inv_inv - x_mean)\n    let x_sq_inv_inv_inv_inv = x_sq_inv_inv_inv_inv / (x_sq_inv_inv_inv_inv - x_mean)\n    let x_sq_inv_inv_inv_inv = x_sq_inv_inv_inv_inv / (x_sq_inv_inv_inv_inv - x_mean)\n    let x_sq_inv_inv_inv_inv = x_sq_inv_inv_inv_inv / (x_sq_inv_inv_inv_inv - x_mean)\n    let x_sq_inv_inv_inv_inv = x_sq_inv_inv_inv_inv / (x_sq_inv_inv_inv_inv - x_mean)\n    let x_sq_inv_inv_inv_inv = x_sq_inv_inv_inv_inv / (x_sq_inv_inv_inv_inv - x_mean)\n    let x_sq_inv_inv_inv_inv = x_sq_inv_inv_inv_inv / (x_sq_inv_inv_inv_inv - x_mean)\n    let x_sq_inv_inv_inv_inv = x_sq_inv_inv_inv_inv / (x_sq_inv_inv_inv_inv - x_mean)\n    let x_sq_inv_inv_inv_inv = x_sq_inv_inv_inv_inv / (x\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476963,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp65h883m7.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (24:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp65h883m7.fsx(25,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = numbers |> List.sumBy (fun x -> x / float numbers.Length)\n    let mean_deviation = (mean - mean) / (float numbers.Length)\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n    let mean = List.average numbers\n    let mean_deviation = List.sum (List.map (fun x -> abs (x - mean)) numbers)\n    mean_deviation\nlet test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()",
      "timestamp": 1675476964,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}