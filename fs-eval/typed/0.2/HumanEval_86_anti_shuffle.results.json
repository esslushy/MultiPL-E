{
  "name": "HumanEval_86_anti_shuffle",
  "language": "fs",
  "prompt": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n",
  "tests": "let test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    s.ToCharArray()\n    |> Array.map (fun c -> if c >= 'a' && c <= 'z' then c - int 'a' + int 'A' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - int 'A' + int 'a' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= '0' && c <= '9' then c - int '0' + int '0' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - int 'A' + int 'a' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= '0' && c <= '9' then c - int '0' + int '0' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - int 'A' + int 'a' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= '0' && c <= '9' then c - int '0' + int '0' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - int 'A' + int 'a' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= '0' && c <= '9' then c\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpd9ma572s.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpd9ma572s.fsx(29,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable result = \"\"\n    while i < words.Length do\n        let c = words.[i]\n        if i = 0 then\n            result <- c\n        else\n            result <- result + \" \" + c\n        i <- i + 1\n    result\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp11kuzjvy.fsx(17,23): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.Split(' ')\n    let words = words |> Array.map (fun word -> word.ToCharArray() |> Array.map (fun c -> c.ToString()))\n    words |> Array.map (fun word -> word.[0])\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyyrn9dj3.fsx(13,14): error FS0001: Type mismatch. Expecting a\n    'string[][] -> string'    \nbut given a\n    'string[][] -> 'a[]'    \nThe type 'string' does not match the type ''a[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.Split(' ')\n    let words = words |> Array.map (fun word -> word.ToCharArray() |> Array.rev)\n    words |> Array.map (fun word -> word.[0])\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx_apkpcp.fsx(13,14): error FS0001: Type mismatch. Expecting a\n    'char[][] -> string'    \nbut given a\n    'char[][] -> 'a[]'    \nThe type 'string' does not match the type ''a[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.Split(' ')\n    let words = words |> Array.map (fun word -> word.ToCharArray() |> Array.rev)\n    words |> Array.map (fun word -> word.[0])\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx_apkpcp.fsx(13,14): error FS0001: Type mismatch. Expecting a\n    'char[][] -> string'    \nbut given a\n    'char[][] -> 'a[]'    \nThe type 'string' does not match the type ''a[]'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.Split(' ')\n    words.[0]\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    s.ToCharArray()\n    |> Array.map (fun c -> if c = ' ' then '_' else c)\n    |> Array.rev\n    |> String.concat \"\"\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps6g4_2gx.fsx(14,8): error FS0001: The type 'string' does not match the type 'char'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable j = 0\n    while i < words.Length do\n        let c = words.[i]\n        if c <> ' ' && c <> '\\t' then\n            words.[i] <- ' '\n            i <- i + 1\n        else\n            words.[i] <- c\n            i <- i + 1\n        if i < words.Length then\n            words.[i] <- ' '\n            i <- i + 1\n    words.[0] <- ' '\n    words.[1..] |> String.concat \"\"\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476831,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr61n1ljz.fsx(26,20): error FS0001: The type 'string' does not match the type 'char'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.Split(' ')\n    words.[0]\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    s.ToCharArray()\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - 'A' + 10 else c)\n    |> Array.sort\n    |> String.concat \"\"\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi44mdu72.fsx(12,61): error FS0001: The type 'char' does not support the operator '-'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    s.ToCharArray()\n    |> Array.map (fun c -> if c = ' ' then '_' else c)\n    |> String.Concat\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcv7z3b9a.fsx(13,15): error FS0039: The value, constructor, namespace or type 'Concat' is not defined. Maybe you want one of the following:\n   concat\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.Split(' ')\n    words.[0]\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    s.ToCharArray()\n    |> Array.map (fun c -> if c = ' ' then '_' else c)\n    |> String.concat \"\"\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppebso47t.fsx(13,8): error FS0001: The type 'string' does not match the type 'char'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.Split(' ')\n    let words = words |> Array.map (fun word -> word.ToCharArray() |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - int 'A' else int c))\n    words |> Array.map (fun word -> word.[0..1]) |> Array.reduce (fun a b -> a + b)\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcz6mbdiy.fsx(12,124): error FS0001: The type 'int' does not match the type 'char'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.Split(' ')\n    words.[0]\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.Split(' ')\n    let words = words |> Array.map (fun word -> word.ToCharArray())\n    let words = words |> Array.map (fun word -> word.[0])\n    let words = words |> Array.map (fun word -> word.ToLower())\n    words |> Array.map (fun word -> word.[0])\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyr2_eugw.fsx(14,49): error FS0493: ToLower is not an instance method\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.Split(' ')\n    words.[0]\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476831,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable j = 0\n    let mutable result = \"\"\n    while i < words.Length do\n        let c = words.[i]\n        if i = 0 then\n            if j = 0 then\n                result <- c\n            else\n                result <- result + \" \" + c\n                j <- j + 1\n        else\n            if j = 0 then\n                result <- result + \" \" + c\n                j <- j + 1\n            else\n                result <- result + \" \" + c\n                j <- j + 1\n        i <- i + 1\n    result\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy9h2_l7m.fsx(19,27): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    s.ToCharArray()\n    |> Array.map (fun c -> if c = ' ' then '_' else c)\n    |> String.concat \"\"\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476830,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppebso47t.fsx(13,8): error FS0001: The type 'string' does not match the type 'char'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n    s.ToCharArray()\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - 'A' + 10 else c)\n    |> Array.rev\n    |> Array.map (fun c -> if c >= 'a' && c <= 'z' then c - 'a' + 10 else c)\n    |> String.concat \"\"\nlet test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()",
      "timestamp": 1675476831,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj5u9k80c.fsx(12,61): error FS0001: The type 'char' does not support the operator '-'\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}