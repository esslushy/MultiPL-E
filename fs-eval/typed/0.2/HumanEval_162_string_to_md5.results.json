{
  "name": "HumanEval_162_string_to_md5",
  "language": "fs",
  "prompt": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n",
  "tests": "let test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else\n        let md5 = System.Security.Cryptography.MD5.Create()\n        md5.ComputeHash(text.ToCharArray())\n        |> Some\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvffqgh89.fsx(8,9): error FS0041: No overloads match for method 'ComputeHash'.\n\nKnown type of argument: char[]\n\nAvailable overloads:\n - System.Security.Cryptography.HashAlgorithm.ComputeHash(buffer: byte[]) : byte[] // Argument 'buffer' doesn't match\n - System.Security.Cryptography.HashAlgorithm.ComputeHash(inputStream: System.IO.Stream) : byte[] // Argument 'inputStream' doesn't match\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if String.IsNullOrEmpty text then None\n    else\n        let text = text.ToLower()\n        if text.Length = 0 then None\n        else\n            let hash = MD5.Create().ComputeHash text\n            Some hash\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxr8frwj.fsx(5,15): error FS0039: The value, constructor, namespace or type 'IsNullOrEmpty' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    match text with\n    | \"\" -> None\n    | _ ->\n        let text = text.ToLower()\n        let hash = md5.ComputeHash text\n        Some (text.Substring(0, text.Length - hash.Length))\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxx6n14or.fsx(9,20): error FS0039: The value, namespace, type or module 'md5' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else Some (string_to_md5 text)\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvjtx9vxi.fsx(6,16): error FS0039: The value or constructor 'string_to_md5' is not defined. Maybe you want one of the following:\n   string\n   String\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else\n        let md5 = MD5.Create()\n        md5.ComputeHash text\n        Some (md5.ComputeHash text)\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpk9qe3orx.fsx(7,19): error FS0039: The value, namespace, type or module 'MD5' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else Some (string_to_md5 text)\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvjtx9vxi.fsx(6,16): error FS0039: The value or constructor 'string_to_md5' is not defined. Maybe you want one of the following:\n   string\n   String\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else Some(text.ToLowerInvariant())\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpouy18i01.fsx(9,37): error FS0001: This expression was expected to have type\n    'string option'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    match text with\n    | \"\" -> None\n    | _ ->\n        let md5 = System.Security.Cryptography.MD5.Create()\n        md5.ComputeHash text\n        |> Some\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdx9iyn82.fsx(9,9): error FS0041: No overloads match for method 'ComputeHash'.\n\nKnown type of argument: string\n\nAvailable overloads:\n - System.Security.Cryptography.HashAlgorithm.ComputeHash(buffer: byte[]) : byte[] // Argument 'buffer' doesn't match\n - System.Security.Cryptography.HashAlgorithm.ComputeHash(inputStream: System.IO.Stream) : byte[] // Argument 'inputStream' doesn't match\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text.Length = 0 then None\n    else\n        let md5 = MD5.Create()\n        let bytes = text.ToCharArray()\n        for i = 0 to bytes.Length - 1 do\n            let b = bytes.[i]\n            md5.ComputeHash(b)\n        Some(md5.ToString())\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqstyq7r_.fsx(7,19): error FS0039: The value, namespace, type or module 'MD5' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    match text with\n    | \"\" -> None\n    | _ ->\n        let hash = System.Security.Cryptography.MD5.ComputeHash text\n        Some (hash.ToString())\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu3vdxyhv.fsx(8,20): error FS3214: Method or object constructor 'ComputeHash' is not static\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    match text with\n    | \"\" -> None\n    | _ -> Some (string_to_md5 text)\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppc0u53qg.fsx(7,18): error FS0039: The value or constructor 'string_to_md5' is not defined. Maybe you want one of the following:\n   string\n   String\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else\n        let hash = md5.ComputeHash text\n        Some (sprintf \"%s%s\" hash (text.ToCharArray() |> Array.map (fun c -> c.ToString())))\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3he6g_cs.fsx(7,20): error FS0039: The value, namespace, type or module 'md5' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    match text with\n    | \"\" -> None\n    | _ ->\n        let text = text.ToLowerInvariant()\n        let md5 = MD5.Create()\n        md5.ComputeHash text\n        |> Some\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqpdqbi9u.fsx(9,19): error FS0039: The value, namespace, type or module 'MD5' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else Some (text.ToLowerInvariant())\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpytyd9izo.fsx(9,37): error FS0001: This expression was expected to have type\n    'string option'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else\n        let md5 = System.Security.Cryptography.MD5.Create()\n        md5.ComputeHash text\n        |> Some\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqeywfxg3.fsx(8,9): error FS0041: No overloads match for method 'ComputeHash'.\n\nKnown type of argument: string\n\nAvailable overloads:\n - System.Security.Cryptography.HashAlgorithm.ComputeHash(buffer: byte[]) : byte[] // Argument 'buffer' doesn't match\n - System.Security.Cryptography.HashAlgorithm.ComputeHash(inputStream: System.IO.Stream) : byte[] // Argument 'inputStream' doesn't match\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else Some(text.ToLowerInvariant())\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpouy18i01.fsx(9,37): error FS0001: This expression was expected to have type\n    'string option'    \nbut here has type\n    'string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else\n        let hash = System.Security.Cryptography.MD5.ComputeHash text\n        Some hash\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdccpbf82.fsx(7,20): error FS3214: Method or object constructor 'ComputeHash' is not static\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    if text = \"\" then None\n    else\n        let hash = System.Security.Cryptography.MD5.ComputeHash text\n        Some hash\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdccpbf82.fsx(7,20): error FS3214: Method or object constructor 'ComputeHash' is not static\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    match text with\n    | \"\" -> None\n    | _ ->\n        let md5 = System.Security.Cryptography.MD5.Create()\n        md5.ComputeHash(text.ToCharArray())\n        |> fun hash -> Some hash\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqev90eqd.fsx(9,9): error FS0041: No overloads match for method 'ComputeHash'.\n\nKnown type of argument: char[]\n\nAvailable overloads:\n - System.Security.Cryptography.HashAlgorithm.ComputeHash(buffer: byte[]) : byte[] // Argument 'buffer' doesn't match\n - System.Security.Cryptography.HashAlgorithm.ComputeHash(inputStream: System.IO.Stream) : byte[] // Argument 'inputStream' doesn't match\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n    match text with\n    | \"\" -> None\n    | _ ->\n        let hash = System.Security.Cryptography.MD5.Create().ComputeHash(text.ToCharArray())\n        Some hash\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675477004,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0ii9tp6f.fsx(8,20): error FS0041: No overloads match for method 'ComputeHash'.\n\nKnown type of argument: char[]\n\nAvailable overloads:\n - System.Security.Cryptography.HashAlgorithm.ComputeHash(buffer: byte[]) : byte[] // Argument 'buffer' doesn't match\n - System.Security.Cryptography.HashAlgorithm.ComputeHash(inputStream: System.IO.Stream) : byte[] // Argument 'inputStream' doesn't match\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}