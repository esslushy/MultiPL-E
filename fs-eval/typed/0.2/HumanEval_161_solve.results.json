{
  "name": "HumanEval_161_solve",
  "language": "fs",
  "prompt": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n",
  "tests": "let test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let rev (s: string) = s.ToUpper()\n    let rev2 (s: string) = s.ToLower()\n    let rev3 (s: string) = s.Replace(\" \", \"\")\n    let rev4 (s: string) = s.Replace(\"-\", \"\")\n    let rev5 (s: string) = s.Replace(\".\", \"\")\n    let rev6 (s: string) = s.Replace(\"+\", \"\")\n    let rev7 (s: string) = s.Replace(\"/\", \"\")\n    let rev8 (s: string) = s.Replace(\"*\", \"\")\n    let rev9 (s: string) = s.Replace(\"%\", \"\")\n    let rev10 (s: string) = s.Replace(\"&\", \"\")\n    let rev11 (s: string) = s.Replace(\"<\", \"\")\n    let rev12 (s: string) = s.Replace(\">\", \"\")\n    let rev13 (s: string) = s.Replace(\"=\", \"\")\n    let rev14 (s: string) = s.Replace(\"+\", \"\")\n    let rev15 (s: string) = s.Replace(\"-\", \"\")\n    let rev16 (s: string) = s.Replace(\".\", \"\")\n    let rev17 (s: string) = s.Replace(\"/\", \"\")\n    let rev18 (s: string) = s.Replace(\"*\", \"\")\n    let rev19 (s: string) = s.Replace(\"%\", \"\")\n    let rev20 (s: string) = s.Replace(\"&\", \"\")\n    let rev21 (s: string) = s.Replace(\"<\", \"\")\n    let rev22 (s: string) = s.Replace(\">\", \"\")\n    let rev23 (s: string) = s.Replace(\"=\", \"\")\n    let rev24 (s: string) = s.Replace(\"+\", \"\")\n    let rev25 (s: string) = s.Replace(\"-\", \"\")\n    let rev26 (s: string) = s.Replace(\".\", \"\")\n    let rev27\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8d_ekubr.fsx(38,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let reverse (s: string) = \n        let mutable i = s.Length - 1\n        while i >= 0 && s.[i] <> '#' do\n            i <- i - 1\n        s.[i] <- '#'\n        s\n    let isLetter (s: string) = \n        let mutable i = 0\n        while i < s.Length && Char.IsLetterOrDigit s.[i] do\n            i <- i + 1\n        i >= 0\n    let isDigit (s: string) = \n        let mutable i = 0\n        while i < s.Length && Char.IsDigit s.[i] do\n            i <- i + 1\n        i >= 0\n    let isUpper (s: string) = \n        let mutable i = 0\n        while i < s.Length && Char.IsUpper s.[i] do\n            i <- i + 1\n        i >= 0\n    let isLower (s: string) = \n        let mutable i = 0\n        while i < s.Length && Char.IsLower s.[i] do\n            i <- i + 1\n        i >= 0\n    let isAlpha (s: string) = \n        let mutable i = 0\n        while i < s.Length && Char.IsLetterOrDigit s.[i] do\n            i <- i + 1\n        i >= 0\n    let isNumber (s: string) = \n        let mutable i = 0\n        while i < s.Length && Char.IsDigit s.[i] do\n            i <- i + 1\n        i >= 0\n    let isPunctuation (s: string) = \n        let mutable i = 0\n        while i < s.Length && Char.IsLetterOrDigit s.[i] do\n            i <- i + 1\n        i >= 0\n    let isPunctuationOrDigit (s: string) = \n        let mutable i = 0\n        while i < s.Length && Char.IsDigit s.[i] do\n            i <- i + 1\n        i >= 0\n    let isPunctuationOrDigitOrLetter (s: string) = \n        let mutable i = 0\n        while i\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp991odcx9.fsx(60,1): error FS0010: Incomplete structured construct at or before this point in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let rev (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.ToString()\n    let isLetter (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.Length > 0\n    let isDigit (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.Length > 0\n    let isUpper (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.Length > 0\n    let isLower (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.Length > 0\n    let isNumber (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.Length > 0\n    let isLetterOrDigit (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.Length > 0\n    let isNumberOrDigit (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.Length > 0\n    let isUpperOrLower (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.Length > 0\n    let isUpperOrLowerOrDigit (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.Length > 0\n    let isNumberOrDigitOrUpperOrLower (s: string) = \n        let s = s.ToCharArray()\n        let s = s |> Array.rev\n        s.Length > 0\n    let isNumberOrDigitOrUpperOrLowerOrDigit (s: string) = \n        let s = s.ToCharArray()\n        let s\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqe1fdsf5.fsx(58,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let rec reverse (s: string) = \n        match s with\n        | \"\" -> \"\"\n        | s -> s.ToUpper() + s.Substring(1)\n    reverse s\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let reverse (s: string) = \n        s.ToCharArray() \n        |> Array.rev\n        |> String\n    let isLetter (s: string) = \n        s.Length > 0 && s.[0] = 'a' && s.[1] = 'A'\n    let isDigit (s: string) = \n        s.Length > 0 && s.[0] = '0' && s.[1] = '0'\n    let isUpper (s: string) = \n        s.Length > 0 && s.[0] = 'A' && s.[1] = 'A'\n    let isLower (s: string) = \n        s.Length > 0 && s.[0] = 'a' && s.[1] = 'A'\n    let isNumber (s: string) = \n        s.Length > 0 && s.[0] = '0' && s.[1] = '0'\n    let isLetterOrDigit (s: string) = \n        s.Length > 0 && isLetter s || isDigit s\n    let isUpperOrLower (s: string) = \n        s.Length > 0 && isUpper s || isLower s\n    let isNumberOrLetter (s: string) = \n        s.Length > 0 && isNumber s || isLetter s\n    let isNumberOrDigit (s: string) = \n        s.Length > 0 && isNumber s || isDigit s\n    let isUpperOrLowerOrNumber (s: string) = \n        s.Length > 0 && isUpperOrLower s || isNumber s\n    let isUpperOrLowerOrNumberOrLetter (s: string) = \n        s.Length > 0 && isUpperOrLowerOrNumber s || isLetterOrDigit s\n    let isUpperOrLowerOrNumberOrLetterOrDigit (s: string) = \n        s.Length > 0 && isUpperOrLowerOrNumber s || isLetterOrDigit s || isDigit s\n    let isUpperOrLowerOrNumberOrLetterOrDigit (s: string) = \n        s.Length > 0 && isUpperOrLowerOrNumber s || isLetterOrDigit s\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3mwzs3by.fsx(39,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let rec reverse (s: string) = \n        match s with\n        | \"\" -> \"\"\n        | _ when s.Length = 0 -> \"\"\n        | _ when s.[0] = '#' -> reverse (s.Substring(1))\n        | _ -> s.Substring(0, s.Length - 1)\n    reverse s\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let rec reverse (s: string) = \n        match s with \n        | \"\" -> \"\"\n        | _ -> \n            let s = s.ToCharArray()\n            let s = s |> Array.rev\n            reverse s\n    reverse s\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476920,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphu8vq20z.fsx(17,21): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char[]'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let s = s.ToLower()\n    let rev = s.ToUpper()\n    if s.Contains(\"#\") then rev\n    else s\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let reverse = function\n        | 'A' -> 'B'\n        | 'B' -> 'A'\n        | _ -> failwith \"Invalid input\"\n    let isLetter (c: char) = c >= 'a' && c <= 'z'\n    let isDigit (c: char) = c >= '0' && c <= '9'\n    let isValid (c: char) = \n        if isLetter c || isDigit c then true\n        else false\n    let isValidDigit (c: char) = isDigit c || isLetter c\n    let isValidChar (c: char) = isLetter c || isDigit c || isValid c\n    let isValidString (c: char) = isLetter c || isDigit c || isValid c\n    let isValidNumber (c: char) = isLetter c || isDigit c || isValid c\n    let isValidUpper (c: char) = isLetter c || isDigit c || isValid c || isValid c\n    let isValidLower (c: char) = isLetter c || isDigit c || isValid c || isValid c\n    let isValidNumberOrDigit (c: char) = isLetter c || isDigit c || isValid c || isValid c\n    let isValidUpperOrLower (c: char) = isLetter c || isDigit c || isValid c || isValid c\n    let isValidNumberOrDigitOrLower (c: char) = isLetter c || isDigit c || isValid c || isValid c || isValid c\n    let isValidNumberOrDigitOrLowerOrUpper (c: char) = isLetter c || isDigit c || isValid c || isValid c || isValid c || isValid c || isValid c\n    let isValidNumberOrDigitOrLowerOrUpperOrUpper (c: char) = isLetter c || isDigit c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || isValid c || is\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyq47zk92.fsx(30,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let s = s.ToLower()\n    let s = s.ToUpper()\n    let s = s.Replace(\" \", \"\")\n    let s = s.Replace(\"-\", \"\")\n    let s = s.Replace(\".\", \"\")\n    let s = s.Replace(\"+\", \"\")\n    let s = s.Replace(\"/\", \"\")\n    let s = s.Replace(\"*\", \"\")\n    let s = s.Replace(\"?\", \"\")\n    let s = s.Replace(\"%\", \"\")\n    let s = s.Replace(\"&\", \"\")\n    let s = s.Replace(\"/\", \"\")\n    let s = s.Replace(\"*\", \"\")\n    let s = s.Replace(\"?\", \"\")\n    let s = s.Replace(\"%\", \"\")\n    let s = s.Replace(\"&\", \"\")\n    let s = s.Replace(\"/\", \"\")\n    let s = s.Replace(\"*\", \"\")\n    let s = s.Replace(\"?\", \"\")\n    let s = s.Replace(\"%\", \"\")\n    let s = s.Replace(\"&\", \"\")\n    let s = s.Replace(\"/\", \"\")\n    let s = s.Replace(\"*\", \"\")\n    let s = s.Replace(\"?\", \"\")\n    let s = s.Replace(\"%\", \"\")\n    let s = s.Replace(\"&\", \"\")\n    let s = s.Replace(\"/\", \"\")\n    let s = s.Replace(\"*\", \"\")\n    let s = s.Replace(\"?\", \"\")\n    let s = s.Replace(\"%\", \"\")\n    let s = s.Replace(\"&\", \"\")\n    let s = s.Replace(\"/\", \"\")\n    let s = s.Replace(\"*\", \"\")\n    let s = s.Replace(\"?\", \"\")\n    let s = s.Replace(\"%\", \"\")\n    let s = s.Replace(\"&\", \"\")\n    let s = s.Replace(\"/\", \"\")\n    let s = s.Replace(\"\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx13l_6c1.fsx(54,22): error FS0010: Unexpected symbol # in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let reverse = function\n        | 'A' -> 'B'\n        | 'B' -> 'A'\n        | _ -> failwith \"Invalid character\"\n    let isLetter = function\n        | 'a' -> true\n        | 'b' -> true\n        | 'c' -> true\n        | _ -> false\n    let isDigit = function\n        | '0' -> true\n        | '1' -> true\n        | '2' -> true\n        | '3' -> true\n        | '4' -> true\n        | '5' -> true\n        | '6' -> true\n        | '7' -> true\n        | '8' -> true\n        | '9' -> true\n        | _ -> false\n    let isUpper = function\n        | 'A' -> true\n        | 'B' -> true\n        | 'C' -> true\n        | 'D' -> true\n        | 'E' -> true\n        | 'F' -> true\n        | 'G' -> true\n        | 'H' -> true\n        | _ -> false\n    let isLower = function\n        | 'a' -> true\n        | 'b' -> true\n        | 'c' -> true\n        | 'd' -> true\n        | 'e' -> true\n        | 'f' -> true\n        | 'g' -> true\n        | 'h' -> true\n        | _ -> false\n    let isDigitOrUpper = function\n        | '0' -> true\n        | '1' -> true\n        | '2' -> true\n        | '3' -> true\n        | '4' -> true\n        | '5' -> true\n        | '6' -> true\n        | '7' -> true\n        | '8' -> true\n        | '9' -> true\n        | _ -> false\n    let isDigitOrLower = function\n        | 'a' -> true\n        | 'b' -> true\n        | 'c' -> true\n        | 'd' -> true\n        | 'e' -> true\n        | 'f' -> true\n        | 'g' -> true\n        | 'h' -> true\n        | _ -> false\n    let isUpperOrLower = function\n        |\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprttw3x8g.fsx(76,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let rev (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        else s.Substring(0, s.Length - 1)\n    let rev2 (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        else s.Substring(0, s.Length - 1)\n    let rev3 (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        else s.Substring(0, s.Length - 1)\n    let rev4 (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        else s.Substring(0, s.Length - 1)\n    let rev5 (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        else s.Substring(0, s.Length - 1)\n    let rev6 (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        else s.Substring(0, s.Length - 1)\n    let rev7 (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        else s.Substring(0, s.Length - 1)\n    let rev8 (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        else s.Substring(0, s.Length - 1)\n    let rev9 (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        else s.Substring(0, s.Length - 1)\n    let rev10 (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        else s.Substring(0, s.Length - 1)\n    let rev11 (s: string) = \n        let s = s.ToLower()\n        if s.Length = 0 then \"\"\n        \nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3g36w2sd.fsx(51,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let rev (s: string) = s.ToUpper()\n    let rev2 (s: string) = s.ToLower()\n    let rev3 (s: string) = s.Trim()\n    let rev4 (s: string) = s.Replace(\" \", \"\")\n    let rev5 (s: string) = s.Replace(\"-\", \"\")\n    let rev6 (s: string) = s.Replace(\"+\", \"\")\n    let rev7 (s: string) = s.Replace(\".\", \"\")\n    let rev8 (s: string) = s.Replace(\"/\", \"\")\n    let rev9 (s: string) = s.Replace(\"*\", \"\")\n    let rev10 (s: string) = s.Replace(\"%\", \"\")\n    let rev11 (s: string) = s.Replace(\"&\", \"\")\n    let rev12 (s: string) = s.Replace(\"*\", \"\")\n    let rev13 (s: string) = s.Replace(\"+\", \"\")\n    let rev14 (s: string) = s.Replace(\"/\", \"\")\n    let rev15 (s: string) = s.Replace(\"*\", \"\")\n    let rev16 (s: string) = s.Replace(\"%\", \"\")\n    let rev17 (s: string) = s.Replace(\"&\", \"\")\n    let rev18 (s: string) = s.Replace(\"+\", \"\")\n    let rev19 (s: string) = s.Replace(\"/\", \"\")\n    let rev20 (s: string) = s.Replace(\"*\", \"\")\n    let rev21 (s: string) = s.Replace(\"%\", \"\")\n    let rev22 (s: string) = s.Replace(\"&\", \"\")\n    let rev23 (s: string) = s.Replace(\"+\", \"\")\n    let rev24 (s: string) = s.Replace(\"/\", \"\")\n    let rev25 (s: string) = s.Replace(\"*\", \"\")\n    let rev26 (s: string) = s.Replace(\"%\", \"\")\n    let rev27 (s\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvhz3bf8i.fsx(38,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (37:5). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpvhz3bf8i.fsx(38,1): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let s = s.ToCharArray()\n    let rev = Array.rev s\n    let revStr = rev |> Array.map (fun c -> c.ToString())\n    revStr |> String.concat \"\"\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let s = s.ToCharArray()\n    let s = s |> Array.rev\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n    let s = s |> Array.toList\n    let s = s |> List.rev\n    let s = s |> List.toArray\n\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppvohfag7.fsx(54,5): error FS0588: The block following this 'let' is unfinished. Every code block is an expression and must have a result. 'let' cannot be the final code element in a block. Consider giving this block an explicit result.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let rec loop (s: string) = \n        match s with\n        | \"\" -> \"\"\n        | _ -> \n            let s = s.ToLower()\n            if s.Contains(\"#\") then \n                let s = s.Substring(0, s.IndexOf(\"#\"))\n                let s = s.Substring(s.IndexOf(\"#\") + 1)\n                loop s\n            else \n                s\n    loop s\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let reverse (s: string) = \n        let s' = s.ToCharArray()\n        let s'' = Array.rev s'\n        s''.ToCharArray()\n    let s = s |> reverse\n    if s.Length = 0 then \"\"\n    else s\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476920,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpelk317ld.fsx(14,13): error FS0039: The type '[]<_>' does not define the field, constructor or member 'ToCharArray'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let reverse = \n        function\n        | 'A' -> 'B'\n        | 'B' -> 'A'\n        | _ -> failwith \"Invalid character\"\n    let rec reverseChar (c: char) =\n        match c with\n        | 'A' -> 'B'\n        | 'B' -> 'A'\n        | _ -> failwith \"Invalid character\"\n    let rec reverseString (s: string) =\n        match s with\n        | \"\" -> \"\"\n        | _ -> s |> reverse |> reverseString\n    reverseChar s.[0]\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476920,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp36fr7ek7.fsx(24,21): error FS0001: The type 'string' does not match the type 'char'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let rec reverse (s: string) = \n        let s' = s.ToCharArray()\n        let s'' = s'.ToCharArray()\n        let s''' = s''.ToCharArray()\n        let s'''' = s''.ToCharArray()\n        let s''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476919,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_7oadqys.fsx(49,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n    let rev (s: string) = \n        let mutable i = 0\n        let mutable c = s.[i]\n        while i < s.Length && c <> '\\n' do\n            i <- i + 1\n            c <- s.[i]\n        if i < s.Length then\n            s.[i] <- '\\n'\n            c <- s.[i]\n        s.[i] <- c\n        s\n    let revs = s |> rev\n    if revs.Length = 0 then\n        s\n    else\n        revs.[0]\nlet test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()",
      "timestamp": 1675476920,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc469_xwg.fsx(18,13): error FS0810: Property 'Chars' cannot be set\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}