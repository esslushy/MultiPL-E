{
  "name": "HumanEval_114_minSubArraySum",
  "language": "fs",
  "prompt": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n",
  "tests": "let test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            let sum = x + loop xs\n            if sum < nums.[0] then sum else loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp95l_z4zm.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp95l_z4zm.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            let sum = x + (loop xs)\n            if sum < nums.[0] then sum else loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr1aeq15_.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpr1aeq15_.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) (acc: int) = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            let min = min x acc\n            loop xs (min + x)\n    loop nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl7lovqe3.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpl7lovqe3.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec minSubArraySum' nums = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            if x < 0 then \n                minSubArraySum' xs\n            else\n                minSubArraySum' (minSubArraySum' xs)\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphe3f9rrt.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmphe3f9rrt.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop acc nums =\n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2t7w1gch.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp2t7w1gch.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop acc nums =\n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2t7w1gch.fsx(17,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp2t7w1gch.fsx(17,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            let sum = x + loop xs\n            if sum < nums.[0] then sum\n            else loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkep0jfkf.fsx(20,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpkep0jfkf.fsx(20,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + loop xs\n            if sum < 0 then sum else loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcvocslad.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpcvocslad.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) = \n        match nums with \n        | [] -> 0\n        | x::xs -> \n            let sum = x + loop xs\n            if sum < 0 then sum else loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp8wbee4z.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpp8wbee4z.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec minSubArraySum' nums = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvb08atej.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpvb08atej.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) (acc: int) =\n        match nums with\n        | [] -> acc\n        | x::xs ->\n            let sum = x + loop xs (acc + x)\n            loop xs (acc - x)\n    loop nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpubfi9apa.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpubfi9apa.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) (acc: int) = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            let min = min acc x\n            loop xs (min + acc)\n    loop nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph2nxa22g.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmph2nxa22g.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + (loop xs)\n            if sum < 0 then sum else loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpedsjjxs1.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpedsjjxs1.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x < 0 -> loop xs\n            | x when x > 0 -> loop xs\n            | _ -> loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgdwyls17.fsx(21,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpgdwyls17.fsx(21,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + loop xs\n            if sum < 0 then sum else loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcvocslad.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpcvocslad.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec findMinSubArraySum (nums: int list) (acc: int) = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then findMinSubArraySum xs (acc + x)\n            else findMinSubArraySum xs (acc + x)\n    findMinSubArraySum nums 0\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx578zr09.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpx578zr09.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + loop xs\n            if sum < 0 then sum else loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcvocslad.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpcvocslad.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) =\n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + loop xs\n            if sum < 0 then sum else loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp55mnu11o.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp55mnu11o.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + loop xs\n            if sum < 0 then sum else loop xs\n    loop nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcvocslad.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmpcvocslad.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n    let rec minSubArraySum' nums =\n        match nums with\n        | [] -> 0\n        | x::xs ->\n            let sum = x + minSubArraySum' xs\n            if sum < x then sum else minSubArraySum' xs\n    minSubArraySum' nums\nlet test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()",
      "timestamp": 1675476975,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp799q01e_.fsx(19,23): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n\n\n/tmp/tmp799q01e_.fsx(19,28): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}