{
  "name": "HumanEval_121_solution",
  "language": "fs",
  "prompt": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n",
  "tests": "let test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sum (acc: int) (lst: int list) = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then sum (acc + x) xs\n            else sum (acc + x) xs\n    sum 0 lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumEvens (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumEvens xs\n            else sumEvens (xs@[x])\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumEvens (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumEvens xs\n            else sumEvens (xs@[x])\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumOdd (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> if x % 2 = 0 then sumOdd xs else xs\n    sumOdd lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477031,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxr3yw3mb.fsx(10,53): error FS0001: All branches of an 'if' expression must return values implicitly convertible to the type of the first branch, which here is 'int'. This branch returns a value of type 'int list'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let evens = lst |> List.filter (fun x -> x % 2 = 0)\n    let odds = lst |> List.filter (fun x -> x % 2 <> 0)\n    let evens' = evens |> List.map (fun x -> x + 1)\n    let odds' = odds |> List.map (fun x -> x - 1)\n    let evens'' = evens |> List.map (fun x -> x + 1)\n    let odds'' = odds |> List.map (fun x -> x - 1)\n    let evens''' = evens |> List.map (fun x -> x + 1)\n    let odds''' = odds |> List.map (fun x -> x - 1)\n    let evens'''' = evens |> List.map (fun x -> x + 1)\n    let odds'''' = odds |> List.map (fun x -> x - 1)\n    let evens''''' = evens |> List.map (fun x -> x + 1)\n    let odds'''''' = odds |> List.map (fun x -> x - 1)\n    let evens'''''' = evens |> List.map (fun x -> x + 1)\n    let odds'''''' = odds |> List.map (fun x -> x - 1)\n    let evens''''''' = evens |> List.map (fun x -> x + 1)\n    let odds'''''''' = odds |> List.map (fun x -> x - 1)\n    let evens'''''''' = evens |> List.map (fun x -> x + 1)\n    let odds''''''''' = odds |> List.map (fun x -> x - 1)\n    let evens''''''''' = evens |> List.map (fun x -> x + 1)\n    let odds''''''''''' = odds |> List.map (fun x -> x - 1)\n    let evens''''''''''' = evens |> List.map (fun x -> x + 1)\n    let odds''''''''\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477031,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2_0ygjhf.fsx(29,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumEven (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumEven xs\n            else sumEven (xs@[x])\n    sumEven lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumOddEven (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddEven xs\n            else sumOddEven xs\n    sumOddEven lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumEvens (lst: int list) = \n        match lst with \n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumEvens xs\n            else sumEvens xs\n    sumEvens lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumEven (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            if x % 2 = 0 then sumEven xs\n            else sumEven (xs@[x])\n    sumEven lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumOdd (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then \n                sumOdd xs\n            else \n                sumOdd (xs@[x])\n    sumOdd lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumOdd (lst: int list) =\n        match lst with\n        | [] -> 0\n        | x::xs -> if x % 2 = 0 then sumOdd xs else xs\n    sumOdd lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477031,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj257g1fw.fsx(10,53): error FS0001: All branches of an 'if' expression must return values implicitly convertible to the type of the first branch, which here is 'int'. This branch returns a value of type 'int list'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumOddElems (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOddElems xs\n            else sumOddElems (xs@[x])\n    sumOddElems lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sum (acc: int) (i: int) = \n        if i = lst.Length then acc\n        else sum (acc + lst.[i]) (i + 1)\n    sum 0 lst.Length\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumEven (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumEven xs\n            else sumEven (xs@[x])\n    sumEven lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let evens = lst |> List.filter (fun x -> x % 2 = 0)\n    let odds = lst |> List.filter (fun x -> x % 2 <> 0)\n    let sum = evens |> List.sum\n    sum + odds |> List.sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477031,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiys_ofd8.fsx(10,11): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumEven (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x :: xs -> \n            match x with\n            | x when x % 2 = 0 -> sumEven xs\n            | _ -> sumEven xs\n    sumEven lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let even = lst |> List.filter (fun x -> x % 2 = 0)\n    let odd = lst |> List.filter (fun x -> x % 2 = 1)\n    let sum = even @ odd\n    sum\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477031,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr3olbgux.fsx(10,5): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int list'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumEven (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumEven xs\n            | _ -> sumEven xs\n    sumEven lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumEven (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> sumEven xs\n            | _ -> sumEven xs\n    sumEven lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlet solution (lst: int list): int  = \n    let rec sumOdd (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            if x % 2 = 0 then sumOdd xs\n            else sumOdd xs\n    sumOdd lst\nlet test() = \n  let candidate = solution\n  assert (candidate [5; 8; 7; 1] = 12)\n  assert (candidate [3; 3; 3; 3; 3] = 9)\n  assert (candidate [30; 13; 24; 321] = 0)\n  assert (candidate [5; 9] = 5)\n  assert (candidate [2; 4; 8] = 0)\n  assert (candidate [30; 13; 23; 32] = 23)\n  assert (candidate [3; 13; 2; 9] = 3)\n  0\n\ntest()",
      "timestamp": 1675477032,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}