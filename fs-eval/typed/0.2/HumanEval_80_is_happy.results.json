{
  "name": "HumanEval_80_is_happy",
  "language": "fs",
  "prompt": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n",
  "tests": "let test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec is_happy_rec (s: string) = \n        match s with\n        | \"\" -> false\n        | _ -> \n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] = 'a' && i < s.Length && s.[i] = 'a' then\n                    i <- i + 1\n                else\n                    i <- i + 1\n            is_happy_rec s.[..i-1]\n    is_happy_rec s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check_length (s: string) = \n        match s with\n        | \"\" -> false\n        | _ -> \n            let mutable i = 0\n            while i < s.Length && not (Char.IsLetter(s.[i])) do\n                i <- i + 1\n            i < s.Length && not (Char.IsLetter(s.[i]))\n    check_length s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzrgq0swu.fsx(17,40): error FS0039: The value, namespace, type or module 'Char' is not defined. Maybe you want one of the following:\n   char\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check (s: string) = \n        match s with\n        | \"\" -> false\n        | _ -> \n            let mutable i = 0\n            while i < s.Length && not (Char.IsLetter(s.[i])) do\n                i <- i + 1\n            i >= s.Length\n    check s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpld40kf7s.fsx(17,40): error FS0039: The value, namespace, type or module 'Char' is not defined. Maybe you want one of the following:\n   char\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check_length (s: string) = \n        if s.Length <= 3 then \n            s.Length = 3\n        else\n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] <> s.[i-1] && s.[i] <> s.[i-2] && s.[i] <> s.[i-3] then\n                    i <- i + 1\n                else\n                    i <- i + 1\n            check_length s.[i-1]\n    check_length s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmxyy4o_t.fsx(22,26): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check_length (s: string) =\n        if s.Length < 3 then\n            false\n        else\n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] <> s.[i-1] then\n                    false\n                else\n                    i <- i + 1\n            check_length s\n    check_length s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpg_idhcet.fsx(21,21): error FS0001: All branches of an 'if' expression must return values implicitly convertible to the type of the first branch, which here is 'bool'. This branch returns a value of type 'unit'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec is_happy_rec (s: string) = \n        if s.Length < 3 then \n            false\n        else\n            let first = s.[0]\n            let second = s.[1]\n            let third = s.[2]\n            let rest = s.Substring(3)\n            let is_happy_first = is_happy_rec rest\n            let is_happy_second = is_happy_rec second\n            let is_happy_third = is_happy_rec third\n            if is_happy_first && is_happy_second && is_happy_third then \n                true\n            else\n                false\n    is_happy_rec s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz4w2yjvu.fsx(21,48): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check_length (s: string) = \n        if s.Length < 3 then \n            false\n        else\n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] <> s.[i-1] || s.[i] <> s.[i-1] || s.[i] <> s.[i-1] || s.[i] <> s.[i-1] then\n                    false\n                else\n                    i <- i + 1\n    check_length s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4b5hrxbj.fsx(17,13): error FS0001: All branches of an 'if' expression must return values implicitly convertible to the type of the first branch, which here is 'bool'. This branch returns a value of type 'unit'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec is_happy_rec (s: string) = \n        match s with\n        | \"\" -> false\n        | _ -> \n            let mutable is_happy = true\n            for i in 0..s.Length-1 do\n                if s.[i] = ' ' then \n                    is_happy <- is_happy && is_happy_rec s.[i+1]\n                else\n                    is_happy <- is_happy && not is_happy_rec s.[i+1]\n            is_happy\n    is_happy_rec s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6n79ekvo.fsx(19,58): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec is_happy_i (s: string) = \n        if s.Length < 3 then false\n        else \n            let mutable i = 0\n            while i < s.Length && not (Char.IsLetter(s.[i])) do i <- i + 1\n            i = 0 && s.[i] = 'a' && s.[i+1] = 'a' && s.[i+2] = 'a' && s.[i+3] = 'a'\n    is_happy_i s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwv4puvku.fsx(16,40): error FS0039: The value, namespace, type or module 'Char' is not defined. Maybe you want one of the following:\n   char\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check_length (s: string) = \n        if s.Length <= 3 then \n            false\n        else \n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] = 'a' || s.[i] = 'b' || s.[i] = 'c' || s.[i] = 'd' || s.[i] = 'e' || s.[i] = 'f' || s.[i] = 'g' || s.[i] = 'h' || s.[i] = 'i' || s.[i] = 'j' || s.[i] = 'k' || s.[i] = 'l' || s.[i] = 'm' || s.[i] = 'n' || s.[i] = 'o' || s.[i] = 'p' || s.[i] = 'q' || s.[i] = 'r' || s.[i] = 's' || s.[i] = 't' || s.[i] = 'u' || s.[i] = 'v' || s.[i] = 'w' || s.[i] = 'x' || s.[i] = 'y' || s.[i] = 'z' || s.[i] = 'A' || s.[i] = 'B' || s.[i] = 'C' || s.[i] = 'D' || s.[i] = 'E' || s.[i] = 'F' || s.[i] = 'G' || s.[i] = 'H' || s.[i] = 'I' || s.[i] = 'J' || s.[i] = 'K' || s.[i] = 'L' || s.[i] = 'M' || s.[i] = 'N' || s.[i] = 'O' || s.[i] = 'P' || s.[i] = 'Q' || s.[i] = 'R' || s.[i] = 'S' || s.[i] = 'T' || s.[i] = 'U' || s.[i] = 'V' || s.[i] = 'W' || s.[i] = 'X' || s.[i] = 'Y' || s.[i\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdbcpcsxz.fsx(19,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (18:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdbcpcsxz.fsx(19,1): error FS0010: Unexpected keyword 'let' or 'use' in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec is_happy_rec (s: string) = \n        if s.Length < 3 then false\n        else \n            let mutable i = 0\n            while i < s.Length && not (Char.IsLetter(s.[i])) do\n                i <- i + 1\n            i < s.Length && not (Char.IsLetter(s.[i]))\n    is_happy_rec s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpls_qycpe.fsx(16,40): error FS0039: The value, namespace, type or module 'Char' is not defined. Maybe you want one of the following:\n   char\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check_length (length: int) (s: string) =\n        if length < 3 then\n            false\n        else\n            let first = s.[0]\n            let second = s.[1]\n            let third = s.[2]\n            let rest = s.[3..]\n            let is_a = first = 'a' && second = 'a' && third = 'a' && rest = 'a'\n            let is_a_and_b = first = 'a' && second = 'b' && third = 'a' && rest = 'a'\n            let is_a_and_b_and_c = first = 'a' && second = 'b' && third = 'a' && rest = 'b'\n            let is_a_and_b_and_c_and_d = first = 'a' && second = 'b' && third = 'a' && rest = 'b'\n            let is_a_and_b_and_c_and_d_and_e = first = 'a' && second = 'b' && third = 'a' && rest = 'b'\n            let is_a_and_b_and_c_and_d_and_e_and_f = first = 'a' && second = 'b' && third = 'a' && rest = 'b'\n            let is_a_and_b_and_c_and_d_and_e_and_f_and_g = first = 'a' && second = 'b' && third = 'a' && rest = 'b'\n            let is_a_and_b_and_c_and_d_and_e_and_f_and_g_and_h = first = 'a' && second = 'b' && third = 'a' && rest = 'b'\n            let is_a_and_b_and_c_and_d_and_e_and_f_and_g_and_h_and_i = first = 'a' && second = 'b' && third = 'a' && rest = 'b'\n            let is_a_and_b_and_c_and_d_and_e_and_f_and_g_\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgp7_ph0_.fsx(30,1): error FS0010: Incomplete structured construct at or before this point in binding. Expected '=' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check_length (s: string) = \n        match s.Length with\n        | 0 -> false\n        | _ -> \n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] <> s.[i-1] then\n                    i <- i + 1\n                else\n                    i <- i + 1\n            check_length s\n    check_length s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check (s: string) = \n        if s.Length = 3 then \n            if s.[0] = 'a' && s.[1] = 'a' && s.[2] = 'a' then \n                if s.[0] = 'b' && s.[1] = 'b' && s.[2] = 'b' then \n                    if s.[0] = 'c' && s.[1] = 'c' && s.[2] = 'c' then \n                        if s.[0] = 'd' && s.[1] = 'd' && s.[2] = 'd' then \n                            if s.[0] = 'e' && s.[1] = 'e' && s.[2] = 'e' then \n                                if s.[0] = 'f' && s.[1] = 'f' && s.[2] = 'f' then \n                                    if s.[0] = 'g' && s.[1] = 'g' && s.[2] = 'g' then \n                                        if s.[0] = 'h' && s.[1] = 'h' && s.[2] = 'h' then \n                                            if s.[0] = 'i' && s.[1] = 'i' && s.[2] = 'i' then \n                                                if s.[0] = 'j' && s.[1] = 'j' && s.[2] = 'j' then \n                                                    if s.[0] = 'k' && s.[1] = 'k' && s.[2] = 'k' then \n                                                        if s.[0] = 'l' && s.[1] = 'l' && s.[2] = 'l' then \n                                                            if s.[0] = 'm' && s.[1] = 'm' && s.[2] = 'm' then \n                                                                if s.[0] = 'n' && s.[1] = 'n' && s.[2] = 'n' then \n                                                                    if s.[0] = 'o' && s.[1] = 'o' && s.[2] = 'o' then \n                                                                        if s.[0] = 'p' && s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm28jo5xu.fsx(30,1): error FS0010: Incomplete structured construct at or before this point in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec is_happy_rec (s: string) = \n        match s with\n        | \"\" -> true\n        | _ -> \n            let mutable i = 0\n            while i < s.Length && not (Char.IsLetter(s.[i])) do\n                i <- i + 1\n            i >= s.Length\n    is_happy_rec s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr25lx9t0.fsx(17,40): error FS0039: The value, namespace, type or module 'Char' is not defined. Maybe you want one of the following:\n   char\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec is_happy_rec (s: string) = \n        if s.Length = 3 then \n            let first = s.[0]\n            let second = s.[1]\n            let third = s.[2]\n            if first = second && second = third then \n                true\n            else\n                is_happy_rec (second)\n        else\n            false\n    is_happy_rec s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0gmh9nn1.fsx(20,31): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check_length (s: string) = \n        if s.Length < 3 then false\n        else \n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] <> s.[i-1] || s.[i] <> s.[i-1] then \n                    i <- i + 1\n                else\n                    i <- i + 1\n            check_length s.[i-1]\n    check_length s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdqnc229m.fsx(21,26): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec check_length (s: string) = \n        if s.Length < 3 then \n            false\n        else\n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] <> s.[i-1] || s.[i] <> s.[i-2] || s.[i] <> s.[i-3] then\n                    false\n                else\n                    i <- i + 1\n            check_length s\n    check_length s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmhq9e7j0.fsx(21,21): error FS0001: All branches of an 'if' expression must return values implicitly convertible to the type of the first branch, which here is 'bool'. This branch returns a value of type 'unit'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec is_happy_rec (s: string) = \n        if s.Length < 3 then \n            false\n        else \n            let mutable i = 0\n            while i < s.Length && not (Char.IsLetter(s.[i])) do \n                i <- i + 1\n            i < s.Length && not (Char.IsLetter(s.[i]))\n    is_happy_rec s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477041,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgdah2eqz.fsx(17,40): error FS0039: The value, namespace, type or module 'Char' is not defined. Maybe you want one of the following:\n   char\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n    let rec is_happy_loop (s: string) = \n        if s.Length >= 3 then \n            if s.Contains(\" \") then \n                let mutable i = 0\n                while i < s.Length do \n                    if s.[i] = 'a' && s.[i+1] = 'a' && s.[i+2] = 'a' && s.[i+3] = 'a' then \n                        i <- i + 4\n                    else\n                        i <- i + 1\n                is_happy_loop s.[0..i-1]\n            else\n                is_happy_loop s\n        else\n            false\n    is_happy_loop s\nlet test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()",
      "timestamp": 1675477042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}