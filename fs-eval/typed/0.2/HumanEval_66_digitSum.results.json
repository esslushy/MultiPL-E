{
  "name": "HumanEval_66_digitSum",
  "language": "fs",
  "prompt": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n",
  "tests": "let test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] >= '0' && s.[i] <= '9' then\n            sum <- sum + (int s.[i] - int '0') * (int 'A' - int '0')\n        else\n            sum <- sum + (int s.[i] - int 'A') * (int 'a' - int 'A')\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        sum <- sum + (int s.[i])\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let upper = s.ToCharArray() |> Array.map (fun c -> c.ToString().ToUpper())\n    let mutable sum = 0\n    for i = 0 to upper.Length - 1 do\n        sum <- sum + upper.[i]\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwhc58u5e.fsx(15,22): error FS0001: The type 'string' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        if (s.[i] >= '0' && s.[i] <= '9') then\n            sum <- sum + int (s.[i] - '0')\n        else\n            sum <- sum + int (s.[i] - 'A')\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfpkpgf4b.fsx(15,39): error FS0001: The type 'char' does not support the operator '-'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let upper = s.ToCharArray() |> Array.map (fun c -> c.ToString()) |> Array.reduce (+)\n    let lower = s.ToCharArray() |> Array.map (fun c -> c.ToString()) |> Array.reduce (fun a b -> a + b)\n    upper - lower\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsiphv5oj.fsx(14,13): error FS0001: The type 'string' does not support the operator '-'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        sum <- sum + (int s.[i])\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        if (s.[i] >= '0' && s.[i] <= '9') then\n            sum <- sum + int (s.[i] - '0')\n        else\n            sum <- sum + 10\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkipbbxgn.fsx(15,39): error FS0001: The type 'char' does not support the operator '-'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let upper = s.ToCharArray()\n    let mutable sum = 0\n    for i = 0 to upper.Length - 1 do\n        if (upper.[i] >= '0' && upper.[i] <= '9') then\n            sum <- sum + int (upper.[i] - '0')\n        else\n            sum <- sum + int (upper.[i])\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkgkrfqko.fsx(16,43): error FS0001: The type 'char' does not support the operator '-'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] >= '0' && s.[i] <= '9' then\n            sum <- sum + (int s.[i] - int '0')\n        else\n            sum <- sum + (int s.[i] - int 'A')\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let upper = s.ToCharArray()\n    let mutable sum = 0\n    for i = 0 to upper.Length - 1 do\n        if upper.[i] >= '0' && upper.[i] <= '9' then\n            sum <- sum + (int (upper.[i] - '0'))\n        else\n            sum <- sum + int (upper.[i])\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_030fo7a.fsx(16,44): error FS0001: The type 'char' does not support the operator '-'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        sum <- sum + (int s.[i])\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let upperChars = s.ToCharArray()\n    let mutable sum = 0\n    for i = 0 to upperChars.Length - 1 do\n        if upperChars.[i] = 'A' || upperChars.[i] = 'a' then\n            sum <- sum + (int upperChars.[i])\n        else\n            sum <- sum + (int upperChars.[i])\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] >= '0' && s.[i] <= '9' then\n            sum <- sum + int s.[i] - int '0'\n        else\n            sum <- sum + int s.[i] - int 'A'\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] >= '0' && s.[i] <= '9' then\n            sum <- sum + (int s.[i] - int '0') * (int 'A' - int '0')\n        else\n            sum <- sum + (int s.[i] - int 'A') * (int 'a' - int 'A')\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] >= '0' && s.[i] <= '9' then\n            sum <- sum + int s.[i] - int '0'\n        else\n            sum <- sum + int s.[i] - int 'A'\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let mutable sum = 0\n    for i = 0 to s.Length - 1 do\n        sum <- sum + (int s.[i])\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let upper = s.ToCharArray()\n    let mutable sum = 0\n    for i = 0 to upper.Length - 1 do\n        if upper.[i] >= '0' && upper.[i] <= '9' then\n            sum <- sum + (int upper.[i]) - (int '0')\n        else\n            sum <- sum + (int 'A') - (int 'a')\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let upper = s.ToCharArray()\n    let mutable sum = 0\n    for i = 0 to upper.Length - 1 do\n        if upper.[i] >= '0' && upper.[i] <= '9' then\n            sum <- sum + (int upper.[i]) - (int '0')\n        else\n            sum <- sum + (int upper.[i]) - (int 'A')\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let upperChars = s.ToCharArray()\n    let mutable sum = 0\n    for i = 0 to upperChars.Length - 1 do\n        if upperChars.[i] = 'A' || upperChars.[i] = 'a' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'B' || upperChars.[i] = 'b' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'C' || upperChars.[i] = 'c' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'D' || upperChars.[i] = 'd' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'E' || upperChars.[i] = 'e' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'F' || upperChars.[i] = 'f' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'G' || upperChars.[i] = 'g' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'H' || upperChars.[i] = 'h' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'I' || upperChars.[i] = 'i' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'J' || upperChars.[i] = 'j' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'K' || upperChars.[i] = 'k' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'L' || upperChars.[i] = 'l' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'M' || upperChars.[i] = 'm' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'N' || upperChars.[i] = 'n' then\n            sum <- sum + 1\n        else if upperChars.[i] = 'O' || upper\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477083,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxcwx0b_7.fsx(44,1): error FS0010: Incomplete structured construct at or before this point in if/then/else expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlet digitSum (s: string): int  = \n    let upper = s.ToCharArray()\n    let lower = s.ToCharArray()\n    let sum = Array.sum upper\n    let mutable i = 0\n    for c in upper do\n        if i = 0 then\n            i <- i + int c\n        else\n            i <- i + int c\n    for c in lower do\n        if i = 0 then\n            i <- i + int c\n        else\n            i <- i + int c\n    sum\nlet test() = \n  let candidate = digitSum\n  assert (candidate \"\" = 0)\n  assert (candidate \"abAB\" = 131)\n  assert (candidate \"abcCd\" = 67)\n  assert (candidate \"helloE\" = 69)\n  assert (candidate \"woArBld\" = 131)\n  assert (candidate \"aAaaaXa\" = 153)\n  assert (candidate \" How are yOu?\" = 151)\n  assert (candidate \"You arE Very Smart\" = 327)\n  0\n\ntest()",
      "timestamp": 1675477084,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6nexuoan.fsx(26,5): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'char'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}