{
  "name": "HumanEval_37_sort_even",
  "language": "fs",
  "prompt": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n",
  "tests": "let test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_i (l: int list) = \n        match l with\n        | [] -> []\n        | x::xs -> \n            if x % 2 = 0 then \n                sort_even_i xs\n            else \n                sort_even_i (xs@[x/2])\n    sort_even_i l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_i (l: int list) = \n        match l with \n        | [] -> l\n        | x::xs -> \n            let x = x % 2\n            if x = 0 then sort_even_i xs\n            else sort_even_i (x::xs)\n    sort_even_i l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_rec (l: int list) = \n        match l with\n        | [] -> []\n        | x::xs ->\n            let x = x % 2\n            if x = 0 then \n                sort_even_rec xs\n            else\n                sort_even_rec (xs@[x])\n    sort_even_rec l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_rec (l: int list) = \n        match l with \n        | [] -> l\n        | h::t -> \n            if h % 2 = 0 then sort_even_rec t\n            else sort_even_rec (h::t)\n    sort_even_rec l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_list (l: int list) = \n        match l with\n        | [] -> []\n        | x::xs -> \n            let y = x % 2\n            if y = 0 then sort_even_list xs\n            elif y = 1 then x::sort_even_list xs\n            else x::sort_even_list xs\n    sort_even_list l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_i (l: int list) (i: int): int list = \n        if i = 0 then l\n        else \n            let temp = l.[i-1]\n            let temp2 = l.[i-1]\n            if temp = temp2 then l\n            else sort_even_i (l.Tail) (i-1)\n    sort_even_i l 0\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_rec (l: int list) = \n        match l with \n        | [] -> l\n        | h::t -> \n            if h % 2 = 0 then sort_even_rec t\n            else sort_even_rec (h::t)\n    sort_even_rec l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_rec (l: int list) = \n        match l with\n        | [] -> []\n        | x::xs -> \n            let x = x % 2\n            if x = 0 then sort_even_rec xs\n            else sort_even_rec (xs@[x])\n    sort_even_rec l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_i (l: int list) = \n        match l with \n        | [] -> []\n        | x::xs -> \n            if x % 2 = 0 then \n                sort_even_i xs\n            else \n                sort_even_i (x::xs)\n    sort_even_i l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_i (l: int list) = \n        match l with\n        | [] -> []\n        | x::xs -> \n            if x % 2 = 0 then sort_even_i xs\n            else x::sort_even_i xs\n    sort_even_i l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_i (l: int list) = \n        match l with\n        | [] -> []\n        | x::xs -> \n            let y = x + 1\n            if y <> x then sort_even_i xs\n            else sort_even_i ys\n    sort_even_i l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476937,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprg38le7r.fsx(15,30): error FS0039: The value or constructor 'ys' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_i (l: int list) = \n        match l with \n        | [] -> l\n        | x::xs -> \n            let y = x % 2\n            if y = 0 then sort_even_i xs\n            else sort_even_i (xs@[y])\n    sort_even_i l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_rec (l: int list) = \n        match l with \n        | [] -> l\n        | x::xs -> \n            let x = x % 2\n            if x = 0 then sort_even_rec xs\n            else sort_even_rec (xs@[x])\n    sort_even_rec l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_rec (l: int list) = \n        match l with \n        | [] -> []\n        | x::xs -> \n            let x = x % 2\n            if x <> 0 then \n                sort_even_rec xs\n            else \n                sort_even_rec xs\n    sort_even_rec l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_l (l: int list) = \n        match l with\n        | [] -> []\n        | x::xs -> \n            let y = x + 1\n            if y <> x then sort_even_l xs\n            else sort_even_l ys\n    sort_even_l l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476937,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfe1gy0o6.fsx(15,30): error FS0039: The value or constructor 'ys' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_rec (l: int list) = \n        match l with \n        | [] -> []\n        | h::t -> \n            if h % 2 = 0 then sort_even_rec t\n            else sort_even_rec (h::t)\n    sort_even_rec l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_rec (l: int list) = \n        match l with \n        | [] -> []\n        | x::xs -> \n            let y = x + 1\n            if y > 0 then sort_even_rec (xs@[y])\n            else xs\n    sort_even_rec l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_l (l: int list) = \n        match l with \n        | [] -> []\n        | h::t -> \n            let h' = h % 2\n            if h' <> 0 then sort_even_l t\n            else \n                if h' = 0 then sort_even_l t\n                else sort_even_l (h'::t)\n    sort_even_l l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_rec (l: int list) = \n        match l with \n        | [] -> []\n        | x::xs -> \n            if x % 2 = 0 then sort_even_rec xs\n            else x::sort_even_rec xs\n    sort_even_rec l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nlet sort_even (l: int list): int list  = \n    let rec sort_even_i (l: int list) = \n        match l with \n        | [] -> []\n        | h::t -> \n            if h % 2 = 0 then \n                sort_even_i t\n            else \n                sort_even_i (h::t)\n    sort_even_i l\nlet test() = \n  let candidate = sort_even\n  assert (candidate [1; 2; 3] = [1; 2; 3])\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 123; 1; -10] = [-10; 3; -5; 2; -3; 3; 5; 0; 9; 1; 123])\n  assert (candidate [5; 8; -12; 4; 23; 2; 3; 11; 12; -10] = [-12; 8; 3; 4; 5; 2; 12; 11; 23; -10])\n  0\n\ntest()",
      "timestamp": 1675476938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}