{
  "name": "HumanEval_83_starts_one_ends",
  "language": "fs",
  "prompt": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n",
  "tests": "let test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop (n: int) = \n        if n = 0 then 0\n        else if n % 2 = 0 then loop (n / 2)\n        else loop (n / 2) + 1\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec count_n (n: int) (acc: int): int =\n        if n = 0 then acc\n        else count_n (n - 1) (acc + 1)\n    count_n n 0\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop (n: int) =\n        if n = 0 then 1\n        elif n % 2 = 0 then loop (n / 2)\n        else loop (n / 2) + 1\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop i = \n        if i > 0 then \n            let n = n - i\n            if n > 0 then \n                loop (n - 1)\n            else\n                i\n        else\n            i\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop i = \n        if i > 0 then \n            loop (i-1)\n        else \n            1\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop i = \n        if i <= n then\n            if i % 2 = 0 then\n                loop (i + 1)\n            else\n                loop (i + 1)\n        else\n            i\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec count_digits (n: int) = \n        if n = 0 then 0\n        elif n = 1 then 1\n        else count_digits (n - 1) + 1\n    count_digits n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec find_starts (n: int) (acc: int) = \n        if n = 0 then acc\n        else if n % 2 = 0 then find_starts (n-1) (acc + 1)\n        else find_starts (n-1) (acc + 1)\n    find_starts n 0\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop i = \n        if i < n then \n            if n % i = 0 then 1\n            else loop (i+1)\n        else 0\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec count_digits (n: int) = \n        if n = 0 then 0\n        elif n % 2 = 0 then count_digits (n / 2)\n        else count_digits (n / 2) + 1\n    count_digits n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop i = \n        if i < n then \n            if n % i = 0 then 1\n            else loop (i + 1)\n        else 0\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec find_starts (n: int) (acc: int list) =\n        if n = 0 then acc\n        else\n            let n_start = find_starts (n-1) (acc |> List.rev)\n            let n_end = find_starts (n-1) (acc |> List.rev |> List.rev)\n            if n_start < n_end then find_starts (n_start+1) (acc |> List.rev)\n            else n_end\n    find_starts n []\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477093,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp68ebaoe8.fsx(9,58): error FS0001: The type 'int' does not match the type 'int list'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop (n: int) = \n        if n = 0 then 0\n        else \n            if n % 2 = 0 then n / 2\n            else loop (n / 2)\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop i = \n        if i <= n then \n            loop (i + 1)\n        else \n            1\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop i = \n        if i = n then 1\n        else loop (i - 1)\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop (n: int) = \n        if n = 0 then 1\n        else \n            let n' = n - 1\n            if n' = 0 then n\n            else \n                let n'' = n' - 1\n                if n'' = 0 then n''\n                else \n                    let n''' = n'' - 1\n                    if n''' = 0 then n'''\n                    else \n                        let n'''' = n''' - 1\n                        if n'''' = 0 then n''''\n                        else \n                            let n'''''' = n''''' - 1\n                            if n'''''' = 0 then n''''''\n                            else \n                                let n'''''''' = n''''''' - 1\n                                if n'''''''' = 0 then n''''''''\n                                else \n                                    let n'''''''''' = n''''''''' - 1\n                                    if n'''''''''' = 0 then n''''''''''\n                                    else \n                                        let n'''''''''''' = n''''''''''' - 1\n                                        if n'''''''''''' = 0 then n''''''''''''\n                                        else \n                                            let n'''''''''''''' = n''''''''''' - 1\n                                            if n'''''''''''''' = 0 then n''''''''''''\n                                            else \n                                                let n'''''''''''''''' = n''''''''''''' - 1\n                                                if n'''''''''''''' = 0 then n''''''''''''\n                                                else \n                                                    let n'''''''''''''''' = n''''''''''''' - 1\n                                                    if n'''''''''''''' = 0 then n''''''''''''\n                                                    else \n                                                        let n'''''''''''''''' = n''''''''''''' - 1\n                                                        if n'''''''''''''' = 0 then n''''''''''''\n                                                        else \n                                                            let n'''''''''''''''' = n''''''''''''' - 1\n                                                            if\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477093,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2vdej7f9.fsx(45,1): error FS0010: Incomplete structured construct at or before this point in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop (n: int) = \n        if n = 0 then 0\n        elif n = 1 then 1\n        else loop (n-1)\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop i =\n        if i = n then 1\n        else loop (i - 1)\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec loop i =\n        if i < n then\n            if n % i = 0 then i\n            else loop (i + 1)\n        else i\n    loop n\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlet starts_one_ends (n: int): int  = \n    let rec check_digit (digit: int) (n: int): int =\n        if digit = 0 then n\n        else check_digit (digit - 1) (n - 1)\n    check_digit n 1\nlet test() = \n  let candidate = starts_one_ends\n  assert (candidate 1 = 1)\n  assert (candidate 2 = 18)\n  assert (candidate 3 = 180)\n  assert (candidate 4 = 1800)\n  assert (candidate 5 = 18000)\n  0\n\ntest()",
      "timestamp": 1675477094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}