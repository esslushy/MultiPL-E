{
  "name": "HumanEval_145_order_by_points",
  "language": "fs",
  "prompt": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n",
  "tests": "let test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    nums\n    |> List.map (fun num -> num * 10)\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec loop i = \n        if i = 0 then []\n        else \n            let sum = nums.[i-1] + nums.[i]\n            let new_nums = nums |> List.map (fun x -> x - sum)\n            loop (i-1) @ new_nums\n    loop 0\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    nums\n    |> List.map (fun num -> num + 1)\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> []\n        | x::xs -> \n            match x with\n            | x when x % 2 = 0 -> loop xs\n            | x -> loop (x::xs)\n    loop nums\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> []\n        | x :: xs -> \n            let sum = x + xs\n            if sum % 10 = 0 then \n                loop xs\n            else \n                loop (xs @ [sum / 10])\n    loop nums\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsj4te1v6.fsx(13,27): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    nums\n    |> List.map (fun x -> x + 1)\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    nums |> List.sortBy (fun x -> x)\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> []\n        | x::xs -> \n            let sum = x + (loop xs)\n            loop (xs@[sum])\n    loop nums\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph59q7knu.fsx(13,28): error FS0001: The type ''a list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec loop (nums: int list) = \n        match nums with \n        | [] -> []\n        | x::xs -> \n            let sum = x + (List.sum xs)\n            loop (xs@[sum])\n    loop nums\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    nums \n    |> List.map (fun num -> num * 10)\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec loop i = \n        if i < nums.Length then \n            let num = nums.[i]\n            if num % 10 = 0 then loop (i+1)\n            else loop (i+1)\n        else nums\n    loop 0\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec loop (nums: int list) (acc: int list) = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop xs (acc@[x])\n    loop nums []\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    nums\n    |> List.map (fun num -> num * 10)\n    |> List.sort\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] nums\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec order_by_nums (nums: int list) (acc: int list) = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            let acc' = x::acc\n            order_by_nums xs acc'\n    order_by_nums nums []\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    nums\n    |> List.sortBy (fun x -> x)\n    |> List.map (fun x -> x + 1)\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec order_by_nums (nums: int list) = \n        match nums with \n        | [] -> []\n        | x::xs -> \n            match x with \n            | 0 -> x::xs\n            | _ -> order_by_nums xs\n    order_by_nums nums\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec loop i = \n        if i = 0 then []\n        else \n            let sum = nums.[i-1] + nums.[i]\n            let new_nums = nums.[0..i-1] @ nums.[i+1..]\n            loop (i-1) @ new_nums\n    loop 0\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec order_by_nums (nums: int list) = \n        match nums with\n        | [] -> []\n        | x::xs -> \n            let new_nums = \n                match x with\n                | 1 -> [x]\n                | 11 -> [x; x]\n                | -1 -> [x; x; x]\n                | -2 -> [x; x; x; x]\n                | -3 -> [x; x; x; x; x]\n                | -4 -> [x; x; x; x; x; x]\n                | -5 -> [x; x; x; x; x; x; x]\n                | -6 -> [x; x; x; x; x; x; x; x]\n                | -7 -> [x; x; x; x; x; x; x; x; x]\n                | -8 -> [x; x; x; x; x; x; x; x; x; x]\n                | -9 -> [x; x; x; x; x; x; x; x; x; x; x; x]\n                | -10 -> [x; x; x; x; x; x; x; x; x; x; x; x; x; x]\n                | -11 -> [x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x]\n                | -12 -> [x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x; x;\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476973,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo8bv9kf9.fsx(29,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:17). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo8bv9kf9.fsx(39,1): error FS0010: Unexpected identifier in expression. Expected 'in' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points (nums: int list): int list  = \n    let rec loop (nums: int list) = \n        match nums with\n        | [] -> nums\n        | x::xs -> \n            let sum = x + xs\n            loop (xs@[sum])\n    loop []\nlet test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()",
      "timestamp": 1675476974,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf7ip48m7.fsx(13,27): error FS0001: The type 'int list' does not match the type 'int'\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}