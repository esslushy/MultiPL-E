{
  "name": "HumanEval_57_monotonic",
  "language": "fs",
  "prompt": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n",
  "tests": "let test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length === 0) ? false :\n  (l[0] === l[l.length - 1]) ? false :\n  (l.length === 1) ? true :\n  (l.length === 2) ? true :\n  (l.length === 3) ? true :\n  (l.length === 4) ? true :\n  (l.length === 5) ? true :\n  (l.length === 6) ? true :\n  (l.length === 7) ? true :\n  (l.length === 8) ? true :\n  (l.length === 9) ? true :\n  (l.length === 10) ? true :\n  (l.length === 11) ? true :\n  (l.length === 12) ? true :\n  (l.length === 13) ? true :\n  (l.length === 14) ? true :\n  (l.length === 15) ? true :\n  (l.length === 16) ? true :\n  (l.length === 17) ? true :\n  (l.length === 18) ? true :\n  (l.length === 19) ? true :\n  (l.length === 20) ? true :\n  (l.length === 21) ? true :\n  (l.length === 22) ? true :\n  (l.length === 23) ? true :\n  (l.length === 24) ? true :\n  (l.length === 25) ? true :\n  (l.length === 26) ? true :\n  (l.length === 27) ? true :\n  (l.length === 28) ? true :\n  (l.length === 29) ? true :\n  (l.length === 30) ? true :\n  (l.length === 31) ? true :\n  (l.length === 32) ? true :\n  (l.length === 33) ? true :\n  (l.length === 34) ? true :\n  (l.length === 35) ? true :\n  (l.length === 36) ? true :\n  (l.length === 37) ? true :\n  (l.length === 38) ? true :\n  (l.length === 39) ? true :\n  (l.length === 40) ? true :\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpehm1ybgz.fsx(9,22): error FS0010: Unexpected keyword 'false' in expression. Expected identifier, '(' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length === 1 && l[0] === l[0]) ||\n  (l.length === 2 && l[0] === l[1]) ||\n  (l.length === 3 && l[0] === l[2]) ||\n  (l.length === 4 && l[0] === l[3]) ||\n  (l.length === 5 && l[0] === l[4]) ||\n  (l.length === 6 && l[0] === l[5]) ||\n  (l.length === 7 && l[0] === l[6]) ||\n  (l.length === 8 && l[0] === l[7]) ||\n  (l.length === 9 && l[0] === l[8]) ||\n  (l.length === 10 && l[0] === l[9]) ||\n  (l.length === 11 && l[0] === l[10]) ||\n  (l.length === 12 && l[0] === l[11]) ||\n  (l.length === 13 && l[0] === l[12]) ||\n  (l.length === 14 && l[0] === l[13]) ||\n  (l.length === 15 && l[0] === l[14]) ||\n  (l.length === 16 && l[0] === l[15]) ||\n  (l.length === 17 && l[0] === l[16]) ||\n  (l.length === 18 && l[0] === l[17]) ||\n  (l.length === 19 && l[0] === l[18]) ||\n  (l.length === 20 && l[0] === l[19]) ||\n  (l.length === 21 && l[0] === l[20]) ||\n  (l.length === 22 && l[0] === l[21]) ||\n  (l.length === 23 && l[0] === l[22]) ||\n  (l.length === 24 && l[0] === l[23]) ||\n  (l.length === 25 && l[0] === l[24]) ||\n  (l.length === 26 && l[0] === l[25]) ||\n  (l.length === 27 && l[0] === l[26]) ||\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795287,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjkuoox_b.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjkuoox_b.fsx(36,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjkuoox_b.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjkuoox_b.fsx(48,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (35:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjkuoox_b.fsx(9,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'length'. Maybe you want one of the following:\n   Length\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length === 0) ? false :\n  (l[0] === l[l.length - 1]) ? false :\n  (l[0] > l[l.length - 1]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? true :\n  (l[0] === l[0]) ? true :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ? false :\n  (l[0] > l[0]) ? false :\n  (l[0] === l[0]) ?\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1sx2823s.fsx(9,22): error FS0010: Unexpected keyword 'false' in expression. Expected identifier, '(' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  l.sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .reverse()\n  .sort()\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp22f7xlfr.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  l.sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  .sort()\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_x4hs0f.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l) => l.sort()\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.length)\n  .reduce((a, b) => a + b)\n  .map(l => l.\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnrvt5mwk.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpnrvt5mwk.fsx(49,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length === 0) ? true :\n  (l[0] < l[1]) ? true :\n  (l[0] === l[1]) ? true :\n  (l[0] === l[2]) ? true :\n  (l[0] === l[3]) ? true :\n  (l[0] === l[4]) ? true :\n  (l[1] < l[2]) ? true :\n  (l[1] === l[2]) ? true :\n  (l[1] === l[3]) ? true :\n  (l[1] === l[4]) ? true;\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp32xjkwnt.fsx(9,22): error FS0010: Unexpected keyword 'true' in expression. Expected identifier, '(' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  l.sort()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj2qjtkvb.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length === 0) ? true :\n  (l.length === 1) ? l[0] >= l[1] :\n  (l.length === 2) ? l[0] >= l[1] && l[0] <= l[2] :\n  (l.length === 3) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[2] :\n  (l.length === 4) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[3] :\n  (l.length === 5) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[4] :\n  (l.length === 6) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] && l[4] >= l[5] :\n  (l.length === 7) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] && l[4] >= l[6] && l[5] >= l[6] :\n  (l.length === 8) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] && l[4] >= l[6] && l[5] >= l[7] && l[6] >= l[7] :\n  (l.length === 9) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] && l\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp35_so0c.fsx(9,22): error FS0010: Unexpected keyword 'true' in expression. Expected identifier, '(' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l.sort()\n  l\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795287,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnlxqrng9.fsx(9,5): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l: any) =>\n    (l: any) =>\n      (l: any) =>\n        (l: any) =>\n          (l: any) =>\n            (l: any) =>\n              (l: any) =>\n                (l: any) =>\n                  (l: any) =>\n                    (l: any) =>\n                      (l: any) =>\n                        (l: any) =>\n                          (l: any) =>\n                            (l: any) =>\n                              (l: any) =>\n                               (l: any) =>\n                                 (l: any) =>\n                                  (l: any) =>\n                                    (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                      (l: any) =>\n                                    \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795287,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2yxkqm04.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (59:39). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp2yxkqm04.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (59:39). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp2yxkqm04.fsx(73,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (59:39). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp2yxkqm04.fsx(73,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (59:39). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp2yxkqm04.fsx(9,7): error FS0039: The type 'any' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l) => l.sort()\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvc3g2xb1.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpvc3g2xb1.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  l.sort()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpj2qjtkvb.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length === 0) ? true :\n  (l.length === 1) ? l[0] >= l[1] :\n  (l.length === 2) ? l[0] >= l[1] && l[1] >= l[2] :\n  (l.length === 3) ? l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] :\n  (l.length === 4) ? l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] && l[3] >= l[4] :\n  (l.length === 5) ? l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] && l[3] >= l[4] && l[4] >= l[5] :\n  (l.length === 6) ? l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] && l[3] >= l[4] && l[4] >= l[5] && l[5] >= l[6] :\n  (l.length === 7) ? l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] && l[3] >= l[4] && l[4] >= l[5] && l[5] >= l[6] && l[6] >= l[7] :\n  (l.length === 8) ? l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] && l[3] >= l[4] && l[4] >= l[5] && l[5] >= l[6] && l[6] >= l[7] && l[7] >= l[8] :\n  (l.length === 9) ? l[0] >= l[1] && l[1] >= l[2] && l[2] >= l[3] && l[3] >= l[4] && l[4] >= l[5] && l\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795287,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgh5yilfu.fsx(9,22): error FS0010: Unexpected keyword 'true' in expression. Expected identifier, '(' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length > 0) ? l[0] <= l[1] : false;\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795287,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp36s5z8k6.fsx(9,40): error FS0010: Unexpected symbol ';' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length > 1) ? l.sort() : l;\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795287,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp83k87s8d.fsx(9,32): error FS0010: Unexpected symbol ';' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length > 0) ? l[0] : false;\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795287,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0ydxc03t.fsx(9,32): error FS0010: Unexpected symbol ';' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length === 0) ? false :\n  (l[0] < l[1]) ? false :\n  (l[0] === l[1]) ? false :\n  (l[0] > l[1]) ? false :\n  (l[0] === l[1]) ? false :\n  (l[0] === l[2]) ? false :\n  (l[0] === l[3]) ? false :\n  (l[0] === l[4]) ? false :\n  (l[0] === l[5]) ? false :\n  (l[0] === l[6]) ? false :\n  (l[0] === l[7]) ? false :\n  (l[0] === l[8]) ? false :\n  (l[0] === l[9]) ? false :\n  (l[0] === l[10]) ? false :\n  (l[0] === l[11]) ? false :\n  (l[0] === l[12]) ? false :\n  (l[0] === l[13]) ? false :\n  (l[0] === l[14]) ? false :\n  (l[0] === l[15]) ? false :\n  (l[0] === l[16]) ? false :\n  (l[0] === l[17]) ? false :\n  (l[0] === l[18]) ? false :\n  (l[0] === l[19]) ? false :\n  (l[0] === l[20]) ? false :\n  (l[0] === l[21]) ? false :\n  (l[0] === l[22]) ? false :\n  (l[0] === l[23]) ? false :\n  (l[0] === l[24]) ? false :\n  (l[0] === l[25]) ? false :\n  (l[0] === l[26]) ? false :\n  (l[0] === l[27]) ? false :\n  (l[0] === l[28]) ? false :\n  (l[0] === l[29]) ? false :\n  (l[0] === l[30]) ? false :\n  (l[0\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795286,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphfuv7qsy.fsx(9,22): error FS0010: Unexpected keyword 'false' in expression. Expected identifier, '(' or other token.\n\n\n\n/tmp/tmphfuv7qsy.fsx(44,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length === 0) ? true :\n  (l.length === 1) ? l[0] >= l[1] :\n  (l.length === 2) ? l[0] >= l[1] && l[0] <= l[2] :\n  (l.length === 3) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[2] :\n  (l.length === 4) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] :\n  (l.length === 5) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] :\n  (l.length === 6) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] :\n  (l.length === 7) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] && l[4] >= l[6] :\n  (l.length === 8) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] && l[4] >= l[6] && l[5] >= l[7] :\n  (l.length === 9) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] && l[4] >= l[6] && l[5] >= l[7] && l[6] >= l[8] :\n  (l.length === 10) ? l[0] >= l[1] && l\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795287,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx393acd6.fsx(9,22): error FS0010: Unexpected keyword 'true' in expression. Expected identifier, '(' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n  (l.length === 0) ? false :\n  (l.length === 1) ? l[0] >= l[1] :\n  (l.length === 2) ? l[0] >= l[1] && l[0] <= l[2] :\n  (l.length === 3) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[2] :\n  (l.length === 4) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[3] :\n  (l.length === 5) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[4] :\n  (l.length === 6) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] && l[4] >= l[5] :\n  (l.length === 7) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] && l[4] >= l[6] && l[5] >= l[6] :\n  (l.length === 8) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l[3] >= l[5] && l[4] >= l[6] && l[5] >= l[6] && l[6] >= l[7] && l[7] >= l[7] :\n  (l.length === 9) ? l[0] >= l[1] && l[0] <= l[2] && l[1] >= l[3] && l[2] >= l[4] && l\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675795287,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpw97cau31.fsx(9,22): error FS0010: Unexpected keyword 'false' in expression. Expected identifier, '(' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}