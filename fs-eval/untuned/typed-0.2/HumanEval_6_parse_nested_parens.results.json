{
  "name": "HumanEval_6_parse_nested_parens",
  "language": "fs",
  "prompt": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n",
  "tests": "let test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n    [1, 2, 3, 1];\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8opk4do1.fsx(7,6): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [0, 0, 0, 0]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7xn8283a.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [1, 2, 3, 1, 3]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9ormspdl.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [1, 2, 3, 1, 3]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9ormspdl.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [1, 2, 3, 1, 3]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9ormspdl.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [0, 0, 0, 0]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7xn8283a.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n    [1, 2, 3, 1];\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8opk4do1.fsx(7,6): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [0, 0, 0, 0]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7xn8283a.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [0, 0, 0, 0]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7xn8283a.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n    [0, 0, 0, 0];\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5_0pka8n.fsx(7,6): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [0, 0, 0, 0]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7xn8283a.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n    [0, 0, 0, 0];\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5_0pka8n.fsx(7,6): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [1, 1, 1, 1]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp32a4lemc.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n    [1, 2, 3, 1, 3]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6arb4tra.fsx(7,6): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpdi7qgkuz.fsx(8,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (6:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdi7qgkuz.fsx(8,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (6:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdi7qgkuz.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (6:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdi7qgkuz.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (6:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpdi7qgkuz.fsx(15,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [0, 0, 0, 0]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7xn8283a.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkarmayc6.fsx(8,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (6:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkarmayc6.fsx(8,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (6:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkarmayc6.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (6:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkarmayc6.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (6:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkarmayc6.fsx(15,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n    [0, 0, 0, 0]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8_68vkyg.fsx(7,6): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n    [\n        0,\n        1,\n        2,\n        3,\n        1,\n        3,\n        2,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        \nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5v17ccc5.fsx(136,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (134:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5v17ccc5.fsx(136,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (134:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5v17ccc5.fsx(143,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (134:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5v17ccc5.fsx(143,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (134:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5v17ccc5.fsx(143,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n  [1, 1, 1, 1]\nlet test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()",
      "timestamp": 1675795288,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp32a4lemc.fsx(7,4): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'int * int * int * int'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}