{
  "name": "HumanEval_58_common",
  "language": "fs",
  "prompt": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n",
  "tests": "let test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpobvzqvm0.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return l1.reduce((x, y) => x + y)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7vpx4qeu.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2[0])\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi6h7wqnd.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2[0])\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi6h7wqnd.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2.head)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpimbude34.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2.head)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpimbude34.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2.head)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpimbude34.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph_wkmdj4.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2.head)\nlet test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()",
      "timestamp": 1675795214,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpimbude34.fsx(7,6): error FS0039: The type 'List<_>' does not define the field, constructor or member 'sort'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}