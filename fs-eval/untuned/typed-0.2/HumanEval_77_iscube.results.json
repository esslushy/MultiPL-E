{
  "name": "HumanEval_77_iscube",
  "language": "fs",
  "prompt": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n",
  "tests": "let test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a % 2 == 0)\n    && (a % 3 == 0)\n    && (a % 5 == 0)\n    && (a % 7 == 0)\n    && (a % 11 == 0)\n    && (a % 13 == 0)\n    && (a % 17 == 0)\n    && (a % 19 == 0)\n    && (a % 23 == 0)\n    && (a % 29 == 0)\n    && (a % 31 == 0)\n    && (a % 37 == 0)\n    && (a % 41 == 0)\n    && (a % 43 == 0)\n    && (a % 47 == 0)\n    && (a % 51 == 0)\n    && (a % 53 == 0)\n    && (a % 59 == 0)\n    && (a % 61 == 0)\n    && (a % 67 == 0)\n    && (a % 71 == 0)\n    && (a % 73 == 0)\n    && (a % 79 == 0)\n    && (a % 83 == 0)\n    && (a % 89 == 0)\n    && (a % 91 == 0)\n    && (a % 97 == 0)\n    && (a % 101 == 0)\n    && (a % 103 == 0)\n    && (a % 107 == 0)\n    && (a % 109 == 0)\n    && (a % 113 == 0)\n    && (a % 127 == 0)\n    && (a % 131 == 0)\n    && (a % 137 == 0)\n    && (a % 139 == 0)\n    && (a % 143 == 0)\n    && (a % 147 == 0)\n    && (a % 149 == 0)\n    && (a % 151 == 0)\n    && (a % 157 == 0)\n    && (a % 159 == 0)\n    && (a % 163 == 0)\n    && (a % 167 == 0)\n    && (a % 169 == 0)\n    && (a % 171 == 0)\n    && (a % 177 == 0)\n    && (a % 179 == 0)\n    && (a % 181 == 0)\n    && (a % 187 == 0)\n    && (a % 189 == 0)\n    && (\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1y02x0xw.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1y02x0xw.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1y02x0xw.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1y02x0xw.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1y02x0xw.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1y02x0xw.fsx(63,8): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    a == 1 && a == 2 && a == 3 && a == 4 && a == 5 && a == 6 && a == 7 && a == 8 && a == 9 && a == 10 && a == 11 && a == 12 && a == 13 && a == 14 && a == 15 && a == 16 && a == 17 && a == 18 && a == 19 && a == 20 && a == 21 && a == 22 && a == 23 && a == 24 && a == 25 && a == 26 && a == 27 && a == 28 && a == 29 && a == 30 && a == 31 && a == 32 && a == 33 && a == 34 && a == 35 && a == 36 && a == 37 && a == 38 && a == 39 && a == 40 && a == 41 && a == 42 && a == 43 && a == 44 && a == 45 && a == 46 && a == 47 && a == 48 && a == 49 && a == 50 && a == 51 && a == 52 && a == 53 && a == 54 && a == 55 && a == 56 && a == 57 && a == 58 && a == 59 && a == 60 && a == 61 && a == 62 && a == 63 && a == 64 && a == 65 && a == 66 && a == 67 && a == 68 && a == 69 && a == 70 && a == 71 && a == 72 && a == 73 && a == 74 && a == 75 && a == 76 && a == 77 && a == 78 && a == 79 && a == 80 && a == 81 && a == 82 && a == 83 && a == 84 && a == 85 && a == 86 && a == 87 && a == 88 && a == 89 && a == 90 && a == 91 && a == 92 && a == 93 && a == 94 && a == 95 && a == 96 && a == 97 && a == 98 && a == 99 && a == 100 && a == 101 && a == 102 && a == 103 && a == 104 && a == 105 && a == 106 && a == 107 && a == 108 && a == 109 && a == 110 && a == 111 && a == 112 && a == 113 && a == 114 && a == 115 && a == 116 && a == 117 && a == 118 && a == 119 && a == 120 && a == 121 && a == 122 && a == 123 && a == 124 && a == 125 && a == 126 && a == 127 && a == 128\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795252,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7fi43ue0.fsx(12,7): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a % 2 == 0) && (a % 3 == 0) && (a % 5 == 0) && (a % 7 == 0) && (a % 9 == 0) && (a % 11 == 0) && (a % 13 == 0) && (a % 17 == 0) && (a % 19 == 0) && (a % 23 == 0) && (a % 29 == 0) && (a % 31 == 0) && (a % 37 == 0) && (a % 41 == 0) && (a % 43 == 0) && (a % 47 == 0) && (a % 53 == 0) && (a % 59 == 0) && (a % 61 == 0) && (a % 67 == 0) && (a % 71 == 0) && (a % 73 == 0) && (a % 79 == 0) && (a % 83 == 0) && (a % 89 == 0) && (a % 97 == 0) && (a % 101 == 0) && (a % 103 == 0) && (a % 107 == 0) && (a % 109 == 0) && (a % 113 == 0) && (a % 127 == 0) && (a % 131 == 0) && (a % 137 == 0) && (a % 139 == 0) && (a % 143 == 0) && (a % 147 == 0) && (a % 149 == 0) && (a % 151 == 0) && (a % 157 == 0) && (a % 159 == 0) && (a % 163 == 0) && (a % 167 == 0) && (a % 169 == 0) && (a % 173 == 0) && (a % 177 == 0) && (a % 179 == 0) && (a % 181 == 0) && (a % 191 == 0) && (a % 193 == 0) && (a % 197 == 0) && (a % 199 == 0) && (a % 211 == 0) && (a % 223 == 0) && (a % 227 == 0) && (a % 229 == 0) && (a % 233 == 0) && (a % 239 == 0) && (a % 241 == 0) && (a % 251 == 0) && (a % 257 == 0) && (a % 269 == 0) && (a % 271 == 0) && (a % 277 == 0)\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjn2azxwc.fsx(12,12): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == 3) || (a == 4) || (a == 5) || (a == 6) || (a == 7) || (a == 8) || (a == 9) || (a == 10) || (a == 11) || (a == 12) || (a == 13) || (a == 14) || (a == 15) || (a == 16) || (a == 17) || (a == 18) || (a == 19) || (a == 20) || (a == 21) || (a == 22) || (a == 23) || (a == 24) || (a == 25) || (a == 26) || (a == 27) || (a == 28) || (a == 29) || (a == 30) || (a == 31) || (a == 32) || (a == 33) || (a == 34) || (a == 35) || (a == 36) || (a == 37) || (a == 38) || (a == 39) || (a == 40) || (a == 41) || (a == 42) || (a == 43) || (a == 44) || (a == 45) || (a == 46) || (a == 47) || (a == 48) || (a == 49) || (a == 50) || (a == 51) || (a == 52) || (a == 53) || (a == 54) || (a == 55) || (a == 56) || (a == 57) || (a == 58) || (a == 59) || (a == 60) || (a == 61) || (a == 62) || (a == 63) || (a == 64) || (a == 65) || (a == 66) || (a == 67) || (a == 68) || (a == 69) || (a == 70) || (a == 71) || (a == 72) || (a == 73) || (a == 74) || (a == 75) || (a == 76) || (a == 77) || (a == 78) || (a == 79) || (a == 80) || (a == 81) || (a == 82) || (a == 83) || (a == 84) || (a == 85) || (\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_q_ukc42.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_q_ukc42.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_q_ukc42.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_q_ukc42.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_q_ukc42.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == -1) || (a == 64) || (a == 0) || (a == 180) || (a == -64) || (a == -180)\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy0j_jpov.fsx(12,8): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == -1) || (a == 64) || (a == 0) || (a == 180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprulsmiw8.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprulsmiw8.fsx(13,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == -1) || (a == 64) || (a == 0) || (a == 180) || (a == -64) || (a == -180)\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy0j_jpov.fsx(12,8): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == -1) || (a == 64) || (a == 0) || (a == 180) || (a == -64) || (a == -180)\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy0j_jpov.fsx(12,8): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a >= 0) & (a <= 64) & (a % 2 == 0) & (a % 3 == 0) & (a % 4 == 0) & (a % 5 == 0) & (a % 6 == 0) & (a % 7 == 0) & (a % 8 == 0) & (a % 9 == 0) & (a % 10 == 0) & (a % 11 == 0) & (a % 12 == 0) & (a % 13 == 0) & (a % 14 == 0) & (a % 15 == 0) & (a % 16 == 0) & (a % 17 == 0) & (a % 18 == 0) & (a % 19 == 0) & (a % 20 == 0) & (a % 21 == 0) & (a % 22 == 0) & (a % 23 == 0) & (a % 24 == 0) & (a % 25 == 0) & (a % 26 == 0) & (a % 27 == 0) & (a % 28 == 0) & (a % 29 == 0) & (a % 30 == 0) & (a % 31 == 0) & (a % 32 == 0) & (a % 33 == 0) & (a % 34 == 0) & (a % 35 == 0) & (a % 36 == 0) & (a % 37 == 0) & (a % 38 == 0) & (a % 39 == 0) & (a % 40 == 0) & (a % 41 == 0) & (a % 42 == 0) & (a % 43 == 0) & (a % 44 == 0) & (a % 45 == 0) & (a % 46 == 0) & (a % 47 == 0) & (a % 48 == 0) & (a % 49 == 0) & (a % 50 == 0) & (a % 51 == 0) & (a % 52 == 0) & (a % 53 == 0) & (a % 54 == 0) & (a % 55 == 0) & (a % 56 == 0) & (a % 57 == 0) & (a % 58 == 0) & (a % 59 == 0) & (a % 60 == 0) & (a % 61 == 0) & (a % 62 == 0) & (a % 63 == 0) & (a %\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7dtpe5pb.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp7dtpe5pb.fsx(25,1): error FS0010: Unexpected identifier in expression. Expected 'in' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    a == 0 && a == 1 && a == 2 && a == 3 && a == 4 && a == 5 && a == 6 && a == 7 && a == 8 && a == 9 && a == 10 && a == 11 && a == 12 && a == 13 && a == 14 && a == 15 && a == 16 && a == 17 && a == 18 && a == 19 && a == 20 && a == 21 && a == 22 && a == 23 && a == 24 && a == 25 && a == 26 && a == 27 && a == 28 && a == 29 && a == 30 && a == 31 && a == 32 && a == 33 && a == 34 && a == 35 && a == 36 && a == 37 && a == 38 && a == 39 && a == 40 && a == 41 && a == 42 && a == 43 && a == 44 && a == 45 && a == 46 && a == 47 && a == 48 && a == 49 && a == 50 && a == 51 && a == 52 && a == 53 && a == 54 && a == 55 && a == 56 && a == 57 && a == 58 && a == 59 && a == 60 && a == 61 && a == 62 && a == 63 && a == 64 && a == 65 && a == 66 && a == 67 && a == 68 && a == 69 && a == 70 && a == 71 && a == 72 && a == 73 && a == 74 && a == 75 && a == 76 && a == 77 && a == 78 && a == 79 && a == 80 && a == 81 && a == 82 && a == 83 && a == 84 && a == 85 && a == 86 && a == 87 && a == 88 && a == 89 && a == 90 && a == 91 && a == 92 && a == 93 && a == 94 && a == 95 && a == 96 && a == 97 && a == 98 && a == 99 && a == 100 && a == 101 && a == 102 && a == 103 && a == 104 && a == 105 && a == 106 && a == 107 && a == 108 && a == 109 && a == 110 && a == 111 && a == 112 && a == 113 && a == 114 && a == 115 && a == 116 && a == 117 && a == 118 && a == 119 && a == 120 && a == 121 && a == 122 && a == 123 && a == 124 && a == 125 && a == 126 && a == 127\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795252,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5436ml_a.fsx(12,7): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == -1) || (a == 64) || (a == 0) || (a == 180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprulsmiw8.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprulsmiw8.fsx(13,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == -1) || (a == 64) || (a == 0) || (a == 180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprulsmiw8.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprulsmiw8.fsx(13,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == -1) || (a == 64) || (a == 0) || (a == 180) || (a == -64) || (a == -180)\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy0j_jpov.fsx(12,8): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a >= 1) && (a <= 64) && (a % 2 == 0) && (a % 3 == 0) && (a % 5 == 0) && (a % 7 == 0) && (a % 9 == 0) && (a % 11 == 0) && (a % 13 == 0) && (a % 17 == 0) && (a % 19 == 0) && (a % 23 == 0) && (a % 29 == 0) && (a % 31 == 0) && (a % 37 == 0) && (a % 41 == 0) && (a % 43 == 0) && (a % 47 == 0) && (a % 53 == 0) && (a % 59 == 0) && (a % 61 == 0) && (a % 67 == 0) && (a % 71 == 0) && (a % 73 == 0) && (a % 79 == 0) && (a % 83 == 0) && (a % 89 == 0) && (a % 97 == 0) && (a % 101 == 0) && (a % 103 == 0) && (a % 107 == 0) && (a % 109 == 0) && (a % 113 == 0) && (a % 127 == 0) && (a % 131 == 0) && (a % 137 == 0) && (a % 139 == 0) && (a % 143 == 0) && (a % 147 == 0) && (a % 151 == 0) && (a % 157 == 0) && (a % 163 == 0) && (a % 167 == 0) && (a % 169 == 0) && (a % 173 == 0) && (a % 177 == 0) && (a % 181 == 0) && (a % 191 == 0) && (a % 193 == 0) && (a % 197 == 0) && (a % 199 == 0) && (a % 203 == 0) && (a % 207 == 0) && (a % 209 == 0) && (a % 213 == 0) && (a % 217 == 0) && (a % 219 == 0) && (a % 223 == 0) && (a % 227 == 0) && (a % 229 == 0) && (a % 233 == 0) && (a % 237 == 0) && (a % 239 == 0) && (a % 241 == 0) && (a %\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp49dm4ywy.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp49dm4ywy.fsx(25,1): error FS0010: Unexpected identifier in expression. Expected 'in' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == 3) || (a == 4) || (a == 5) || (a == 6) || (a == 7) || (a == 8) || (a == 9) || (a == 10) || (a == 11) || (a == 12) || (a == 13) || (a == 14) || (a == 15) || (a == 16) || (a == 17) || (a == 18) || (a == 19) || (a == 20) || (a == 21) || (a == 22) || (a == 23) || (a == 24) || (a == 25) || (a == 26) || (a == 27) || (a == 28) || (a == 29) || (a == 30) || (a == 31) || (a == 32) || (a == 33) || (a == 34) || (a == 35) || (a == 36) || (a == 37) || (a == 38) || (a == 39) || (a == 40) || (a == 41) || (a == 42) || (a == 43) || (a == 44) || (a == 45) || (a == 46) || (a == 47) || (a == 48) || (a == 49) || (a == 50) || (a == 51) || (a == 52) || (a == 53) || (a == 54) || (a == 55) || (a == 56) || (a == 57) || (a == 58) || (a == 59) || (a == 60) || (a == 61) || (a == 62) || (a == 63) || (a == 64) || (a == 65) || (a == 66) || (a == 67) || (a == 68) || (a == 69) || (a == 70) || (a == 71) || (a == 72) || (a == 73) || (a == 74) || (a == 75) || (a == 76) || (a == 77) || (a == 78) || (a == 79) || (a == 80) || (a == 81) || (a == 82) || (a == 83) || (a == 84) || (a == 85) || (\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_q_ukc42.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_q_ukc42.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_q_ukc42.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_q_ukc42.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_q_ukc42.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == -1) || (a == 64) || (a == 0) || (a == 180) || (a == -64) || (a == -180)\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy0j_jpov.fsx(12,8): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n  (a == 1) || (a == 2) || (a == -1) || (a == 64) || (a == 0) || (a == 180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180) || (a == -64) || (a == -180\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1nl02xw_.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1nl02xw_.fsx(13,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1)\n    && (a == 2)\n    && (a == 3)\n    && (a == 4)\n    && (a == 5)\n    && (a == 6)\n    && (a == 7)\n    && (a == 8)\n    && (a == 9)\n    && (a == 10)\n    && (a == 11)\n    && (a == 12)\n    && (a == 13)\n    && (a == 14)\n    && (a == 15)\n    && (a == 16)\n    && (a == 17)\n    && (a == 18)\n    && (a == 19)\n    && (a == 20)\n    && (a == 21)\n    && (a == 22)\n    && (a == 23)\n    && (a == 24)\n    && (a == 25)\n    && (a == 26)\n    && (a == 27)\n    && (a == 28)\n    && (a == 29)\n    && (a == 30)\n    && (a == 31)\n    && (a == 32)\n    && (a == 33)\n    && (a == 34)\n    && (a == 35)\n    && (a == 36)\n    && (a == 37)\n    && (a == 38)\n    && (a == 39)\n    && (a == 40)\n    && (a == 41)\n    && (a == 42)\n    && (a == 43)\n    && (a == 44)\n    && (a == 45)\n    && (a == 46)\n    && (a == 47)\n    && (a == 48)\n    && (a == 49)\n    && (a == 50)\n    && (a == 51)\n    && (a == 52)\n    && (a == 53)\n    && (a == 54)\n    && (a == 55)\n    && (a == 56)\n    && (a == 57)\n    && (a == 58)\n    && (a == 59)\n    && (a == 60)\n    && (a == 61)\n    && (a == 62)\n    && (a == 63)\n    && (a == 64)\n    \nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv0vgh71i.fsx(12,8): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a % 2 == 0) && (a % 3 == 0) && (a % 5 == 0) && (a % 7 == 0) && (a % 9 == 0) && (a % 11 == 0) && (a % 13 == 0) && (a % 17 == 0) && (a % 19 == 0) && (a % 23 == 0) && (a % 29 == 0) && (a % 31 == 0) && (a % 37 == 0) && (a % 41 == 0) && (a % 43 == 0) && (a % 47 == 0) && (a % 53 == 0) && (a % 59 == 0) && (a % 61 == 0) && (a % 67 == 0) && (a % 71 == 0) && (a % 73 == 0) && (a % 79 == 0) && (a % 83 == 0) && (a % 89 == 0) && (a % 97 == 0) && (a % 101 == 0) && (a % 103 == 0) && (a % 107 == 0) && (a % 109 == 0) && (a % 113 == 0) && (a % 127 == 0) && (a % 131 == 0) && (a % 137 == 0) && (a % 139 == 0) && (a % 143 == 0) && (a % 147 == 0) && (a % 149 == 0) && (a % 151 == 0) && (a % 157 == 0) && (a % 159 == 0) && (a % 163 == 0) && (a % 167 == 0) && (a % 169 == 0) && (a % 171 == 0) && (a % 177 == 0) && (a % 179 == 0) && (a % 181 == 0) && (a % 191 == 0) && (a % 193 == 0) && (a % 197 == 0) && (a % 199 == 0) && (a % 211 == 0) && (a % 223 == 0) && (a % 227 == 0) && (a % 229 == 0) && (a % 233 == 0) && (a % 239 == 0) && (a % 241 == 0) && (a % 247 == 0) && (a % 251 == 0) && (a % 257 == 0) && (a % 263 == 0) && (a % 269 == 0)\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8mtcrkmh.fsx(12,12): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nlet iscube (a: int): bool  = \n    (a == 1) || (a == 2) || (a == -1) || (a == 64) || (a == 0) || (a == 180) || (a == -64) || (a == -180)\nlet test() = \n  let candidate = iscube\n  assert (candidate 1 = true)\n  assert (candidate 2 = false)\n  assert (candidate -1 = true)\n  assert (candidate 64 = true)\n  assert (candidate 180 = false)\n  assert (candidate 1000 = true)\n  assert (candidate 0 = true)\n  assert (candidate 1729 = false)\n  0\n\ntest()",
      "timestamp": 1675795251,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy0j_jpov.fsx(12,8): error FS0043: The type 'int' does not support the operator '=='\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}