{
  "name": "HumanEval_18_how_many_times",
  "language": "fs",
  "prompt": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n",
  "tests": "let test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  function (substring: string) {\n    let count = 0;\n    let index = 0;\n    let length = substring.length;\n    while (index < length) {\n      if (substring.charAt(index) === substring.charAt(index + 1)) {\n        count++;\n      } else {\n        index++;\n      }\n    }\n    return count;\n  };\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqzthrn9b.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpqzthrn9b.fsx(9,32): error FS0010: Unexpected symbol '{' in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmpqzthrn9b.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpqzthrn9b.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpqzthrn9b.fsx(11,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpqzthrn9b.fsx(11,5): warning FS0058: P",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (string: string) => {\n    let count = 0;\n    let start = 0;\n    let end = 0;\n    let length = string.length;\n    while (start < length) {\n      end = start;\n      while (end < length && string[end] !== string[start]) {\n        end++;\n      }\n      if (end === length) {\n        count++;\n      } else {\n        count++;\n        start = end + 1;\n      }\n    }\n    return count;\n  }\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpssqu92l_.fsx(12,9): error FS0010: Unexpected keyword 'end' in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (substring: string) => {\n    let count = 0;\n    let index = 0;\n    let start = 0;\n    let end = 0;\n    while (index < string.length) {\n      if (string[index] === substring[start]) {\n        count++;\n        start++;\n      } else if (string[index] === substring[end]) {\n        count++;\n        end++;\n      } else {\n        count++;\n        start = index + 1;\n        end = index + 1;\n      }\n      index++;\n    }\n    return count;\n  }\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnzru34u8.fsx(13,9): error FS0010: Unexpected keyword 'end' in binding\n\n\n\n/tmp/tmpnzru34u8.fsx(19,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (18:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpnzru34u8.fsx(19,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (18:9). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (string: string) => string.length;\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_kdpdd28.fsx(9,30): error FS0039: The type 'String' does not define the field, constructor or member 'length'. Maybe you want one of the following:\n   Length\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (string: string) => string.length;\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_kdpdd28.fsx(9,30): error FS0039: The type 'String' does not define the field, constructor or member 'length'. Maybe you want one of the following:\n   Length\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (string: string) =>\n    (substring: string) =>\n      (substring: string) =>\n        (substring: string) =>\n          (substring: string) =>\n            (substring: string) =>\n              (substring: string) =>\n                (substring: string) =>\n                  (substring: string) =>\n                    (substring: string) =>\n                      (substring: string) =>\n                        (substring: string) =>\n                          (substring: string) =>\n                            (substring: string) =>\n                              (substring: string) =>\n                               (substring: string) =>\n                                 (substring: string) =>\n                                   (substring: string) =>\n                                     (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                               \nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz0s0hiix.fsx(57,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:40). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpz0s0hiix.fsx(57,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:40). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpz0s0hiix.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:40). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpz0s0hiix.fsx(65,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (55:40). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpz0s0hiix.fsx(9,20): error FS0043: The type 'string' does not support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (substring: string) => {\n    let count = 0;\n    let index = 0;\n    while (index < string.length) {\n      if (substring[index] === string[index]) {\n        count++;\n      } else {\n        index++;\n      }\n    }\n    return count;\n  }\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz_oon720.fsx(14,16): error FS0010: Unexpected symbol ';' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  function (string: string) {\n    let count = 0;\n    let start = 0;\n    let end = string.length;\n    while (start < end) {\n      if (string[start] === string[end]) {\n        count++;\n        start++;\n        end--;\n      } else {\n        start++;\n        end--;\n      }\n    }\n    return count;\n  }\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgglp_gti.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgglp_gti.fsx(9,29): error FS0010: Unexpected symbol '{' in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmpgglp_gti.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgglp_gti.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgglp_gti.fsx(11,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgglp_gti.fsx(11,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgglp_gti.fsx(11,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgglp_gti.fsx(12,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgglp_gti.fsx(12,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpgglp_gti.fsx(12,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  function (substring: string) {\n    let count = 0;\n    let index = 0;\n    while (index < substring.length) {\n      if (substring[index] === substring[index - 1]) {\n        count++;\n      } else {\n        count = 0;\n      }\n      index++;\n    }\n    return count;\n  }\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpw5wss6mh.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw5wss6mh.fsx(9,32): error FS0010: Unexpected symbol '{' in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmpw5wss6mh.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw5wss6mh.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw5wss6mh.fsx(11,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpw5wss6mh.fsx(11,5): warning FS0058: P",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  function (string: string) {\n    let count = 0;\n    let index = 0;\n    let length = string.length;\n    while (index < length) {\n      if (string.charAt(index) === string.charAt(index + 1)) {\n        count++;\n      } else {\n        index++;\n      }\n    }\n    return count;\n  };\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5y145a4i.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5y145a4i.fsx(9,29): error FS0010: Unexpected symbol '{' in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmp5y145a4i.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5y145a4i.fsx(10,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5y145a4i.fsx(11,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5y145a4i.fsx(11,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5y145a4i.fsx(11,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5y145a4i.fsx(12,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5y145a4i.fsx(12,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp5y145a4i.fsx(12,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:12). Try indenting this token further or using standard formatting conventio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (string: string) => string.length;\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_kdpdd28.fsx(9,30): error FS0039: The type 'String' does not define the field, constructor or member 'length'. Maybe you want one of the following:\n   Length\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n    substring.split('').reduce((a, b) => a + b, '')\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuxoizivd.fsx(9,21): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (substring: string) =>\n    substring.length\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2ykdgcu1.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (string: string) => {\n    let count = 0;\n    let start = 0;\n    let end = 0;\n    while (start < string.length) {\n      end = start + 1;\n      while (end < string.length) {\n        if (string[end] === string[start]) {\n          count++;\n          end++;\n        } else {\n          break;\n        }\n      }\n      start = end;\n    }\n    return count;\n  }\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpqg6kufc7.fsx(12,9): error FS0010: Unexpected keyword 'end' in binding\n\n\n\n/tmp/tmpqg6kufc7.fsx(20,11): warning FS0046: The identifier 'break' is reserved for future use by F#\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n    function (substring: string) {\n        let count = 0;\n        let index = 0;\n        while (index < substring.length) {\n            if (substring[index] === substring[index - 1]) {\n                count++;\n            } else {\n                index++;\n            }\n        }\n        return count;\n    };\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbc58hnke.fsx(10,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:14). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc58hnke.fsx(9,34): error FS0010: Unexpected symbol '{' in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmpbc58hnke.fsx(10,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:14). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc58hnke.fsx(10,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:14). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc58hnke.fsx(11,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:14). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc58hnke.fsx(11,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:14). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc58hnke.fsx(11,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:14). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc58hnke.fsx(12,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:14). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc58hnke.fsx(12,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:14). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbc58hnke.fsx(12,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:14). Try indenting this token further or using standard formatting conventio",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (substring: string) => {\n    let count = 0;\n    let start = 0;\n    let end = 0;\n    while (end < len(substring) && count < 3) {\n      if (substring[end] === 'a') {\n        count++;\n      } else if (substring[end] === 'b') {\n        count++;\n      } else if (substring[end] === 'c') {\n        count++;\n      } else if (substring[end] === 'd') {\n        count++;\n      } else if (substring[end] === 'e') {\n        count++;\n      } else if (substring[end] === 'f') {\n        count++;\n      } else if (substring[end] === 'g') {\n        count++;\n      } else if (substring[end] === 'h') {\n        count++;\n      } else if (substring[end] === 'i') {\n        count++;\n      } else if (substring[end] === 'j') {\n        count++;\n      } else if (substring[end] === 'k') {\n        count++;\n      } else if (substring[end] === 'l') {\n        count++;\n      } else if (substring[end] === 'm') {\n        count++;\n      } else if (substring[end] === 'n') {\n        count++;\n      } else if (substring[end] === 'o') {\n        count++;\n      } else if (substring[end] === 'p') {\n        count++;\n      } else if (substring[end] === 'q') {\n        count++;\n      } else if (substring[end] === 'r') {\n        count++;\n      } else if (substring[end] === 's') {\n        count++;\n      } else if (substring[end] === 't') {\n        count++;\n      } else if (substring[end] === 'u') {\n        count++;\n      } else if (substring[end] === 'v') {\n        count++;\n      } else if (substring[end] === 'w') {\n        count++;\n      } else if (sub\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo2w0e36h.fsx(12,9): error FS0010: Unexpected keyword 'end' in binding\n\n\n\n/tmp/tmpo2w0e36h.fsx(17,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo2w0e36h.fsx(17,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo2w0e36h.fsx(19,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (18:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo2w0e36h.fsx(19,9): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (18:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo2w0e36h.fsx(21,9): warning FS0058: Possible incorrect indentation: this t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (substring: string) =>\n    (substring.length > 0) ?\n      (substring.length - 1) :\n      0;\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2elemol1.fsx(12,8): error FS0010: Unexpected symbol ';' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (substring: string) => {\n    let count = 0;\n    let index = 0;\n    let length = string.length;\n    while (index < length) {\n      if (substring.charAt(index) === string.charAt(index)) {\n        count++;\n      } else {\n        index++;\n      }\n    }\n    return count;\n  };\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnl4mbicg.fsx(15,16): error FS0010: Unexpected symbol ';' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (string: string) =>\n    substring.length\n    \nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb7sxdomr.fsx(10,15): error FS0039: The type 'String' does not define the field, constructor or member 'length'. Maybe you want one of the following:\n   Length\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n  (string: string) => {\n    let count = 0;\n    let start = 0;\n    let end = 0;\n    while (end < string.length) {\n      if (string[end] === 'a') {\n        count++;\n        end++;\n      } else {\n        if (count > 0) {\n          count--;\n          end++;\n        } else {\n          count = 0;\n          end++;\n        }\n      }\n    }\n    return count;\n  }\nlet test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()",
      "timestamp": 1675790535,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn9cy969o.fsx(12,9): error FS0010: Unexpected keyword 'end' in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}