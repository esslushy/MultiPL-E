{
  "name": "HumanEval_117_select_words",
  "language": "fs",
  "prompt": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n",
  "tests": "let test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [ \"little\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafj0ah2r.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [s]\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [s]\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [s]\n  .map(word => word.charAt(0).toLowerCase())\n  .filter(word => word.length == n)\n  .map(word => word.substr(1))\n  .sort()\n  .map(word => word.charAt(0).toLowerCase())\n  .filter(word => word.length == n)\n  .map(word => word.substr(1))\n  .sort()\n  .map(word => word.charAt(0).toLowerCase())\n  .filter(word => word.length == n)\n  .map(word => word.substr(1))\n  .sort()\n  .map(word => word.charAt(0).toLowerCase())\n  .filter(word => word.length == n)\n  .map(word => word.substr(1))\n  .sort()\n  .map(word => word.charAt(0).toLowerCase())\n  .filter(word => word.length == n)\n  .map(word => word.substr(1))\n  .sort()\n  .map(word => word.charAt(0).toLowerCase())\n  .filter(word => word.length == n)\n  .map(word => word.substr(1))\n  .sort()\n  .map(word => word.charAt(0).toLowerCase())\n  .filter(word => word.length == n)\n  .map(word => word.substr(1))\n  .sort()\n  .map(word => word.charAt(0).toLowerCase())\n  .filter(word => word.length == n)\n  .map(word => word.substr(1))\n  .sort()\n  .map(word => word.charAt(0).toLowerCase())\n  .filter(word => word.length == n)\n  .map(word => word.substr(1))\n  .sort()\n  .map(word => word.charAt(0).toLowerCase())\n  .filter(word => word.length == n)\n  .map(word => word.substr(1))\n  .sort()\n  .map(word => word\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprher3txb.fsx(14,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmprher3txb.fsx(55,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [ \"little\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafj0ah2r.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n    [ \"little\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpph90v84f.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n    [ \"little\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpph90v84f.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [ \"little\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafj0ah2r.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [ \"simple white space\", \"Hello world\", \"Uncle sam\", \"Uncle\"];\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiov4j35x.fsx(13,5): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'string * string * string * string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [ \"little\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafj0ah2r.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [s]\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n    [s]\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [s]\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n    [s]\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n[ \"little\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\",\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8r_2zhqf.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(14,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(14,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [ \"little\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafj0ah2r.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [ \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\",\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjjv65g4b.fsx(14,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjjv65g4b.fsx(14,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjjv65g4b.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjjv65g4b.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpjjv65g4b.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [ \"little\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpafj0ah2r.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n[ \"little\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\", \"little lamb\",\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8r_2zhqf.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(14,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(14,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(25,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8r_2zhqf.fsx(25,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n  [ \"uncle\", \"sam\", \"world\" ]\nlet test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()",
      "timestamp": 1675790557,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpywg5n_ub.fsx(13,5): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'string * string * string'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}