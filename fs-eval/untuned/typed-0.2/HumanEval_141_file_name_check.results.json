{
  "name": "HumanEval_141_file_name_check",
  "language": "fs",
  "prompt": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n",
  "tests": "let test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    \"Yes\"\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^A-Z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g,\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm1u1yv2z.fsx(15,5): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpm1u1yv2z.fsx(45,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (13:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpm1u1yv2z.fsx(45,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (13:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpm1u1yv2z.fsx(75,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (13:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpm1u1yv2z.fsx(75,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (13:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    \"Yes\"\nlet file_name_check_no_file_name_check (file_name: string): string = \n    \"No\"\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n  'Yes'\n  \nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpw18i0pm8.fsx(14,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n  \"Yes\"\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9vf8gkdd.fsx(15,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmp9vf8gkdd.fsx(45,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (13:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    'Yes'\nlet file_name_check_no_file_name (file_name: string): string = \n    'No'\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyb8e13de.fsx(14,5): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    \"Yes\"\nlet file_name_check_no (file_name: string): string = \n    \"No\"\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    `file_name_check(\"example.txt\")`;\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_1fx5i_z.fsx(14,5): error FS0010: Unexpected reserved keyword in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    `file_name_check(\"example.txt\")`\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxkw81e79.fsx(14,5): error FS0010: Unexpected reserved keyword in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    \"Yes\"\nlet file_name_check_no (file_name: string): string = \n    \"No\"\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    \"Yes\"\nlet file_name_check (file_name: string): string = \n    \"No\"\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790556,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7hac6j9u.fsx(15,5): error FS0037: Duplicate definition of value 'file_name_check'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    'Yes'\nlet file_name_check_no_file_name_check (file_name: string): string  = \n    'No'\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4hc1jo60.fsx(14,5): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n  'Yes'\n  if (file_name.length < 3) {\n    return 'No'\n  }\n  if (file_name.charAt(0) != '.') {\n    return 'No'\n  }\n  if (file_name.charAt(1) != '.') {\n    return 'No'\n  }\n  if (file_name.charAt(2) != '.') {\n    return 'No'\n  }\n  if (file_name.charAt(file_name.length - 1) != '.') {\n    return 'No'\n  }\n  return 'Yes'\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp56_w26s9.fsx(14,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    \"Yes\"\nlet file_name_check_no (file_name: string): string = \n    \"No\"\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n  \"Yes\"\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  \nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8echa7ap.fsx(15,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    `file_name_check(\"example.txt\")`;\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_1fx5i_z.fsx(14,5): error FS0010: Unexpected reserved keyword in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    \"Yes\"\n    .replace(/[^a-zA-Z0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe1vvbwkb.fsx(15,5): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpe1vvbwkb.fsx(45,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (13:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    `file_name_check(\"example.txt\")`;\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_1fx5i_z.fsx(14,5): error FS0010: Unexpected reserved keyword in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    \"Yes\"\nlet file_name_check (file_name: string): string = \n    \"No\"\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790556,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7hac6j9u.fsx(15,5): error FS0037: Duplicate definition of value 'file_name_check'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n  (file_name.match(/^[a-zA-Z0-9_]+$/) || \"No\");\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790555,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpy6rvz5uk.fsx(14,13): error FS0599: Missing qualification after '.'\n\n\n\n/tmp/tmpy6rvz5uk.fsx(14,31): error FS1156: This is not a valid numeric literal. Valid numeric literals include 1, 0x1, 0o1, 0b1, 1l (int), 1u (uint32), 1L (int64), 1UL (uint64), 1s (int16), 1y (sbyte), 1uy (byte), 1.0 (float), 1.0f (float32), 1.0m (decimal), 1I (BigInteger).\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n    \"Yes\"\nlet file_name_check_with_dot (file_name: string): string = \n    \"Yes\"\nlet file_name_check_with_dot_and_no_dot (file_name: string): string = \n    \"No\"\nlet test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()",
      "timestamp": 1675790556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}