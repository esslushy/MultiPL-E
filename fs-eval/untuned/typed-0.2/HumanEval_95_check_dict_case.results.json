{
  "name": "HumanEval_95_check_dict_case",
  "language": "fs",
  "prompt": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n",
  "tests": "let test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcx76_6gw.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcx76_6gw.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().filter((e: Map<string, string>) => e.key.toLowerCase() === e.value.toLowerCase()).map((e: Map<string, string>) => e.value);\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp904kc27p.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().filter((e: Map<string, string>) => e.key.toLowerCase() === e.value.toLowerCase()).some((e: Map<string, string>) => e.value.toLowerCase() === e.key.toLowerCase());\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpa31zni8l.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcx76_6gw.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcx76_6gw.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().forEach(e => {\n        if (e.key.toLowerCase() === e.value.toLowerCase()) {\n            return false;\n        }\n        if (e.key.toUpperCase() === e.value.toUpperCase()) {\n            return false;\n        }\n    });\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplw6y764m.fsx(14,11): error FS0010: Incomplete structured construct at or before this point in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().every(e => e.key.toLowerCase() === e.value.toLowerCase())\nlet check_dict_case_upper (dict: Map<string, string>): bool = \n    dict.entries().every(e => e.key.toUpperCase() === e.value.toUpperCase())\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpicbndsvw.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().some((key: string) => key.toLowerCase() === key.toUpperCase());\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptq4xsn07.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().map(e => e.key.toLowerCase() === e.value.toLowerCase()).every(e => e.value === e.key);\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpl0983djb.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcx76_6gw.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n  dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_l8umjhm.fsx(11,8): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    (dict.keys() == [\"a\", \"b\", \"c\"] &&\n     dict.values() == [\"apple\", \"banana\", \"banana\"] &&\n     dict.entries() == [\n        {\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"},\n        {\"State\": \"NC\", \"ZIP\": \"12345\" }\n    ])\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpncu0yxrk.fsx(14,16): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    (dict.size === 0) ? true : false;\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpch7__slo.fsx(11,25): error FS0010: Unexpected keyword 'true' in expression. Expected identifier, '(' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    (dict.has(\"a\") && dict.has(\"b\") && dict.has(\"c\") && dict.has(\"d\") && dict.has(\"e\") && dict.has(\"f\") && dict.has(\"g\") && dict.has(\"h\") && dict.has(\"i\") && dict.has(\"j\") && dict.has(\"k\") && dict.has(\"l\") && dict.has(\"m\") && dict.has(\"n\") && dict.has(\"o\") && dict.has(\"p\") && dict.has(\"q\") && dict.has(\"r\") && dict.has(\"s\") && dict.has(\"t\") && dict.has(\"u\") && dict.has(\"v\") && dict.has(\"w\") && dict.has(\"x\") && dict.has(\"y\") && dict.has(\"z\") && dict.has(\"A\") && dict.has(\"B\") && dict.has(\"C\") && dict.has(\"D\") && dict.has(\"E\") && dict.has(\"F\") && dict.has(\"G\") && dict.has(\"H\") && dict.has(\"I\") && dict.has(\"J\") && dict.has(\"K\") && dict.has(\"L\") && dict.has(\"M\") && dict.has(\"N\") && dict.has(\"O\") && dict.has(\"P\") && dict.has(\"Q\") && dict.has(\"R\") && dict.has(\"S\") && dict.has(\"T\") && dict.has(\"U\") && dict.has(\"V\") && dict.has(\"W\") && dict.has(\"X\") && dict.has(\"Y\") && dict.has(\"Z\") && dict.has(\"A\") && dict.has(\"B\") && dict.has(\"C\") && dict.has(\"D\") && dict.has(\"E\") && dict.has(\"F\") && dict.has(\"G\") && dict.has(\"H\") && dict.has(\"I\") && dict.has(\"J\") && dict.has(\"K\") && dict.has(\"L\") && dict.has(\"M\") && dict.has(\"N\") && dict.has(\"O\") && dict.has(\"P\") && dict.has(\"Q\") && dict.has(\"R\") && dict.has(\"S\") && dict.has(\"T\") && dict.has(\"U\")\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4wz8i0m0.fsx(12,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp4wz8i0m0.fsx(12,1): error FS0010: Unexpected keyword 'let' or 'use' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().forEach((key: string) => {\n        if (key.toLowerCase() === key.toUpperCase()) {\n            return false;\n        }\n    })\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp93fb83s9.fsx(15,5): error FS0010: Unexpected symbol '}' in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().map(e => e.key.toLowerCase() === e.value.toLowerCase()).some(e => e.value.toLowerCase() === e.key.toLowerCase());\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprkieaacf.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().some((key: string) => key.toLowerCase().startsWith(\"a\") || key.toUpperCase().startsWith(\"b\"))\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfjt1931r.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().some((key: string) => key.toLowerCase().startsWith(\"a\") || key.toUpperCase().startsWith(\"A\"));\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpx8t7lhqc.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675795285,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcx76_6gw.fsx(11,10): error FS0039: The type 'Map<_,_>' does not define the field, constructor or member 'entries'.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}