{
  "name": "HumanEval_13_greatest_common_divisor",
  "language": "fs",
  "prompt": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n",
  "tests": "let test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp070bcvt2.fsx(9,5): error FS0037: Duplicate definition of value 'greatest_common_divisor'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n    a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b;\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  (a + b) % 2;\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a % b;\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\n  \nlet greatest_common_divisor (a: int) (b: int): int  = \n  a\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6neq226m.fsx(9,5): error FS0037: Duplicate definition of value 'greatest_common_divisor'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  (a * b) % (a + b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  (a * b) % (a + b)\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b;\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n  a / b\nlet test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()",
      "timestamp": 1675790519,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}