{
  "name": "HumanEval_104_unique_digits",
  "language": "fs",
  "prompt": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n",
  "tests": "let test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .filter(i => i % 2 == 1)\n\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyza9crr3.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoq1qze7w.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpoq1qze7w.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpoq1qze7w.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpoq1qze7w.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpoq1qze7w.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  [x]\n  .sort()\n  .map((x: int) => x)\n  .filter((x: int) => x % 2 === 0)\n  .reverse();\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuvlpj725.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn896qexh.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu1m_m1fn.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i < 100)\n  .map(i => i)\n  .filter(i => i < 1000)\n  .map(i => i)\n  .filter(i => i < 10000)\n  .map(i => i)\n  .filter(i => i < 100000)\n  .map(i => i)\n  .filter(i => i < 1000000)\n  .map(i => i)\n  .filter(i => i < 10000000)\n  .map(i => i)\n  .filter(i => i < 100000000)\n  .map(i => i)\n  .filter(i => i < 1000000000)\n  .map(i => i)\n  .filter(i => i < 10000000000)\n  .map(i => i)\n  .filter(i => i < 100000000000)\n  .map(i => i)\n  .filter(i => i < 1000000000000)\n  .map(i => i)\n  .filter(i => i < 10000000000000)\n  .map(i => i)\n  .filter(i => i < 100000000000000)\n  .map(i => i)\n  .filter(i => i < 1000000000000000)\n  .map(i => i)\n  .filter(i => i < 10000000000000000)\n  .map(i => i)\n  .filter(i => i < 100000000000000000)\n  .map(i => i)\n  .filter(i => i < 10000000000000000000)\n  .map(i => i)\n  .filter(i => i < 10000000000000000000)\n  .map(i => i)\n  .filter(i => i < 100000000000000000000)\n  .map(i => i)\n  .filter(i => i < 100000000000000000000)\n  .map(i => i)\n  .filter(i => i < 100000000000000000000)\n  .map(i => i)\n\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_ry_rs7i.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmp_ry_rs7i.fsx(32,20): error FS1147: This number is outside the allowable range for 32-bit signed integers\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu1m_m1fn.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoq1qze7w.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpoq1qze7w.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpoq1qze7w.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpoq1qze7w.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpoq1qze7w.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu1m_m1fn.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .reverse\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwwn5ups4.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0ggcxkwf.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmp0ggcxkwf.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0ggcxkwf.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0ggcxkwf.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp0ggcxkwf.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tm",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu1m_m1fn.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu1m_m1fn.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  \nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpptc3_gmo.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(i => i)\n  .filter(i => i % 2)\n  .map(\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi12kcjqc.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpi12kcjqc.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpi12kcjqc.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpi12kcjqc.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpi12kcjqc.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tm",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n  .filter(i => i > 0)\n  .reverse()\n  .map(i => i)\n\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsi2odvv3.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i < 1)\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i < 1)\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i < 1)\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i < 1)\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i < 1)\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i < 1)\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i < 1)\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .filter(i => i < 10)\n  .map(i => i)\n  .filter(i => i < 1)\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpba2m5zkn.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpba2m5zkn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpba2m5zkn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpba2m5zkn.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpba2m5zkn.fsx(70,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (9:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/t",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(digit => digit % 2)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\n  .reverse()\n  .map(digit => digit)\n  .filter(digit => digit > 0)\n  .map(digit => digit)\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790505,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2vo323bj.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i < 2)\n  .map(i => i)\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7wlys583.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .reduce((a, b) => a + b)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n  .reverse()\n  .map(i => i % 2)\n\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5opxjghj.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n  x.sort()\n  .map(i => i % 2)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i < x.length)\n\nlet test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()",
      "timestamp": 1675790504,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpcu9wfbng.fsx(11,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}