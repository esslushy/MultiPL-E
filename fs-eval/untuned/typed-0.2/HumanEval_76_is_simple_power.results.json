{
  "name": "HumanEval_76_is_simple_power",
  "language": "fs",
  "prompt": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n",
  "tests": "let test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (x == 1) ? true :\n  (x == 2) ? true :\n  (x == 8) ? true :\n  (x == 3) ? false :\n  (x == 5) ? false :\n  (x == 4) ? false :\n  (x == 7) ? false :\n  (x == 6) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (x == 7) ? false :\n  (\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxgeq4hnr.fsx(12,14): error FS0010: Unexpected keyword 'true' in expression. Expected identifier, '(' or other token.\n\n\n\n/tmp/tmpxgeq4hnr.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxgeq4hnr.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxgeq4hnr.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxgeq4hnr.fsx(78,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxgeq4hnr.fsx(78,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n    (n**int) => (n**int) % n == 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkrln1p8a.fsx(12,6): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (n**int) => (n**int) % n == 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpswr99_ib.fsx(12,4): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n    (n > 0 && n < x) ? true : false;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpetzjt4bj.fsx(12,24): error FS0010: Unexpected keyword 'true' in expression. Expected identifier, '(' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n    (x > 1) ? (x > 2) : (x > 3)\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplufuhx_f.fsx(12,28): error FS0010: Unexpected symbol '>' in binding. Expected ',' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n    (n**int) => (n**int) % n == 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkrln1p8a.fsx(12,6): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n    (n > 1) && (n % 2 == 0) && (n % 3 == 0) && (n % 5 == 0) && (n % 7 == 0) && (n % 11 == 0) && (n % 13 == 0) && (n % 17 == 0) && (n % 19 == 0) && (n % 23 == 0) && (n % 29 == 0) && (n % 31 == 0) && (n % 37 == 0) && (n % 41 == 0) && (n % 43 == 0) && (n % 47 == 0) && (n % 53 == 0) && (n % 59 == 0) && (n % 61 == 0) && (n % 67 == 0) && (n % 71 == 0) && (n % 73 == 0) && (n % 79 == 0) && (n % 83 == 0) && (n % 89 == 0) && (n % 97 == 0) && (n % 101 == 0) && (n % 103 == 0) && (n % 107 == 0) && (n % 109 == 0) && (n % 113 == 0) && (n % 127 == 0) && (n % 131 == 0) && (n % 137 == 0) && (n % 139 == 0) && (n % 143 == 0) && (n % 147 == 0) && (n % 151 == 0) && (n % 157 == 0) && (n % 163 == 0) && (n % 167 == 0) && (n % 169 == 0) && (n % 181 == 0) && (n % 191 == 0) && (n % 193 == 0) && (n % 197 == 0) && (n % 199 == 0) && (n % 211 == 0) && (n % 223 == 0) && (n % 227 == 0) && (n % 229 == 0) && (n % 233 == 0) && (n % 239 == 0) && (n % 241 == 0) && (n % 251 == 0) && (n % 257 == 0) && (n % 269 == 0) && (n % 271 == 0) && (n % 277 == 0) && (n % 281 == 0) && (n % 283 == 0) && (n % 293 == 0) && (n % 307 == 0) && (n % 311 == 0) && (\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9jzup_j7.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9jzup_j7.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9jzup_j7.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9jzup_j7.fsx(27,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9jzup_j7.fsx(27,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9jzup_j7.fsx(12,1121): error FS0583: Unmatched '('\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (n > 1) ? (n**int) % n : false;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph2uj33oh.fsx(12,33): error FS0010: Unexpected symbol ';' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (n**int) => (n**int) % n == 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8nugmwp6.fsx(12,4): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (n**int) => (n**int) % n == 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8nugmwp6.fsx(12,4): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n    (x == 1) ? true :\n    (x == 2) ? true :\n    (x == 8) ? true :\n    (x == 3) ? false :\n    (x == 5) ? false :\n    (x == 3) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (x == 5) ? false :\n    (\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp39sm5kf4.fsx(12,16): error FS0010: Unexpected keyword 'true' in expression. Expected identifier, '(' or other token.\n\n\n\n/tmp/tmp39sm5kf4.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp39sm5kf4.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp39sm5kf4.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp39sm5kf4.fsx(78,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp39sm5kf4.fsx(78,1): warnin",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (n**int) => (n**int) % n == 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8nugmwp6.fsx(12,4): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (n > 1) ? (n**int) % n : false;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmph2uj33oh.fsx(12,33): error FS0010: Unexpected symbol ';' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n    (n**int) => (n**int) % n == 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkrln1p8a.fsx(12,6): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (x == 1) ? true : (x == 2) ? true : (x == 3) ? true : (x == 4) ? true : (x == 5) ? true : false;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxph2fpnf.fsx(12,14): error FS0010: Unexpected keyword 'true' in expression. Expected identifier, '(' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (n**int) => (n**int) % n == 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8nugmwp6.fsx(12,4): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (n**int) => x % n == 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4qxzjn0r.fsx(12,4): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (n**int) => (n**int) % n == 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpswr99_ib.fsx(12,4): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n    (n**int) => (n**int) % n == 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphknnzeaw.fsx(12,6): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power (x: int) (n: int): bool  = \n  (n**int) => (n**int) % n == 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675795194,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8nugmwp6.fsx(12,4): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}