{
  "name": "HumanEval_111_histogram",
  "language": "fs",
  "prompt": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n",
  "tests": "let test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n    new Map<string, int>();\nhistogram('') = {};\nhistogram('a b c') = {'a': 1, 'b': 1, 'c': 1};\nhistogram('a b b a') = {'a': 2, 'b': 2};\nhistogram('b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b b b b a') = {'b': 2};\nhistogram('b b b b b a') = {'b': 4};\nhistogram('b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgxyg87pz.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('') == {}\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgv11jvvu.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('') = {};\nhistogram('a b c') = {'a': 1, 'b': 1, 'c': 1};\nhistogram('a b b a') = {'a': 2, 'b': 2};\nhistogram('b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b b b b a') = {'b': 2};\nhistogram('b b b b b a') = {'b': 4};\nhistogram('b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp26fwy83p.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('') = {};\nhistogram('a b c') = {'a': 1, 'b': 1, 'c': 1};\nhistogram('a b b a') = {'a': 2, 'b': 2, 'c': 2};\nhistogram('b b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_8li08f4.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('') = {};\nhistogram('a') = {'a': 1};\nhistogram('a b') = {'a': 1, 'b': 1};\nhistogram('a b c') = {'a': 2, 'b': 2};\nhistogram('b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b c a b') = {'a': 2, 'b': 2, 'c': 1};\nhistogram('b b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b c a b') = {'a': 2, 'b': 2, 'c': 1};\nhistogram('b b b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b c a b') = {'a': 2, 'b': 2, 'c': 1};\nhistogram('b b b b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b c a b') = {'a': 2, 'b': 2, 'c': 1};\nhistogram('b b b b b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b c a b') = {'a': 2, 'b': 2, 'c': 1};\nhistogram('b b b b b b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b c a b') = {'a': 2, 'b': 2, 'c': 1};\nhistogram('b b b b b b b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b c a b') = {'a': 2, 'b': 2, 'c': 1};\nhistogram('b b b b b b b b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b c a b') = {'a': 2,\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp350dt8t1.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n    new Map<string, int>();\nhistogram('') = {};\nhistogram('a b c') = {'a': 1, 'b': 1, 'c': 1};\nhistogram('a b b a') = {'a': 2, 'b': 2, 'c': 1};\nhistogram('b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpng0733a9.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp08509_vv.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  (test: string) => {\n    let hist = {};\n    let count = 0;\n    for (let i = 0; i < test.length; i++) {\n      if (test[i] === ' ') {\n        hist[test[i]] = count;\n        count += 1;\n      }\n    }\n    return hist;\n  };\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1cjhux_v.fsx(14,10): error FS0010: Unexpected keyword 'let' or 'use' in pattern. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n    new Map<string, int>();\nhistogram('') === {}\nhistogram('a b c') === {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') === {'a': 2, 'b': 2}\nhistogram('b b b b b') === {'b': 4}\nhistogram('') === {}\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyvprqdew.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('') == {}\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\nhistogram('b b b b b a') == {'b': 4}\nhistogram('b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b b b b b b a') == {'b': 4}\nhistogram('b b b b b b b b b b b b b b b b b a') == {'b': 4\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp37z68hbj.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('') = {};\nhistogram('a b c') = {'a': 1, 'b': 1, 'c': 1};\nhistogram('a b b a') = {'a': 2, 'b': 2};\nhistogram('b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('a b b b b a') = {'b': 4};\nhistogram('b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b b a') = {'b\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_joxyugc.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('') = {};\nhistogram('a') = {'a': 1};\nhistogram('a b') = {'a': 1, 'b': 1};\nhistogram('a b c') = {'a': 2, 'b': 2};\nhistogram('b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhist\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6h2mezfu.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('') === {}\nhistogram('a b c') === {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') === {'a': 2, 'b': 2}\nhistogram('b b b b a') === {'b': 4}\nhistogram('') === {}\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_m4fpn4a.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2yp1w9hi.fsx(11,23): error FS0001: The type 'unit' is not compatible with the type 'seq<string * int>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n    new Map<string, int>();\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b b b b')\nhistogram('b b\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmotmfuz0.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('') === {}\nhistogram('a b c') === {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') === {'a': 2, 'b': 2}\nhistogram('b b b b a') === {'b': 4}\nhistogram('') === {}\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_m4fpn4a.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('b b b b b a')\nhistogram('b b b b b b a')\nhistogram('b b b b b b b a')\nhistogram('b b b b b b b b a')\nhistogram('b b b b b b b b b a')\nhistogram('b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b b b b b b a')\nhistogram('b b b b b b b\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpn59e0s5s.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n  new Map<string, int>();\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2yp1w9hi.fsx(11,23): error FS0001: The type 'unit' is not compatible with the type 'seq<string * int>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n    new Map<string, int>();\nhistogram('') = {};\nhistogram('a b c') = {'a': 1, 'b': 1, 'c': 1};\nhistogram('a b b a') = {'a': 2, 'b': 2};\nhistogram('b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('b b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b b a') = {'b': 4};\nhistogram('b b b b b b b b b b b b b b b\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsla33hqf.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n    new Map<string, int>();\nhistogram('') = {};\nhistogram('a b c') = {'a': 1, 'b': 1, 'c': 1};\nhistogram('a b b a') = {'a': 2, 'b': 2};\nhistogram('b b b b a') = {'b': 4};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {};\nhistogram('') = {\nlet test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()",
      "timestamp": 1675790491,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxh8tn4p8.fsx(12,11): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}