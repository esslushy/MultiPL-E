{
  "name": "HumanEval_29_filter_by_prefix",
  "language": "fs",
  "prompt": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n",
  "tests": "let test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  ['a', 'b', 'c', 'd', 'array'];\nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpskl1b5t3.fsx(7,24): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi_kbmwe9.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi_kbmwe9.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n    'abc'\n    + 'bcd'\n    + 'cde'\n    + 'array'\n    + 'a'\n    + 'b'\n    + 'c'\n    + 'd'\n    + 'e'\n    + 'f'\n    + 'g'\n    + 'h'\n    + 'i'\n    + 'j'\n    + 'k'\n    + 'l'\n    + 'm'\n    + 'n'\n    + 'o'\n    + 'p'\n    + 'q'\n    + 'r'\n    + 's'\n    + 't'\n    + 'u'\n    + 'v'\n    + 'w'\n    + 'x'\n    + 'y'\n    + 'z'\n    + 'a'\n    + 'b'\n    + 'c'\n    + 'd'\n    + 'e'\n    + 'f'\n    + 'g'\n    + 'h'\n    + 'i'\n    + 'j'\n    + 'k'\n    + 'l'\n    + 'm'\n    + 'n'\n    + 'o'\n    + 'p'\n    + 'q'\n    + 'r'\n    + 's'\n    + 't'\n    + 'u'\n    + 'v'\n    + 'w'\n    + 'x'\n    + 'y'\n    + 'z'\n    + 'a'\n    + 'b'\n    + 'c'\n    + 'd'\n    + 'e'\n    + 'f'\n    + 'g'\n    + 'h'\n    + 'i'\n    + 'j'\n    + 'k'\n    + 'l'\n    + 'm'\n    + 'n'\n    + 'o'\n    + 'p'\n    + 'q'\n    + 'r'\n    + 's'\n    + 't'\n    + 'u'\n    + 'v'\n    + 'w'\n    + 'x'\n    + 'y'\n    + 'z'\n    + 'a'\n    + 'b'\n    + 'c'\n    \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgl2ei6y2.fsx(7,5): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'array'\n  + 'a'\n  + '\nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppx2t0xw8.fsx(12,5): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi_kbmwe9.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array';\nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpoatucykp.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi_kbmwe9.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + '\nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8zwlfe7d.fsx(92,5): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + '\nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8zwlfe7d.fsx(92,5): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi_kbmwe9.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + '\nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8zwlfe7d.fsx(92,5): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi_kbmwe9.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi_kbmwe9.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'a'\n  + '\nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8zwlfe7d.fsx(92,5): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  ['a', 'b', 'c', 'd', 'array'];\nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpskl1b5t3.fsx(7,24): error FS0010: Unexpected quote symbol in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi_kbmwe9.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi_kbmwe9.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n  'abc'\n  + 'bcd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi_kbmwe9.fsx(7,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n    'abc'\n    + 'bcd'\n    + 'cde'\n    + 'array'\n    + 'a'\n    + 'b'\n    + 'c'\n    + 'd'\n    + 'e'\n    + 'f'\n    + 'g'\n    + 'h'\n    + 'i'\n    + 'j'\n    + 'k'\n    + 'l'\n    + 'm'\n    + 'n'\n    + 'o'\n    + 'p'\n    + 'q'\n    + 'r'\n    + 's'\n    + 't'\n    + 'u'\n    + 'v'\n    + 'w'\n    + 'x'\n    + 'y'\n    + 'z'\n    + 'a'\n    + 'b'\n    + 'c'\n    + 'd'\n    + 'e'\n    + 'f'\n    + 'g'\n    + 'h'\n    + 'i'\n    + 'j'\n    + 'k'\n    + 'l'\n    + 'm'\n    + 'n'\n    + 'o'\n    + 'p'\n    + 'q'\n    + 'r'\n    + 's'\n    + 't'\n    + 'u'\n    + 'v'\n    + 'w'\n    + 'x'\n    + 'y'\n    + 'z'\n    + 'a'\n    + 'b'\n    + 'c'\n    + 'd'\n    + 'e'\n    + 'f'\n    + 'g'\n    + 'h'\n    + 'i'\n    + 'j'\n    + 'k'\n    + 'l'\n    + 'm'\n    + 'n'\n    + 'o'\n    + 'p'\n    + 'q'\n    + 'r'\n    + 's'\n    + 't'\n    + 'u'\n    + 'v'\n    + 'w'\n    + 'x'\n    + 'y'\n    + 'z'\n    + 'a'\n    + 'b'\n    + 'c'\n    \nlet test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()",
      "timestamp": 1675797158,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgl2ei6y2.fsx(7,5): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}