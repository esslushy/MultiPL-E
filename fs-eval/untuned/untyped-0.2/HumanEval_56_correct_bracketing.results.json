{
  "name": "HumanEval_56_correct_bracketing",
  "language": "fs",
  "prompt": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n",
  "tests": "let test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  [\n    \"<\",\n    \"<>\",\n    \"<<\",\n    \">>\",\n    \">\",\n    \">>\",\n    \"<<<\",\n    \">>>\"\n  ];\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpubju_9bu.fsx(24,28): error FS0001: This expression was expected to have type\n    '(string * string * string * string * string * string * string * string) list'    \nbut here has type\n    'bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<>\";\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf7rju5ge.fsx(15,28): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<>\";\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf7rju5ge.fsx(15,28): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<>\";\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf7rju5ge.fsx(15,28): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797433,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv85gr44q.fsx(114,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (97:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpv85gr44q.fsx(111,22): error FS3156: Unexpected token '<><><<><>><>>><>' or incomplete expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">\"\n  \">>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwd0n2eif.fsx(12,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(13,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(14,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(15,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(16,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(17,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(18,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(19,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value expli",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">\"\n  \">>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\n  \"<<>\"\n  \">>>\"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpwd0n2eif.fsx(12,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(13,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(14,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(15,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(16,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(17,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(18,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpwd0n2eif.fsx(19,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value expli",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<<\"\n  \">>\"\n  \"<<<\"\n  \">\"\n  \">>\"\n  \"><<\"\n  \">>>\";\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpawo10ys8.fsx(12,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpawo10ys8.fsx(13,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpawo10ys8.fsx(14,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpawo10ys8.fsx(15,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpawo10ys8.fsx(16,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpawo10ys8.fsx(17,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpawo10ys8.fsx(18,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmpawo10ys8.fsx(19,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value expli",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797433,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprxbl7w0u.fsx(131,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprxbl7w0u.fsx(128,22): error FS3156: Unexpected token '<><><<><>><>>><>' or incomplete expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797433,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprxbl7w0u.fsx(131,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprxbl7w0u.fsx(128,22): error FS3156: Unexpected token '<><><<><>><>>><>' or incomplete expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797433,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprxbl7w0u.fsx(131,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprxbl7w0u.fsx(128,22): error FS3156: Unexpected token '<><><<><>><>>><>' or incomplete expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"<\" +\n  \"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797433,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv85gr44q.fsx(114,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (97:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpv85gr44q.fsx(111,22): error FS3156: Unexpected token '<><><<><>><>>><>' or incomplete expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<>\";\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf7rju5ge.fsx(15,28): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<>\";\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpf7rju5ge.fsx(15,28): error FS0001: This expression was expected to have type\n    'string'    \nbut here has type\n    'bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n  \">>>\"\n  \"<<><>>\"\n  \"<\"\n  \"<>\"\n  \"<<>\"\n\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5z22ng6w.fsx(12,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp5z22ng6w.fsx(13,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp5z22ng6w.fsx(14,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp5z22ng6w.fsx(15,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp5z22ng6w.fsx(16,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp5z22ng6w.fsx(17,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp5z22ng6w.fsx(18,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp5z22ng6w.fsx(19,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value expli",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797433,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprxbl7w0u.fsx(131,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprxbl7w0u.fsx(128,22): error FS3156: Unexpected token '<><><<><>><>>><>' or incomplete expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797433,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprxbl7w0u.fsx(131,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprxbl7w0u.fsx(128,22): error FS3156: Unexpected token '<><><<><>><>>><>' or incomplete expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797433,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprxbl7w0u.fsx(131,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprxbl7w0u.fsx(128,22): error FS3156: Unexpected token '<><><<><>><>>><>' or incomplete expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"<>\"\n  \"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797433,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprxbl7w0u.fsx(131,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (12:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprxbl7w0u.fsx(128,22): error FS3156: Unexpected token '<><><<><>><>>><>' or incomplete expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\n  \"<><<<>>\"\nlet test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()",
      "timestamp": 1675797434,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp83n_odbr.fsx(12,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp83n_odbr.fsx(13,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp83n_odbr.fsx(14,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp83n_odbr.fsx(15,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp83n_odbr.fsx(16,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp83n_odbr.fsx(17,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp83n_odbr.fsx(18,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.\n\n\n\n/tmp/tmp83n_odbr.fsx(19,3): warning FS0020: The result of this expression has type 'string' and is implicitly ignored. Consider using 'ignore' to discard this value expli",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}