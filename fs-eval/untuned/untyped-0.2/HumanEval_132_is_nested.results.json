{
  "name": "HumanEval_132_is_nested",
  "language": "fs",
  "prompt": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n",
  "tests": "let test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n    '[[]]'\nlet is_nested_empty string = ''\nlet is_nested_empty_empty string = ''\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjs2q4soj.fsx(11,5): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t\"[[]]\"]\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxy76nr4i.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]']'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv535emp_.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\nlet is_nested_substring = \n\t'[[]]'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxac85e0k.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpxac85e0k.fsx(12,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n    '[[]]'\nlet is_nested_1 = \n    '[[]]'\nlet is_nested_2 = \n    '[[]]'\nlet is_nested_3 = \n    '[[]]'\nlet is_nested_4 = \n    '[[]]'\nlet is_nested_5 = \n    '[[]]'\nlet is_nested_6 = \n    '[[]]'\nlet is_nested_7 = \n    '[[]]'\nlet is_nested_8 = \n    '[[]]'\nlet is_nested_9 = \n    '[[]]'\nlet is_nested_10 = \n    '[[]]'\nlet is_nested_11 = \n    '[[]]'\nlet is_nested_12 = \n    '[[]]'\nlet is_nested_13 = \n    '[[]]'\nlet is_nested_14 = \n    '[[]]'\nlet is_nested_15 = \n    '[[]]'\nlet is_nested_16 = \n    '[[]]'\nlet is_nested_17 = \n    '[[]]'\nlet is_nested_18 = \n    '[[]]'\nlet is_nested_19 = \n    '[[]]'\nlet is_nested_20 = \n    '[[]]'\nlet is_nested_21 = \n    '[[]]'\nlet is_nested_22 = \n    '[[]]'\nlet is_nested_23 = \n    '[[]]'\nlet is_nested_24 = \n    '[[]]'\nlet is_nested_25 = \n    '[[]]'\nlet is_nested_26 = \n    '[[]]'\nlet is_nested_27 = \n    '[[]]'\nlet is_nested_28 = \n    '[[]]'\nlet is_nested_29 = \n    '[[]]'\nlet is_nested_30 = \n    '[[]]'\nlet is_nested_31 = \n    '[[]]'\nlet is_nested_32 = \n\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpab5y_3r1.fsx(11,5): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmpab5y_3r1.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (74:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpab5y_3r1.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (74:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpab5y_3r1.fsx(94,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (74:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpab5y_3r1.fsx(94,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (74:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]']'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv535emp_.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'[[]]'\n\t'\nlet test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()",
      "timestamp": 1675797153,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp8ac031er.fsx(11,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}