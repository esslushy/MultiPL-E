{
  "name": "HumanEval_95_check_dict_case",
  "language": "fs",
  "prompt": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n",
  "tests": "let test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\",\n    \"8\":\"banana\",\n    \"a\":\"apple\",\n    \"Name\":\"John\",\n    \"Age\":\"36\",\n    \"City\":\"Houston\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797953,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo4xeo3ig.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo4xeo3ig.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo4xeo3ig.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpo4xeo3ig.fsx(20,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo4xeo3ig.fsx(20,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo4xeo3ig.fsx(31,1): warning FS0058: Possibl",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\",\n    \"8\":\"banana\",\n    \"a\":\"apple\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpavv1wlgy.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpavv1wlgy.fsx(17,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(17,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(28,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(28,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\"\n};\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyfa_anoz.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyfa_anoz.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyfa_anoz.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpyfa_anoz.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyfa_anoz.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyfa_anoz.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyfa_anoz.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\",\n    \"8\":\"banana\",\n    \"a\":\"apple\",\n    \"Name\":\"John\",\n    \"Age\":\"36\",\n    \"City\":\"Houston\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797953,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo4xeo3ig.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo4xeo3ig.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo4xeo3ig.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpo4xeo3ig.fsx(20,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo4xeo3ig.fsx(20,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpo4xeo3ig.fsx(31,1): warning FS0058: Possibl",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\",\n    \"8\":\"banana\",\n    \"a\":\"apple\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpavv1wlgy.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpavv1wlgy.fsx(17,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(17,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(28,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(28,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"apple\": \"apple\",\n    \"banana\": \"banana\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\":\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797953,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe7lcnkzq.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpe7lcnkzq.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpe7lcnkzq.fsx(12,12): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpe7lcnkzq.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\",\n    \"8\":\"banana\",\n    \"a\":\"apple\"\n};\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp546so26h.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp546so26h.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp546so26h.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmp546so26h.fsx(17,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp546so26h.fsx(17,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp546so26h.fsx(28,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp546so26h.fsx(28,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"apple\": \"apple\",\n    \"banana\": \"banana\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\": \"apple\",\n    \"horse\": \"horse\",\n    \"apple\":\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797953,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpe7lcnkzq.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpe7lcnkzq.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpe7lcnkzq.fsx(12,12): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpe7lcnkzq.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"apple\": \"apple\",\n    \"banana\": \"banana\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\": \"horse\",\n    \"horse\":\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz3flofd0.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpz3flofd0.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpz3flofd0.fsx(12,12): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpz3flofd0.fsx(76,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\",\n    \"8\":\"banana\",\n    \"a\":\"apple\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpavv1wlgy.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpavv1wlgy.fsx(17,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(17,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(28,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpavv1wlgy.fsx(28,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"apple\" : \"apple\",\n    \"banana\" : \"banana\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\" : \"horse\",\n    \"horse\"\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpg0eg9l5e.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpg0eg9l5e.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpg0eg9l5e.fsx(12,13): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpg0eg9l5e.fsx(69,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n{\n    \"a\":\"apple\",\n    \"b\":\"banana\"\n}\nlet test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()",
      "timestamp": 1675797954,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(11,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(12,8): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpkx_72n0u.fsx(26,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (10:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}