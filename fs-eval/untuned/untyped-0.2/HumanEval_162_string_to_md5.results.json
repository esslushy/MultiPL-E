{
  "name": "HumanEval_162_string_to_md5",
  "language": "fs",
  "prompt": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n",
  "tests": "let test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .trim()\n  .toLowerCase()\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmps5ju2oov.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .replace(/\\n/g, '')\n  .replace(/\\r/g, '')\n  .replace(/\\t/g, '')\n  .replace(/\\0/g, '')\n  .replace(/\\x00/g, '')\n  .replace(/\\x01/g, '')\n  .replace(/\\x02/g, '')\n  .replace(/\\x03/g, '')\n  .replace(/\\x04/g, '')\n  .replace(/\\x05/g, '')\n  .replace(/\\x06/g, '')\n  .replace(/\\x07/g, '')\n  .replace(/\\x08/g, '')\n  .replace(/\\x09/g, '')\n  .replace(/\\x0a/g, '')\n  .replace(/\\x0b/g, '')\n  .replace(/\\x0c/g, '')\n  .replace(/\\x0d/g, '')\n  .replace(/\\x0e/g, '')\n  .replace(/\\x0f/g, '')\n  .replace(/\\x10/g, '')\n  .replace(/\\x11/g, '')\n  .replace(/\\x12/g, '')\n  .replace(/\\x13/g, '')\n  .replace(/\\x14/g, '')\n  .replace(/\\x15/g, '')\n  .replace(/\\x16/g, '')\n  .replace(/\\x17/g, '')\n  .replace(/\\x18/g, '')\n  .replace(/\\x19/g, '')\n  .replace(/\\x1a/g, '')\n  .replace(/\\x1b/g, '')\n  .replace(/\\x1c/g, '')\n  .replace(/\\x1d/g, '')\n  .replace(/\\x1e/g, '')\n  .replace(/\\x1f\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxrtiush_.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmpxrtiush_.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .replace(/\\s+/g, '')\n  .replace(/\\n/g, '')\n  .replace(/\\r/g, '')\n  .replace(/\\t/g, '')\n  .replace(/\\0/g, '')\n  .replace(/\\x00/g, '')\n  .replace(/\\x01/g, '')\n  .replace(/\\x02/g, '')\n  .replace(/\\x03/g, '')\n  .replace(/\\x04/g, '')\n  .replace(/\\x05/g, '')\n  .replace(/\\x06/g, '')\n  .replace(/\\x07/g, '')\n  .replace(/\\x08/g, '')\n  .replace(/\\x09/g, '')\n  .replace(/\\x0a/g, '')\n  .replace(/\\x0b/g, '')\n  .replace(/\\x0c/g, '')\n  .replace(/\\x0d/g, '')\n  .replace(/\\x0e/g, '')\n  .replace(/\\x0f/g, '')\n  .replace(/\\x10/g, '')\n  .replace(/\\x11/g, '')\n  .replace(/\\x12/g, '')\n  .replace(/\\x13/g, '')\n  .replace(/\\x14/g, '')\n  .replace(/\\x15/g, '')\n  .replace(/\\x16/g, '')\n  .replace(/\\x17/g, '')\n  .replace(/\\x18/g, '')\n  .replace(/\\x19/g, '')\n  .replace(/\\x1a/g, '')\n  .replace(/\\x1b/g, '')\n  .replace(/\\x1c/g, '')\n  .replace(/\\x1d/g, '')\n  .replace(/\\x1e/\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpceugbz6l.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmpceugbz6l.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpceugbz6l.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpceugbz6l.fsx(50,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpceugbz6l.fsx(50,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .toLowerCase()\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz4mvkl4a.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .replace(/\\s/g, '')\n  .replace(/\\n/g, '')\n  .replace(/\\r/g, '')\n  .replace(/\\t/g, '')\n  .replace(/\\0/g, '')\n  .replace(/\\x00/g, '')\n  .replace(/\\x01/g, '')\n  .replace(/\\x02/g, '')\n  .replace(/\\x03/g, '')\n  .replace(/\\x04/g, '')\n  .replace(/\\x05/g, '')\n  .replace(/\\x06/g, '')\n  .replace(/\\x07/g, '')\n  .replace(/\\x08/g, '')\n  .replace(/\\x09/g, '')\n  .replace(/\\x0a/g, '')\n  .replace(/\\x0b/g, '')\n  .replace(/\\x0c/g, '')\n  .replace(/\\x0d/g, '')\n  .replace(/\\x0e/g, '')\n  .replace(/\\x0f/g, '')\n  .replace(/\\x10/g, '')\n  .replace(/\\x11/g, '')\n  .replace(/\\x12/g, '')\n  .replace(/\\x13/g, '')\n  .replace(/\\x14/g, '')\n  .replace(/\\x15/g, '')\n  .replace(/\\x16/g, '')\n  .replace(/\\x17/g, '')\n  .replace(/\\x18/g, '')\n  .replace(/\\x19/g, '')\n  .replace(/\\x1a/g, '')\n  .replace(/\\x1b/g, '')\n  .replace(/\\x1c/g, '')\n  .replace(/\\x1d/g, '')\n  .replace(/\\x1e/g\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_rcrpyc0.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmp_rcrpyc0.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .trim()\n  .replace(/\\s/g, '')\n  .replace(/\\n/g, '')\n  .replace(/\\r/g, '')\n  .replace(/\\t/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpnzkm37w3.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmpnzkm37w3.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .replace(/\\s/g, '')\n  .replace(/\\n/g, '')\n  .replace(/\\r/g, '')\n  .replace(/\\t/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvkw4qnsg.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmpvkw4qnsg.fsx(33,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .replace(/\\s/g, '')\n  .replace(/\\n/g, '')\n  .replace(/\\r/g, '')\n  .replace(/\\t/g, '')\n  .replace(/\\0/g, '')\n  .replace(/\\x00/g, '')\n  .replace(/\\x01/g, '')\n  .replace(/\\x02/g, '')\n  .replace(/\\x03/g, '')\n  .replace(/\\x04/g, '')\n  .replace(/\\x05/g, '')\n  .replace(/\\x06/g, '')\n  .replace(/\\x07/g, '')\n  .replace(/\\x08/g, '')\n  .replace(/\\x09/g, '')\n  .replace(/\\x0a/g, '')\n  .replace(/\\x0b/g, '')\n  .replace(/\\x0c/g, '')\n  .replace(/\\x0d/g, '')\n  .replace(/\\x0e/g, '')\n  .replace(/\\x0f/g, '')\n  .replace(/\\x10/g, '')\n  .replace(/\\x11/g, '')\n  .replace(/\\x12/g, '')\n  .replace(/\\x13/g, '')\n  .replace(/\\x14/g, '')\n  .replace(/\\x15/g, '')\n  .replace(/\\x16/g, '')\n  .replace(/\\x17/g, '')\n  .replace(/\\x18/g, '')\n  .replace(/\\x19/g, '')\n  .replace(/\\x1a/g, '')\n  .replace(/\\x1b/g, '')\n  .replace(/\\x1c/g, '')\n  .replace(/\\x1d/g, '')\n  .replace(/\\x1e/g\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_rcrpyc0.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmp_rcrpyc0.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .trim()\n  .replace(/\\s+/g, '')\n  .replace(/\\n/g, '')\n  .replace(/\\r/g, '')\n  .replace(/\\t/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfzaxsyl4.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmpfzaxsyl4.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfzaxsyl4.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfzaxsyl4.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpfzaxsyl4.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  `Hello world`\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3cojq2fo.fsx(5,3): error FS0010: Unexpected reserved keyword in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .toLowerCase()\n  .replace(/\\s+/g, '')\n  .replace(/\\//g, '')\n  .replace(/\\+/g, '')\n  .replace(/\\*/g, '')\n  .replace(/\\*/g, '')\n  .replace(/\\(/g, '')\n  .replace(/\\)/g, '')\n  .replace(/\\[/g, '')\n  .replace(/\\]/g, '')\n  .replace(/\\{/g, '')\n  .replace(/\\}/g, '')\n  .replace(/\\~/g, '')\n  .replace(/\\^/g, '')\n  .replace(/\\$/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`/g, '')\n  .replace(/\\`\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxgao7r6q.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmpxgao7r6q.fsx(20,14): error FS0035: This construct is deprecated: '$' is not permitted as a character in operator names and is reserved for future use\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  text => text.replace(/\\s+/g, '');\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjwaqpn15.fsx(5,25): error FS0010: Unexpected character '\\' in expression. Expected ')' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  text.toLowerCase().replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]/g,\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpowe0kz1x.fsx(5,31): error FS0010: Unexpected symbol '[' in expression. Expected ')' or other token.\n\n\n\n/tmp/tmpowe0kz1x.fsx(35,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpowe0kz1x.fsx(35,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpowe0kz1x.fsx(43,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpowe0kz1x.fsx(43,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .trim()\n  .split(' ')\n  .map(s => `${s}${s.charAt(0) === '\\'' ? '\\\\' : ''}${s.charAt(1)}`)\n  .join(' ')\n  .toLowerCase()\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+$/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo9fpe1k2.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmpo9fpe1k2.fsx(12,15): error FS0035: This construct is deprecated: '$' is not permitted as a character in operator names and is reserved for future use\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  text.toLowerCase().replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[- ]+/g, '')\n  .replace(/[^a-z0-9]/g,\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpualg8b_2.fsx(5,31): error FS0010: Unexpected symbol '[' in expression. Expected ')' or other token.\n\n\n\n/tmp/tmpualg8b_2.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpualg8b_2.fsx(34,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpualg8b_2.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpualg8b_2.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .toLowerCase()\n  .replace(/\\s+/g, '')\n  .replace(/\\//g, '')\n  .replace(/\\+/g, '')\n  .replace(/\\*/g, '')\n  .replace(/\\*/g, '')\n  .replace(/\\//g, '')\n  .replace(/\\(/g, '')\n  .replace(/\\)/g, '')\n  .replace(/\\[/g, '')\n  .replace(/\\]/g, '')\n  .replace(/\\(/g, '')\n  .replace(/\\]/g, '')\n  .replace(/\\[\\]/g, '')\n  .replace(/\\[\\]\\]/g, '')\n  .replace(/\\[\\]\\]\\]/g, '')\n  .replace(/\\[\\]\\]\\]\\]/g, '')\n  .replace(/\\[\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpok0c0mra.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmpok0c0mra.fsx(24,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .toLowerCase()\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\n  .replace(/[^a-z0-9]/g, '')\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpz4mvkl4a.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  `Hello world`\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3cojq2fo.fsx(5,3): error FS0010: Unexpected reserved keyword in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .replace(/\\s/g, '')\n  .replace(/\\n/g, '')\n  .replace(/\\r/g, '')\n  .replace(/\\0/g, '')\n  .replace(/\\x00/g, '')\n  .replace(/\\x01/g, '')\n  .replace(/\\x02/g, '')\n  .replace(/\\x03/g, '')\n  .replace(/\\x04/g, '')\n  .replace(/\\x05/g, '')\n  .replace(/\\x06/g, '')\n  .replace(/\\x07/g, '')\n  .replace(/\\x08/g, '')\n  .replace(/\\x09/g, '')\n  .replace(/\\x0a/g, '')\n  .replace(/\\x0b/g, '')\n  .replace(/\\x0c/g, '')\n  .replace(/\\x0d/g, '')\n  .replace(/\\x0e/g, '')\n  .replace(/\\x0f/g, '')\n  .replace(/\\x10/g, '')\n  .replace(/\\x11/g, '')\n  .replace(/\\x12/g, '')\n  .replace(/\\x13/g, '')\n  .replace(/\\x14/g, '')\n  .replace(/\\x15/g, '')\n  .replace(/\\x16/g, '')\n  .replace(/\\x17/g, '')\n  .replace(/\\x18/g, '')\n  .replace(/\\x19/g, '')\n  .replace(/\\x1a/g, '')\n  .replace(/\\x1b/g, '')\n  .replace(/\\x1c/g, '')\n  .replace(/\\x1d/g, '')\n  .replace(/\\x1e/g, '')\n  .replace(/\\x1f\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm3k4f4t_.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmpm3k4f4t_.fsx(42,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 text = \n  'Hello world'\n  .toLowerCase()\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/g, '')\n  .replace(/\\s+/\nlet test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()",
      "timestamp": 1675797156,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprtnejoe8.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmprtnejoe8.fsx(43,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprtnejoe8.fsx(43,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprtnejoe8.fsx(51,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmprtnejoe8.fsx(51,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}