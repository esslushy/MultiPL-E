{
  "name": "HumanEval_24_largest_divisor",
  "language": "fs",
  "prompt": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n",
  "tests": "let test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n * n) % 2 + 1;\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplh_r9548.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n * (n - 1)) / 2;\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc3pvqk2x.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n{\n    n: 0,\n    max: 0\n}\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797162,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1nuev3s9.fsx(5,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1nuev3s9.fsx(5,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1nuev3s9.fsx(6,6): error FS0010: Unexpected symbol ':' in expression. Expected '}' or other token.\n\n\n\n/tmp/tmp1nuev3s9.fsx(9,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1nuev3s9.fsx(9,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1nuev3s9.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp1nuev3s9.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n  15\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  \nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n / 2)\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn n\n\t})\n\t.then(() => {\n\t\treturn\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9ae40muv.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp9ae40muv.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n// >>> n\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797162,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpp64c8l5b.fsx(6,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpp64c8l5b.fsx(6,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpp64c8l5b.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpp64c8l5b.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpp64c8l5b.fsx(7,19): error FS0039: The value or constructor 'largest_divisor' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n  15\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  \nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n * n) % 2\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\t// true\n\t// >>> n % 2 == 1\n\t// false\n\t// >>> n % 2 == 0\n\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7h395dq4.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp7h395dq4.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n * n) % (n * n)\n\t\nlet largest_divisor_n = \n\t(n * n) % (n * n)\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptwoc420j.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmptwoc420j.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n  (n - 1) / 2\n  \nlet divisor = \n  (n - 1) / 2\n  \nlet divisor_n = \n  (n - 1) / 2\n  \nlet divisor_n_1 = \n  (n - 1) / 2\n  \nlet divisor_n_2 = \n  (n - 1) / 2\n  \nlet divisor_n_3 = \n  (n - 1) / 2\n  \nlet divisor_n_4 = \n  (n - 1) / 2\n  \nlet divisor_n_5 = \n  (n - 1) / 2\n  \nlet divisor_n_6 = \n  (n - 1) / 2\n  \nlet divisor_n_7 = \n  (n - 1) / 2\n  \nlet divisor_n_8 = \n  (n - 1) / 2\n  \nlet divisor_n_9 = \n  (n - 1) / 2\n  \nlet divisor_n_10 = \n  (n - 1) / 2\n  \nlet divisor_n_11 = \n  (n - 1) / 2\n  \nlet divisor_n_12 = \n  (n - 1) / 2\n  \nlet divisor_n_13 = \n  (n - 1) / 2\n  \nlet divisor_n_14 = \n  (n - 1) / 2\n  \nlet divisor_n_15 = \n  (n - 1) / 2\n  \nlet divisor_n_16 = \n  (n - 1) / 2\n  \nlet divisor_n_17 = \n  (n - 1) / 2\n  \nlet divisor_n_18 = \n  (n - 1) / 2\n  \nlet divisor_n_19 = \n  (n - 1) / 2\n  \nlet divisor_n_20 = \n  (n - 1) / 2\n  \nlet divisor_n_21 = \n  (n - 1) / 2\n  \nlet\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797162,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgaj23mvg.fsx(77,1): error FS0010: Incomplete structured construct at or before this point in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n  (n / 2) | 0;\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797162,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsl9okczn.fsx(5,11): error FS0010: Unexpected symbol '|' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n * (n - 1)) / 2;\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc3pvqk2x.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n * (n + 1)) / 2;\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp57vytai6.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n * (n - 1)) / 2;\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpc3pvqk2x.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n  15\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(5)\n  // 5\n  // >>> largest_divisor(2)\n  // 2\n  // >>> largest_divisor(1)\n  // 1\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  // 0\n  // >>> largest_divisor(0)\n  \nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n  15\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  \nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n / 2) * 2 + 1;\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmeka4qyk.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n  15\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  // 5\n  // >>> largest_divisor(15)\n  \nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n * 2) % 10;\nconsole.log(largest_divisor);\n<|endoftext|nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkg0d1_7y.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor n = \n\t(n / 2) * 2 + (n / 3) * 3 + (n / 4) * 4 + (n / 5) * 5 + (n / 6) * 6 + (n / 7) * 7 + (n / 8) * 8 + (n / 9) * 9 + (n / 10) * 10 + (n / 11) * 11 + (n / 12) * 12 + (n / 13) * 13 + (n / 14) * 14 + (n / 15) * 15;\nlet test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()",
      "timestamp": 1675797161,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuwx8e1a4.fsx(5,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}