{
  "name": "HumanEval_120_maximum",
  "language": "fs",
  "prompt": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n",
  "tests": "let test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.reduce((a, b) => a + b)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((a) => a)\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797148,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpji7lkz4_.fsx(18,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.reduce((a, b) => a + b)\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb8bxiho4.fsx(17,3): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.map(i => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797148,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpsx11lpfh.fsx(18,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse();\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797148,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr08covmh.fsx(18,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n\tarr.map((i) => i * i)\n\t.reduce((a, b) => a + b)\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.map((i) => i)\n\t.reverse()\n\t.map((i) => i)\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797148,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9lz_gf17.fsx(17,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp9lz_gf17.fsx(17,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.reduce((a, b) => a + b, 0)\nlet sorted = maximum.sort(k)\nconsole.log(sorted)\n<|endoftext|nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbb1xcf7r.fsx(17,3): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.map(i => i % 10)\n  .sort((a, b) => a - b)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  \nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797148,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpaubkee1f.fsx(18,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n    arr.map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_py3fhi8.fsx(18,5): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n    arr.map(i => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b)\n    .reverse()\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3udufuyd.fsx(18,5): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmp3udufuyd.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp3udufuyd.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp3udufuyd.fsx(64,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp3udufuyd.fsx(79,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tm",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i)\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797148,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp2dcfsb1v.fsx(18,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmp2dcfsb1v.fsx(61,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.map((i) => i + 1)\n  .sort((a, b) => a - b)\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797148,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplp_xiax7.fsx(18,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmplp_xiax7.fsx(84,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.reduce((a, b) => a + b, 0)\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpo1_pobra.fsx(17,3): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.reduce((a, b) => a + b)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((a, b) => a - b)\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpamnz3dnx.fsx(18,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \nnlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9ljokphl.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(33,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(33,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(33,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.reduce((a, b) => a + b)\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpb8bxiho4.fsx(17,3): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.map((i) => i * i)\n  .reduce((max, i) => max + i)\n  .sort((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpbl5my0bw.fsx(18,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpbl5my0bw.fsx(84,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbl5my0bw.fsx(84,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbl5my0bw.fsx(84,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbl5my0bw.fsx(99,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpbl5my0bw.fsx(99,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \nnlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9ljokphl.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(33,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(33,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(33,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n    arr.reduce((a, b) => a + b, 0)\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplxlqtx27.fsx(17,5): error FS0072: Lookup on object of indeterminate type based on information prior to this program point. A type annotation may be needed prior to this program point to constrain the type of the object. This may allow the lookup to be resolved.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  [-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9ljokphl.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(18,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(33,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(33,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (16:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp9ljokphl.fsx(33,1): error FS0010: Incomplete structured construct at or before this point in expression. Expected ']' or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n  arr.map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\nlet test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()",
      "timestamp": 1675797149,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp08o70rzh.fsx(18,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}