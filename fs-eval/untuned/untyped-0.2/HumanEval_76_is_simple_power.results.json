{
  "name": "HumanEval_76_is_simple_power",
  "language": "fs",
  "prompt": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n",
  "tests": "let test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n  () => true\n  \nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmmgrkfph.fsx(12,6): error FS0043: None of the types 'unit, bool' support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    (n) => n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0 && n % 9 === 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphaz6grv7.fsx(12,33): error FS0043: The type 'int' does not support the operator '==='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    () => true\n    \nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpejy9lfca.fsx(12,8): error FS0043: None of the types 'unit, bool' support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    (n) => n % 2 === 0 && n % 3 === 0 && n % 5 === 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8a9n2f8o.fsx(12,33): error FS0043: The type 'int' does not support the operator '==='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    (n) => n % 2 === 0 && n % 3 === 0 && n % 5 === 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8a9n2f8o.fsx(12,33): error FS0043: The type 'int' does not support the operator '==='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n  () => true\n  \nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmmgrkfph.fsx(12,6): error FS0043: None of the types 'unit, bool' support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    (n) => n**int => n**int % n == 0\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4gb9hpnq.fsx(15,24): error FS0001: The type 'int' does not support the operator 'Pow'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n  (n) => n % 2 === 0 && n % 3 === 0 && n % 5 === 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkw5fskex.fsx(12,31): error FS0043: The type 'int' does not support the operator '==='\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n  (n) => n % 2 === 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7lhwvrcz.fsx(12,7): error FS0043: The type 'int' does not support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    (n) => n % 2 === 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpay_iiq6c.fsx(12,9): error FS0043: The type 'int' does not support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n// For example:\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppv_x6c6i.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppv_x6c6i.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppv_x6c6i.fsx(27,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppv_x6c6i.fsx(27,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppv_x6c6i.fsx(14,19): error FS0039: The value or constructor 'is_simple_power' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    () => true\n    \nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpejy9lfca.fsx(12,8): error FS0043: None of the types 'unit, bool' support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n  (n) => n > 0 && n < 1;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmptrkiy_.fsx(12,23): error FS0001: The type 'int' does not support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n// For example:\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppv_x6c6i.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppv_x6c6i.fsx(13,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppv_x6c6i.fsx(27,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppv_x6c6i.fsx(27,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (11:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmppv_x6c6i.fsx(14,19): error FS0039: The value or constructor 'is_simple_power' is not defined.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n  (n) => n > 0 && n < x;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgt96bvcw.fsx(15,21): error FS0001: The type 'int' does not support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n  () => true\n  \nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpmmgrkfph.fsx(12,6): error FS0043: None of the types 'unit, bool' support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n  (n) => n > 0 && n % 2 == 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5t7nlymm.fsx(12,21): error FS0043: The type 'int' does not support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    (n * n) % n;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp58nn9xdr.fsx(15,28): error FS0001: This expression was expected to have type\n    'int'    \nbut here has type\n    'bool'    \n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    (n) => n > 1 && n < 10 && n % 2 === 0;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_hgu50co.fsx(12,25): error FS0001: The type 'int' does not support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nlet is_simple_power x n = \n    (n) => n > 1 && n < 3;\nlet test() = \n  let candidate = is_simple_power\n  assert (candidate 16 2 = true)\n  assert (candidate 143214 16 = false)\n  assert (candidate 4 2 = true)\n  assert (candidate 9 3 = true)\n  assert (candidate 16 4 = true)\n  assert (candidate 24 2 = false)\n  assert (candidate 128 4 = false)\n  assert (candidate 12 6 = false)\n  assert (candidate 1 1 = true)\n  assert (candidate 1 12 = true)\n  0\n\ntest()",
      "timestamp": 1675797925,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzp_fnspu.fsx(12,25): error FS0001: The type 'int' does not support the operator '=>'\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}