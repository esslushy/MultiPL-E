{
  "name": "HumanEval_14_all_prefixes",
  "language": "fs",
  "prompt": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n",
  "tests": "let test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'ab'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp3x9347k9.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiqqmryt0.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'def'\n  + 'gh'\n  + 'ij'\n  + 'kl'\n  + 'mn'\n  + 'op'\n  + 'qr'\n  + 'st'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'A'\n  + 'B'\n  + 'C'\n  + 'D'\n  + 'E'\n  + 'F'\n  + 'G'\n  + 'H'\n  + 'I'\n  + 'J'\n  + 'K'\n  + 'L'\n  + 'M'\n  + 'N'\n  + 'O'\n  + 'P'\n  + 'Q'\n  + 'R'\n  + 'S'\n  + 'T'\n  + 'U'\n  + 'V'\n  + 'W'\n  + 'X'\n  + 'Y'\n  + 'Z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'A'\n  + 'B'\n  + 'C'\n  + 'D'\n  + 'E'\n  + 'F'\n  + 'G'\n  + 'H'\n  + 'I'\n  + 'J'\n  + 'K'\n  + 'L'\n  + 'M'\n  + 'N'\n  + 'O'\n  + 'P'\n  + 'Q'\n  + 'R'\n  +\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp72grc1zk.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n\n\n/tmp/tmp72grc1zk.fsx(91,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (5:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp72grc1zk.fsx(91,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (5:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp72grc1zk.fsx(98,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (5:3). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp72grc1zk.fsx(98,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (5:3). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n    'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + 'ab'\n    + 'abc'\n    + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfiruqkp7.fsx(5,5): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiqqmryt0.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'pqr'\n  + 'stu'\n  + 'vwx'\n  + 'wyz'\n  + 'z'\n  + ''\n  + 'x'\n  + 'y'\n  + 'z'\n  + ''\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + ''\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + ''\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpr2u2aay3.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiqqmryt0.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n    'abc'\n    + 'def'\n    + 'ghi'\n    + 'jkl'\n    + 'mno'\n    + 'pqr'\n    + 'stu'\n    + 'vwx'\n    + 'wyz'\n    + 'z'\n    + 'abc'\n    + 'def'\n    + 'ghi'\n    + 'jkl'\n    + 'mno'\n    + 'pqr'\n    + 'stu'\n    + 'vwx'\n    + 'wyz'\n    + 'z'\n    + 'abc'\n    + 'def'\n    + 'ghi'\n    + 'jkl'\n    + 'mno'\n    + 'pqr'\n    + 'stu'\n    + 'vwx'\n    + 'wyz'\n    + 'z'\n    + 'abc'\n    + 'def'\n    + 'ghi'\n    + 'jkl'\n    + 'mno'\n    + 'pqr'\n    + 'stu'\n    + 'vwx'\n    + 'wyz'\n    + 'z'\n    + 'abc'\n    + 'def'\n    + 'ghi'\n    + 'jkl'\n    + 'mno'\n    + 'pqr'\n    + 'stu'\n    + 'vwx'\n    + 'wyz'\n    + 'z'\n    + 'abc'\n    + 'def'\n    + 'ghi'\n    + 'jkl'\n    + 'mno'\n    + 'pqr'\n    + 'stu'\n    + 'vwx'\n    + 'wyz'\n    + 'z'\n    + 'abc'\n    + 'def'\n    + 'ghi'\n    + 'jkl'\n    + 'mno'\n    + 'pqr'\n    + 'stu'\n    + 'vwx'\n    + 'wyz'\n    + 'z'\n    + 'abc'\n    + 'def'\n    + 'ghi'\n    + 'jkl'\n    + 'mno'\n    + 'p\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp4m13qbf6.fsx(5,5): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiqqmryt0.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiqqmryt0.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n    'abc'\n    + 'def'\n    + 'ghi'\n    + 'jkl'\n    + 'mno'\n    + 'pqr'\n    + 'sst'\n    + 'tuv'\n    + 'wxyz'\n    + 'x'\n    + 'y'\n    + 'z'\n    + 'a'\n    + 'b'\n    + 'c'\n    + 'd'\n    + 'e'\n    + 'f'\n    + 'g'\n    + 'h'\n    + 'i'\n    + 'j'\n    + 'k'\n    + 'l'\n    + 'm'\n    + 'n'\n    + 'o'\n    + 'p'\n    + 'q'\n    + 'r'\n    + 's'\n    + 't'\n    + 'u'\n    + 'v'\n    + 'w'\n    + 'x'\n    + 'y'\n    + 'z'\n    + 'a'\n    + 'b'\n    + 'c'\n    + 'd'\n    + 'e'\n    + 'f'\n    + 'g'\n    + 'h'\n    + 'i'\n    + 'j'\n    + 'k'\n    + 'l'\n    + 'm'\n    + 'n'\n    + 'o'\n    + 'p'\n    + 'q'\n    + 'r'\n    + 's'\n    + 't'\n    + 'u'\n    + 'v'\n    + 'w'\n    + 'x'\n    + 'y'\n    + 'z'\n    + 'a'\n    + 'b'\n    + 'c'\n    + 'd'\n    + 'e'\n    + 'f'\n    + 'g'\n    + 'h'\n    + 'i'\n    + 'j'\n    + 'k'\n    + 'l'\n    + 'm'\n    + 'n'\n    + 'o'\n    + 'p'\n    + 'q'\n    + 'r'\n    + 's'\n    + 't'\n\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkfn4b1gz.fsx(5,5): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n`\n\t// Return list of all prefixes from shortest to longest of the input string\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\n\t// ['a', 'ab', 'abc']\n\t// >>> all_prefixes('abc')\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpek3b6q0l.fsx(5,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpek3b6q0l.fsx(5,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (4:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpek3b6q0l.fsx(5,1): error FS0010: Unexpected reserved keyword in binding\n\n\n\n/tmp/tmpek3b6q0l.fsx(6,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'pqr'\n  + 'stu'\n  + 'vwx'\n  + 'wyz'\n  + 'z'\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp240lpmpu.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiqqmryt0.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiqqmryt0.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0diel_oh.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + 'ab'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpiqqmryt0.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'pqr'\n  + 'stu'\n  + 'vwx'\n  + 'wyz'\n  + 'z'\n  + 'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'pqr'\n  + 'stu'\n  + 'vwx'\n  + 'wyz'\n  + 'z'\n  + 'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'pqr'\n  + 'stu'\n  + 'vwx'\n  + 'wyz'\n  + 'z'\n  + 'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'pqr'\n  + 'stu'\n  + 'vwx'\n  + 'wyz'\n  + 'z'\n  + 'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'pqr'\n  + 'stu'\n  + 'vwx'\n  + 'wyz'\n  + 'z'\n  + 'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'pqr'\n  + 'stu'\n  + 'vwx'\n  + 'wyz'\n  + 'z'\n  + 'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'pqr'\n  + 'stu'\n  + 'vwx'\n  + 'wyz'\n  + 'z'\n  + 'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'p\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmprtd1weez.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'def'\n  + 'ghi'\n  + 'jkl'\n  + 'mno'\n  + 'pqr'\n  + 'stu'\n  + 'vwx'\n  + 'wyz'\n  + 'z'\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n  + ''\n\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp240lpmpu.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n  'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + 'abc'\n  + '\nlet test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()",
      "timestamp": 1675797131,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp0diel_oh.fsx(5,3): error FS0010: Unexpected quote symbol in binding\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}