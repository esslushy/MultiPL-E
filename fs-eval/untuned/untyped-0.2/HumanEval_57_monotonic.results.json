{
  "name": "HumanEval_57_monotonic",
  "language": "fs",
  "prompt": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n",
  "tests": "let test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort()\n  .reverse()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  .reverse()\n  .sort()\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmppsgi3bwx.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a -\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyle2m15i.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpyle2m15i.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyle2m15i.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyle2m15i.fsx(58,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyle2m15i.fsx(58,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((a, b) => a + b)\n  .filter((x) => x > 0)\n  .filter((x) => x < 20)\n  .filter((x) => x > -10)\n  .filter((x) => x < 10)\n  .filter((x) => x > -1)\n  .filter((x) => x < 1)\n  .filter((x) => x > 0)\n  .filter((x) => x < 20)\n  .filter((x) => x > -10)\n  .filter((x) => x < 10)\n  .filter((x) => x > -1)\n  .filter((x) => x < 1)\n  .filter((x) => x > 0)\n  .filter((x) => x < 20)\n  .filter((x) => x > -10)\n  .filter((x) => x < 10)\n  .filter((x) => x > -1)\n  .filter((x) => x < 1)\n  .filter((x) => x > 0)\n  .filter((x) => x < 20)\n  .filter((x) => x > -10)\n  .filter((x) => x < 10)\n  .filter((x) => x > -1)\n  .filter((x) => x < 1)\n  .filter((x) => x > 0)\n  .filter((x) => x < 20)\n  .filter((x) => x > -10)\n  .filter((x) => x < 10)\n  .filter((x) => x > -1)\n  .filter((x) => x < 1)\n  .filter((x) => x > 0)\n  .filter((x) => x < 20)\n  .filter((x) => x > -10)\n  .filter((x) => x < 10)\n  .filter((x) => x > -1)\n  .filter((x) => x < 1)\n  .filter((x) => x > 0)\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmphdynkucb.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a - b)\n  .sort((a, b) => a -\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpyle2m15i.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpyle2m15i.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyle2m15i.fsx(46,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyle2m15i.fsx(58,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpyle2m15i.fsx(58,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuhz2s8qg.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp65c28xvf.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  .sort( (a, b) => a - b )\n  .reverse()\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpuhz2s8qg.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort()\n  .reverse()\n  .map(i => i + 1)\n  .filter(i => i < 20)\n  .map(i => i + 1)\n  .filter(i => i < 10)\n  .map(i => i + 1)\n  .filter(i => i < -10)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i => i + 1)\n  .filter(i => i < 0)\n  .map(i =>\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpi0ig2q4i.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpi0ig2q4i.fsx(57,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpi0ig2q4i.fsx(57,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpi0ig2q4i.fsx(69,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpi0ig2q4i.fsx(69,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort()\n  .reverse()\n  .map(n => n + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp920_ta_v.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmp920_ta_v.fsx(87,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(a => a)\n  .filter(a => a >\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_b_v1k8_.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmp_b_v1k8_.fsx(66,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x > 0)\n  .sort(a => a > 0)\n  .reverse()\n  .map(x => x)\n  .filter(x => x >\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpkddnmyn7.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmpkddnmyn7.fsx(66,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .sort((a, b) => a - b)\n  .reverse\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8cxrm6j4.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpm8raw9ip.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp9ph0auoz.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort( (a, b) => a - b )\n  .reverse()\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .reduce((a, b) => a + b)\n  .map( (x) => x )\n  .\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmptw5pizlg.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort()\n  .reverse()\n  .map(n => n + 1)\n  .filter(n => n > 0)\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\n  .sort()\n  .reverse()\n  .map(n => n)\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpg1x4q9l9.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .sort((a, b)\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp7ctevotu.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmp7ctevotu.fsx(62,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  .sort()\n  .reverse()\n  .map((x) => x)\n  .reverse()\n  .map((x) => x)\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp95qi7e2u.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .reduce((x, y) => x + y)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  .filter((x) => x > 0)\n  .filter((x) => x < 0)\n  \nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt2_94di7.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n  [1, 2, 4, 20]\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0)\n  .map((x) => x)\n  .filter((x) => x > 0\nlet test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()",
      "timestamp": 1675797458,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp1sw1t5jy.fsx(10,3): error FS0010: Unexpected symbol '.' in binding. Expected incomplete structured construct at or before this point or other token.\n\n\n\n/tmp/tmp1sw1t5jy.fsx(56,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (8:1). Try indenting this token further or using standard formatting conventions.\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}