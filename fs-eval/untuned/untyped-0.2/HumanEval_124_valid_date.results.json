{
  "name": "HumanEval_124_valid_date",
  "language": "fs",
  "prompt": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n",
  "tests": "let test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
  "stop_tokens": [
    "\n(*",
    "\n//",
    "\ntype",
    "\n\n"
  ],
  "results": [
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\t(dateString) =>\n\t\t(\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\t(\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpedabdz4z.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpedabdz4z.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\t(date_str) => {\n\t\tif (date_str.length == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlet date_parts = date_str.split('-');\n\t\tlet month = date_parts[0];\n\t\tlet day = date_parts[1];\n\t\tlet year = date_parts[2];\n\t\tlet month_num = parseInt(month);\n\t\tlet day_num = parseInt(day);\n\t\tlet year_num = parseInt(year);\n\t\tif (month_num < 1 || month_num > 12) {\n\t\t\treturn false;\n\t\t}\n\t\tif (day_num < 1 || day_num > 31) {\n\t\t\treturn false;\n\t\t}\n\t\tif (year_num < 1 || year_num > 2040) {\n\t\t\treturn false;\n\t\t}\n\t\tif (month_num == 1 && day_num == 1 && year_num == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (month_num == 2 && day_num == 1 && year_num == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (month_num == 3 && day_num == 1 && year_num == 2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (month_num == 4 && day_num == 1 && year_num == 3) {\n\t\t\treturn true;\n\t\t}\n\t\tif (month_num == 5 && day_num == 1 && year_num == 4) {\n\t\t\treturn true;\n\t\t}\n\t\tif (month_num == 6 && day_num == 1 && year_num == 5) {\n\t\t\treturn true;\n\t\t}\n\t\tif (month_num == 7 && day_num == 1 && year_num == 6) {\n\t\t\treturn true;\n\t\t}\n\t\tif (month_num == 8 && day_num == 1 && year_num == 7) {\n\t\t\treturn true;\n\t\t}\n\t\tif (month_num == 9 && day_num == 1 && year_num == 8) {\n\t\t\treturn true;\n\t\t}\n\t\tif (month_num == 10 && day_num == 1 && year_num == 9) {\n\t\t\treturn true;\n\t\t}\n\t\tif (month_num == 11 && day_num\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpgf0uwggx.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpgf0uwggx.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\t(dateString) => {\n\t\tif (dateString.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlet date = dateString.split('-');\n\t\tif (date.length !== 2) {\n\t\t\treturn false;\n\t\t}\n\t\tlet month = date[0];\n\t\tlet day = date[1];\n\t\tlet year = date[2];\n\t\tlet month_number = month.length;\n\t\tlet day_number = day.length;\n\t\tlet month_start = month.indexOf('-') + 1;\n\t\tlet month_end = month.indexOf('-', month_start);\n\t\tlet day_start = day.indexOf('-') + 1;\n\t\tlet day_end = day.indexOf('-', day_start);\n\t\tlet year_start = year.indexOf('-') + 1;\n\t\tlet year_end = year.indexOf('-', year_start);\n\t\tif (month_number < 1 || month_number > 12) {\n\t\t\treturn false;\n\t\t}\n\t\tif (day_number < 1 || day_number > 31) {\n\t\t\treturn false;\n\t\t}\n\t\tif (day_start < 1 || day_start > 30) {\n\t\t\treturn false;\n\t\t}\n\t\tif (day_end < 1 || day_end > 30) {\n\t\t\treturn false;\n\t\t}\n\t\tif (year_start < 1 || year_start > 12) {\n\t\t\treturn false;\n\t\t}\n\t\tif (year_end < 1 || year_end > 12) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp6dtk3h4y.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp6dtk3h4y.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\t(dateStr) => {\n\t\tif (dateStr.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlet date = new Date(dateStr);\n\t\tif (date.getMonth() === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date.getMonth() > 12) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date.getDate() < 1) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date.getDate() > 31) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date.getDate() < 1 || date.getDate() > 30) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date.getMonth() === 1) {\n\t\t\tif (date.getDate() < 1 || date.getDate() > 12) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpv_tssaum.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpv_tssaum.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\t(dateStr) => {\n\t\tlet date_parts = dateStr.split('-');\n\t\tlet month = date_parts[0];\n\t\tlet day = date_parts[1];\n\t\tlet year = date_parts[2];\n\t\tlet month_num = parseInt(month);\n\t\tlet day_num = parseInt(day);\n\t\tlet year_num = parseInt(year);\n\t\tlet month_num_valid = month_num >= 1 && month_num <= 12;\n\t\tlet day_num_valid = day_num >= 1 && day_num <= 31;\n\t\tlet year_num_valid = year_num >= 1 && year_num <= 12;\n\t\tlet month_num_valid_valid = month_num_valid && month_num >= 1 && month_num <= 12;\n\t\tlet day_num_valid_valid = day_num_valid && day_num >= 1 && day_num <= 31;\n\t\tlet year_num_valid_valid = year_num_valid && year_num >= 1 && year_num <= 12;\n\t\treturn month_num_valid_valid && day_num_valid_valid && year_num_valid_valid;\n\t};\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmplgzwcl9q.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmplgzwcl9q.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \nfunction(date) {\n    return date.length === 10 && date.match(/^[0-9]{1,2}-[0-9]{1,2}-[0-9]{1,2}$/);\n}\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp_nc_3280.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_nc_3280.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_nc_3280.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_nc_3280.fsx(15,16): error FS0010: Unexpected symbol '{' in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmp_nc_3280.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp_nc_3280.fsx(16,79): error FS0035: This construct is deprecated: '$' is not permitted as a character in operator names and is reserved for future use\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\t(dateString) => {\n\t\tif (dateString.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (dateString.length < 1) {\n\t\t\treturn false;\n\t\t}\n\t\tif (dateString.length > 31) {\n\t\t\treturn false;\n\t\t}\n\t\tif (dateString.length < 1 || dateString.length > 12) {\n\t\t\treturn false;\n\t\t}\n\t\tif (dateString.length < 1 || dateString.length > 30) {\n\t\t\treturn false;\n\t\t}\n\t\tif (dateString.length < 1 || dateString.length > 29) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp5ss6q6wb.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmp5ss6q6wb.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\t(dateString) => {\n\t\tif (dateString.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlet date = dateString.split('-');\n\t\tif (date.length !== 2) {\n\t\t\treturn false;\n\t\t}\n\t\tlet month = date[0];\n\t\tlet day = date[1];\n\t\tlet year = date[0].slice(0, 4);\n\t\tlet month_num = parseInt(month);\n\t\tlet day_num = parseInt(day);\n\t\tlet year_num = parseInt(year);\n\t\tif (month_num < 1 || month_num > 12) {\n\t\t\treturn false;\n\t\t}\n\t\tif (day_num < 1 || day_num > 31) {\n\t\t\treturn false;\n\t\t}\n\t\tif (year_num < 1 || year_num > 12) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu2i6zu_w.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpu2i6zu_w.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n    (dateString) => {\n        let date = new Date(dateString);\n        let days = date.getDate();\n        let month = date.getMonth();\n        let year = date.getFullYear();\n        let month_num = month + 1;\n        let year_num = year + 1;\n        let days_num = days;\n        let month_num_num = month_num + 1;\n        let year_num_num = year_num + 1;\n        if (days_num < 1 || days_num > 31 || month_num_num < 1 || month_num_num > 12) {\n            return false;\n        }\n        if (month_num_num < 1 || month_num_num > 12) {\n            return false;\n        }\n        if (year_num_num < 1 || year_num_num > 12) {\n            return false;\n        }\n        return true;\n    };\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpg59xkd4_.fsx(27,11): error FS0010: Incomplete structured construct at or before this point in expression\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \nfunction(date_string) {\n    let date_parts = date_string.split('-');\n    let month = date_parts[0];\n    let day = date_parts[1];\n    let year = date_parts[2];\n    let month_num = month.length;\n    let day_num = day.length;\n    let year_num = year.length;\n    let month_num_valid = month_num > 1 && month_num < 12;\n    let day_num_valid = day_num > 1 && day_num < 31;\n    let year_num_valid = year_num > 1 && year_num < 12;\n    let month_num_valid_valid = month_num_valid && month_num > 1 && month_num < 12;\n    let day_num_valid_valid = day_num_valid && day_num > 1 && day_num < 31;\n    let year_num_valid_valid = year_num_valid && year_num > 1 && year_num < 12;\n    return month_num_valid_valid && day_num_valid_valid && year_num_valid_valid;\n}\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpzr90cehx.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpzr90cehx.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpzr90cehx.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpzr90cehx.fsx(15,23): error FS0010: Unexpected symbol '{' in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmpzr90cehx.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpzr90cehx.fsx(16,5): warning FS0058: ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\t(date_str) => {\n\t\tlet date_parts = date_str.split('-');\n\t\tlet year = date_parts[0];\n\t\tlet month = date_parts[1];\n\t\tlet day = date_parts[2];\n\t\tlet days = parseInt(date_parts[3]);\n\t\tlet month_num = parseInt(month);\n\t\tlet year_num = parseInt(year);\n\t\tlet month_num_valid = month_num >= 1 && month_num <= 12;\n\t\tlet year_num_valid = year_num >= 1 && year_num <= 12;\n\t\tlet month_num_valid_valid = month_num_valid && month_num >= 1 && month_num <= 12;\n\t\tlet year_num_valid_valid = year_num_valid && year_num <= 12;\n\t\tlet month_num_valid_valid_valid = month_num_valid_valid && month_num >= 1 && month_num <= 12;\n\t\tlet year_num_valid_valid_valid = year_num_valid_valid && year_num <= 12;\n\t\treturn (\n\t\t\t(year_num_valid_valid) &&\n\t\t\t(month_num_valid_valid) &&\n\t\t\t(day_valid) &&\n\t\t\t(days)\n\t\t);\n\t};\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpt61meco_.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpt61meco_.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \nfunction(date_string) {\n    let date = date_string.trim();\n    let days = date.split('-');\n    let month = days[0].trim();\n    let day = days[1].trim();\n    let year = date.split('-');\n    let month_num = month.split('-');\n    let day_num = day.split('-');\n    let month_num_2 = month_num[0].trim();\n    let day_num_2 = day_num[0].trim();\n    let month_num_3 = month_num[1].trim();\n    let day_num_3 = day_num[1].trim();\n    let month_num_4 = month_num[2].trim();\n    let day_num_4 = day_num[2].trim();\n    let month_num_5 = month_num[3].trim();\n    let day_num_5 = day_num[3].trim();\n    let month_num_6 = month_num[4].trim();\n    let day_num_6 = day_num[4].trim();\n    let month_num_7 = month_num[5].trim();\n    let day_num_7 = day_num[5].trim();\n    let month_num_8 = month_num[6].trim();\n    let day_num_8 = day_num[6].trim();\n    let month_num_9 = month_num[7].trim();\n    let day_num_9 = day_num[7].trim();\n    let month_num_10 = month_num[8].trim();\n    let day_num_10 = day_num[8].trim();\n    let month_num_11 = month_num[9].trim();\n    let day_num_11 = day_num[9].trim();\n    let month_num_12 = month_num[10].trim();\n    let day_num_12 = day_num[10].trim();\n    let month_num_13 = month_num[11].trim();\n    let day_num_\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpu4y1z7q7.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu4y1z7q7.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu4y1z7q7.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu4y1z7q7.fsx(15,23): error FS0010: Unexpected symbol '{' in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmpu4y1z7q7.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu4y1z7q7.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu4y1z7q7.fsx(17,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu4y1z7q7.fsx(17,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu4y1z7q7.fsx(17,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpu4y1z7q7.fsx(18,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventi",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \nvalid_date('03-11-2000') || valid_date('15-01-2012') || valid_date('04-0-2040') || valid_date('06-04-2020') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06-04-2020') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06-04-2020') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/2020') || valid_date('04-0-2040') || valid_date('06/04/\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpxu0x6hd8.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxu0x6hd8.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpxu0x6hd8.fsx(15,12): error FS0010: Unexpected quote symbol in expression\n\n\n\n/tmp/tmpxu0x6hd8.fsx(15,19): error FS1156: This is not a valid numeric literal. Valid numeric literals include 1, 0x1, 0o1, 0b1, 1l (int), 1u (uint32), 1L (int64), 1UL (uint64), 1s (int16), 1y (sbyte), 1uy (byte), 1.0 (float), 1.0f (float32), 1.0m (decimal), 1I (BigInteger).\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \nfunction(date_string) {\n    let date_parts = date_string.split('-');\n    let date_parts_length = date_parts.length;\n    let date_parts_index = 0;\n    let date_parts_index_valid = 0;\n    let date_parts_index_invalid = 0;\n    let date_parts_index_invalid_month = 0;\n    let date_parts_index_invalid_day = 0;\n    let date_parts_index_invalid_year = 0;\n    let date_parts_index_invalid_month_day = 0;\n    let date_parts_index_invalid_year_day = 0;\n    let date_parts_index_invalid_month_day_year = 0;\n    let date_parts_index_invalid_month_day_year_year = 0;\n    let date_parts_index_invalid_month_day_year_year_month = 0;\n    let date_parts_index_invalid_month_day_year_year_month_day = 0;\n    let date_parts_index_invalid_month_day_year_year_month_day_year = 0;\n    let date_parts_index_invalid_month_day_year_year_month_day_year_month = 0;\n    let date_parts_index_invalid_month_day_year_year_month_day_year_month_day = 0;\n    let date_parts_index_invalid_month_day_year_year_month_day_year_month_day_year = 0;\n    let date_parts_index_invalid_month_day_year_year_month_day_year_month_day_year_month = 0;\n    let date_parts_index_invalid_month_day_year_year_month_day_year_month_day_year_month_day_year = 0;\n    let date_parts_index_invalid_month_day_year_year_month_day_year_month_day_year_month_day_year_month_day_year_month = 0;\n    let date_parts_index_invalid_month\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpblwwv2bg.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpblwwv2bg.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpblwwv2bg.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpblwwv2bg.fsx(15,23): error FS0010: Unexpected symbol '{' in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmpblwwv2bg.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpblwwv2bg.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpblwwv2bg.fsx(17,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpblwwv2bg.fsx(17,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmpblwwv2bg.fsx(17,5): warning FS0058:",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\tfunction(date_string) {\n\t\tif (date_string.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length !== 10) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 31) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 30) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 29) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 28) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 27) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 26) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 25) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 24) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 23) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 22) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 21) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 20) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 19) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 18) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 17) {\n\t\t\treturn false;\n\t\t}\n\t\tif (date_string.length < 1 || date_string.length > 16) {\n\t\t\treturn false;\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpda0zypzc.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpda0zypzc.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \nfunction(date_string) {\n    if (date_string.length === 0) {\n        return false;\n    }\n    let date_parts = date_string.split('-');\n    let year = date_parts[0];\n    let month = date_parts[1];\n    let day = date_parts[2];\n    let day_of_month = date_parts[3];\n    let day_of_year = date_parts[4];\n    let month_of_year = date_parts[5];\n    let year_of_month = date_parts[6];\n    let year_of_year = date_parts[7];\n    let month_of_year_of_year = date_parts[8];\n    let year_of_month_of_year = date_parts[9];\n    let month_of_year_of_year_of_year = date_parts[10];\n    let year_of_month_of_year_of_year_of_year = date_parts[11];\n    let month_of_year_of_year_of_year_of_year_of_year = date_parts[12];\n    let year_of_month_of_year_of_year_of_year_of_year_of_year = date_parts[13];\n    let month_of_year_of_year_of_year_of_year_of_year_of_year_of_year = date_parts[14];\n    let month_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year = date_parts[15];\n    let month_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year = date_parts[16];\n    let month_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year_of_year = date_parts[17];\n    let month_of_year_of_year_of_year_of_year_of_year_of_\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmp8meqz9wt.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8meqz9wt.fsx(15,1): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (14:1). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8meqz9wt.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8meqz9wt.fsx(15,23): error FS0010: Unexpected symbol '{' in pattern matching. Expected '->' or other token.\n\n\n\n/tmp/tmp8meqz9wt.fsx(16,5): warning FS0058: Possible incorrect indentation: this token is offside of context started at position (15:9). Try indenting this token further or using standard formatting conventions.\n\n\n\n/tmp/tmp8meqz9wt.fsx(16,5): warning FS0058: ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\t(dateString) => {\n\t\tlet date_parts = dateString.split('-');\n\t\tlet date_parts_len = date_parts.length;\n\t\tlet date_parts_len_1 = date_parts_len - 1;\n\t\tlet date_parts_len_2 = date_parts_len - 2;\n\t\tlet date_parts_len_3 = date_parts_len - 3;\n\t\tlet date_parts_len_4 = date_parts_len - 4;\n\t\tlet date_parts_len_5 = date_parts_len - 5;\n\t\tlet date_parts_len_6 = date_parts_len - 6;\n\t\tlet date_parts_len_7 = date_parts_len - 7;\n\t\tlet date_parts_len_8 = date_parts_len - 8;\n\t\tlet date_parts_len_9 = date_parts_len - 9;\n\t\tlet date_parts_len_10 = date_parts_len - 10;\n\t\tlet date_parts_len_11 = date_parts_len - 11;\n\t\tlet date_parts_len_12 = date_parts_len - 12;\n\t\tlet date_parts_len_13 = date_parts_len - 13;\n\t\tlet date_parts_len_14 = date_parts_len - 14;\n\t\tlet date_parts_len_15 = date_parts_len - 15;\n\t\tlet date_parts_len_16 = date_parts_len - 16;\n\t\tlet date_parts_len_17 = date_parts_len - 17;\n\t\tlet date_parts_len_18 = date_parts_len - 18;\n\t\tlet date_parts_len_19 = date_parts_len - 19;\n\t\tlet date_parts_len_20 = date_parts_len - 20;\n\t\tlet date_parts_len_21 = date_parts_len - 21;\n\t\tlet date_parts_len_22 = date_parts_len - 22;\n\t\tlet date_parts_len_23 = date_parts_len - 23;\n\t\tlet date_parts_len_24 = date_parts_len - 24;\n\t\tlet date_parts_len_25 = date_parts_len - 25;\n\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpjvtdr8cd.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpjvtdr8cd.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\tfunction(date_string) {\n\t\tlet date_parts = date_string.split('-');\n\t\tlet year = date_parts[0];\n\t\tlet month = date_parts[1];\n\t\tlet day = date_parts[2];\n\t\tlet date = new Date(year, month, day);\n\t\treturn (\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\t(\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpfuhsl7zn.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpfuhsl7zn.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\tfunction(date_string) {\n\t\tlet date_parts = date_string.split('-');\n\t\tlet year = date_parts[0];\n\t\tlet month = date_parts[1];\n\t\tlet day = date_parts[2];\n\t\tlet date_parts_length = date_parts.length;\n\t\tlet is_month_valid = false;\n\t\tlet is_day_valid = false;\n\t\tlet is_year_valid = false;\n\t\tlet is_month_valid_for_date = false;\n\t\tlet is_day_valid_for_date = false;\n\t\tlet is_year_valid_for_date = false;\n\t\tlet is_month_valid_for_date_for_month = false;\n\t\tlet is_day_valid_for_date_for_month = false;\n\t\tlet is_year_valid_for_date_for_month = false;\n\t\tlet is_month_valid_for_date_for_month_and_day = false;\n\t\tlet is_day_valid_for_date_for_month_and_day = false;\n\t\tlet is_year_valid_for_date_for_month_and_day = false;\n\t\tlet is_month_valid_for_date_for_month_and_day_and_day = false;\n\t\tlet is_day_valid_for_date_for_month_and_day_and_day = false;\n\t\tlet is_year_valid_for_date_for_month_and_day_and_day_and_day = false;\n\t\tlet is_month_valid_for_date_for_month_and_day_and_day_and_year = false;\n\t\tlet is_day_valid_for_date_for_month_and_day_and_day_and_year = false;\n\t\tlet is_year_valid_for_date_for_month_and_day_and_day_and_year = false;\n\t\tlet is_month_valid_for_date_for_month_and_day_and_day_and_year_and_day = false;\n\t\tlet is_day_valid_for_date_for_month_and_day_and_day\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpq8q72ai3.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpq8q72ai3.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nlet valid_date date = \n\t(dateString) => {\n\t\tif (dateString.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlet date = dateString.split('-');\n\t\tlet month = date[0];\n\t\tlet day = date[1];\n\t\tlet year = date[2];\n\t\tlet month_num = month.toUpperCase();\n\t\tlet day_num = day.toUpperCase();\n\t\tlet month_num_valid = month_num.match(/[0-9]/);\n\t\tlet day_num_valid = day_num.match(/[0-9]/);\n\t\tlet month_num_valid_valid = month_num_valid.match(/[0-9]/);\n\t\tlet day_num_valid_valid = day_num_valid.match(/[0-9]/);\n\t\tif (month_num_valid_valid && day_num_valid_valid) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\nlet test() = \n  let candidate = valid_date\n  assert (candidate \"03-11-2000\" = true)\n  assert (candidate \"15-01-2012\" = false)\n  assert (candidate \"04-0-2040\" = false)\n  assert (candidate \"06-04-2020\" = true)\n  assert (candidate \"01-01-2007\" = true)\n  assert (candidate \"03-32-2011\" = false)\n  assert (candidate \"\" = false)\n  assert (candidate \"04-31-3000\" = false)\n  assert (candidate \"06-06-2005\" = true)\n  assert (candidate \"21-31-2000\" = false)\n  assert (candidate \"04-12-2003\" = true)\n  assert (candidate \"04122003\" = false)\n  assert (candidate \"20030412\" = false)\n  assert (candidate \"2003-04\" = false)\n  assert (candidate \"2003-04-12\" = false)\n  assert (candidate \"04-2003\" = false)\n  0\n\ntest()",
      "timestamp": 1675797159,
      "stdout": "",
      "stderr": "\n\n/tmp/tmpvqipn9ju.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n\n\n/tmp/tmpvqipn9ju.fsx(15,1): error FS1161: TABs are not allowed in F# code unless the #indent \"off\" option is used\n\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}