{"name": "HumanEval_11_string_xor", "language": "fs", "prompt": "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\nlet string_xor (a: string) (b: string): string  = \n", "tests": "let test() = \n  let candidate = string_xor\n  assert (candidate \"111000\" \"101010\" = \"010010\")\n  assert (candidate \"1\" \"1\" = \"0\")\n  assert (candidate \"0101\" \"0000\" = \"0101\")\n  0\n\ntest()", "completions": ["  a.toUpperCase() + a.toLowerCase() + a.toUpperCase() + a.toLowerCase();", "  a ^ b;", "  a.toUpperCase() + a.toLowerCase() + a.toUpperCase() + a.toLowerCase()", "  a ^ b", "  a ^ b", "  a.toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .to", "  a ^ b;", "  a.toUpperCase()\n  .toLowerCase()\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  .replace(/[^0-9]/g, '')\n  .replace(/[0-9]/g, '')\n  ", "  a ^ b;", "  a ^ b", "  a.toUpperCase() + a.toLowerCase() + a.toUpperCase() + a.toLowerCase()", "  a ^ b;", "  a.toUpperCase() + a.toLowerCase() + a.toUpperCase() + a.toLowerCase()", "  a ^ b;", "  a ^ b;", "  a.toUpperCase() + a.toLowerCase() + a.toUpperCase() + a.toLowerCase()", "  a.toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()", "  a.toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toUpperCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  .toLowerCase()\n  ", "  a ^ b;", "  a ^ b"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}