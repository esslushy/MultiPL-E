{"name": "HumanEval_112_reverse_delete", "language": "fs", "prompt": "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nlet reverse_delete (s: string) (c: string):  string * bool  = \n", "tests": "let test() = \n  let candidate = reverse_delete\n  assert (candidate \"abcde\" \"ae\" = (\"bcd\", false))\n  assert (candidate \"abcdef\" \"b\" = (\"acdef\", false))\n  assert (candidate \"abcdedcba\" \"ab\" = (\"cdedc\", true))\n  assert (candidate \"dwik\" \"w\" = (\"dik\", false))\n  assert (candidate \"a\" \"a\" = (\"\", true))\n  assert (candidate \"abcdedcba\" \"\" = (\"abcdedcba\", true))\n  assert (candidate \"abcdedcba\" \"v\" = (\"abcdedcba\", true))\n  assert (candidate \"vabba\" \"v\" = (\"abba\", true))\n  assert (candidate \"mamma\" \"mia\" = (\"\", true))\n  0\n\ntest()", "completions": ["", "", "", "    (s,c) -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s -> string\n    c -> string\n    s ->", "", "", "  (s,c) -> string\n  ", "", "  (s, c) -> string", "    (s,c) -> string\n    ", "  (s, c) -> string", "", "", "    (s, c) => {\n        let i = s.length - 1;\n        let j = c.length - 1;\n        let k = i - j;\n        let l = i + j;\n        let m = i + k;\n        let n = i - k;\n        let o = i - j;\n        let p = i + j;\n        let q = i + k;\n        let r = i + n;\n        let s = i + o;\n        let t = i + p;\n        let u = i + q;\n        let v = i + r;\n        let w = i + s;\n        let x = i + t;\n        let y = i + u;\n        let z = i + v;\n        let a = i + w;\n        let b = i + x;\n        let c = i + y;\n        let d = i + z;\n        let e = i + a;\n        let f = i + b;\n        let g = i + c;\n        let h = i + d;\n        let i = i + e;\n        let j = i + f;\n        let k = i + g;\n        let l = i + h;\n        let m = i + i;\n        let n = i + j;\n        let o = i + k;\n        let p = i + l;\n        let q = i + m;\n        let r = i + n;\n        let s = i + o;\n        let t = i + p;\n        let u = i + q;\n        let v = i + r;\n        let w = i + s;\n        let x = i + t;\n        let y = i + u;\n        let z = i + v;\n        let a = i + w;\n        let b = i + x;\n        let c = i + y;\n        let d = i + z;\n        let e = i + a;\n        let f = i + b;\n        let g = i + c;\n        let h = i + d;\n        let i = i + e;\n        let j = i + f;\n        let k = i + g;\n        let l =", "", "    (s,c) => {\n        let c_len = c.length\n        let s_len = s.length\n        let i = 0\n        let j = 0\n        let k = 0\n        let l = 0\n        let m = 0\n        let n = 0\n        let o = 0\n        let p = 0\n        let q = 0\n        let r = 0\n        let s = \"\"\n        let c = \"\"\n        let d = \"\"\n        let e = \"\"\n        let f = \"\"\n        let g = \"\"\n        let h = \"\"\n        let i_len = i\n        let j_len = j\n        let k_len = k\n        let l_len = l\n        let m_len = m\n        let n_len = n\n        let o_len = o\n        let p_len = p\n        let q_len = q\n        let r_len = r\n        let s_len = s_len\n        let c_len = c_len\n        let d_len = d_len\n        let e_len = e_len\n        let f_len = f_len\n        let g_len = g_len\n        let h_len = h_len\n        let i_len = i\n        let j_len = j\n        let k_len = k\n        let l_len = l\n        let m_len = m\n        let n_len = n\n        let o_len = o\n        let p_len = p\n        let q_len = q\n        let r_len = r\n        let s_len = s_len\n        let c_len = c_len\n        let d_len = d_len\n        let e_len = e_len\n        let f_len = f_len\n        let g_len = g_len\n        let h_len = h_len\n        let i_len = i\n        let j_len = j\n        let k_len = k\n        let l_len = l\n        let m_len = m\n        let n_len = n\n        let o_len = o\n        let p_len = p\n        let q_len = q\n        let r_len = r\n        ", "// s is a string", "    (s, c) -> string * bool\n    ", "", "    (s, c) => {\n        let i = 0;\n        let j = s.length - 1;\n        let k = c.length - 1;\n        let result = {};\n        while (i < j) {\n            if (s[i] == c[k]) {\n                result[s[i]] = true;\n                i++;\n            } else {\n                result[s[i]] = false;\n                j--;\n            }\n            i++;\n            k--;\n        }\n        return result;\n    }"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}