{"name": "HumanEval_132_is_nested", "language": "fs", "prompt": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested (string: string): bool  = \n", "tests": "let test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()", "completions": ["// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "    (string.indexOf('[[') >= 0)\n    (string.indexOf(']]') >= 0)\n    (string.indexOf('[[]]') >= 0)\n    (string.indexOf('[]]') >= 0)\n    (string.indexOf('[[]]') >= 0)\n    (string.indexOf('[][]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[][]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][]]') >= 0)\n    (string.indexOf('[[][", "// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "    (string.indexOf('[[') >= 0 &&\n    (string.indexOf(']]') >= 0 &&\n    (string.indexOf('[[') < string.indexOf(']]') &&\n    (string.indexOf('[[') < string.indexOf(']]'))", "// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "    (string.indexOf('[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.indexOf(']]') >= 0) &&\n    (string.indexOf('[[[') >= 0) &&\n    (string.index", "// Create a function that takes a string as input which contains only square brackets.", "// Create a function that takes a string as input which contains only square brackets.", "    //Create a function that takes a string as input which contains only square brackets\n    // The function should return True if and only if there is a valid subsequence of brackets \n    // where at least one bracket in the subsequence is nested.\n    // is_nested('[[]]') \u00e2\u017e\u017e True\n    // is_nested('[]]']') \u00e2\u017e\u017e False\n    // is_nested('[][]') \u00e2\u017e\u017e False\n    // is_nested('[]') \u00e2\u017e\u017e False\n    // is_nested('[[][]]') \u00e2\u017e\u017e True\n    // is_nested('[][]']') \u00e2\u017e\u017e True\n    // is_nested('[[]]']') \u00e2\u017e\u017e False\n    // is_nested('[][]']') \u00e2\u017e\u017e False\n    // is_nested('[[]]']') \u00e2\u017e\u017e True\n    // is_nested('[][]']') \u00e2\u017e\u017e True\n    // is_nested('[[]]']') \u00e2\u017e\u017e False\n    // is_nested('[][]']') \u00e2\u017e\u017e True\n    // is_nested('[[]]']') \u00e2\u017e\u017e False\n    // is_nested('[][]']') \u00e2\u017e\u017e True\n    // is_nested('[[]]']') \u00e2\u017e\u017e False\n    // is_nested('[][]']') \u00e2\u017e\u017e True\n    // is_nested('[[]]']') \u00e2\u017e\u017e False\n    // is_nested('[][]']') \u00e2\u017e\u017e True\n    // is_nested('[[]]']') \u00e2\u017e\u017e False\n    // is_nested('[][]']') \u00e2\u017e\u017e True\n    // is_nested('[[]]']') \u00e2\u017e\u017e False\n    // is_nested('[][]']') \u00e2\u017e\u017e True\n    // is_nested('[[]]']') \u00e2\u017e\u017e False\n    // is_nested('[][]']') \u00e2\u017e", "// Create a function that takes a string as input which contains only square brackets."], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}