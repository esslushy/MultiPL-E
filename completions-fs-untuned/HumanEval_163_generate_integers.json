{"name": "HumanEval_163_generate_integers", "language": "fs", "prompt": "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8) => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10, 14) => []\nlet generate_integers (a: int) (b: int): int list  = \n", "tests": "let test() = \n  let candidate = generate_integers\n  assert (candidate 2 10 = [2; 4; 6; 8])\n  assert (candidate 10 2 = [2; 4; 6; 8])\n  assert (candidate 132 2 = [2; 4; 6; 8])\n  assert (candidate 17 89 = [])\n  0\n\ntest()", "completions": ["{\n  2: [2, 4, 6, 8],\n  4: [2, 4, 6, 8],\n  6: [2, 4, 6, 8],\n  8: []\n};", "{\n  2: [2, 4, 6, 8],\n  4: [2, 4, 6, 8],\n  6: [2, 4, 6, 8],\n  8: []\n}", "  [2, 4, 6, 8]\n  .map(i => i * 2)\n  .sort()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .filter(i => i % 2 == 0)\n  .map(i => i)\n  .reverse()\n  .map", "[2, 4, 6, 8]", "[2, 4, 6, 8];", "{\n  2: [2, 4, 6, 8],\n  4: [2, 4, 6, 8],\n  6: [2, 4, 6, 8],\n  8: []\n}", "{\n  2: [2, 4, 6, 8],\n  4: [2, 4, 6, 8],\n  6: [2, 4, 6, 8],\n  8: []\n}", "[2, 4, 6, 8];", "{\n  2: [2, 4, 6, 8],\n  4: [2, 4, 6, 8],\n  6: [2, 4, 6, 8],\n  8: []\n}", "{\n    2: [2, 4, 6, 8],\n    4: [2, 4, 6, 8],\n    6: [2, 4, 6, 8],\n    8: []\n}", "[2, 4, 6, 8]", "{\n  2: [2, 4, 6, 8],\n  4: [2, 4, 6, 8],\n  6: [2, 4, 6, 8],\n  8: []\n}", "{\n    2: [2, 4, 6, 8],\n    4: [2, 4, 6, 8],\n    6: [2, 4, 6, 8],\n    8: []\n}", "{\n    a: a,\n    b: b\n};", "[2, 4, 6, 8];", "{\n  2: [2, 4, 6, 8],\n  4: [2, 4, 6, 8],\n  6: [2, 4, 6, 8],\n  8: []\n}", "[2, 4, 6, 8];", "[2, 4, 6, 8];", "{\n  2: [2, 4, 6, 8],\n  4: [2, 4, 6, 8],\n  6: [2, 4, 6, 8],\n  8: []\n}", "[2, 4, 6, 8];"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}