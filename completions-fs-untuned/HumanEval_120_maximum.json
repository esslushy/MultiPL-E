{"name": "HumanEval_120_maximum", "language": "fs", "prompt": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum (arr: int list) (k: int): int list  = \n", "tests": "let test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()", "completions": ["  arr.sort()\n  ", "  arr.sort( (a, b) => a - b )", "  arr.sort(\n    (a, b) => a - b\n  );", "    arr.sort( (a, b) => a - b )", "  arr.sort( (a, b) => a - b )", "  arr.sort( (a, b) => a - b )", "  arr.sort( (a, b) => a - b )", "  arr.sort(\n    (a: int) => a - k,\n    (a: int) => a,\n    (a: int) => a + k\n  );", "  arr.sort( (a, b) => a - b )", "  arr.sort()\n  ", "  arr.sort( (a, b) => a - b )", "  arr.sort()\narr.sort( (a, b) => a - b )", "  [arr[i] for i in range(len(arr))]", "    arr.sort(\n        (a: int) => a - k,\n        (a: int) => a,\n        (a: int) => a + k,\n        (a: int) => a,\n        (a: int) => a - k\n    );", "  arr.sort()\n  ", "  arr.sort(\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int) => a,\n    (a: int)", "  arr.sort(\n    (a, b) => a - b\n  )", "  arr.sort(\n    (a, b) => a - b\n  )"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}