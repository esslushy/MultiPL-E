{"name": "HumanEval_115_max_fill", "language": "fs", "prompt": "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlet max_fill (grid: int list list) (capacity: int): int  = \n", "tests": "let test() = \n  let candidate = max_fill\n  assert (candidate [[0; 0; 1; 0]; [0; 1; 0; 0]; [1; 1; 1; 1]] 1 = 6)\n  assert (candidate [[0; 0; 1; 1]; [0; 0; 0; 0]; [1; 1; 1; 1]; [0; 1; 1; 1]] 2 = 5)\n  assert (candidate [[0; 0; 0]; [0; 0; 0]] 5 = 0)\n  assert (candidate [[1; 1; 1; 1]; [1; 1; 1; 1]] 2 = 4)\n  assert (candidate [[1; 1; 1; 1]; [1; 1; 1; 1]] 9 = 2)\n  0\n\ntest()", "completions": ["  max_fill_with_capacity (grid, capacity)", "  max_fill_helper(grid, capacity)", "  max(grid.length, grid[:,1].length)", "  max_fill_helper(grid, capacity)", "  max(grid.length, grid[:,1].length, grid[:,0].length)", "  max_fill (grid, capacity)", "  max_fill_with_capacity(grid, capacity)", "  max_fill_helper(grid, capacity)", "  max(1, min(grid.length, 10^2))", "  max_fill_helper(grid, capacity)", "  max_fill_of_grid (grid, capacity)", "  max_fill_helper(grid, capacity)", "  max_fill (grid, 0, 0, capacity)", "  max(grid.length, grid[:,1].length)\nlet bucket_capacity: int = max_fill(grid)\nlet bucket_capacity_max: int = max_fill(grid)\nlet bucket_capacity_min: int = bucket_capacity - 1\nlet bucket_capacity_max_min: int = bucket_capacity - bucket_capacity_min\nlet bucket_capacity_max_max: int = bucket_capacity_max - bucket_capacity_max_min\nlet bucket_capacity_max_min_max: int = bucket_capacity_max_min + bucket_capacity_max_min\nlet bucket_capacity_max_min_max_max: int = bucket_capacity_max_max - bucket_capacity_max_min_max\nlet bucket_capacity_max_min_max_max_max: int = bucket_capacity_max_max_max - bucket_capacity_max_max_min_max\nlet bucket_capacity_max_min_max_max_max: int = bucket_capacity_max_max_max - bucket_capacity_max_max_min_max", "  max_fill_with_capacity (grid, capacity)", "  max_fill_helper (grid, capacity)", "  max_fill_helper(grid, capacity)", "  max_fill_helper(grid, capacity)", "  max_fill_of_grid (grid, capacity)", "  max_fill(grid, capacity)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}