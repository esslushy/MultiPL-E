{"name": "HumanEval_18_how_many_times", "language": "fs", "prompt": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n", "tests": "let test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()", "completions": ["  function (substring: string) {\n    let count = 0;\n    let index = 0;\n    let length = substring.length;\n    while (index < length) {\n      if (substring.charAt(index) === substring.charAt(index + 1)) {\n        count++;\n      } else {\n        index++;\n      }\n    }\n    return count;\n  };", "  (string: string) => {\n    let count = 0;\n    let start = 0;\n    let end = 0;\n    let length = string.length;\n    while (start < length) {\n      end = start;\n      while (end < length && string[end] !== string[start]) {\n        end++;\n      }\n      if (end === length) {\n        count++;\n      } else {\n        count++;\n        start = end + 1;\n      }\n    }\n    return count;\n  }", "  (substring: string) => {\n    let count = 0;\n    let index = 0;\n    let start = 0;\n    let end = 0;\n    while (index < string.length) {\n      if (string[index] === substring[start]) {\n        count++;\n        start++;\n      } else if (string[index] === substring[end]) {\n        count++;\n        end++;\n      } else {\n        count++;\n        start = index + 1;\n        end = index + 1;\n      }\n      index++;\n    }\n    return count;\n  }", "  (string: string) => string.length;", "  (string: string) => string.length;", "  (string: string) =>\n    (substring: string) =>\n      (substring: string) =>\n        (substring: string) =>\n          (substring: string) =>\n            (substring: string) =>\n              (substring: string) =>\n                (substring: string) =>\n                  (substring: string) =>\n                    (substring: string) =>\n                      (substring: string) =>\n                        (substring: string) =>\n                          (substring: string) =>\n                            (substring: string) =>\n                              (substring: string) =>\n                               (substring: string) =>\n                                 (substring: string) =>\n                                   (substring: string) =>\n                                     (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                                       (substring: string) =>\n                               ", "  (substring: string) => {\n    let count = 0;\n    let index = 0;\n    while (index < string.length) {\n      if (substring[index] === string[index]) {\n        count++;\n      } else {\n        index++;\n      }\n    }\n    return count;\n  }", "  function (string: string) {\n    let count = 0;\n    let start = 0;\n    let end = string.length;\n    while (start < end) {\n      if (string[start] === string[end]) {\n        count++;\n        start++;\n        end--;\n      } else {\n        start++;\n        end--;\n      }\n    }\n    return count;\n  }", "  function (substring: string) {\n    let count = 0;\n    let index = 0;\n    while (index < substring.length) {\n      if (substring[index] === substring[index - 1]) {\n        count++;\n      } else {\n        count = 0;\n      }\n      index++;\n    }\n    return count;\n  }", "  function (string: string) {\n    let count = 0;\n    let index = 0;\n    let length = string.length;\n    while (index < length) {\n      if (string.charAt(index) === string.charAt(index + 1)) {\n        count++;\n      } else {\n        index++;\n      }\n    }\n    return count;\n  };", "  (string: string) => string.length;", "    substring.split('').reduce((a, b) => a + b, '')", "  (substring: string) =>\n    substring.length\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map(i => i.length)\n  .reduce((acc, i) => acc + i)\n  .map", "  (string: string) => {\n    let count = 0;\n    let start = 0;\n    let end = 0;\n    while (start < string.length) {\n      end = start + 1;\n      while (end < string.length) {\n        if (string[end] === string[start]) {\n          count++;\n          end++;\n        } else {\n          break;\n        }\n      }\n      start = end;\n    }\n    return count;\n  }", "    function (substring: string) {\n        let count = 0;\n        let index = 0;\n        while (index < substring.length) {\n            if (substring[index] === substring[index - 1]) {\n                count++;\n            } else {\n                index++;\n            }\n        }\n        return count;\n    };", "  (substring: string) => {\n    let count = 0;\n    let start = 0;\n    let end = 0;\n    while (end < len(substring) && count < 3) {\n      if (substring[end] === 'a') {\n        count++;\n      } else if (substring[end] === 'b') {\n        count++;\n      } else if (substring[end] === 'c') {\n        count++;\n      } else if (substring[end] === 'd') {\n        count++;\n      } else if (substring[end] === 'e') {\n        count++;\n      } else if (substring[end] === 'f') {\n        count++;\n      } else if (substring[end] === 'g') {\n        count++;\n      } else if (substring[end] === 'h') {\n        count++;\n      } else if (substring[end] === 'i') {\n        count++;\n      } else if (substring[end] === 'j') {\n        count++;\n      } else if (substring[end] === 'k') {\n        count++;\n      } else if (substring[end] === 'l') {\n        count++;\n      } else if (substring[end] === 'm') {\n        count++;\n      } else if (substring[end] === 'n') {\n        count++;\n      } else if (substring[end] === 'o') {\n        count++;\n      } else if (substring[end] === 'p') {\n        count++;\n      } else if (substring[end] === 'q') {\n        count++;\n      } else if (substring[end] === 'r') {\n        count++;\n      } else if (substring[end] === 's') {\n        count++;\n      } else if (substring[end] === 't') {\n        count++;\n      } else if (substring[end] === 'u') {\n        count++;\n      } else if (substring[end] === 'v') {\n        count++;\n      } else if (substring[end] === 'w') {\n        count++;\n      } else if (sub", "  (substring: string) =>\n    (substring.length > 0) ?\n      (substring.length - 1) :\n      0;", "  (substring: string) => {\n    let count = 0;\n    let index = 0;\n    let length = string.length;\n    while (index < length) {\n      if (substring.charAt(index) === string.charAt(index)) {\n        count++;\n      } else {\n        index++;\n      }\n    }\n    return count;\n  };", "  (string: string) =>\n    substring.length\n    ", "  (string: string) => {\n    let count = 0;\n    let start = 0;\n    let end = 0;\n    while (end < string.length) {\n      if (string[end] === 'a') {\n        count++;\n        end++;\n      } else {\n        if (count > 0) {\n          count--;\n          end++;\n        } else {\n          count = 0;\n          end++;\n        }\n      }\n    }\n    return count;\n  }"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}