{"name": "HumanEval_136_largest_smallest_integers", "language": "fs", "prompt": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0]) == (None, None)\nlet largest_smallest_integers (lst: int list):  int option * int option  = \n", "tests": "let test() = \n  let candidate = largest_smallest_integers\n  assert (candidate [2; 4; 1; 3; 5; 7] = (None, 1))\n  assert (candidate [2; 4; 1; 3; 5; 7; 0] = (None, 1))\n  assert (candidate [1; 3; 2; 4; 5; 6; -2] = (-2, 1))\n  assert (candidate [4; 5; 3; 6; 2; 7; -7] = (-7, 2))\n  assert (candidate [7; 3; 8; 4; 9; 2; 5; -9] = (-9, 2))\n  assert (candidate [] = (None, None))\n  assert (candidate [0] = (None, None))\n  assert (candidate [-1; -3; -5; -6] = (-1, None))\n  assert (candidate [-1; -3; -5; -6; 0] = (-1, None))\n  assert (candidate [-6; -4; -4; -3; 1] = (-3, 1))\n  assert (candidate [-6; -4; -4; -3; -100; 1] = (-3, 1))\n  0\n\ntest()", "completions": ["  (lst, None)", "  (lst, None)", "  (lst, None)", "  (lst, None)", "  (lst.length == 0 ? None : lst[0]);", "  (lst, None)", "  (lst, None)", "  (a: int, b: int) => (a: int, b: int) => (a: int, b: int) => None", "  (lst.length - 1) / 2;", "  (lst, None)", "  (lst, None) => (lst, None)", "  (lst, None)", "  (a: int, b: int) =>\n    (a < b) ? a : b;", "  (lst, None)", "  (lst.length ? lst : None)", "  (lst, None)", "  (lst, None)", "  (lst.length === 0) ? None :\n  (lst[0] < 0) ? lst[0] :\n  (lst[0] > 0) ? lst[0] :\n  (lst[1] < 0) ? lst[1] :\n  (lst[1] > 0) ? lst[1] :\n  (lst[2] < 0) ? lst[2] :\n  (lst[2] > 0) ? lst[2] :\n  (lst[3] < 0) ? lst[3] :\n  (lst[3] > 0) ? lst[3] :\n  (lst[4] < 0) ? lst[4] :\n  (lst[4] > 0) ? lst[4] :\n  (lst[5] < 0) ? lst[5] :\n  (lst[5] > 0) ? lst[5] :\n  (lst[6] < 0) ? lst[6] :\n  (lst[6] > 0) ? lst[6] :\n  (lst[7] < 0) ? lst[7] :\n  (lst[7] > 0) ? lst[7] :\n  (lst[8] < 0) ? lst[8] :\n  (lst[8] > 0) ? lst[8] :\n  (lst[9] < 0) ? lst[9] :\n  (lst[9] > 0) ? lst[9] :\n  (lst[10] < 0) ? lst[10] :\n  (lst[10] > 0) ? lst[10] :\n  (lst[11] < 0) ? lst[11] :\n  (lst[11] > 0) ? lst[11] :\n  (lst[12] < 0) ? lst[12] :\n  (lst[12] > 0) ? lst[12] :\n  (lst[13] < 0) ? lst[13] :\n  (lst[13] > 0) ? lst", "  (a: int, b: int) =>\n    (a < b ? a : b)", "  (lst, None)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}