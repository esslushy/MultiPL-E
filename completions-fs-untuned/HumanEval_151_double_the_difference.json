{"name": "HumanEval_151_double_the_difference", "language": "fs", "prompt": "//Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1, -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0]) == 0  \n// If the input list is empty, return 0.\nlet double_the_difference (lst: float list): int  = \n", "tests": "let test() = \n  let candidate = double_the_difference\n  assert (candidate [] = 0)\n  assert (candidate [5.0; 4.0] = 25)\n  assert (candidate [0.1; 0.2; 0.3] = 0)\n  assert (candidate [-10.0; -20.0; -30.0] = 0)\n  assert (candidate [-1.0; -2.0; 8.0] = 0)\n  assert (candidate [0.2; 3.0; 5.0] = 34)\n  assert (candidate [-9.0; -7.0; -5.0; -3.0; -1.0; 1.0; 3.0; 5.0; 7.0; 9.0] = 165)\n  0\n\ntest()", "completions": ["  lst.filter((x: number) => x % 2 == 1).reduce((x: number) => x + x)", "  lst.filter((x: number) => x % 2 == 0).reduce((x: number) => x + 1)", "  lst.filter(x => x % 2 == 1).reduce((x, y) => x + y)", "  lst.filter(x => x % 2 == 1).map(x => x * x)", "  lst.filter(x => x % 2 == 1)", "  lst.filter((x: number) => x % 2 == 1).sum();", "  lst.reduce((a, b) => a + b, 0)", "  lst.reduce((x, y) => x + y);", "  lst.filter(x => x % 2 == 1).reduce((x, y) => x + y)", "  lst.filter(x => x % 2 == 1).reduce((a, b) => a + b)", "  lst.reduce((a, b) => a + b)", "  lst.reduce((x, y) => x + y)", "  lst.reduce((x, y) => x + y)", "  lst.filter(x => x % 2 == 1).reduce((x, y) => x + y)", "  lst.filter(x => x % 2 == 1).reduce((x, y) => x + y)", "  lst.filter(x => x % 2 == 1)", "  lst.filter(x => x % 2 == 1).reduce((x, y) => x + y);", "  lst.filter(x => x % 2 == 1).reduce((x, y) => x + y);", "  lst.reduce((x, y) => x + y)", "  lst.reduce((x, y) => x + y)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}