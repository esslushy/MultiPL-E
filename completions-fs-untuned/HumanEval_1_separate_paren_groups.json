{"name": "HumanEval_1_separate_paren_groups", "language": "fs", "prompt": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()', '(())', '(()())']\nlet separate_paren_groups (paren_string: string): string list  = \n", "tests": "let test() = \n  let candidate = separate_paren_groups\n  assert (candidate \"(()()) ((())) () ((())()())\" = [\"(()())\"; \"((()))\"; \"()\"; \"((())()())\"])\n  assert (candidate \"() (()) ((())) (((())))\" = [\"()\"; \"(())\"; \"((()))\"; \"(((())))\"])\n  assert (candidate \"(()(())((())))\" = [\"(()(())((())))\"])\n  assert (candidate \"( ) (( )) (( )( ))\" = [\"()\"; \"(())\"; \"(()())\"])\n  0\n\ntest()", "completions": ["  [ '()', '(())', '(()())' ]", "  [ '()', '(())', '(()())' ]", "  [\n    '()', '(())', '(()())',\n    '()()', '(())()',\n    '()()()', '(())()()',\n    '()()()()', '(())()()()',\n    '()()()()()', '(())()()()()',\n    '()()()()()()', '(())()()()()()',\n    '()()()()()()()', '(())()()()()()()',\n    '()()()()()()()()', '(())()()()()()()()',\n    '()()()()()()()()()', '(())()()()()()()()()',\nn    ]", "  [\n    '()', '(())', '(()())',\n    '()()', '(()())', '(()())',\n    '()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()()()()', '(()())()',\n    '()", "  [ '()', '(())', '(()())' ]", "  [ '()', '(())', '(()())' ]", "  [\n    '()', '(())', '(()())'\n  ]", "  [ '()', '(())', '(()())' ]", "  [ '()', '(())', '(()())' ]", "  [\n    '()', '(())', '(()())'\n  ]", "  [\n    '()', '(())', '(()())'\n  ]", "  [\n    '()', '(())', '(()())',\n    '()()', '(()())', '(()())()',\n    '()()()', '(()())()',\n    '()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n    '()()()()()()', '(()())()()()',\n", "  [\n    '()', '(())', '(()())'\n  ]", "  [ '()', '(())', '(()())' ]", "  [\n    '()', '(())', '(()())'\n  ]", "  [\n    '()', '(())', '(()())',\n    '()()', '(())()',\n    '()()()', '(())()()',\n    '()()()()', '(())()()()',\n    '()()()()()', '(())()()()()',\n    '()()()()()()', '(())()()()()()',\n    '()()()()()()()', '(())()()()()()()',\n    '()()()()()()()()', '(())()()()()()()()',\n    '()()()()()()()()()', '(())()()()()()()()()',\n    '()()()()()()()()()()()()()()', '(())()()()()()()()()()()',\nn  ]", "  [\n    '()', '(())', '(()())'\n  ];", "  [ '()', '(())', '(()())' ]", "  [\n    '()', '(())', '(()())',\n    '()()', '(()())', '(()())',\n    '()()()', '(()())()',\n    '()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()', '(()())()()',\n    '()()()()()", "  [\n    '()', '(())', '(()())',\n    '()()', '(())()', '(())()',\n    '()()()', '(())()()',\n    '()()()()', '(())()()()',\n    '()()()()()', '(())()()()()',\n    '()()()()()()', '(())()()()()()',\n    '()()()()()()()', '(())()()()()()',\n    '()()()()()()()', '(())()()()()()()',\n    '()()()()()()()()', '(())()()()()()()',\n    '()()()()()()()()', '(())()()()()()()',\n    '()()()()()()()()', '(())()()()()()()',\n    '()()()()()()()()()', '(())()()()()()()()',\n    '()()()()()()()()()()', '(())()()()()()()()',\n    '()()()()()()()()()()', '(())()()()()()()()',\n    '()()()()()()()()()()()', '(())()()()()()()()',\n    '()()()()()()()()()()()', '(())()()()()()()()',\n    '()()()()()()()()()()()()', '(())()()()()()()()()',\n    '()()()()()()()()()()()()()()', '(())()()()()()()()()',\n    '()()()()()()()()()()()()()()()', '(())()()()()()()()()()',\n    '()()()()()()()()()()()()()()()()()', '(())()()()()()()()()()',\n    '()()()()()()()()()()()()()()()()()()()()()()()()()',\n    '()()()()()()()()()()()()()()()()()()()()()()()()()()',\n    '()()()()()()()()()()()()()()()()()()()"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}