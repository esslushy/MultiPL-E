{"name": "HumanEval_43_pairs_sum_to_zero", "language": "fs", "prompt": "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nlet pairs_sum_to_zero (l: int list): bool  = \n", "tests": "let test() = \n  let candidate = pairs_sum_to_zero\n  assert (candidate [1; 3; 5; 0] = false)\n  assert (candidate [1; 3; -2; 1] = false)\n  assert (candidate [1; 2; 3; 7] = false)\n  assert (candidate [2; 4; -5; 3; 5; 7] = true)\n  assert (candidate [1] = false)\n  assert (candidate [-3; 9; -1; 3; 2; 30] = true)\n  assert (candidate [-3; 9; -1; 3; 2; 31] = true)\n  assert (candidate [-3; 9; -1; 4; 2; 30] = false)\n  assert (candidate [-3; 9; -1; 4; 2; 31] = false)\n  0\n\ntest()", "completions": ["  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == 0 :\n  (l.length == 2) ? l[0] == l[1] == 0 :\n  (l.length == 3) ? l[0] == l[1] == l[2] == 0 :\n  (l.length == 4) ? l[0] == l[1] == l[2] == l[3] == 0 :\n  (l.length == 5) ? l[0] == l[1] == l[2] == l[3] == l[4] == 0 :\n  (l.length == 6) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == 0 :\n  (l.length == 7) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == 0 :\n  (l.length == 8) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == 0 :\n  (l.length == 9) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == 0 :\n  (l.length == 10) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == l[9] == 0 :\n  (l.length == 11) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == l[9] == l[10] == 0 :\n  (l.length == 12) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5]", "  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 1 && l[0] == l[0]) ||\n  (l.length == 0 && l[0] == l[0]) ||\n  (l.length == 1 && l[0] == l[0]) ||\n  (l.length == 2 && l[0] == l[0]) ||\n  (l.length == 3 && l[0] == l[1]) ||\n  (l.length == 4 && l[0] == l[1]) ||\n  (l.length == 5 && l[0] == l[1]) ||\n  (l.length == 6 && l[0] == l[1]) ||\n  (l.length == 7 && l[0] == l[1]) ||\n  (l.length == 8 && l[0] == l[1]) ||\n  (l.length == 9 && l[0] == l[1]) ||\n  (l.length == 10 && l[0] == l[1]) ||\n  (l.length == 11 && l[0] == l[1]) ||\n  (l.length == 12 && l[0] == l[1]) ||\n  (l.length == 13 && l[0] == l[1]) ||\n  (l.length == 14 && l[0] == l[1]) ||\n  (l.length == 15 && l[0] == l[1]) ||\n  (l.length == 16 && l[0] == l[1]) ||\n  (l.length == 17 && l[0] == l[1]) ||\n  (l.length == 18 && l[0] == l[1]) ||\n  (l.length == 19 && l[0] == l[1]) ||\n  (l.length == 20 && l[0] == l[1]) ||\n  (l.length == 21 && l[0] == l[1]) ||\n  (l.length == 22 && l[0] == l[1]) ||\n  (l.length == 23 && l[0] == l[1]) ||\n  (l.length == 24 && l[0] == l[1]) ||", "  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == l[0] :\n  (l.length == 2) ? (l[0] == l[1]) :\n  (l.length == 3) ? (l[0] == l[2]) :\n  (l.length == 4) ? (l[0] == l[3]) :\n  (l.length == 5) ? (l[0] == l[4]) :\n  (l.length == 6) ? (l[0] == l[5]) :\n  (l.length == 7) ? (l[0] == l[6]) :\n  (l.length == 8) ? (l[0] == l[7]) :\n  (l.length == 9) ? (l[0] == l[8]) :\n  (l.length == 10) ? (l[0] == l[9]) :\n  (l.length == 11) ? (l[0] == l[10]) :\n  (l.length == 12) ? (l[0] == l[11]) :\n  (l.length == 13) ? (l[0] == l[12]) :\n  (l.length == 14) ? (l[0] == l[13]) :\n  (l.length == 15) ? (l[0] == l[14]) :\n  (l.length == 16) ? (l[0] == l[15]) :\n  (l.length == 17) ? (l[0] == l[16]) :\n  (l.length == 18) ? (l[0] == l[17]) :\n  (l.length == 19) ? (l[0] == l[18]) :\n  (l.length == 20) ? (l[0] == l[19]) :\n  (l.length == 21) ? (l[0] == l[20]) :\n  (l.length == 22) ? (l[0] == l[21]) :\n  (l.length == 23) ? (l[0] == l[22]) :\n  (l.length == 24) ? (l[0] == l[23", "  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 1 && l[0] == 0) ||\n  (l.length == 0 && l[0] == 1);", "  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 1 && l[0] == l[0]) ||\n  (l.length == 0 && l[0] == l[0]);", "    (l.length == 1 && l[0] == 0) ||\n    (l.length == 2 && l[0] == l[1]) ||\n    (l.length == 3 && l[0] == l[1] && l[2] == 0) ||\n    (l.length == 4 && l[0] == l[1] && l[2] == l[3]) ||\n    (l.length == 5 && l[0] == l[1] && l[2] == l[3] && l[4] == 0) ||\n    (l.length == 6 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5]) ||\n    (l.length == 7 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == 0) ||\n    (l.length == 8 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7]) ||\n    (l.length == 9 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == 0) ||\n    (l.length == 10 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9]) ||\n    (l.length == 11 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == 0) ||\n    (l.length == 12 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == l[", "  (l.length == 2) ? (l[0] + l[1]) == 0 : false;", "  (l.length == 2)\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l[1])\n  && (l[0] == l", "  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 1 && l[0] == -1) ||\n  (l.length == 0);", "  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 1 && l[0] == -1) ||\n  (l.length == 0 && l[0] == -1);", "  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 1 && l[0] == l[0]) ||\n  (l.length == 0 && l[0] == l[0]);", "  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 1 && l[0] == 0) ||\n  (l.length == 0 && l[0] == 1);", "    (l.length == 2) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[1]) && (l[0] == l[", "  (l.length == 1 && l[0] == 0) ||\n  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 3 && l[0] == l[1] && l[2] == l[3]) ||\n  (l.length == 4 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5]) ||\n  (l.length == 5 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7]) ||\n  (l.length == 6 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9]) ||\n  (l.length == 7 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == l[11]) ||\n  (l.length == 8 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == l[11] && l[12] == l[13]) ||\n  (l.length == 9 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == l[11] && l[12] == l[13] && l[14] == l[15]) ||\n  (l.length == 10 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] ==", "  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 1 && l[0] == -1);", "  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 1 && l[0] == 0);", "  (l.length == 1 && l[0] == 0) ||\n  (l.length == 2 && l[0] == l[1] && l[1] == 0) ||\n  (l.length == 3 && l[0] == l[1] && l[1] == l[2] && l[2] == 0) ||\n  (l.length == 4 && l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == 0) ||\n  (l.length == 5 && l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == 0) ||\n  (l.length == 6 && l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == l[5] && l[5] == 0) ||\n  (l.length == 7 && l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == l[5] && l[5] == l[6] && l[6] == 0) ||\n  (l.length == 8 && l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == l[5] && l[5] == l[6] && l[6] == l[7] && l[7] == 0) ||\n  (l.length == 9 && l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == l[5] && l[5] == l[6] && l[6] == l[7] && l[7] == l[8] && l[8] == 0) ||", "  l.every(i => i % 2 == 0)\n  .map(i => i % 2 == 0)\n  .reduce(i => i + i)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce(i => i + i)\n  .filter(i => i > 0)\n  .map(i", "  (l.length == 2) && (l[0] == l[1]) && (l[0] == l[0]) && (l[0] == l[1])\nlet pairs_sum_to_zero_2 (l: int list): bool  = \n  (l.length == 2) && (l[0] == l[1]) && (l[0] == l[0]) && (l[1] == l[1])\nlet pairs_sum_to_zero_3 (l: int list): bool  = \n  (l.length == 3) && (l[0] == l[1]) && (l[1] == l[2]) && (l[2] == l[2])\nlet pairs_sum_to_zero_4 (l: int list): bool  = \n  (l.length == 4) && (l[0] == l[1]) && (l[1] == l[2]) && (l[2] == l[3]) && (l[3] == l[3])\nlet pairs_sum_to_zero_5 (l: int list): bool  = \n  (l.length == 5) && (l[0] == l[1]) && (l[1] == l[2]) && (l[2] == l[3]) && (l[3] == l[4]) && (l[4] == l[4])\nlet pairs_sum_to_zero_6 (l: int list): bool  = \n  (l.length == 6) && (l[0] == l[1]) && (l[1] == l[2]) && (l[2] == l[3]) && (l[3] == l[4]) && (l[4] == l[5]) && (l[5] == l[5])\nlet pairs_sum_to_zero_7 (l: int list): bool  = \n  (l.length == 7) && (l[0] == l[1]) && (l[1] == l[2]) && (l[2] == l[3]) && (l[3] == l[4]) && (l[4] == l[5]) && (l[5", "  l.reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map((x, y) => x + y)\n  .reduce((x, y) => x + y)\n  .map"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}