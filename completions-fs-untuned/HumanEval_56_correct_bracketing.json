{"name": "HumanEval_56_correct_bracketing", "language": "fs", "prompt": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing (brackets: string): bool  = \n", "tests": "let test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()", "completions": ["  function (brackets: string): string {\n    let brackets_match = brackets.match(/[<>]/);\n    if (brackets_match) {\n      return brackets_match[0];\n    }\n    return brackets;\n  }", "  (brackets == \"<<<>>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \">>>\") ||\n  (brackets == \"<<<>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \">>>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets == \"<<<\") ||\n  (brackets == \">>\") ||\n  (brackets", "  (brackets == \"<<>\") || (brackets == \">>\") || (brackets == \"<<<\") || (brackets == \">>\");", "  (brackets == \"<<<\") || (brackets == \">>\") || (brackets == \"<<>\") || (brackets == \"><<\") || (brackets == \">>>\");", "  (brackets == \"<<<\") || (brackets == \">>>\") || (brackets == \"<<>\") || (brackets == \">>\");", "  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><", "  function (brackets: string): bool {\n    if (brackets == \"<<>\") {\n      return true;\n    }\n    if (brackets == \"<<<\") {\n      return true;\n    }\n    if (brackets == \">>\") {\n      return true;\n    }\n    if (brackets == \">>>\" || brackets == \"<<<\") {\n      return true;\n    }\n    return false;\n  }", "  function (brackets: string): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b =", "  function () {\n    let brackets = brackets.split(\"<\");\n    let brackets_length = brackets.length;\n    let i = 0;\n    let j = 0;\n    let is_open = false;\n    let is_close = false;\n    let is_open_bracket = false;\n    let is_close_bracket = false;\n    let is_open_bracket_open = false;\n    let is_close_bracket_close = false;\n    let is_open_bracket_close = false;\n    let is_close_bracket_open = false;\n    let is_open_bracket_close_open = false;\n    let is_close_bracket_close_close = false;\n    let is_open_bracket_close_open_close = false;\n    let is_close_bracket_close_open_close = false;\n    let is_open_bracket_close_open_close_close = false;\n    let is_close_bracket_close_open_close_close = false;\n    let is_open_bracket_close_open_close_close_close = false;\n    let is_close_bracket_close_open_close_close_close = false;\n    let is_open_bracket_close_open_close_close_close_close = false;\n    let is_close_bracket_close_open_close_close_close_close_close = false;\n    let is_open_bracket_close_open_close_close_close_close_close_close = false;\n    let is_close_bracket_close_open_close_close_close_close_close_close_close_close = false;\n    let is_open_bracket_close_open_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_close_", "    (brackets.charAt(0) == '<') && (brackets.charAt(brackets.length - 1) == '>')\nlet correct_bracketing_1 (brackets: string): bool  = \n    (brackets.charAt(0) == '<') && (brackets.charAt(brackets.length - 1) == '>')\nlet correct_bracketing_2 (brackets: string): bool  = \n    (brackets.charAt(0) == '<') && (brackets.charAt(brackets.length - 1) == '>')\nlet correct_bracketing_3 (brackets: string): bool  = \n    (brackets.charAt(0) == '<') && (brackets.charAt(brackets.length - 1) == '>')\nlet correct_bracketing_4 (brackets: string): bool  = \n    (brackets.charAt(0) == '<') && (brackets.charAt(brackets.length - 1) == '>')\nlet correct_bracketing_5 (brackets: string): bool  = \n    (brackets.charAt(0) == '<') && (brackets.charAt(brackets.length - 1) == '>')\nlet correct_bracketing_6 (brackets: string): bool  = \n    (brackets.charAt(0) == '<') && (brackets.charAt(brackets.length - 1) == '>')\nlet correct_bracketing_7 (brackets: string): bool  = \n    (brackets.charAt(0) == '<') && (brackets.charAt(brackets.length - 1) == '>')\nlet correct_bracketing_8 (brackets: string): bool  = \n    (brackets.charAt(0) == '<') && (brackets.charAt(brackets.length - 1) == '>')\nlet correct_bracketing_9 (brackets: string): bool  = \n    (brackets.charAt(0) == '<') && (brackets.charAt(brackets.length - 1) == '>')\nlet", "  (brackets.charAt(0) == '<' && brackets.charAt(brackets.length - 1) == '>')\n  ? true\n  : false;", "  (brackets.match(/^[<>]/)) ? true : false;", "  (brackets.charAt(0) == \"<<\") &&\n  (brackets.charAt(brackets.length - 1) == \">>\")", "    brackets.match(/^\\s*\\s*(?:\\<|\\>|\\>\\>|<<|<<\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>|<<\\>\\>", "  function (brackets: string): bool {\n    if (brackets == \"\") {\n      return true;\n    }\n    let brackets = brackets.split(\"<\");\n    let brackets_length = brackets.length;\n    let i = 0;\n    let j = 0;\n    let found = false;\n    while (i < brackets_length) {\n      if (brackets[i] == \"<\") {\n        found = true;\n        i++;\n      } else if (brackets[i] == \">\") {\n        found = true;\n        i++;\n      } else if (brackets[i] == \"<<\") {\n        found = true;\n        i++;\n      } else if (brackets[i] == \">>\") {\n        found = true;\n        i++;\n      } else if (brackets[i] == \">\") {\n        found = true;\n        i++;\n      } else {\n        i++;\n      }\n    }\n    if (found) {\n      return true;\n    } else {\n      return false;\n    }\n  }", "  (brackets == \"<<><>>\") ||\n  (brackets == \"<<>\") ||\n  (brackets == \">>\") ||\n  (brackets == \">\") ||\n  (brackets == \">\") ||\n  (brackets == \"<<\") ||\n  (brackets == \">>\");", "  (brackets == \"<<>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<<\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \">>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \">>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \">>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \">>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \">>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \">>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \">>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \">>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \">>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \">>\")\nlet correct_bracketing (", "  (brackets.charAt(0) === \"<\") &&\n  (brackets.charAt(brackets.length - 1) === \">\") &&\n  (brackets.charAt(brackets.length - 2) === \">\");", "  function (brackets: string) {\n    let brackets_to_check = brackets.split(\"<\");\n    let brackets_to_check_length = brackets_to_check.length;\n    let i = 0;\n    while (i < brackets_to_check_length) {\n      let brackets_to_check_i = brackets_to_check.indexOf(brackets_to_check[i]);\n      if (brackets_to_check_i == -1) {\n        return false;\n      }\n      i = i + 1;\n    }\n    return true;\n  };", "  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><>>\")\nlet correct_bracketing (brackets: string): bool  = \n  (brackets == \"<<><"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}