{"name": "HumanEval_7_filter_by_substring", "language": "fs", "prompt": "//Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nlet filter_by_substring (strings: string list) (substring: string): string list  = \n", "tests": "let test() = \n  let candidate = filter_by_substring\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  assert (candidate [\"xxx\"; \"asd\"; \"aaaxxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xx\" = [\"xxx\"; \"aaaxxy\"; \"xxxAAA\"; \"xxx\"])\n  assert (candidate [\"grunt\"; \"trumpet\"; \"prune\"; \"gruesome\"] \"run\" = [\"grunt\"; \"prune\"])\n  0\n\ntest()", "completions": ["  strings.filter(x => x.includes(substring))", "  strings.filter(s => s.includes(substring));", "  strings.filter(s => s.includes(substring))", "  strings.filter(s => s.includes(substring))", "  strings.filter(substring => substring.includes(substring.toLowerCase()));", "  strings.filter(x => x.includes(substring))", "  strings.filter(s => s.startsWith(substring))", "  strings.filter(s => s.includes(substring));", "  strings.filter(s => s.startsWith(substring))", "  strings.map(s => s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s", "  strings.filter(s => s.startsWith(substring))", "  strings.filter(s => s.startsWith(substring))", "  strings.filter(x => x.includes(substring))", "  strings.filter(substring => substring.includes(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, substring.indexOf(substring.substring(0, subst", "  strings.filter(substring => substring.includes(substring));", "strings.filter(s => s.includes(substring));", "  strings.map(s => s.substring(0, 1))", "  strings.filter(s => s.startsWith(substring))", "  strings.map(s => s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s.substring(0, s.indexOf(s", "  strings.filter(substring => substring.includes(substring.substring(1)));"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}