{"name": "HumanEval_47_median", "language": "fs", "prompt": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nlet median (l: int list): float  = \n", "tests": "let test() = \n  let candidate = median\n  assert (candidate [3; 1; 2; 4; 5] = 3)\n  assert (candidate [-10; 4; 6; 1000; 10; 20] = 8.0)\n  assert (candidate [5] = 5)\n  assert (candidate [6; 5] = 5.5)\n  assert (candidate [8; 1; 3; 9; 9; 2; 7] = 7)\n  0\n\ntest()", "completions": ["  l.sort()\n  .map(i => i.length)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n", "// >>> l.sort()", "// >>> l = [3, 1, 2, 4, 5]", "  l.sort()\n  // Sort the list in ascending order.\n  l.sort()\n  // Return the median of the list.\n  return l.reduce((x, y) => x + y) / 2", "  l.sort()\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  ", "  (l.length - 1) / 2;", "  l.sort()\n  // Sort list by value.\n  l.sort()\n  // Return median of elements in the list l.\n  // >>> median([3, 1, 2, 4, 5])\n  // 3\n  // >>> median([-10, 4, 6, 1000, 10, 20])\n  // 15.0", "  l.sort()\n  // Sort the list in ascending order.\n  l.sort()\n  // Return the median of the list.\n  return l.reduce((a, b) => a + b) / 2", "  (l.length > 0) ? l[l.length / 2] : 0;", "  l.sort()\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  ", "  l.sort()\n  // Sort the list in ascending order.\n  l.sort()\n  // Return the median of the list.\n  return l.reduce((x, y) => x + y) / 2", "  l.sort()\n  ", "  l.sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)\n  .sort()\n  .map((x: int) => x)\n  .reduce((x, y) => x + y)", "  l.sort()\n  // Sort the list in ascending order.\n  l.sort()\n  // Return the median of the list.\n  return l.reduce((x, y) => x + y) / 2", "  l.sort()\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())\n  .reduce((a, b) => a + b)\n  .map((x: any) => x.sort())", "  l.sort().reverse().map((x: int) => x).reduce((a, b) => a + b);", "  l.sort()\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  ", "// >>> l = [3, 1, 2, 4, 5]", "  l.sort()\n  ", "  l.sort()\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  .reduce((a, b) => a + b)\n  .map(x => x.length)\n  "], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}