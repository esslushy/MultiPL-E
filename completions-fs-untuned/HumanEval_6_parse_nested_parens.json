{"name": "HumanEval_6_parse_nested_parens", "language": "fs", "prompt": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n", "tests": "let test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()", "completions": ["    [1, 2, 3, 1];", "  [0, 0, 0, 0]", "  [1, 2, 3, 1, 3]", "  [1, 2, 3, 1, 3]", "  [1, 2, 3, 1, 3]", "  [0, 0, 0, 0]", "    [1, 2, 3, 1];", "  [0, 0, 0, 0]", "  [0, 0, 0, 0]", "    [0, 0, 0, 0];", "  [0, 0, 0, 0]", "    [0, 0, 0, 0];", "  [1, 1, 1, 1]", "    [1, 2, 3, 1, 3]", "    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "  [0, 0, 0, 0]", "  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "    [0, 0, 0, 0]", "    [\n        0,\n        1,\n        2,\n        3,\n        1,\n        3,\n        2,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        1,\n        2,\n        3,\n        ", "  [1, 1, 1, 1]"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}