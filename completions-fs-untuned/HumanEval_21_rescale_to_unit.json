{"name": "HumanEval_21_rescale_to_unit", "language": "fs", "prompt": "//Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nlet rescale_to_unit (numbers: float list): float list  = \n", "tests": "let test() = \n  let candidate = rescale_to_unit\n  assert (candidate [2.0; 49.9] = [0.0; 1.0])\n  assert (candidate [100.0; 49.9] = [1.0; 0.0])\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = [0.0; 0.25; 0.5; 0.75; 1.0])\n  assert (candidate [2.0; 1.0; 5.0; 3.0; 4.0] = [0.25; 0.0; 1.0; 0.5; 0.75])\n  assert (candidate [12.0; 11.0; 15.0; 13.0; 14.0] = [0.25; 0.0; 1.0; 0.5; 0.75])\n  0\n\ntest()", "completions": ["  [0.0, 0.25, 0.5, 0.75, 1.0]", "    numbers.map(n => Math.pow(n, 2))", "    numbers.map(n => n / 2.0)", "  numbers.map(n => n * 2)\n  .reduce((a, b) => a + b)\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .reverse()\n  .sort((a, b) => a - b)", "    numbers.map(n => n / 2)", "    numbers.map(n => n * 2.0)", "  numbers.map(n => n / 2.0)", "  numbers.map(x => x * x)", "  numbers.map(n => n * 2.0)", "    numbers.map(n => n * 2.0)", "  numbers.map(n => n * 2)\n  .reduce((a, b) => a + b)\n  .map(n => n * 2)\n  .sort()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(n => n * 2)\n  .reverse()\n  .map(", "  numbers.map(n => n / 2)", "  numbers.map(x => x * 2)\n  .reduce((x, y) => x + y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(x => x * 2)\n  .reverse()\n  .sort((x, y) => x - y)\n  .map(", "    numbers.map(x => x / 2)", "  numbers.map(n => n * 2.0)\n  .reduce((a, b) => a + b)\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n => n)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map(n =>", "  [0.0, 0.25, 0.5, 0.75, 1.0]", "  numbers.map(x => x * x)", "  numbers.map(n => Math.floor(n))", "  numbers.map(n => n / 2)", "    numbers.map((n: number) => n / 2.0)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}