{"name": "HumanEval_93_encode", "language": "fs", "prompt": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nlet encode (message: string): string  = \n", "tests": "let test() = \n  let candidate = encode\n  assert (candidate \"TEST\" = \"tgst\")\n  assert (candidate \"Mudasir\" = \"mWDCSKR\")\n  assert (candidate \"YES\" = \"ygs\")\n  assert (candidate \"This is a message\" = \"tHKS KS C MGSSCGG\")\n  assert (candidate \"I DoNt KnOw WhAt tO WrItE\" = \"k dQnT kNqW wHcT Tq wRkTg\")\n  0\n\ntest()", "completions": ["(message: string) => message.replace(/[A-Z]/g, function (letter) {\n  return letter.toUpperCase();\n});", "  function (message: string) {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n      let letter = message.charAt(i);\n      let newLetter = letter.toUpperCase();\n      if (newLetter === 'T') {\n        result += 'T';\n      } else if (newLetter === 'S') {\n        result += 'S';\n      } else if (newLetter === 'K') {\n        result += 'K';\n      } else if (newLetter === 'M') {\n        result += 'M';\n      } else if (newLetter === 'G') {\n        result += 'G';\n      } else if (newLetter === 'S') {\n        result += 'S';\n      } else if (newLetter === 'C') {\n        result += 'C';\n      } else if (newLetter === 'G') {\n        result += 'G';\n      } else if (newLetter === 'S') {\n        result += 'S';\n      } else if (newLetter === 'C') {\n        result += 'C';\n      } else if (newLetter === 'G') {\n        result += 'G';\n      } else if (newLetter === 'S') {\n        result += 'S';\n      } else if (newLetter === 'C') {\n        result += 'C';\n      } else if (newLetter === 'G') {\n        result += 'G';\n      } else if (newLetter === 'S') {\n        result += 'S';\n      } else if (newLetter === 'C') {\n        result += 'C';\n      } else if (newLetter === 'G') {\n        result += 'G';\n      } else if (newLetter === 'S') {\n        result += 'S';\n      } else if (newLetter === 'C') {\n        result += 'C';\n      } else if (newLetter === 'G') {\n        result += 'G';\n      } else if (newLetter === 'S') {\n        result += 'S';\n      } else if (newLetter === 'C') {\n        result += 'C';\n      } else if (newLetter === 'G') {\n        result", "  (message: string) => message.toLowerCase().replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z]/g, '').replace(/[^a-z", "  (message: string) => message.toLowerCase().replace(/[^a-z]/g, ' ');", "  (message: string) => message.toLowerCase().replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[", "  (message: string) => message.toLowerCase().replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[", "  (message: string) => message.toLowerCase().replace(/[aeiou]/g, function (letter) {\n    return letter.toUpperCase();\n  });", "  (message: string) => message.toLowerCase().replace(/[a-z]/g, function (letter) {\n    return letter.toUpperCase();\n  });", "  (message: string) => message.replace(/[a-z]/g, function (letter) {\n    return letter.toUpperCase();\n  });", "  (message: string) => message.toLowerCase().replace(/[a-z]/g, function (c) {\n    return 'a' + c.toUpperCase();\n  });", "  (message: string) => message.toLowerCase().replace(/[a-z]/g, function (letter) {\n    return letter.toUpperCase();\n  });", "  (message: string) => message.toLowerCase().replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[", "(message: string) => message.toLowerCase().replace(/[a-z]/g, function (letter) {\n  return letter.toUpperCase();\n});", "  (message: string) => message.toLowerCase().replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[", "(message: string) => message.replace(/[^a-zA-Z]/g, function (letter) {\n  return letter.toUpperCase();\n});", "  (message: string) => message.toLowerCase().replace(/[a-z]/g, function (c) {\n    return 'a' + c.toUpperCase();\n  });", "  (message: string) => message.toLowerCase().replace(/[a-z]/g, function(letter) {\n    return letter.toUpperCase();\n  });", "  (message: string) => message.replace(/[^a-zA-Z]/g, 'A').replace(/[^a-zA-Z]/g, 'A').replace(/[^a-zA-Z]/g, 'A').replace(/[^a-zA-Z]/g, 'A').replace(/[^a-zA-Z]/g, 'A').replace(/[^a-zA-Z]/g, 'A');", "  (message: string) => message.toLowerCase().replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[^a-z]/g, '-').replace(/[", "  (message: string) => message.toLowerCase().replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/[^a-z]/g, ' ').replace(/["], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}