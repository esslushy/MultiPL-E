{"name": "HumanEval_90_next_smallest", "language": "fs", "prompt": "//You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3, 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n// next_smallest([1, 1]) == None\nlet next_smallest (lst: int list): int option  = \n", "tests": "let test() = \n  let candidate = next_smallest\n  assert (candidate [1; 2; 3; 4; 5] = 2)\n  assert (candidate [5; 1; 4; 3; 2] = 2)\n  assert (candidate [] = None)\n  assert (candidate [1; 1] = None)\n  assert (candidate [1; 1; 1; 1; 0] = 1)\n  assert (candidate [1; 1] = None)\n  assert (candidate [-35; 34; 12; -45] = -35)\n  0\n\ntest()", "completions": ["  next_smallest (lst, 0)", "  lst.next_smallest(1)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(2)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(3)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(4)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(5)", "  lst.next_smallest(1)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(2)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(3)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(4)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(5)", "  lst.next_smallest(1);", "  lst.next_smallest(1)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(2)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(3)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(4)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(5)", "  lst.next_smallest(1)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(2)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(3)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(4)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(5)", "  lst.next_smallest(1);", "    lst.next_smallest(1)", "  lst.next_smallest(1)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(2)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(3)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(4)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(5)", "  lst.next_smallest(1);", "  next_smallest(lst, 0)", "  lst.next_smallest(1)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(2)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(3)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(4)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(5)", "  next_smallest (lst, 0)", "  lst.next_smallest(1)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(2)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(3)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(4)\nlet next_smallest (lst: int list): int option  = \n  lst.next_smallest(5)", "  lst.next_smallest(1);", "    lst.next_smallest(1);", "  (lst.length == 0) ? None : lst[0];", "  lst.next_smallest(1)", "    lst.next_smallest(1)", "  lst.next_smallest();"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}