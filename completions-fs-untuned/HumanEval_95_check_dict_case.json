{"name": "HumanEval_95_check_dict_case", "language": "fs", "prompt": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case (dict: Map<string, string>): bool  = \n", "tests": "let test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()", "completions": ["    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());", "    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());", "    dict.entries().filter((e: Map<string, string>) => e.key.toLowerCase() === e.value.toLowerCase()).map((e: Map<string, string>) => e.value);", "    dict.entries().filter((e: Map<string, string>) => e.key.toLowerCase() === e.value.toLowerCase()).some((e: Map<string, string>) => e.value.toLowerCase() === e.key.toLowerCase());", "    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());", "    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());", "    dict.entries().forEach(e => {\n        if (e.key.toLowerCase() === e.value.toLowerCase()) {\n            return false;\n        }\n        if (e.key.toUpperCase() === e.value.toUpperCase()) {\n            return false;\n        }\n    });", "    dict.entries().every(e => e.key.toLowerCase() === e.value.toLowerCase())\nlet check_dict_case_upper (dict: Map<string, string>): bool = \n    dict.entries().every(e => e.key.toUpperCase() === e.value.toUpperCase())", "    dict.entries().some((key: string) => key.toLowerCase() === key.toUpperCase());", "    dict.entries().map(e => e.key.toLowerCase() === e.value.toLowerCase()).every(e => e.value === e.key);", "    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());", "  dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());", "    (dict.keys() == [\"a\", \"b\", \"c\"] &&\n     dict.values() == [\"apple\", \"banana\", \"banana\"] &&\n     dict.entries() == [\n        {\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"},\n        {\"State\": \"NC\", \"ZIP\": \"12345\" }\n    ])", "    (dict.size === 0) ? true : false;", "    (dict.has(\"a\") && dict.has(\"b\") && dict.has(\"c\") && dict.has(\"d\") && dict.has(\"e\") && dict.has(\"f\") && dict.has(\"g\") && dict.has(\"h\") && dict.has(\"i\") && dict.has(\"j\") && dict.has(\"k\") && dict.has(\"l\") && dict.has(\"m\") && dict.has(\"n\") && dict.has(\"o\") && dict.has(\"p\") && dict.has(\"q\") && dict.has(\"r\") && dict.has(\"s\") && dict.has(\"t\") && dict.has(\"u\") && dict.has(\"v\") && dict.has(\"w\") && dict.has(\"x\") && dict.has(\"y\") && dict.has(\"z\") && dict.has(\"A\") && dict.has(\"B\") && dict.has(\"C\") && dict.has(\"D\") && dict.has(\"E\") && dict.has(\"F\") && dict.has(\"G\") && dict.has(\"H\") && dict.has(\"I\") && dict.has(\"J\") && dict.has(\"K\") && dict.has(\"L\") && dict.has(\"M\") && dict.has(\"N\") && dict.has(\"O\") && dict.has(\"P\") && dict.has(\"Q\") && dict.has(\"R\") && dict.has(\"S\") && dict.has(\"T\") && dict.has(\"U\") && dict.has(\"V\") && dict.has(\"W\") && dict.has(\"X\") && dict.has(\"Y\") && dict.has(\"Z\") && dict.has(\"A\") && dict.has(\"B\") && dict.has(\"C\") && dict.has(\"D\") && dict.has(\"E\") && dict.has(\"F\") && dict.has(\"G\") && dict.has(\"H\") && dict.has(\"I\") && dict.has(\"J\") && dict.has(\"K\") && dict.has(\"L\") && dict.has(\"M\") && dict.has(\"N\") && dict.has(\"O\") && dict.has(\"P\") && dict.has(\"Q\") && dict.has(\"R\") && dict.has(\"S\") && dict.has(\"T\") && dict.has(\"U\")", "    dict.entries().forEach((key: string) => {\n        if (key.toLowerCase() === key.toUpperCase()) {\n            return false;\n        }\n    })", "    dict.entries().map(e => e.key.toLowerCase() === e.value.toLowerCase()).some(e => e.value.toLowerCase() === e.key.toLowerCase());", "    dict.entries().some((key: string) => key.toLowerCase().startsWith(\"a\") || key.toUpperCase().startsWith(\"b\"))", "    dict.entries().some((key: string) => key.toLowerCase().startsWith(\"a\") || key.toUpperCase().startsWith(\"A\"));", "    dict.entries().some(e => e.key.toLowerCase() === e.value.toLowerCase());"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}