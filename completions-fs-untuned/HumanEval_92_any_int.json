{"name": "HumanEval_92_any_int", "language": "fs", "prompt": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u00e2\u017e\u017e True\n// any_int(3, 2, 2) \u00e2\u017e\u017e False\n// any_int(3, -2, 1) \u00e2\u017e\u017e True\n// any_int(3.6, -2.2, 2) \u00e2\u017e\u017e False\nlet any_int (x: float) (y: float) (z: float): bool  = \n", "tests": "let test() = \n  let candidate = any_int\n  assert (candidate 2 3 1 = true)\n  assert (candidate 2.5 2 3 = false)\n  assert (candidate 1.5 5 3.5 = false)\n  assert (candidate 2 6 2 = false)\n  assert (candidate 4 2 2 = true)\n  assert (candidate 2.2 2.2 2.2 = false)\n  assert (candidate -4 6 2 = true)\n  assert (candidate 2 1 1 = true)\n  assert (candidate 3 4 7 = true)\n  assert (candidate 3.0 4 7 = false)\n  0\n\ntest()", "completions": ["    (x == y) && (x == z)", "// x = 3.6", "    (x == y) && (x == z)", "    (x == y) && (x == z)", "  (x == y) && (x == z)", "    (x == y) && (x == z)", "  (x == y) && (x == z)", "// x = 3.6", "  (x == y) && (x == z)\nlet any_int_1 (x: int) (y: int) (z: int): bool  = \n  (x == y) && (x == z)\nlet any_int_2 (x: int) (y: int) (z: int): bool  = \n  (x == y) && (x == z)", "  (x == y) && (x == z)", "  (x == y)\nlet any_int (x: int) (y: int) (z: int): bool  = \n  (x == y)\nlet any_int (x: string) (y: string) (z: string): bool  = \n  (x == y)\nlet any_int (x: number) (y: number) (z: number): bool  = \n  (x == y)\nlet any_int (x: boolean) (y: boolean) (z: boolean): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any) (y: any) (z: any): bool  = \n  (x == y)\nlet any_int (x: any)", "  (x == y) && (x == z)", "  (x == y) && (x == z)", "  (x == y) || (x == z)", "    (x == y) && (x == z)", "// x = 3.6", "    (x == y) && (x == z)\nlet any_int_2 (x: float) (y: float) (z: float): bool  = \n    (x == y) && (x == z)", "    (x == y) && (x == z)", "    (x == y) && (x == z)\nlet any_int (x: int) (y: int) (z: int): bool  = \n    (x == y) && (x == z)\nlet any_int (x: string) (y: string) (z: string): bool  = \n    (x == y) && (x == z)\nlet any_int (x: number) (y: number) (z: number): bool  = \n    (x == y) && (x == z)\nlet any_int (x: boolean) (y: boolean) (z: boolean): bool  = \n    (x == y) && (x == z)\nlet any_int (x: any) (y: any) (z: any): bool  = \n    (x == y) && (x == z)\nlet any_int (x: any) (y: any) (z: any): bool  = \n    (x == y) && (x == z)\nlet any_int (x: any) (y: any) (z: any): bool  = \n    (x == y) && (x == z)\nlet any_int (x: any) (y: any) (z: any): bool  = \n    (x == y) && (x == z)\nlet any_int (x: any) (y: any) (z: any): bool  = \n    (x == y) && (x == z)\nlet any_int (x: any) (y: any) (z: any): bool  = \n    (x == y) && (x == z)\nlet any_int (x: any) (y: any) (z: any): bool  = \n    (x == y) && (x == z)\nlet any_int (x: any) (y: any) (z: any): bool  = \n    (x == y) && (x == z)\nlet any_int (x: any) (y: any) (z: any): bool  = \n    (x == y) && (x == z)\nlet any_int (x: any) (y: any) (z: any", "// x = 3.6"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}