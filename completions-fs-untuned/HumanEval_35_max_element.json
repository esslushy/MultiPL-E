{"name": "HumanEval_35_max_element", "language": "fs", "prompt": "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlet max_element (l: int list): int  = \n", "tests": "let test() = \n  let candidate = max_element\n  assert (candidate [1; 2; 3] = 3)\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 124; 1; -10] = 124)\n  0\n\ntest()", "completions": ["  l.reduce((x, y) => x + y, 0)", "  l.reduce((x, y) => x + y, 0)", "  l.reduce((x, y) => x + y, 0)", "  l.reduce((x, y) => x + y, 0);", "  l.reduce((x, y) => x + y, 0);", "    l.find(x => x > 0)\n    .value;", "  l.reduce((x, y) => x + y, 0)", "  l.reduce((x, y) => x + y, 0)", "  l.reduce((x, y) => x + y)", "  l.reduce((x, y) => x + y, 0)", "  l.find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x => x > 0)\n  .find(x", "  l.reduce((x, y) => x + y, 0);", "  l.reduce((x, y) => x + y)", "  l.reduce((x, y) => x + y, 0)", "  l.reduce((x, y) => x + y, 0)", "  l.reduce((x, y) => x + y, 0)", "  l.reduce((x, y) => x + y, 0)", "  l.find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i => i > 0)\n  .find(i", "  l.reduce((x, y) => x + y, 0)", "  l.reduce((x, y) => x + y, 0)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}