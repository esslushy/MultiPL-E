{"name": "HumanEval_86_anti_shuffle", "language": "fs", "prompt": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n", "tests": "let test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()", "completions": ["  s.replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^a-zA-Z0-9]/g, ' ')\n  .replace(/[^", "// s is a string of length 1", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b, '')", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b);", "// s: string", "// The function returns a string that is the same as the input string,", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b, '')", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b);", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b);", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b, '')", "// s is a string of words separated by spaces.", "    s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b);", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b, '');", "// s is a string that contains only letters.", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b, '');", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b, '');", "    s.replace(/[^a-zA-Z0-9]/g, ' ')", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b, '');", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b, '');", "  s.split(' ').map(word => word.toUpperCase()).reduce((a, b) => a + b);"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}