{"name": "HumanEval_29_filter_by_prefix", "language": "fs", "prompt": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix (strings: string list) (prefix: string): string list  = \n", "tests": "let test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()", "completions": ["  strings.filter(str => str.startsWith(prefix))", "  strings.map(s => s.substring(0, s.indexOf(prefix)));", "  strings.map(s => s.substring(0, 1))", "  strings.filter(s => s.startsWith(prefix))", "  strings.filter(s => s.startsWith(prefix))", "  strings.filter(str => str.startsWith(prefix))", "  strings.map(s => s.substring(0, 1))", "  strings.filter(str => str.startsWith(prefix));", "  strings.filter(s => s.startsWith(prefix));", "  strings.map(s => s.substring(0, 1))", "  strings.map(s => s.substring(0, 1))", "  strings.filter(s => s.startsWith(prefix))", "  strings.filter(str => str.startsWith(prefix))", "  strings.filter(x => x.startsWith(prefix))", "  strings.filter(str => str.startsWith(prefix));", "  strings.map(s => s.substring(0, 1));", "  strings.map(s => s.substring(0, 1))", "  strings.map(s => s.substring(0, 1));", "  strings.filter(x => x.startsWith(prefix))", "  strings.map(s => s.substring(0, 1));"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}