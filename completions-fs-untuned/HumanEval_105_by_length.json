{"name": "HumanEval_105_by_length", "language": "fs", "prompt": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n// If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\nlet by_length (arr: int list): string list  = \n", "tests": "let test() = \n  let candidate = by_length\n  assert (candidate [2; 1; 1; 4; 5; 8; 2; 3] = [\"Eight\"; \"Five\"; \"Four\"; \"Three\"; \"Two\"; \"Two\"; \"One\"; \"One\"])\n  assert (candidate [] = [])\n  assert (candidate [1; -1; 55] = [\"One\"])\n  assert (candidate [1; -1; 3; 2] = [\"Three\"; \"Two\"; \"One\"])\n  assert (candidate [9; 4; 8] = [\"Nine\"; \"Eight\"; \"Four\"])\n  0\n\ntest()", "completions": ["  arr.sort()\n  .reverse()\n  .map(x => x.toString())\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.substring(0, x.length - 1))\n  .map(x => x.sub", "    [...arr]", "    arr.map((x: int) => x.toString())\n    .sort((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    .reverse()\n    .map((x: int) => x.toString())\n    ", "arr.sort()", "  arr.map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  .map(i => i.toString())\n  .reverse()\n  ", "  [...arr]\n  .sort()\n  .reverse()\n  .map((x: int) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.toString())\n  .join('')\n  .map((x: string) => x.to", "    arr.sort()\n    .reverse()\n    .map((x: int) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x: string) => x.toString())\n    .map((x:", "arr.sort();", "  arr.sort()\n  .reverse()\n  .map(i => i.toString())\n  .join(' ')\n  .split(' ')\n  .map(i => i.toString())\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  .join(' ')\n  ", "[\n  \"One\",\n  \"Two\",\n  \"Three\",\n  \"Four\",\n  \"Five\",\n  \"Six\",\n  \"Seven\",\n  \"Eight\",\n  \"Nine\"\n]", "  arr.sort()\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .reverse()\n  .map(x => x.toString())\n  .join(' ')\n  .", "    arr.sort()\n    .reverse()\n    .map(i => i.toString())\n    .join(' ')\n    .split(' ')\n    .map(i => i.toString())\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    .join(' ')\n    ", "  arr.sort()\n  arr.reverse()\n  return arr.map(x => x.substring(0, 1))", "    arr.sort()\n    .reverse()\n    .map((x: int) => x.toString())\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x: string) => x)\n    .map((x:", "  arr.sort()\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .reverse()\n  .map(x => x.toString())\n  .join('')\n  .", "[...arr]", "  [...arr]\n  .sort()\n  .reverse()\n  .map((x: int) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  .map((x: string) => x.toString())\n  ", "    arr.sort()\n    .reverse()\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x.toString())\n    .join('')\n    .split('')\n    .map(x => x", "[...arr]", "arr.sort();"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}