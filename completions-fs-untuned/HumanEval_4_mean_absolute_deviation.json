{"name": "HumanEval_4_mean_absolute_deviation", "language": "fs", "prompt": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation (numbers: float list): float  = \n", "tests": "let test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()", "completions": ["  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers.reduce((x, y) => x - y) / numbers.length)", "  (numbers.map((x: number) => x - x_mean)\n  .reduce((x: number) => x / (numbers.length - 1))\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) => x)\n  .map((x: number) => x)\n  .reduce((x: number) =>", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers.reduce((x, y) => x - y) / (numbers.reduce((x, y) => x - y, 0) + 1))", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers.reduce((x, y) => x - y) / numbers.length)", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers.map((x: number) => x - x_mean)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((x: number) => x)\n   .reduce((x, y) => x - y)\n   .map((", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers[0] - numbers[1]) / (numbers[0] - numbers[2]) +\n  (numbers[1] - numbers[2]) / (numbers[0] - numbers[3]) +\n  (numbers[2] - numbers[3]) / (numbers[0] - numbers[4]) +\n  (numbers[3] - numbers[4]) / (numbers[0] - numbers[5]) +\n  (numbers[4] - numbers[5]) / (numbers[0] - numbers[6]) +\n  (numbers[5] - numbers[6]) / (numbers[0] - numbers[7]) +\n  (numbers[6] - numbers[7]) / (numbers[0] - numbers[8]) +\n  (numbers[7] - numbers[8]) / (numbers[0] - numbers[9]) +\n  (numbers[8] - numbers[9]) / (numbers[0] - numbers[10]) +\n  (numbers[9] - numbers[10]) / (numbers[0] - numbers[11]) +\n  (numbers[10] - numbers[11]) / (numbers[0] - numbers[12]) +\n  (numbers[11] - numbers[12]) / (numbers[0] - numbers[13]) +\n  (numbers[12] - numbers[13]) / (numbers[0] - numbers[14]) +\n  (numbers[13] - numbers[14]) / (numbers[0] - numbers[15]) +\n  (numbers[14] - numbers[15]) / (numbers[0] - numbers[16]) +\n  (numbers[15] - numbers[16]) / (numbers[0] - numbers[17]) +\n  (numbers[16] - numbers[17]) / (numbers[0] - numbers[18]) +\n  (numbers[17] - numbers[18]) / (numbers[0] - numbers[19]) +\n  (numbers[18] - numbers[19]) / (numbers[0] - numbers[20]) +\n  (numbers[19] - numbers[20]) / (numbers[0", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers[0] - numbers[1]) / (numbers[0] - numbers[2]) +\n  (numbers[1] - numbers[2]) / (numbers[0] - numbers[3]) +\n  (numbers[2] - numbers[3]) / (numbers[0] - numbers[4]) +\n  (numbers[3] - numbers[4]) / (numbers[0] - numbers[5]) +\n  (numbers[4] - numbers[5]) / (numbers[0] - numbers[6]) +\n  (numbers[5] - numbers[6]) / (numbers[0] - numbers[7]) +\n  (numbers[6] - numbers[7]) / (numbers[0] - numbers[8]) +\n  (numbers[7] - numbers[8]) / (numbers[0] - numbers[9]) +\n  (numbers[8] - numbers[9]) / (numbers[0] - numbers[10]) +\n  (numbers[9] - numbers[10]) / (numbers[0] - numbers[11]) +\n  (numbers[10] - numbers[11]) / (numbers[0] - numbers[12]) +\n  (numbers[11] - numbers[12]) / (numbers[0] - numbers[13]) +\n  (numbers[12] - numbers[13]) / (numbers[0] - numbers[14]) +\n  (numbers[13] - numbers[14]) / (numbers[0] - numbers[15]) +\n  (numbers[14] - numbers[15]) / (numbers[0] - numbers[16]) +\n  (numbers[15] - numbers[16]) / (numbers[0] - numbers[17]) +\n  (numbers[16] - numbers[17]) / (numbers[0] - numbers[18]) +\n  (numbers[17] - numbers[18]) / (numbers[0] - numbers[19]) +\n  (numbers[18] - numbers[19]) / (numbers[0] - numbers[20]) +\n  (numbers[19] - numbers[20]) / (numbers[0", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))", "  (numbers.reduce((x, y) => x - y) / (numbers.length - 1))"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}