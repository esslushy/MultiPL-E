{"name": "HumanEval_10_make_palindrome", "language": "fs", "prompt": "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\nlet make_palindrome (string: string): string  = \n", "tests": "let test() = \n  let candidate = make_palindrome\n  assert (candidate \"\" = \"\")\n  assert (candidate \"x\" = \"x\")\n  assert (candidate \"xyz\" = \"xyzyx\")\n  assert (candidate \"xyx\" = \"xyx\")\n  assert (candidate \"jerry\" = \"jerryrrej\")\n  0\n\ntest()", "completions": ["  string.replace(/[a-z]/g, (match: string) => match.charAt(0).toUpperCase() + match.slice(1));", "  (string: string) => string.slice(0, -1)", "  string.split('cat')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.split('cata'))\n  .reduce((a, b)", "  (string: string) => string.slice(0, -1)\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))\n  .map(x => x.slice(0, -1))", "  string.split('cat').reverse().join('catac');", "  string.map((s: string) => s.map((s2: string) => s2.map((s3: string) => s3.map((s4: string) => s4.map((s5: string) => s5.map((s6: string) => s6.map((s7: string) => s7.map((s8: string) => s8.map((s9: string) => s9.map((s10: string) => s10.map((s11: string) => s11.map((s12: string) => s12.map((s13: string) => s13.map((s14: string) => s14.map((s15: string) => s15.map((s16: string) => s16.map((s17: string) => s17.map((s18: string) => s18.map((s19: string) => s19.map((s20: string) => s20.map((s21: string) => s21.map((s22: string) => s22.map((s23: string) => s23.map((s24: string) => s24.map((s25: string) => s25.map((s26: string) => s26.map((s27: string) => s27.map((s28: string) => s28.map((s29: string) => s29.map((s30: string) => s30.map((s31: string) => s31.map((s32: string) => s32.map((s33: string) => s33.map((s34: string) => s34.map((s35: string) => s35.map((s36: string) => s36.map((s37: string) => s37.map((s38: string) => s38.map((s39: string) => s39.map((s40: string) => s40.map((s41: string) => s41.map((s42: string) => s42.map((s43: string) => s43.map((s44: string) => s44.map((s45: string) => s45.map((s46: string) => s46.map((s47:", "    string.split('cat')\n    .map(x => x.substring(0, x.length - 1))\n    .reduce((a, b) => a + b, '')\n    .reverse()\n    .join('')\n    .toLowerCase();", "    (string: string) => string.slice(0, -1)", "  (string: string) => string.slice(0, string.length - 1)", "  string.split('cat')\n  .map(string => string.split('cata')[0])\n  .reduce((a, b) => a + b, '')\n  .reverse()\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .slice(0, -1)\n  .join('cat')\n  .slice(0, -1)\n  .join('cata')\n  .", "  (string: string) => string.slice(0, -1)\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0, -1))\n  .reverse()\n  .map((char: string) => char.slice(0,", "  (string: string) => string.slice(0, -1)", "  string.split('cat')\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b) => a + b)\n  .map(string => string.split('cat').reverse())\n  .reduce((a, b)", "  string.split('cat')\n  .map(s => s.substr(0, 1))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.substr(1))\n  .reverse()\n  .join('')\n  .map(s => s.substr(0, 1))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.substr(1))\n  .reverse()\n  .join('')\n  .map(s => s.substr(0, 1))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.substr(1))\n  .reverse()\n  .join('')\n  .map(s => s.substr(0, 1))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.substr(1))\n  .reverse()\n  .join('')\n  .map(s => s.substr(0, 1))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.substr(1))\n  .reverse()\n  .join('')\n  .map(s => s.substr(0, 1))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.substr(1))\n  .reverse()\n  .join('')\n  .map(s => s.substr(0, 1))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.substr(1))\n  .reverse()\n  .join('')\n  .map(s => s.substr(0, 1))\n  .reduce((a, b) => a + b, '')\n  .map(s => s.substr(1))\n  .reverse()\n  .join('')\n  .map(s => s.substr(0, 1))\n  .reduce((a, b) => a + b, '')\n  .map(s => s", "    string.map(s => s.charAt(0) === s.charAt(1) ? s.slice(1) : s);", "  string.split('cat').reverse().join('catac');", "    (string: string) => string.slice(0, string.length - 1)\n    .reverse()\n    .map(string => string.slice(0, string.length - 1))\n    .join('')\n    .map(string => string.slice(0, string.length - 1))\n    .join('');", "  string.map(s => s.charAt(0) === s.charAt(1) ? s.slice(1) : s);", "  string.split('cat').reverse().join('catac')", "  string.split('cat')\n  .map(string => string.split('cat')[0])\n  .reduce((a, b) => a + b, '')\n  .join('')\n  .toLowerCase();"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}