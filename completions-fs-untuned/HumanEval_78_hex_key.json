{"name": "HumanEval_78_hex_key", "language": "fs", "prompt": "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2.\nlet hex_key (num: string): int  = \n", "tests": "let test() = \n  let candidate = hex_key\n  assert (candidate \"AB\" = 1)\n  assert (candidate \"1077E\" = 2)\n  assert (candidate \"ABED1A33\" = 4)\n  assert (candidate \"2020\" = 2)\n  assert (candidate \"123456789ABCDEF0\" = 6)\n  assert (candidate \"112233445566778899AABBCCDDEEFF00\" = 12)\n  0\n\ntest()", "completions": ["// The key for the hexadecimal number.", "    num.length === 1 ? num[0] : num.length === 2 ? num[0] + \"0\" + num[1] : num;", "    num.toString().toUpperCase().slice(0, 2);", "  num.length === 1 ? num.charCodeAt(0) :\n  num.charCodeAt(0) >>> 0;", "// The key for the hexadecimal digits.\nconst hex_key = \"0x\" + num.toString(16);", "    num.length === 1 ? num[0] : num.charAt(0) === '0' ? num[0] : num.charAt(0) === '1' ? num[1] : num.charAt(0) === '2' ? num[2] : num.charAt(0) === '3' ? num[3] : num.charAt(0) === '4' ? num[4] : num.charAt(0) === '5' ? num[5] : num.charAt(0) === '6' ? num[6] : num.charAt(0) === '7' ? num[7] : num.charAt(0) === '8' ? num[8] : num.charAt(0) === '9' ? num[9] : num.charAt(0) === 'A' ? num[10] : num.charAt(0) === 'B' ? num[11] : num.charAt(0) === 'C' ? num[12] : num.charAt(0) === 'D' ? num[13] : num.charAt(0) === 'E' ? num[14] : num.charAt(0) === 'F' ? num[15] : num.charAt(0) === '0' ? num[16] : num.charAt(0) === '1' ? num[17] : num.charAt(0) === '2' ? num[18] : num.charAt(0) === '3' ? num[19] : num.charAt(0) === '4' ? num[20] : num.charAt(0) === '5' ? num[21] : num.charAt(0) === '6' ? num[22] : num.charAt(0) === '7' ? num[23] : num.charAt(0) === '8' ? num[24] : num.charAt(0) === '9' ? num[25] : num.charAt(0) === 'A' ? num[26] : num.charAt(0) === 'B' ? num[27] : num.charAt(0) === 'C' ? num[28] : num.charAt(0)", "  num.toString().split(\"\").map(x => x.toUpperCase()).reduce((a, b) => a + b, 0);", "  num.split('0').map(x => x.length).reduce((a, b) => a + b);", "  num.split('0').reduce((num: string) => num, '')\nlet hex_digits (num: string): int = \n  num.split('0').reduce((num: string) => num, '')", "  num.toString().toUpperCase().length;", "  num.toString().length;", "// The key for the hexadecimal digits.\nconst hex_key = \"ABED1A33\"", "    num.toString().split(\"\")[0].toUpperCase()", "// The function returns the number of the hexadecimal digits of the ", "  num.toString(16).toUpperCase().slice(0, 2);", "// The key for the hexadecimal digits.", "// The function returns the number of the hexadecimal digits in the ", "  num.toString(16).toUpperCase()", "// The function returns the number of the hexadecimal digits of the ", "// For num = \"AB\" the output should be 1."], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}