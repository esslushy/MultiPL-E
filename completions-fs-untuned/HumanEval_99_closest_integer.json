{"name": "HumanEval_99_closest_integer", "language": "fs", "prompt": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlet closest_integer (value: string): int  = \n", "tests": "let test() = \n  let candidate = closest_integer\n  assert (candidate \"10\" = 10)\n  assert (candidate \"14.5\" = 15)\n  assert (candidate \"-15.5\" = -16)\n  assert (candidate \"15.3\" = 15)\n  assert (candidate \"0\" = 0)\n  0\n\ntest()", "completions": ["  function (value: string) {\n    if (value === \"\") {\n      return 0;\n    }\n    let i = 0;\n    let j = value.length;\n    while (i < j) {\n      let temp = value.charCodeAt(i) - value.charCodeAt(i - 1);\n      if (temp === 0) {\n        return value.charCodeAt(i);\n      }\n      i++;\n    }\n    return value.charCodeAt(i - 1);\n  }", "  (value: string) =>\n    (value: number) =>\n      (value: number) =>\n        (value: number) =>\n          (value: number) =>\n            (value: number) =>\n              (value: number) =>\n                (value: number) =>\n                  (value: number) =>\n                    (value: number) =>\n                      (value: number) =>\n                        (value: number) =>\n                          (value: number) =>\n                            (value: number) =>\n                              (value: number) =>\n                               (value: number) =>\n                                 (value: number) =>\n                                  (value: number) =>\n                                    (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                    ", "  function (value: string) {\n    let i = 0;\n    let max = Math.pow(10, value.length);\n    while (i < value.length) {\n      let num = parseInt(value.substr(i, 1), 10);\n      if (num <= max) {\n        return num;\n      }\n      i += 1;\n    }\n    return value.length;\n  }", "  (value: string) =>\n    (value: number) =>\n      (value: number) =>\n        (value: number) =>\n          (value: number) =>\n            (value: number) =>\n              (value: number) =>\n                (value: number) =>\n                  (value: number) =>\n                    (value: number) =>\n                      (value: number) =>\n                        (value: number) =>\n                          (value: number) =>\n                            (value: number) =>\n                              (value: number) =>\n                               (value: number) =>\n                                 (value: number) =>\n                                   (value: number) =>\n                                    (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                    ", "  function (value: string) {\n    let closest = Math.floor(Math.abs(value) / Math.abs(value));\n    if (value == value) {\n      return closest;\n    }\n    return closest + 1;\n  };", "  (value: string) =>\n    (value: number) =>\n      (value: number) =>\n        (value: number) =>\n          (value: number) =>\n            (value: number) =>\n              (value: number) =>\n                (value: number) =>\n                  (value: number) =>\n                    (value: number) =>\n                      (value: number) =>\n                        (value: number) =>\n                          (value: number) =>\n                            (value: number) =>\n                              (value: number) =>\n                               (value: number) =>\n                                 (value: number) =>\n                                   (value: number) =>\n                                    (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                    ", "  function (value: string) {\n    let i = value.toLowerCase().indexOf(value.toLowerCase().charAt(0));\n    if (i === -1) {\n      return value.toLowerCase().charAt(0);\n    }\n    return i;\n  }", "  (value: string) =>\n    (value: number) =>\n      (value: number) =>\n        (value: number) =>\n          (value: number) =>\n            (value: number) =>\n              (value: number) =>\n                (value: number) =>\n                  (value: number) =>\n                    (value: number) =>\n                      (value: number) =>\n                        (value: number) =>\n                          (value: number) =>\n                            (value: number) =>\n                              (value: number) =>\n                               (value: number) =>\n                                 (value: number) =>\n                                  (value: number) =>\n                                    (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                    ", "  function (value: string) {\n    let closest = 0;\n    let i = 0;\n    let j = 0;\n    let max = value.length;\n    for (i = 0; i < max; i++) {\n      if (value[i] === '0') {\n        closest = value.charCodeAt(i);\n        break;\n      }\n      if (value[i] === '1') {\n        closest = value.charCodeAt(i);\n        break;\n      }\n    }\n    return closest;\n  }", "  (value: string) =>\n    (value: number) =>\n      (value: number) =>\n        (value: number) =>\n          (value: number) =>\n            (value: number) =>\n              (value: number) =>\n                (value: number) =>\n                  (value: number) =>\n                    (value: number) =>\n                      (value: number) =>\n                        (value: number) =>\n                          (value: number) =>\n                            (value: number) =>\n                              (value: number) =>\n                               (value: number) =>\n                                 (value: number) =>\n                                  (value: number) =>\n                                    (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                    ", "  (value: string) =>\n    (value: number) =>\n      (value: number) =>\n        (value: number) =>\n          (value: number) =>\n            (value: number) =>\n              (value: number) =>\n                (value: number) =>\n                  (value: number) =>\n                    (value: number) =>\n                      (value: number) =>\n                        (value: number) =>\n                          (value: number) =>\n                            (value: number) =>\n                              (value: number) =>\n                               (value: number) =>\n                                 (value: number) =>\n                                   (value: number) =>\n                                    (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                    ", "  function (value: string) {\n    let closest = Math.floor(Math.abs(value) / Math.abs(value))\n    return closest * Math.abs(value)\n  }", "  function (value: string) {\n    let i = 0;\n    let max = Math.pow(10, value.length);\n    while (i < value.length) {\n      let num = Math.floor(Math.pow(10, i));\n      if (value.charAt(i) === \".\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \"-\") {\n        num = Math.round(-num);\n      }\n      if (value.charAt(i) === \"+\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \".\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \"-\") {\n        num = Math.round(-num);\n      }\n      if (value.charAt(i) === \"+\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \".\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \"0\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \".\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \"0\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \".\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \"0\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \".\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \"0\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \".\") {\n        num = Math.round(num);\n      }\n      if (value.charAt(i) === \"0\") {\n        num = Math.round(num);\n      ", "  (value: string) =>\n    (value: number) =>\n      (value: number) =>\n        (value: number) =>\n          (value: number) =>\n            (value: number) =>\n              (value: number) =>\n                (value: number) =>\n                  (value: number) =>\n                    (value: number) =>\n                      (value: number) =>\n                        (value: number) =>\n                          (value: number) =>\n                            (value: number) =>\n                              (value: number) =>\n                               (value: number) =>\n                                 (value: number) =>\n                                   (value: number) =>\n                                    (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                    ", "  (value: string) =>\n    (value: number) =>\n      (value: number) =>\n        (value: number) =>\n          (value: number) =>\n            (value: number) =>\n              (value: number) =>\n                (value: number) =>\n                  (value: number) =>\n                    (value: number) =>\n                      (value: number) =>\n                        (value: number) =>\n                          (value: number) =>\n                            (value: number) =>\n                              (value: number) =>\n                               (value: number) =>\n                                 (value: number) =>\n                                  (value: number) =>\n                                    (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                    ", "  function (value: string) {\n    let closest = Math.floor(Math.abs(value) / Math.abs(value));\n    return closest * Math.abs(value);\n  }", "  (value: string) =>\n    value.toLowerCase().indexOf(value.toLowerCase().charAt(0))", "  (value: string) =>\n    (value: number) =>\n      (value: number) =>\n        (value: number) =>\n          (value: number) =>\n            (value: number) =>\n              (value: number) =>\n                (value: number) =>\n                  (value: number) =>\n                    (value: number) =>\n                      (value: number) =>\n                        (value: number) =>\n                          (value: number) =>\n                            (value: number) =>\n                              (value: number) =>\n                               (value: number) =>\n                                 (value: number) =>\n                                  (value: number) =>\n                                   (value: number) =>\n                                    (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      (value: number) =>\n                                      ", "  (value: string) => {\n    let min = value;\n    let max = value;\n    let i = 0;\n    let j = 0;\n    while (i < value.length) {\n      j = i;\n      while (j < value.length) {\n        if (value[j] === value[i]) {\n          min = value[i];\n          i++;\n        } else {\n          j++;\n        }\n      }\n      i++;\n    }\n    return min;\n  }", "  function (value: string) {\n    let i = 0;\n    let max = value.length;\n    let min = max - 1;\n    while (i < max) {\n      let temp = value.charCodeAt(i) - 0x30;\n      if (temp < 0) {\n        i++;\n        continue;\n      }\n      if (temp == 0) {\n        return value.charCodeAt(i);\n      }\n      if (temp == 1) {\n        i++;\n        continue;\n      }\n      if (temp == 2) {\n        i++;\n        continue;\n      }\n      if (temp == 3) {\n        i++;\n        continue;\n      }\n      if (temp == 4) {\n        i++;\n        continue;\n      }\n      if (temp == 5) {\n        i++;\n        continue;\n      }\n      if (temp == 6) {\n        i++;\n        continue;\n      }\n      if (temp == 7) {\n        i++;\n        continue;\n      }\n      if (temp == 8) {\n        i++;\n        continue;\n      }\n      if (temp == 9) {\n        i++;\n        continue;\n      }\n      if (temp == 10) {\n        i++;\n        continue;\n      }\n      if (temp == 11) {\n        i++;\n        continue;\n      }\n      if (temp == 12) {\n        i++;\n        continue;\n      }\n      if (temp == 13) {\n        i++;\n        continue;\n      }\n      if (temp == 14) {\n        i++;\n        continue;\n      }\n      if (temp == 15) {\n        i++;\n        continue;\n      }\n      if (temp == 16) {\n        i++;\n        continue;\n      }\n      if (temp == 17) {\n        i++;\n        continue;\n      }\n      if (temp == 18) {\n        i++;\n        continue;\n      }\n      if (temp == 19) {\n        i++;\n        continue;\n      }\n      if (temp == 20) {\n        i++;\n        continue;\n      }\n      if (temp == 21) {"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}