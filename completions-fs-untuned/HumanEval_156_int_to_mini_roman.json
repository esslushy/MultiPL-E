{"name": "HumanEval_156_int_to_mini_roman", "language": "fs", "prompt": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nlet int_to_mini_roman (number: int): string  = \n", "tests": "let test() = \n  let candidate = int_to_mini_roman\n  assert (candidate 19 = \"xix\")\n  assert (candidate 152 = \"clii\")\n  assert (candidate 251 = \"ccli\")\n  assert (candidate 426 = \"cdxxvi\")\n  assert (candidate 500 = \"d\")\n  assert (candidate 1 = \"i\")\n  assert (candidate 4 = \"iv\")\n  assert (candidate 43 = \"xliii\")\n  assert (candidate 90 = \"xc\")\n  assert (candidate 94 = \"xciv\")\n  assert (candidate 532 = \"dxxxii\")\n  assert (candidate 900 = \"cm\")\n  assert (candidate 994 = \"cmxciv\")\n  assert (candidate 1000 = \"m\")\n  0\n\ntest()", "completions": ["  (number < 1000) ? 'x' + number : 'i' + number;", "  (number > 0) ? 'x' + str(number) : 'x'\nlet roman_to_int: string = \n  (number > 0) ? 'x' + str(number) : 'x'", "    `${number} ${number.toString()}`;", "  `${number}`;", "  (number > 0) ? 'x' : 'i'\nlet mini_roman_to_int: string = \n  (number > 0) ? 'x' : 'i'", "  `${number}`;", "  (number > 0) ? 'x' : 'i'\nlet roman_to_int (roman: string): int =\n  (roman.length() > 1) ? roman.substr(0, 1) : 0", "  `\"xix\"`\nlet int_to_mini_roman (number: number): string = \n  `\"clii\"`\nlet int_to_mini_roman (number: number): string = \n  `\"cdxxvi\"`\nlet int_to_mini_roman (number: number): string = \n  `\"xix\"`\nlet int_to_mini_roman (number: number): string = \n  `\"clii\"`\nlet int_to_mini_roman (number: number): string = \n  `\"cdxxvi\"`\nlet int_to_mini_roman (number: number): string = \n  `\"xix\"`\nlet int_to_mini_roman (number: number): string = \n  `\"clii\"`\nlet int_to_mini_roman (number: number): string = \n  `\"cdxxvi\"`\nlet int_to_mini_roman (number: number): string = \n  `\"xix\"`\nlet int_to_mini_roman (number: number): string = \n  `\"clii\"`\nlet int_to_mini_roman (number: number): string = \n  `\"cdxxvi\"`\nlet int_to_mini_roman (number: number): string = \n  `\"xix\"`\nlet int_to_mini_roman (number: number): string = \n  `\"clii\"`\nlet int_to_mini_roman (number: number): string = \n  `\"cdxxvi\"`\nlet int_to_mini_roman (number: number): string = \n  `\"xix\"`\nlet int_to_mini_roman (number: number): string = \n  `\"clii\"`\nlet int_to_mini_roman (number: number): string = \n  `\"cdxxvi\"`\nlet int_to_mini_roman (number: number): string = \n  `\"xix\"`\nlet int_to_mini_roman (number: number): string = \n  `\"clii\"`\nlet int_to_mini_roman (number: number): string = \n  `\"cdxxvi", "    `\n    case number:\n        return 'xix'\n    case number < 0:\n        return 'clii'\n    case number < 1000:\n        return 'cdxxvi'\n    default:\n        return 'xix'\n    `", "  `${number}`;", "  `${number}`;", "  `${number}`;", "  `${number}`;", "  (number < 1000 ? 'x' : 'i') + (number < 100 ? 'v' : 'i') + (number < 10 ? 'x' : 'i') + number;", "  `${number}`;", "  (number > 0) ? 'x' : 'i'\nlet roman_to_int: string = \n  (number > 0) ? 'x' : 'i'", "  (number > 0 ? 'x' : 'i') +\n  (number < 1000 ? 'v' : 'i') +\n  (number < 100 ? 'x' : 'i') +\n  (number < 10 ? 'x' : 'i') +\n  (number < 1 ? 'x' : 'i') +\n  (number < 2 ? 'x' : 'i') +\n  (number < 3 ? 'x' : 'i') +\n  (number < 4 ? 'x' : 'i') +\n  (number < 5 ? 'x' : 'i') +\n  (number < 6 ? 'x' : 'i') +\n  (number < 7 ? 'x' : 'i') +\n  (number < 8 ? 'x' : 'i') +\n  (number < 9 ? 'x' : 'i') +\n  (number < 10 ? 'x' : 'i') +\n  (number < 11 ? 'x' : 'i') +\n  (number < 12 ? 'x' : 'i') +\n  (number < 13 ? 'x' : 'i') +\n  (number < 14 ? 'x' : 'i') +\n  (number < 15 ? 'x' : 'i') +\n  (number < 16 ? 'x' : 'i') +\n  (number < 17 ? 'x' : 'i') +\n  (number < 18 ? 'x' : 'i') +\n  (number < 19 ? 'x' : 'i') +\n  (number < 20 ? 'x' : 'i') +\n  (number < 21 ? 'x' : 'i') +\n  (number < 22 ? 'x' : 'i') +\n  (number < 23 ? 'x' : 'i') +\n  (number < 24 ? 'x' : 'i') +\n  (number < 25 ? 'x' : 'i') +\n  (number < 26 ? 'x' : 'i') +\n  (number < 27 ? 'x' : 'i') +\n  (number < 28 ? 'x' : 'i') +\n  (number < 29 ? 'x' : 'i') +\n  (number < 30 ? 'x' : 'i') +\n  (", "  (number > 0 ? 'x' : 'i') + (number < 1000 ? 'v' : 'i') + (number < 100 ? 'x' : 'i') + (number < 10 ? 'i' : 'x') + (number < 1 ? 'i' : 'x') + (number < 10 ? 'i' : 'x') + (number < 100 ? 'i' : 'x') + (number < 1000 ? 'i' : 'x') + 'i'\nlet roman_to_int = (number: string) => {\n  let roman_num = number.split('i')[0]\n  let roman_num_str = roman_num.toLowerCase()\n  let roman_num_str_len = roman_num_str.length\n  let roman_num_str_len_max = roman_num_str_len - 1\n  let roman_num_str_len_min = roman_num_str_len_max - 1\n  let roman_num_str_len_min_max = roman_num_str_len_min + roman_num_str_len_max\n  let roman_num_str_len_min_max_len = roman_num_str_len_min_max - 1\n  let roman_num_str_len_min_max_len_max = roman_num_str_len_min_max + roman_num_str_len_max\n  let roman_num_str_len_min_max_len_max_len = roman_num_str_len_min_max_len - 1\n  let roman_num_str_len_min_max_len_max_len = roman_num_str_len_min_max_len_max - 1\n  let roman_num_str_len_min_max_len_max_len_max = roman_num_str_len_min_max_len_max + roman_num_str_len_max\n  let roman_num_str_len_min_max_len_max_len_max = roman_num_str_len_min_max_len_max +", "  `${number}`;", "  `${number}`;"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}