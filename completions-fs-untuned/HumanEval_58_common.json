{"name": "HumanEval_58_common", "language": "fs", "prompt": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nlet common (l1: int list) (l2: int list): int list  = \n", "tests": "let test() = \n  let candidate = common\n  assert (candidate [1; 4; 3; 34; 653; 2; 5] [5; 7; 1; 5; 9; 653; 121] = [1; 5; 653])\n  assert (candidate [5; 3; 2; 8] [3; 2] = [2; 3])\n  assert (candidate [4; 3; 2; 8] [3; 2; 4] = [2; 3; 4])\n  assert (candidate [4; 3; 2; 8] [] = [])\n  0\n\ntest()", "completions": ["  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2)", "  l1.sort()\n  l2.sort()\n  return l1.reduce((x, y) => x + y)", "  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2[0])", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2[0])", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2.head)", "  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2.head)", "  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2.head)", "  l1.sort()\n  l2.sort()\n  return common(l1) + common(l2)", "  l1.sort()\n  l2.sort()\n  return l1.indexOf(l2.head)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}