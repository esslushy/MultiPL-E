{"name": "HumanEval_161_solve", "language": "fs", "prompt": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve (s: string): string  = \n", "tests": "let test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()", "completions": ["  s.split(\"\").reverse().join(\"\");", "  s.split(\"\").reverse().join(\"\");", "  (s.toLowerCase().replace(/[^a-z]/g, \"\")).toLowerCase().replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]/g, \"\")\n  .replace(/[^a-z]", "  (s.charAt(i) == '#') ? s.substr(0, i) : s.substr(i);", "  s.toLowerCase().replace(/[^a-z]/g, \"\").split(\"\").reverse().join(\"\");", "  s.split(\"\").reverse().join(\"\");", "  (s.charAt(i) == '#') ? s.substr(i + 1, 2) : s.substr(i);", "  (s.toLowerCase()).replace(/[^a-z]/g, \"\").split(\"\");", "  (s.charAt(i) == '@') ? s.substring(i, i + 1) : s.substring(i);", "    s.toLowerCase().replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^a-z0-9]/g, \"\")\n    .replace(/[^", "  s.toLowerCase().replace(/[^a-z0-9]/g, \"\").split(\"\");", "  s.toLowerCase().split(\"\").reverse().join(\"\");", "  (s.charAt(i) == '@') ? s.substr(0, i) : s.substr(i);", "  s.split(\"\").reverse().join(\"\");", "    s.split(\"\").reverse().join(\"\");", "  s.toLowerCase().replace(/[^a-z]/g, \"\").split(\"\");", "  s.toLowerCase().map(letter => letter.toUpperCase()).join('');", "  s.split(\"\").reverse().join(\"\");", "  (s.charAt(i) == '#') ? s.substring(i + 1, s.length) : s.substring(i, s.length);", "  (s.charAt(i) == '#') ? s.substring(i, i + 1) : s.substring(i, i + 1);"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}