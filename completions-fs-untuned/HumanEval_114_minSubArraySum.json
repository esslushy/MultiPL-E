{"name": "HumanEval_114_minSubArraySum", "language": "fs", "prompt": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlet minSubArraySum (nums: int list): int  = \n", "tests": "let test() = \n  let candidate = minSubArraySum\n  assert (candidate [2; 3; 4; 1; 2; 4] = 1)\n  assert (candidate [-1; -2; -3] = -6)\n  assert (candidate [-1; -2; -3; 2; -10] = -14)\n  assert (candidate [-9999999999999999] = -9999999999999999)\n  assert (candidate [0; 10; 20; 1000000] = 0)\n  assert (candidate [-1; -2; -3; 10; -5] = -6)\n  assert (candidate [100; -1; -2; -3; 10; -5] = -6)\n  assert (candidate [10; 11; 13; 8; 3; 4] = 3)\n  assert (candidate [100; -33; 32; -1; 0; -2] = -33)\n  assert (candidate [-10] = -10)\n  assert (candidate [7] = 7)\n  assert (candidate [1; -1] = -1)\n  0\n\ntest()", "completions": ["    nums.reduce((sum, num) => sum + num)", "    nums.reduce((sum, val) => sum + val, 0)", "  nums.reduce((sum, val) => sum + val, 0)", "  min(nums)", "  nums.reduce((sum, val) => sum + val, 0)", "  nums.reduce((sum, val) => sum + val, 0)", "  nums.reduce((sum, val) => sum + val, 0);", "  nums.reduce((sum, val) => sum + val, 0)", "  nums.reduce((sum, val) => sum + val, 0);", "  nums.reduce((sum, val) => sum + val, 0)", "  nums.reduce((sum, num) => sum + num, 0);", "  nums.reduce((sum, num) => sum + num, 0)", "  nums.reduce((sum, val) => sum + val, 0)", "  nums.reduce((sum, num) => sum + num, 0);", "  nums.reduce((sum, val) => sum + val, 0);", "  nums.reduce((sum, i) => sum + i, 0)", "  nums.reduce((sum, val) => sum + val, 0)", "  nums.reduce((sum, val) => sum + val, 0)", "  nums.reduce((sum, val) => sum + val, 0)", "  nums.reduce((sum, val) => sum + val, 0)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}