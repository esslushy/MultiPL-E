{"name": "HumanEval_140_fix_spaces", "language": "fs", "prompt": "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\nlet fix_spaces (text: string): string  = \n", "tests": "let test() = \n  let candidate = fix_spaces\n  assert (candidate \"Example\" = \"Example\")\n  assert (candidate \"Mudasir Hanif \" = \"Mudasir_Hanif_\")\n  assert (candidate \"Yellow Yellow  Dirty  Fellow\" = \"Yellow_Yellow__Dirty__Fellow\")\n  assert (candidate \"Exa   mple\" = \"Exa-mple\")\n  assert (candidate \"   Exa 1 2 2 mple\" = \"-Exa_1_2_2_mple\")\n  0\n\ntest()", "completions": ["    text.replace(/\\s+/g, \"_\");", "  text.replace(/\\s+/g, \"_\");", "    text.replace(/\\s+/g, \"_\");", "    text.replace(/\\s+/g, \"_\");", "    text.replace(/\\s+/g, \"_\");", "  text.replace(/\\s+/g, \"_\")\nlet fix_spaces_2 (text: string): string  = \n  text.replace(/\\s+/g, \"_\")", "    text.replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/\\s+/g, \"_\").replace(/", "    text.replace(/\\s+/g, \"_\");", "  text.replace(/\\s+/g, \"_\");", "  text.replace(/\\s+/g, \"_\");", "  text.replace(/\\s+/g, \"_\");", "  text.replace(/\\s+/g, \"_\")\nlet fix_spaces_2 (text: string): string  = \n  text.replace(/\\s+/g, \"_\")", "  text.replace(/\\s+/g, \"-\")\nlet fix_spaces_2 (text: string): string  = \n  text.replace(/\\s+/g, \"-\")", "  text.replace(/\\s+/g, \"_\");", "  text.replace(/\\s+/g, \"_\")", "  text.replace(/\\s+/g, \"_\");", "  text.replace(/\\s+/g, \"_\")\nlet fix_spaces_2 (text: string): string  = \n  text.replace(/\\s+/g, \"_\")\nlet fix_spaces_3 (text: string): string  = \n  text.replace(/\\s+/g, \"_\")", "    text.replace(/\\s+/g, \"_\");", "  text.replace(/\\s+/g, \"_\");", "    text.replace(/\\s+/g, \"_\");"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}