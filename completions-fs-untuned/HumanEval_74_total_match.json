{"name": "HumanEval_74_total_match", "language": "fs", "prompt": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// total_match([], []) \u00e2\u017e\u017e []\n// total_match(['hi', 'admin'], ['hI', 'Hi']) \u00e2\u017e\u017e ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u00e2\u017e\u017e ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u00e2\u017e\u017e ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5']) \u00e2\u017e\u017e ['4']\nlet total_match (lst1: string list) (lst2: string list): string list  = \n", "tests": "let test() = \n  let candidate = total_match\n  assert (candidate [] [] = [])\n  assert (candidate [\"hi\"; \"admin\"] [\"hi\"; \"hi\"] = [\"hi\"; \"hi\"])\n  assert (candidate [\"hi\"; \"admin\"] [\"hi\"; \"hi\"; \"admin\"; \"project\"] = [\"hi\"; \"admin\"])\n  assert (candidate [\"4\"] [\"1\"; \"2\"; \"3\"; \"4\"; \"5\"] = [\"4\"])\n  assert (candidate [\"hi\"; \"admin\"] [\"hI\"; \"Hi\"] = [\"hI\"; \"Hi\"])\n  assert (candidate [\"hi\"; \"admin\"] [\"hI\"; \"hi\"; \"hi\"] = [\"hI\"; \"hi\"; \"hi\"])\n  assert (candidate [\"hi\"; \"admin\"] [\"hI\"; \"hi\"; \"hii\"] = [\"hi\"; \"admin\"])\n  assert (candidate [] [\"this\"] = [])\n  assert (candidate [\"this\"] [] = [])\n  0\n\ntest()", "completions": ["    lst1.map(s => s.length).reduce((sum, s) => sum + s.length);", "  total_match(lst1, lst2)", "    lst1.filter(x => x < lst2.length)", "  total_match(lst1, lst2)", "    lst1.filter(x => x.length < x.length + 1)", "    lst1.filter(x => x.length < x.length + 1)", "  total_match(lst1, lst2)", "  total_match(lst1, lst2)", "  total_match(lst1, lst2)", "  total_match(lst1, lst2)", "  total_match(lst1, lst2)", "    lst1.filter(x => x.length < x.length + 1)", "    lst1.filter(x => x.length < x.length - 1)\nlet total_match (lst1: string list) (lst2: string list): string list  = \n    lst1.filter(x => x.length > 1)", "  total_match(lst1, lst2)", "    lst1.filter(x => x.length < x.length - 1)\nlet total_match (lst1: string list) (lst2: string list): string list  = \n    lst1.filter(x => x.length < x.length - 1)", "  total_match(lst1, lst2)", "  total_match(lst1, lst2)", "  total_match(lst1, lst2)", "  total_match(lst1, lst2)", "    lst1.filter(x => x.length < x.length + 1)\nlet total_match (lst1: string list) (lst2: string list): string list = \n    lst1.filter(x => x.length < x.length + 1)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}