{"name": "HumanEval_40_triples_sum_to_zero", "language": "fs", "prompt": "//triples_sum_to_zero takes a list of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n// False\nlet triples_sum_to_zero (l: int list): bool  = \n", "tests": "let test() = \n  let candidate = triples_sum_to_zero\n  assert (candidate [1; 3; 5; 0] = false)\n  assert (candidate [1; 3; 5; -1] = false)\n  assert (candidate [1; 3; -2; 1] = true)\n  assert (candidate [1; 2; 3; 7] = false)\n  assert (candidate [1; 2; 5; 7] = false)\n  assert (candidate [2; 4; -5; 3; 9; 7] = true)\n  assert (candidate [1] = false)\n  assert (candidate [1; 3; 5; -100] = false)\n  assert (candidate [100; 3; 5; -100] = false)\n  0\n\ntest()", "completions": ["  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == 0 :\n  (l.length == 2) ? l[0] == 1 && l[1] == 0 :\n  (l.length == 3) ? l[0] == 1 && l[1] == 1 && l[2] == 0 :\n  (l.length == 4) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 0 :\n  (l.length == 5) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 0 :\n  (l.length == 6) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 0 :\n  (l.length == 7) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 0 :\n  (l.length == 8) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 0 :\n  (l.length == 9) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 0 :\n  (l.length == 10) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 1 && l[9] == 0 :\n  (l.length == 11) ? l[0] == 1", "  l.some(i => i == 0)\n  .some(i => i == 1)\n  .some(i => i == 2)\n  .some(i => i == 3)\n  .some(i => i == 4)\n  .some(i => i == 5)\n  .some(i => i == 6)\n  .some(i => i == 7)\n  .some(i => i == 8)\n  .some(i => i == 9)\n  .some(i => i == 10)\n  .some(i => i == 11)\n  .some(i => i == 12)\n  .some(i => i == 13)\n  .some(i => i == 14)\n  .some(i => i == 15)\n  .some(i => i == 16)\n  .some(i => i == 17)\n  .some(i => i == 18)\n  .some(i => i == 19)\n  .some(i => i == 20)\n  .some(i => i == 21)\n  .some(i => i == 22)\n  .some(i => i == 23)\n  .some(i => i == 24)\n  .some(i => i == 25)\n  .some(i => i == 26)\n  .some(i => i == 27)\n  .some(i => i == 28)\n  .some(i => i == 29)\n  .some(i => i == 30)\n  .some(i => i == 31)\n  .some(i => i == 32)\n  .some(i => i == 33)\n  .some(i => i == 34)\n  .some(i => i == 35)\n  .some(i => i == 36)\n  .some(i => i == 37)\n  .some(i => i == 38)\n  .some(i => i == 39)\n  .some(i => i == 40)\n  .some(i => i == 41)\n  .some(i => i == 42)\n  .some(i => i == 43)\n  .some(i => i == 44)\n  .some(i => i == 45)\n  .some(i", "  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == 0 :\n  (l.length == 2) ? l[0] == 1 && l[1] == 0 :\n  (l.length == 3) ? l[0] == 1 && l[1] == 1 && l[2] == 0 :\n  (l.length == 4) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 0 :\n  (l.length == 5) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 0 :\n  (l.length == 6) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 0 :\n  (l.length == 7) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 0 :\n  (l.length == 8) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 0 :\n  (l.length == 9) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 0 :\n  (l.length == 10) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 1 && l[9] == 0 :\n  (l.length == 11) ? l[0] == 1", "  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == 0 :\n  (l.length == 2) ? l[0] == l[1] == 0 :\n  (l.length == 3) ? l[0] == l[1] == l[2] == 0 :\n  (l.length == 4) ? l[0] == l[1] == l[2] == l[3] == 0 :\n  (l.length == 5) ? l[0] == l[1] == l[2] == l[3] == l[4] == 0 :\n  (l.length == 6) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == 0 :\n  (l.length == 7) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == 0 :\n  (l.length == 8) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == 0 :\n  (l.length == 9) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == 0 :\n  (l.length == 10) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == l[9] == 0 :\n  (l.length == 11) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == l[9] == l[10] == 0 :\n  (l.length == 12) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5]", "    (l.length == 0) ? false :\n    (l.length == 1) ? l[0] == 0 :\n    (l.length == 2) ? l[0] == 1 && l[1] == 0 :\n    (l.length == 3) ? l[0] == 1 && l[1] == 1 && l[2] == 0 :\n    (l.length == 4) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 0 :\n    (l.length == 5) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 0 :\n    (l.length == 6) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 0 :\n    (l.length == 7) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 0 :\n    (l.length == 8) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 0 :\n    (l.length == 9) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 0 :\n    (l.length == 10) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 1 && l[9] == 0 :\n    (l.length == 11) ? l[0] == 1", "  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == 0 :\n  (l.length == 2) ? l[0] == l[1] == 0 :\n  (l.length == 3) ? l[0] == l[1] == l[2] == 0 :\n  (l.length == 4) ? l[0] == l[1] == l[2] == l[3] == 0 :\n  (l.length == 5) ? l[0] == l[1] == l[2] == l[3] == l[4] == 0 :\n  (l.length == 6) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == 0 :\n  (l.length == 7) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == 0 :\n  (l.length == 8) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == 0 :\n  (l.length == 9) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == 0 :\n  (l.length == 10) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == l[9] == 0 :\n  (l.length == 11) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5] == l[6] == l[7] == l[8] == l[9] == l[10] == 0 :\n  (l.length == 12) ? l[0] == l[1] == l[2] == l[3] == l[4] == l[5]", "  l.filter(i => i % 2 == 0)\n  .map(i => i % 2 == 0)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((sum, i) => sum + i)\n  .map(i => i)\n  .reduce((", "  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == 0 :\n  (l.length == 2) ? l[0] == 1 && l[1] == 0 :\n  (l.length == 3) ? l[0] == 1 && l[1] == 1 && l[2] == 0 :\n  (l.length == 4) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 0 :\n  (l.length == 5) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 0 :\n  (l.length == 6) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 0 :\n  (l.length == 7) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 0 :\n  (l.length == 8) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 0 :\n  (l.length == 9) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 0 :\n  (l.length == 10) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 1 && l[9] == 0 :\n  (l.length == 11) ? l[0] == 1", "  (l.length == 2 && l[0] == l[1]) ||\n  (l.length == 3 && l[0] == l[1] && l[2] == l[3]) ||\n  (l.length == 4 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5]) ||\n  (l.length == 5 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7]) ||\n  (l.length == 6 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9]) ||\n  (l.length == 7 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == l[11]) ||\n  (l.length == 8 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == l[11] && l[12] == l[13]) ||\n  (l.length == 9 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == l[11] && l[12] == l[13] && l[14] == l[15]) ||\n  (l.length == 10 && l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == l[11] && l[12] == l[13] && l[", "  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == 0 :\n  (l.length == 2) ? l[0] == 1 && l[1] == 0 :\n  (l.length == 3) ? l[0] == 1 && l[1] == 1 && l[2] == 0 :\n  (l.length == 4) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 0 :\n  (l.length == 5) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 0 :\n  (l.length == 6) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 0 :\n  (l.length == 7) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 0 :\n  (l.length == 8) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 0 :\n  (l.length == 9) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 0 :\n  (l.length == 10) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 1 && l[9] == 0 :\n  (l.length == 11) ? l[0] == 1", "  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == 0 :\n  (l.length == 2) ? l[0] == 1 && l[1] == 0 :\n  (l.length == 3) ? l[0] == 1 && l[1] == 1 && l[2] == 0 :\n  (l.length == 4) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 0 :\n  (l.length == 5) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 0 :\n  (l.length == 6) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 0 :\n  (l.length == 7) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 0 :\n  (l.length == 8) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 0 :\n  (l.length == 9) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 0 :\n  (l.length == 10) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 1 && l[9] == 0 :\n  (l.length == 11) ? l[0] == 1", "  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == 0 :\n  (l.length == 2) ? l[0] == 1 && l[1] == 0 :\n  (l.length == 3) ? l[0] == 1 && l[1] == 1 && l[2] == 0 :\n  (l.length == 4) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 0 :\n  (l.length == 5) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 0 :\n  (l.length == 6) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 0 :\n  (l.length == 7) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 0 :\n  (l.length == 8) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 0 :\n  (l.length == 9) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 0 :\n  (l.length == 10) ? l[0] == 1 && l[1] == 1 && l[2] == 1 && l[3] == 1 && l[4] == 1 && l[5] == 1 && l[6] == 1 && l[7] == 1 && l[8] == 1 && l[9] == 0 :\n  (l.length == 11) ? l[0] == 1", "  (l.length == 0) ? false : true;", "  (l.length == 0) ? false :\n  (l.length == 1) ? (l[0] == 0) :\n  (l.length == 2) ? (l[0] == l[1]) :\n  (l.length == 3) ? (l[0] == l[1] && l[2] == 0) :\n  (l.length == 4) ? (l[0] == l[1] && l[2] == l[3]) :\n  (l.length == 5) ? (l[0] == l[1] && l[2] == l[3] && l[4] == 0) :\n  (l.length == 6) ? (l[0] == l[1] && l[2] == l[3] && l[4] == l[5]) :\n  (l.length == 7) ? (l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == 0) :\n  (l.length == 8) ? (l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7]) :\n  (l.length == 9) ? (l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == 0) :\n  (l.length == 10) ? (l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9]) :\n  (l.length == 11) ? (l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == 0) :\n  (l.length == 12) ? (l[0] == l[1] && l[2] == l[3] && l", "  (l.length == 0) ? false :\n  (l.length == 1) ? l[0] == l[0] :\n  (l.length == 2) ? l[0] == l[1] && l[1] == l[1] :\n  (l.length == 3) ? l[0] == l[1] && l[2] == l[2] && l[2] == l[2] :\n  (l.length == 4) ? l[0] == l[1] && l[2] == l[3] && l[3] == l[3] && l[3] == l[3] :\n  (l.length == 5) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[4] && l[4] == l[4] && l[4] == l[4] :\n  (l.length == 6) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[5] == l[5] && l[5] == l[5] :\n  (l.length == 7) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[6] && l[6] == l[6] :\n  (l.length == 8) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[7] == l[7] :\n  (l.length == 9) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[8] :\n  (l.length == 10) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] :\n", "  (l.length == 0)\n  ? false\n  : (l.length == 1)\n  ? (l[0] == 0)\n  : (l[0] == 1)\n  ? (l[1] == 0)\n  : (l[1] == 1)\n  ? (l[2] == 0)\n  : (l[2] == 1)\n  ? (l[3] == 0)\n  : (l[3] == 1)\n  ? (l[4] == 0)\n  : (l[4] == 1)\n  ? (l[5] == 0)\n  : (l[5] == 1)\n  ? (l[6] == 0)\n  : (l[6] == 1)\n  ? (l[7] == 0)\n  : (l[7] == 1)\n  ? (l[8] == 0)\n  : (l[8] == 1)\n  ? (l[9] == 0)\n  : (l[9] == 1)\n  ? (l[10] == 0)\n  : (l[10] == 1)\n  ? (l[11] == 0)\n  : (l[11] == 1)\n  ? (l[12] == 0)\n  : (l[12] == 1)\n  ? (l[13] == 0)\n  : (l[13] == 1)\n  ? (l[14] == 0)\n  : (l[14] == 1)\n  ? (l[15] == 0)\n  : (l[15] == 1)\n  ? (l[16] == 0)\n  : (l[16] == 1)\n  ? (l[17] == 0)\n  : (l[17] == 1)\n  ? (l[18] == 0)\n  : (l[18] == 1)\n  ? (l[19] == 0)\n  : (l[19] == 1)\n  ? (l[20] == 0)\n  : (l[20] == 1)\n  ? (l[21] == 0)\n  : (l[21] == 1)\n  ? (l[", "  (l.length == 0) ? true : false;", "  (l.length == 0) ? true :\n  (l.length == 1) ? l[0] == 0 :\n  (l.length == 2) ? l[0] == l[1] :\n  (l.length == 3) ? l[0] == l[1] && l[2] == 0 :\n  (l.length == 4) ? l[0] == l[1] && l[2] == l[3] :\n  (l.length == 5) ? l[0] == l[1] && l[2] == l[3] && l[4] == 0 :\n  (l.length == 6) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] :\n  (l.length == 7) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == 0 :\n  (l.length == 8) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] :\n  (l.length == 9) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == 0 :\n  (l.length == 10) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] :\n  (l.length == 11) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7] && l[8] == l[9] && l[10] == 0 :\n  (l.length == 12) ? l[0] == l[1] && l[2] == l[3] && l[4] == l[5] && l[6] == l[7]", "  (l.length == 0) ? false :\n  (l.length == 1) ? (l[0] == 0) :\n  (l.length == 2) ? (l[0] == 1) :\n  (l.length == 3) ? (l[0] == 2) :\n  (l.length == 4) ? (l[0] == 3) :\n  (l.length == 5) ? (l[0] == 4) :\n  (l.length == 6) ? (l[0] == 5) :\n  (l.length == 7) ? (l[0] == 6) :\n  (l.length == 8) ? (l[0] == 7) :\n  (l.length == 9) ? (l[0] == 8) :\n  (l.length == 10) ? (l[0] == 9) :\n  (l.length == 11) ? (l[0] == 10) :\n  (l.length == 12) ? (l[0] == 11) :\n  (l.length == 13) ? (l[0] == 12) :\n  (l.length == 14) ? (l[0] == 13) :\n  (l.length == 15) ? (l[0] == 14) :\n  (l.length == 16) ? (l[0] == 15) :\n  (l.length == 17) ? (l[0] == 16) :\n  (l.length == 18) ? (l[0] == 17) :\n  (l.length == 19) ? (l[0] == 18) :\n  (l.length == 20) ? (l[0] == 19) :\n  (l.length == 21) ? (l[0] == 20) :\n  (l.length == 22) ? (l[0] == 21) :\n  (l.length == 23) ? (l[0] == 22) :\n  (l.length == 24) ? (l[0] == 23) :\n  (l.length == 25) ? (l[0] == 24) :\n  (l.length == 26) ? (l[0] == 25) :\n  (l.length ==", "  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_2 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_3 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_4 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_5 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_6 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_7 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_8 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_9 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_10 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_11 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_12 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_13 (l: int list): bool = \n  (l.length == 2 && l[0] == l[1])\nlet triples_sum_to_zero_14 (l: int list): bool = \n  (l.length"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}