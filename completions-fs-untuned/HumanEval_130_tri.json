{"name": "HumanEval_130_tri", "language": "fs", "prompt": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri (n: int): int list  = \n", "tests": "let test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()", "completions": ["tri(1) = [1, 3, 2, 8]\ntri(2) = [1, 3, 2, 8, 4]\ntri(3) = [1, 3, 2, 8, 4, 8]\ntri(4) = [1, 3, 2, 8, 4, 8, 8]\ntri(5) = [1, 3, 2, 8, 4, 8, 8, 8]\ntri(6) = [1, 3, 2, 8, 4, 8, 8, 8, 8, 8]\ntri(7) = [1, 3, 2, 8, 4, 8, 8, 8, 8, 8, 8, 8]\ntri(8) = [1, 3, 2, 8, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8]", "[1, 3, 2, 8]\nlet fib (n: int): int list  = \n[1, 3, 2, 8]", "[1, 3, 2, 8]\nlet fib (n: int): int list = \n[1, 2, 3, 4, 5, 6, 7, 8]", "tri(n) = [1, 3, 2, 8]", "[1, 3, 2, 8]\nlet fib (n: int): int list  = \n[1, 2, 3, 4, 8]", "[1, tri(2), tri(3), tri(4), tri(5), tri(6), tri(7), tri(8)]", "[1, tri(2), tri(3), tri(4), tri(5), tri(6), tri(7), tri(8)]", "[1, tri(2), tri(3), tri(4), tri(5), tri(6), tri(7), tri(8)]", "[1, tri(2), tri(3), tri(4), tri(5), tri(6), tri(7), tri(8), tri(9), tri(10), tri(11), tri(12), tri(13), tri(14), tri(15), tri(16), tri(17), tri(18), tri(19), tri(20), tri(21), tri(22), tri(23), tri(24), tri(25), tri(26), tri(27), tri(28), tri(29), tri(30), tri(31), tri(32), tri(33), tri(34), tri(35), tri(36), tri(37), tri(38), tri(39), tri(40), tri(41), tri(42), tri(43), tri(44), tri(45), tri(46), tri(47), tri(48), tri(49), tri(50), tri(51), tri(52), tri(53), tri(54), tri(55), tri(56), tri(57), tri(58), tri(59), tri(60), tri(61), tri(62), tri(63), tri(64), tri(65), tri(66), tri(67), tri(68), tri(69), tri(70), tri(71), tri(72), tri(73), tri(74), tri(75), tri(76), tri(77), tri(78), tri(79), tri(80), tri(81), tri(82), tri(83), tri(84), tri(85), tri(86), tri(87), tri(88), tri(89), tri(90), tri(91), tri(92), tri(93), tri(94), tri(95), tri(96), tri(97), tri(98), tri(99), tri(100), tri(101), tri(102), tri(103), tri(104), tri(105), tri(106), tri(107), tri(108), tri(109), tri(110), tri(111), tri(112), tri(113), tri(114), tri(115), tri(116), tri(117), tri(118), tri(119), tri(120), tri(121), tri(122), tri(123), tri(124), tri(125), tri(126), tri(127), tri(128), tri", "[1, 3, 2, 8]", "[1, 3, 2, 8]", "[1, 3, 2, 8]\nlet fib (n: int): int list  = \n[1, 2, 3, 8]", "[1, tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri(3), tri(2), tri(1), tri(4), tri", "[1, 3, 2, 8]\nlet tri (n: int): int list  = \n[1, 3, 2, 8]", "[1, 3, 2, 8]\nlet fib (n: int): int list = \n[1, 3, 2, 8]", "[1, 3, 2, 8]\nlet fibonacci: int list = \n[1, 2, 3, 8]", "[1, tri(2), tri(3), tri(4), tri(5), tri(6), tri(7), tri(8)]", "[1, tri(2), tri(3), tri(4), tri(5), tri(6), tri(7), tri(8)]", "[1, 3, 2, 8]", "[1, 3, 2, 8]"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}