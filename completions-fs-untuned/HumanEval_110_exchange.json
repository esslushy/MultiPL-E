{"name": "HumanEval_110_exchange", "language": "fs", "prompt": "//In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\nlet exchange (lst1: int list) (lst2: int list): string  = \n", "tests": "let test() = \n  let candidate = exchange\n  assert (candidate [1; 2; 3; 4] [1; 2; 3; 4] = \"YES\")\n  assert (candidate [1; 2; 3; 4] [1; 5; 3; 4] = \"NO\")\n  assert (candidate [1; 2; 3; 4] [2; 1; 4; 3] = \"YES\")\n  assert (candidate [5; 7; 3] [2; 6; 4] = \"YES\")\n  assert (candidate [5; 7; 3] [2; 6; 3] = \"NO\")\n  assert (candidate [3; 2; 6; 1; 8; 9] [3; 5; 5; 1; 1; 1] = \"NO\")\n  assert (candidate [100; 200] [200; 200] = \"YES\")\n  0\n\ntest()", "completions": ["    \"YES\"\nlet exchange (lst1: int list) (lst2: int list): string  = \n    \"NO\"", "    \"YES\"\nlet exchange (lst1: int list) (lst2: int list): string  = \n    \"NO\"", "    \"YES\"\nlet exchange (lst1: int list) (lst2: int list): string  = \n    \"NO\"", "  (lst1: int list) => \"YES\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"YES\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"YES\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"YES\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"YES\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"YES\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"YES\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"YES\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"YES\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"YES\"\n  (lst1: int list", "  (lst1: int list) => (lst2: int list) => \"YES\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"", "    \"YES\";", "  exchange(lst1, lst2)", "  (lst1: int list) => (lst2: int list) => string", "  (lst1: int list) => (lst2: int list) => \"YES\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1: int list) => (lst2: int list) => \"NO\"\n  (lst1:", "  (lst1: int list) => (lst2: int list) => string", "  (lst1: int list) => (lst2: int list) => \"YES\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"", "  \"YES\";", "  (lst1: int list) => (lst2: int list) => \"YES\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"\n  (lst2: int list) => \"NO\"\n  (lst1: int list) => \"NO\"", "  (lst1: int list) => (lst2: int list) => string", "  exchange(lst1, lst2)", "    \"YES\"\nlet exchange (lst1: int list) (lst2: int list): string  = \n    \"NO\"", "  exchange(lst1, lst2)", "  exchange(lst1, lst2);", "  exchange(lst1, lst2)", "  (lst1: int list) => (lst2: int list) => string"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}