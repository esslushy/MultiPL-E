{"name": "HumanEval_101_words_string", "language": "fs", "prompt": "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlet words_string (s: string): string list  = \n", "tests": "let test() = \n  let candidate = words_string\n  assert (candidate \"Hi, my name is John\" = [\"Hi\"; \"my\"; \"name\"; \"is\"; \"John\"])\n  assert (candidate \"One, two, three, four, five, six\" = [\"One\"; \"two\"; \"three\"; \"four\"; \"five\"; \"six\"])\n  assert (candidate \"Hi, my name\" = [\"Hi\"; \"my\"; \"name\"])\n  assert (candidate \"One,, two, three, four, five, six,\" = [\"One\"; \"two\"; \"three\"; \"four\"; \"five\"; \"six\"])\n  assert (candidate \"\" = [])\n  assert (candidate \"ahmed     , gamal\" = [\"ahmed\"; \"gamal\"])\n  0\n\ntest()", "completions": ["  s.split(',');", "words_string(\"Hi, my name is John\")\nwords_string(\"One, two, three, four, five, six\")", "words_string(\"Hi, my name is John\")\nwords_string(\"One, two, three, four, five, six\")", "words_string(\"Hi, my name is John\")\nwords_string(\"One, two, three, four, five, six\")", "  s.split(',');", "  s.split(',')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n  .map(word => word.toLowerCase())\n  .filter(word => word != '')\n", "words_string(s)", "words_string(\"Hi, my name is John\")\nwords_string(\"One, two, three, four, five, six\")", "  s.split(',')\n  .map(word => word.toLowerCase())\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g, ''))\n  .map(word => word.replace(/[^a-z0-9]/g,", "  s.split(',')\n  .map(word => word.trim())\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\", "  s.split(',')\n  .map(word => word.trim())\n  .filter(word => !word.isEmpty())\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))", "words_string(\"Hi, my name is John\")\nwords_string(\"One, two, three, four, five, six\")", "words_string(\"Hi, my name is John\")\nwords_string(\"One, two, three, four, five, six\")", "  s.split(',')\n  .map(word => word.trim())\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))\n  .map(word => word.replace(/ /g, ''))", "  s.split(',')\n  .map(word => word.trim())\n  .filter(word => word != '')\n  .map(word => word.replace(/\\s+/g, ' '))\n  .sort()\n  .map(word => word.replace(/\\s+/g, ' '))\n  .join('')", "words_string(\"Hi, my name is John\")\nwords_string(\"One, two, three, four, five, six\")", "words_string(\"Hi, my name is John\")\nwords_string(\"One, two, three, four, five, six\")", "  s.split(\",\");", "words_string(\"Hi, my name is John\")\nwords_string(\"One, two, three, four, five, six\")", "  s.split(',')\n  .map(word => word.trim())\n  .filter(word => !word.isEmpty())\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))\n  .map(word => word.replace(/\\s+/g, ''))"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}