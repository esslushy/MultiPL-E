{"name": "HumanEval_61_correct_bracketing", "language": "fs", "prompt": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nlet correct_bracketing (brackets: string): bool  = \n", "tests": "let test() = \n  let candidate = correct_bracketing\n  assert (candidate \"()\" = true)\n  assert (candidate \"(()())\" = true)\n  assert (candidate \"()()(()())()\" = true)\n  assert (candidate \"()()((()()())())(()()(()))\" = true)\n  assert (candidate \"((()())))\" = false)\n  assert (candidate \")(()\" = false)\n  assert (candidate \"(\" = false)\n  assert (candidate \"((((\" = false)\n  assert (candidate \")\" = false)\n  assert (candidate \"(()\" = false)\n  assert (candidate \"()()(()())())(()\" = false)\n  assert (candidate \"()()(()())()))()\" = false)\n  0\n\ntest()", "completions": ["  function (brackets: string) {\n    let brackets_found = false;\n    let brackets_to_check = brackets.split(\",\");\n    for (let i = 0; i < brackets_to_check.length; i++) {\n      let bracket = brackets_to_check[i];\n      if (bracket.charAt(0) === \"(\" && bracket.charAt(bracket.length - 1) === \")\") {\n        brackets_found = true;\n        break;\n      }\n    }\n    return brackets_found;\n  };", "  (brackets == \"()\") || (brackets == \"(\") || (brackets == \"()()\") || (brackets == \"(()()\") || (brackets == \"(()()()\");", "  (brackets.indexOf(\"(\") == 0) &&\n  (brackets.indexOf(\")\") == brackets.length - 1)", "    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (", "  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (brackets == \"(\" || brackets == \")\") &&\n  (", "  (brackets == \"()\")\n  || (brackets == \"(()\")\n  || (brackets == \"(()()\")\n  || (brackets == \"(()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  || (brackets == \"(()()()()\")\n  ||", "    (brackets == \"()\") || (brackets == \"(\") || (brackets == \"()()\") || (brackets == \"()()()\") || (brackets == \"()()()()\");", "    function (brackets: string): boolean {\n        let brackets_count = brackets.split(\"(\").length;\n        let brackets_to_check = brackets.split(\"(\")[0].split(\")\");\n        let brackets_to_check_count = brackets_to_check.length;\n        let brackets_to_check_to_check = brackets_to_check.slice(0, brackets_to_check_count);\n        let brackets_to_check_to_check_count = brackets_to_check_to_check.length;\n        let brackets_to_check_to_check_to_check = brackets_to_check_to_check.slice(0, brackets_to_check_to_check_count);\n        let brackets_to_check_to_check_to_check_count = brackets_to_check_to_check_to_check.length;\n        let brackets_to_check_to_check_to_check_to_check = brackets_to_check_to_check_to_check.slice(0, brackets_to_check_to_check_to_check_count);\n        let brackets_to_check_to_check_to_check_to_check_count = brackets_to_check_to_check_to_check_to_check.length;\n        let brackets_to_check_to_check_to_check_to_check_to_check = brackets_to_check_to_check_to_check_to_check.slice(0, brackets_to_check_to_check_to_check_count);\n        let brackets_to_check_to_check_to_check_to_check_to_check_count = brackets_to_check_to_check_to_check_to_check_to_check.length;\n        let brackets_to_check_to_check_to_check_to_check_to_check_to_check_to_check_count = brackets_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to_check_to", "  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (", "  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (", "    function (brackets: string): boolean {\n        let brackets_match = brackets.match(/\\(([^\\)]+)\\)/);\n        if (brackets_match) {\n            return brackets_match[1] === brackets;\n        } else {\n            return false;\n        }\n    }", "    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (brackets == \"(\" && brackets == \")\") ||\n    (", "  (brackets == \"()\") || (brackets == \"(\") || (brackets == \"()()\") ||\n  (brackets == \"()()()\") || (brackets == \"(()()()\") ||\n  (brackets == \"(()()()\") || (brackets == \"(()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()\") || (brackets == \"(()()()()\") ||\n  (brackets == \"(()()()()", "  (brackets.match(/^\\s*\\((?:\\s*\\))?\\s*$/)) ? true : false;", "  function (brackets: string) {\n    let brackets_length = brackets.length;\n    let i = 0;\n    while (i < brackets_length) {\n      if (brackets.charAt(i) === brackets.charAt(brackets_length - 1)) {\n        return true;\n      }\n      i++;\n    }\n    return false;\n  };", "    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_1 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_2 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_3 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_4 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_5 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_6 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_7 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_8 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_9 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_10 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_11 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_12 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_13 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_14 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_bracketing_15 (brackets: string): bool  = \n    (brackets == \"(\" || brackets == \")\")\nlet correct_", "  (brackets.match(/^\\(/)) ? true : false;", "  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (brackets == \"(\" && brackets == \")\") ||\n  (", "  (brackets.indexOf(\"(\") === 0) &&\n  (brackets.indexOf(\")\") === brackets.length - 1)", "    (brackets == \"()\") || (brackets == \"(\") || (brackets == \"()()\") || (brackets == \"(()())\");"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}