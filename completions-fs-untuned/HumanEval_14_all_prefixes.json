{"name": "HumanEval_14_all_prefixes", "language": "fs", "prompt": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes (string: string): string list  = \n", "tests": "let test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()", "completions": ["  [ 'a', 'ab', 'abc' ]", "  [ 'a', 'ab', 'abc' ]", "  ['a', 'ab', 'abc']", "  [ 'a', 'ab', 'abc' ]", "  [ 'a', 'ab', 'abc' ]", "  string.split('a').map(s => s.charAt(0)).filter(s => s.length > 1);", "  [ 'a', 'ab', 'abc' ]", "  (string: string) => string", "  [ 'a', 'ab', 'abc' ]", "  [ 'a', 'ab', 'abc' ]", "  [ 'a', 'ab', 'abc' ]", "  string.split('').map(s => s.charAt(0)).filter(s => s.length > 1);", "  string.split(' ').map(s => s.split('.').map(s => s.slice(0, -1)));", "  [ 'a', 'ab', 'abc' ]", "  [ 'a', 'ab', 'abc' ]", "  string.split(' ').map(s => s.charAt(0)).filter(s => s.length > 1).map(s => s.charAt(0))", "  (string: string) => string", "  (string: string) => string", "  [ 'a', 'ab', 'abc' ]", "  string.split(' ').map(s => s.charAt(0)).filter(s => s.length > 1).map(s => s.charAt(0)).map(s => s.charAt(1)).map(s => s.charAt(0)).map(s => s.charAt(1));"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}