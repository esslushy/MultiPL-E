{"name": "HumanEval_20_find_closest_elements", "language": "fs", "prompt": "//From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nlet find_closest_elements (numbers: float list):  float * float  = \n", "tests": "let test() = \n  let candidate = find_closest_elements\n  assert (candidate [1.0; 2.0; 3.9; 4.0; 5.0; 2.2] = (3.9, 4.0))\n  assert (candidate [1.0; 2.0; 5.9; 4.0; 5.0] = (5.0, 5.9))\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0; 2.2] = (2.0, 2.2))\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0; 2.0] = (2.0, 2.0))\n  assert (candidate [1.1; 2.2; 3.1; 4.1; 5.1] = (2.2, 3.1))\n  0\n\ntest()", "completions": ["  (numbers: number) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    ", "    (numbers: float list) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let m_i = 0;\n    let m_j = 0;\n    let m_k = 0;\n    let m_l = 0;\n    let m_m = 0;\n    let m_n = 0;\n    let m_m_i = 0;\n    let m_m_j = 0;\n    let m_m_k = 0;\n    let m_m_l = 0;\n    let m_m_m = 0;\n    let m_m_n = 0;\n    let m_m_m_i = 0;\n    let m_m_m_j = 0;\n    let m_m_m_k = 0;\n    let m_m_m_l = 0;\n    let m_m_m_m = 0;\n    let m_m_m_n = 0;\n    let m_m_m_m_i = 0;\n    let m_m_m_m_j = 0;\n    let m_m_m_m_k = 0;\n    let m_m_m_m_l = 0;\n    let m_m_m_m_m = 0;\n    let m_m_m_m_n = 0;\n    let m_m_m_m_m_i = 0;\n    let m_m_m_m_m_j = 0;\n    let m_m_m_m_m_k = 0;\n    let m_m_m_m_m_l = 0;\n    let m_m_m_m_m_m = 0;\n    let m_m_m_m_m_n = 0;\n    let m_m_m_m_m_m_i = 0;\n    let m_m_m_m_m_m_j = 0;\n    let m_m_m_m_m_m", "  (numbers: number) =>\n    (numbers: number) =>\n      (numbers: number) =>\n        (numbers: number) =>\n          (numbers: number) =>\n            (numbers: number) =>\n              (numbers: number) =>\n                (numbers: number) =>\n                  (numbers: number) =>\n                    (numbers: number) =>\n                      (numbers: number) =>\n                        (numbers: number) =>\n                          (numbers: number) =>\n                            (numbers: number) =>\n                              (numbers: number) =>\n                               (numbers: number) =>\n                                 (numbers: number) =>\n                                  (numbers: number) =>\n                                    (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n", "  (numbers: number) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let m2 = 0;\n    let n2 = 0;\n    let m3 = 0;\n    let n3 = 0;\n    let m4 = 0;\n    let n4 = 0;\n    let m5 = 0;\n    let n5 = 0;\n    let m6 = 0;\n    let n6 = 0;\n    let m7 = 0;\n    let n7 = 0;\n    let m8 = 0;\n    let n8 = 0;\n    let m9 = 0;\n    let n9 = 0;\n    let m10 = 0;\n    let n10 = 0;\n    let m11 = 0;\n    let n11 = 0;\n    let m12 = 0;\n    let n12 = 0;\n    let m13 = 0;\n    let n13 = 0;\n    let m14 = 0;\n    let n14 = 0;\n    let m15 = 0;\n    let n15 = 0;\n    let m16 = 0;\n    let n16 = 0;\n    let m17 = 0;\n    let n17 = 0;\n    let m18 = 0;\n    let n18 = 0;\n    let m19 = 0;\n    let n19 = 0;\n    let m20 = 0;\n    let n20 = 0;\n    let m21 = 0;\n    let n21 = 0;\n    let m22 = 0;\n    let n22 = 0;\n    let m23 = 0;\n    let n23 = 0;\n    let m24 = 0;\n    let n24 = 0;\n    let m25 = 0;\n    let n25 = 0;\n    let m26 = 0;\n    let n26 = 0;\n    let m27 = 0;\n    let n27 = 0;\n    let m28 = 0;\n    let n28 = 0;\n    let m29 = 0;\n    let", "  (numbers: float) => float * float", "  (numbers: number) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    let i = 1;\n    let j = 1;\n    while (i < len(numbers) && j < len(numbers)) {\n      if (numbers[i] < min) {\n        min = numbers[i];\n      }\n      if (numbers[j] > max) {\n        max = numbers[j];\n      }\n      i++;\n      j++;\n    }\n    return [min, max];\n  };", "  (numbers: number) =>\n    (numbers: number) =>\n      (numbers: number) =>\n        (numbers: number) =>\n          (numbers: number) =>\n            (numbers: number) =>\n              (numbers: number) =>\n                (numbers: number) =>\n                  (numbers: number) =>\n                    (numbers: number) =>\n                      (numbers: number) =>\n                        (numbers: number) =>\n                          (numbers: number) =>\n                            (numbers: number) =>\n                              (numbers: number) =>\n                               (numbers: number) =>\n                                 (numbers: number) =>\n                                  (numbers: number) =>\n                                    (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n", "  (numbers: float) => float * float => float", "    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>\n    (numbers: number) =>", "  (numbers: float) =>\n    (numbers: float) =>\n      (numbers: float) =>\n        (numbers: float) =>\n          (numbers: float) =>\n            (numbers: float) =>\n              (numbers: float) =>\n                (numbers: float) =>\n                  (numbers: float) =>\n                    (numbers: float) =>\n                      (numbers: float) =>\n                        (numbers: float) =>\n                          (numbers: float) =>\n                            (numbers: float) =>\n                              (numbers: float) =>\n                               (numbers: float) =>\n                                 (numbers: float) =>\n                                  (numbers: float) =>\n                                   (numbers: float) =>\n                                    (numbers: float) =>\n                                      (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                                       (numbers: float) =>\n                               ", "    new float[numbers.length];", "  (numbers: number) =>\n    (numbers: number) =>\n      (numbers: number) =>\n        (numbers: number) =>\n          (numbers: number) =>\n            (numbers: number) =>\n              (numbers: number) =>\n                (numbers: number) =>\n                  (numbers: number) =>\n                    (numbers: number) =>\n                      (numbers: number) =>\n                        (numbers: number) =>\n                          (numbers: number) =>\n                            (numbers: number) =>\n                              (numbers: number) =>\n                               (numbers: number) =>\n                                 (numbers: number) =>\n                                   (numbers: number) =>\n                                    (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n", "  (numbers: number) =>\n    (numbers: number) =>\n      (numbers: number) =>\n        (numbers: number) =>\n          (numbers: number) =>\n            (numbers: number) =>\n              (numbers: number) =>\n                (numbers: number) =>\n                  (numbers: number) =>\n                    (numbers: number) =>\n                      (numbers: number) =>\n                        (numbers: number) =>\n                          (numbers: number) =>\n                            (numbers: number) =>\n                              (numbers: number) =>\n                               (numbers: number) =>\n                                 (numbers: number) =>\n                                   (numbers: number) =>\n                                    (numbers: number) =>\n                                     (numbers: number) =>\n                                      (numbers: number) =>\n                                       (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                                        (numbers: number) =>\n                               ", "  (numbers: float) =>\n    (numbers: float) =>\n      (numbers: float) =>\n        (numbers: float) =>\n          (numbers: float) =>\n            (numbers: float) =>\n              (numbers: float) =>\n                (numbers: float) =>\n                  (numbers: float) =>\n                    (numbers: float) =>\n                      (numbers: float) =>\n                        (numbers: float) =>\n                          (numbers: float) =>\n                            (numbers: float) =>\n                              (numbers: float) =>\n                               (numbers: float) =>\n                                 (numbers: float) =>\n                                   (numbers: float) =>\n                                    (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n                                      (numbers: float) =>\n", "  (numbers: float) => float * float", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];", "  (numbers: number) =>\n    numbers.map((n: number) => n.toFixed(2))\n  .filter((n: number) => n > 0.0)\n  .map((n: number) => n.toFixed(2))\n  .sort((n1, n2) => n1.toFixed(2) - n2.toFixed(2))\n  .map((n: number) => n.toFixed(2))\n  .sort((n1, n2) => n1.toFixed(2) - n2.toFixed(2))\n  .map((n: number) => n.toFixed(2))\n  .sort((n1, n2) => n1.toFixed(2) - n2.toFixed(2))\n  .map((n: number) => n.toFixed(2))\n  .sort((n1, n2) => n1.toFixed(2) - n2.toFixed(2))\n  .map((n: number) => n.toFixed(2))\n  .sort((n1, n2) => n1.toFixed(2) - n2.toFixed(2))\n  .map((n: number) => n.toFixed(2))\n  .sort((n1, n2) => n1.toFixed(2) - n2.toFixed(2))\n  .map((n: number) => n.toFixed(2))\n  .sort((n1, n2) => n1.toFixed(2) - n2.toFixed(2))\n  .map((n: number) => n.toFixed(2))\n  .sort((n1, n2) => n1.toFixed(2) - n2.toFixed(2))\n  .map((n: number) => n.toFixed(2))\n  .sort((n1, n2) => n1.toFixed(2) - n2.toFixed(2))\n  .map((n: number) => n.toFixed(2))\n  .sort((n1, n2) => n1.toFixed(2) - n2.toFixed(2))\n  .map((n: number)", "  (numbers: number) =>\n    (numbers: number) =>\n      (numbers: number) =>\n        (numbers: number) =>\n          (numbers: number) =>\n            (numbers: number) =>\n              (numbers: number) =>\n                (numbers: number) =>\n                  (numbers: number) =>\n                    (numbers: number) =>\n                      (numbers: number) =>\n                        (numbers: number) =>\n                          (numbers: number) =>\n                            (numbers: number) =>\n                              (numbers: number) =>\n                               (numbers: number) =>\n                                 (numbers: number) =>\n                                  (numbers: number) =>\n                                    (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n                                      (numbers: number) =>\n", "  (numbers: number) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    ", "    (numbers: number) =>\n    numbers.sort((a, b) => a - b)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}