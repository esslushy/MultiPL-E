{"name": "HumanEval_2_truncate_number", "language": "fs", "prompt": "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nlet truncate_number (number: float): float  = \n", "tests": "let test() = \n  let candidate = truncate_number\n  assert (candidate 3.5 = 0.5)\n  assert (candidate 1.25 = 0.25)\n  assert (candidate 123.0 = 0.0)\n  0\n\ntest()", "completions": ["  (number: number) =>\n    number\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2)\n    .toString().length\n    .toFixed(2", "  (number < 0) ? -number : number;", "  (number: number) =>\n    number\n    .toFixed(2)\n    .toString().slice(2)\n    .slice(0, 1)\n    .slice(1)\n    .slice(2)\n    .slice(3)\n    .slice(4)\n    .slice(5)\n    .slice(6)\n    .slice(7)\n    .slice(8)\n    .slice(9)\n    .slice(10)\n    .slice(11)\n    .slice(12)\n    .slice(13)\n    .slice(14)\n    .slice(15)\n    .slice(16)\n    .slice(17)\n    .slice(18)\n    .slice(19)\n    .slice(20)\n    .slice(21)\n    .slice(22)\n    .slice(23)\n    .slice(24)\n    .slice(25)\n    .slice(26)\n    .slice(27)\n    .slice(28)\n    .slice(29)\n    .slice(30)\n    .slice(31)\n    .slice(32)\n    .slice(33)\n    .slice(34)\n    .slice(35)\n    .slice(36)\n    .slice(37)\n    .slice(38)\n    .slice(39)\n    .slice(40)\n    .slice(41)\n    .slice(42)\n    .slice(43)\n    .slice(44)\n    .slice(45)\n    .slice(46)\n    .slice(47)\n    .slice(48)\n    .slice(49)\n    .slice(50)\n    .slice(51)\n    .slice(52)\n    .slice(53)\n    .slice(54)\n    .slice(55)\n    .slice(56)\n    .slice(57)\n    .slice(58)\n    .slice(59)\n    .slice(60)\n    .slice(61)\n    .slice(62)\n    .slice(63)\n    .slice(64)\n    .slice(65)\n    .slice(66)\n    .slice(67)\n    .slice(68", "  (number < 0) ? -(number - 1) : number;", "  (number < 0) ? -(number + 1) : number;", "  (number >= 0.0) ? number : 0.0;", "  (number < 0) ? -number : number;", "  (number < 0) ? -number : number;", "  (number < 0.0) ? -number : number;", "  (number < 0) ? -number : number;", "  (number: float) =>\n    number < 0 ?\n      number :\n      number > 0 ?\n        number - 1 :\n        number;", "  (number < 0.0) ? -(number) : (number);", "  (number < 0) ? -(number + 1) : number;", "  (number: float) =>\n    (number < 0 ?\n      (number < 0.5 ?\n        (number - 0.5) :\n        (number - 0.5 * 0.5)) :\n      (number < 1 ?\n        (number < 1.5 ?\n          (number - 1.5) :\n          (number - 1.5 * 0.5)) :\n        (number < 2 ?\n          (number < 2.5 ?\n            (number - 2.5) :\n            (number - 2.5 * 0.5)) :\n          (number < 3 ?\n            (number < 3.5 ?\n              (number - 3.5) :\n              (number - 3.5 * 0.5)) :\n            (number < 4 ?\n              (number < 4.5 ?\n                (number - 4.5) :\n                (number - 4.5 * 0.5)) :\n              (number < 5 ?\n                (number < 5.5 ?\n                  (number - 5.5) :\n                  (number - 5.5 * 0.5)) :\n                (number < 6 ?\n                  (number < 6.5 ?\n                    (number - 6.5) :\n                    (number - 6.5 * 0.5)) :\n                  (number < 7 ?\n                    (number < 7.5 ?\n                      (number - 7.5) :\n                      (number - 7.5 * 0.5)) :\n                    (number < 8 ?\n                      (number < 8.5 ?\n                        (number - 8.5) :\n                        (number - 8.5 * 0.5)) :\n                      (number < 9 ?\n                        (number < 9.5 ?\n                          (number - 9.5) :\n                          (number - 9.5 * 0.5)) :\n                        (number < 10 ?\n                          (number < 10.5 ?\n                            (number - 10.5) :\n                            (number - 10.5 * 0.5)) :\n                          (number < 11 ?\n                            (number < 11.5 ?\n                              (number - 11.5) :\n                              (number - 11.5 * 0.5)) :\n                            (number < 12 ?\n                              (number < 12.5 ?\n                               (number - 12.5)", "  (number: number) =>\n    number\n    .toFixed(2)\n    .toString().slice(0, 2)\n    .slice(2, 4)\n    .slice(4, 6)\n    .slice(6, 8)\n    .slice(8, 10)\n    .slice(10, 12)\n    .slice(12, 14)\n    .slice(14, 16)\n    .slice(16, 18)\n    .slice(18, 20)\n    .slice(20, 22)\n    .slice(22, 24)\n    .slice(24, 26)\n    .slice(26, 28)\n    .slice(28, 30)\n    .slice(30, 32)\n    .slice(32, 34)\n    .slice(34, 36)\n    .slice(36, 38)\n    .slice(38, 40)\n    .slice(40, 42)\n    .slice(42, 44)\n    .slice(44, 46)\n    .slice(46, 48)\n    .slice(48, 50)\n    .slice(50, 52)\n    .slice(52, 54)\n    .slice(54, 56)\n    .slice(56, 58)\n    .slice(58, 60)\n    .slice(60, 62)\n    .slice(62, 64)\n    .slice(64, 66)\n    .slice(66, 68)\n    .slice(68, 70)\n    .slice(70, 72)\n    .slice(72, 74)\n    .slice(74, 76)\n    .slice(76, 78)\n    .slice(78, 80)\n    .slice(80, 82)\n    .slice(82, 84)\n    .slice(84, 86)\n    .slice(86, 88)\n    .slice(88, 90)\n    .slice(90, 92)\n    .slice(92, 94)\n    .slice(94, 96)\n    .slice(96, 98)\n    .slice(98, 100)\n    .slice(100, 102)\n    .slice(102, 104)\n    .slice(104, 106)\n    .slice(106, 108)\n    .slice(", "  (number >= 0) ? number : 0;", "  (number: float) =>\n    number\n    .toFixed(2)\n    .toString().length\n    .toString().slice(1)\n    .toString().slice(0, 1)\n    .toString().slice(1, 2)\n    .toString().slice(2, 3)\n    .toString().slice(3, 4)\n    .toString().slice(4, 5)\n    .toString().slice(5, 6)\n    .toString().slice(6, 7)\n    .toString().slice(7, 8)\n    .toString().slice(8, 9)\n    .toString().slice(9, 10)\n    .toString().slice(10, 11)\n    .toString().slice(11, 12)\n    .toString().slice(12, 13)\n    .toString().slice(13, 14)\n    .toString().slice(14, 15)\n    .toString().slice(15, 16)\n    .toString().slice(16, 17)\n    .toString().slice(17, 18)\n    .toString().slice(18, 19)\n    .toString().slice(19, 20)\n    .toString().slice(20, 21)\n    .toString().slice(21, 22)\n    .toString().slice(22, 23)\n    .toString().slice(23, 24)\n    .toString().slice(24, 25)\n    .toString().slice(25, 26)\n    .toString().slice(26, 27)\n    .toString().slice(27, 28)\n    .toString().slice(28, 29)\n    .toString().slice(29, 30)\n    .toString().slice(30, 31)\n    .toString().slice(31, 32)\n    .toString().slice(32, 33)\n    .toString().slice(33, 34)\n    .toString().slice(34, 35)\n    .toString().slice(35, 36)\n    .toString().slice(36, 37)\n    .toString().slice(37, 38)\n    .toString().slice(38, 39)\n    .toString().slice(39", "  (number: number) =>\n    number\n    .toFixed(2)\n    .toString().slice(0, 2)\n    .toString().slice(2, 4)\n    .toString().slice(4, 6)\n    .toString().slice(6, 8)\n    .toString().slice(8, 10)\n    .toString().slice(10, 12)\n    .toString().slice(12, 14)\n    .toString().slice(14, 16)\n    .toString().slice(16, 18)\n    .toString().slice(18, 20)\n    .toString().slice(20, 22)\n    .toString().slice(22, 24)\n    .toString().slice(24, 26)\n    .toString().slice(26, 28)\n    .toString().slice(28, 30)\n    .toString().slice(30, 32)\n    .toString().slice(32, 34)\n    .toString().slice(34, 36)\n    .toString().slice(36, 38)\n    .toString().slice(38, 40)\n    .toString().slice(40, 42)\n    .toString().slice(42, 44)\n    .toString().slice(44, 46)\n    .toString().slice(46, 48)\n    .toString().slice(48, 50)\n    .toString().slice(50, 52)\n    .toString().slice(52, 54)\n    .toString().slice(54, 56)\n    .toString().slice(56, 58)\n    .toString().slice(58, 60)\n    .toString().slice(60, 62)\n    .toString().slice(62, 64)\n    .toString().slice(64, 66)\n    .toString().slice(66, 68)\n    .toString().slice(68, 70)\n    .toString().slice(70, 72)\n    .toString().slice(72, 74)\n    .toString().slice(74, 76)\n    .toString().slice(76, 78)\n    .toString().slice(78, 80)\n    .toString().slice(80, 82)\n    ", "  (number: float) =>\n    (number < 0 ? -1 : 1) * (number < 0 ? -1 : 1) * (number < 0 ? -1 : 1) * (number < 0 ? -1 : 1)", "  (number: float) =>\n    (number: number) =>\n      (number: number) =>\n        (number: number) =>\n          (number: number) =>\n            (number: number) =>\n              (number: number) =>\n                (number: number) =>\n                  (number: number) =>\n                    (number: number) =>\n                      (number: number) =>\n                        (number: number) =>\n                          (number: number) =>\n                            (number: number) =>\n                              (number: number) =>\n                               (number: number) =>\n                                 (number: number) =>\n                                   (number: number) =>\n                                    (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                      (number: number) =>\n                                    "], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}