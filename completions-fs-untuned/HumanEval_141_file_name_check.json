{"name": "HumanEval_141_file_name_check", "language": "fs", "prompt": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nlet file_name_check (file_name: string): string  = \n", "tests": "let test() = \n  let candidate = file_name_check\n  assert (candidate \"example.txt\" = \"Yes\")\n  assert (candidate \"1example.dll\" = \"No\")\n  assert (candidate \"s1sdf3.asd\" = \"No\")\n  assert (candidate \"K.dll\" = \"Yes\")\n  assert (candidate \"MY16FILE3.exe\" = \"Yes\")\n  assert (candidate \"His12FILE94.exe\" = \"No\")\n  assert (candidate \"_Y.txt\" = \"No\")\n  assert (candidate \"?aREYA.exe\" = \"No\")\n  assert (candidate \"/this_is_valid.dll\" = \"No\")\n  assert (candidate \"this_is_valid.wow\" = \"No\")\n  assert (candidate \"this_is_valid.txt\" = \"Yes\")\n  assert (candidate \"this_is_valid.txtexe\" = \"No\")\n  assert (candidate \"#this2_i4s_5valid.ten\" = \"No\")\n  assert (candidate \"@this1_is6_valid.exe\" = \"No\")\n  assert (candidate \"this_is_12valid.6exe4.txt\" = \"No\")\n  assert (candidate \"all.exe.txt\" = \"No\")\n  assert (candidate \"I563_No.exe\" = \"Yes\")\n  assert (candidate \"Is3youfault.txt\" = \"Yes\")\n  assert (candidate \"no_one#knows.dll\" = \"Yes\")\n  assert (candidate \"1I563_Yes3.exe\" = \"No\")\n  assert (candidate \"I563_Yes3.txtt\" = \"No\")\n  assert (candidate \"final..txt\" = \"No\")\n  assert (candidate \"final132\" = \"No\")\n  assert (candidate \"_f4indsartal132.\" = \"No\")\n  assert (candidate \".txt\" = \"No\")\n  assert (candidate \"s.\" = \"No\")\n  0\n\ntest()", "completions": ["    \"Yes\"\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^A-Z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^a-z]/g, '')\n    .replace(/[^0-9]/g,", "    \"Yes\"\nlet file_name_check_no_file_name_check (file_name: string): string = \n    \"No\"", "  'Yes'\n  ", "  \"Yes\"\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0-9]/g, \"\")\n  .replace(/[^0", "    'Yes'\nlet file_name_check_no_file_name (file_name: string): string = \n    'No'", "    \"Yes\"\nlet file_name_check_no (file_name: string): string = \n    \"No\"", "    `file_name_check(\"example.txt\")`;", "    `file_name_check(\"example.txt\")`", "    \"Yes\"\nlet file_name_check_no (file_name: string): string = \n    \"No\"", "    \"Yes\"\nlet file_name_check (file_name: string): string = \n    \"No\"", "    'Yes'\nlet file_name_check_no_file_name_check (file_name: string): string  = \n    'No'", "  'Yes'\n  if (file_name.length < 3) {\n    return 'No'\n  }\n  if (file_name.charAt(0) != '.') {\n    return 'No'\n  }\n  if (file_name.charAt(1) != '.') {\n    return 'No'\n  }\n  if (file_name.charAt(2) != '.') {\n    return 'No'\n  }\n  if (file_name.charAt(file_name.length - 1) != '.') {\n    return 'No'\n  }\n  return 'Yes'", "    \"Yes\"\nlet file_name_check_no (file_name: string): string = \n    \"No\"", "  \"Yes\"\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  .replace(/[^a-zA-Z0-9]/g, \"\")\n  ", "    `file_name_check(\"example.txt\")`;", "    \"Yes\"\n    .replace(/[^a-zA-Z0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0-9]/g, '')\n    .replace(/[^0", "    `file_name_check(\"example.txt\")`;", "    \"Yes\"\nlet file_name_check (file_name: string): string = \n    \"No\"", "  (file_name.match(/^[a-zA-Z0-9_]+$/) || \"No\");", "    \"Yes\"\nlet file_name_check_with_dot (file_name: string): string = \n    \"Yes\"\nlet file_name_check_with_dot_and_no_dot (file_name: string): string = \n    \"No\""], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}