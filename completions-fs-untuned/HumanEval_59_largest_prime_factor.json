{"name": "HumanEval_59_largest_prime_factor", "language": "fs", "prompt": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor (n: int): int  = \n", "tests": "let test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()", "completions": ["  (n & (n - 1)) == 0 ? n : (n - 1) * (n - 2) / 2;", "  (n > 1) ? (n & (n - 1)) : 0;", "  (n > 1) ? (n & (n - 1)) : 0;", "  (n > 1) ? (n & (n - 1)) : 0;", "  (n & (n - 1)) == 0 ? n : (n - 1) * (n - 2) / 2;", "  (n & (n - 1)) == 0 ? n : (n & (n - 1)) * (n - 1) / 2;", "  (n > 1) ? (n & (n - 1)) : (n);", "  (n > 1) ? n : 1;", "  (n > 1) ? (n & (n - 1)) : 1;", "  (n > 1) ? (n & (n - 1)) : 1;", "  (n & (n - 1)) == 0 ? n : (n - 1) * (n - 2) / (n - 1);", "  (n > 1) ? (n & (n - 1)) : 0;", "  (n > 1) ? (n & (n - 1)) : 0;", "  (n > 1) ? (n & (n - 1)) : 0;", "  (n & -n) == n ? n : (n & -n) == n ? n : (n & -n) == n ? n : n;", "  (n & (n - 1)) * (n - 1) / 2 + 1;", "  (n & (n - 1)) == 0 ? n : (n - 1) * (n - 2) / 2;", "  (n > 1) ? (n & (n - 1)) : 0;", "  (n & (n - 1)) == 0 ? n : (n - 1) * (n - 2) / (n - 1);", "  (n > 1) ? n : (n == 2 ? 1 : 2);"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}