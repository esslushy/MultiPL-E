{"name": "HumanEval_16_count_distinct_characters", "language": "fs", "prompt": "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlet count_distinct_characters (string: string): int  = \n", "tests": "let test() = \n  let candidate = count_distinct_characters\n  assert (candidate \"\" = 0)\n  assert (candidate \"abcde\" = 5)\n  assert (candidate \"abcdecadeCADE\" = 5)\n  assert (candidate \"aaaaAAAAaaaa\" = 1)\n  assert (candidate \"Jerry jERRY JeRRRY\" = 5)\n  0\n\ntest()", "completions": ["  (string.length === 1 ? 0 :\n   string.length === 2 ? 1 :\n   string.length === 3 ? 2 :\n   string.length === 4 ? 3 :\n   -1);", "  (string.length - 1)\n  .map(c => c.toLowerCase())\n  .reduce((acc, c) => acc + c.length, 0)\n  .filter(c => c.length > 1)\n  .map(c => c.length)\n  .reduce((acc, c) => acc + c, 0)\n  .filter(c => c > 1)\n  .map(c => c.toLowerCase())\n  .reduce((acc, c) => acc + c.length, 0)\n  .filter(c => c.length > 1)\n  .map(c => c.length)\n  .reduce((acc, c) => acc + c, 0)\n  .filter(c => c > 1)\n  .map(c => c.toLowerCase())\n  .reduce((acc, c) => acc + c, 0)\n  .filter(c => c.length > 1)\n  .map(c => c.length)\n  .reduce((acc, c) => acc + c, 0)\n  .filter(c => c.length > 1)\n  .map(c => c.toLowerCase())\n  .reduce((acc, c) => acc + c, 0)\n  .filter(c => c.length > 1)\n  .map(c => c.length)\n  .reduce((acc, c) => acc + c, 0)\n  .filter(c => c.length > 1)\n  .map(c => c.toLowerCase())\n  .reduce((acc, c) => acc + c, 0)\n  .filter(c => c.length > 1)\n  .map(c => c.length)\n  .reduce((acc, c) => acc + c, 0)\n  .filter(c => c.length > 1)\n  .map(c => c.toLowerCase())\n  .reduce((acc, c) => acc + c, 0)\n  .filter(c => c.length > 1)\n  .map(c => c.length)\n  .reduce((acc, c) => acc + c, 0)\n  .filter(c => c.length > 1)", "  (string.length - 1)\n  .map((char: string) => char.toLowerCase())\n  .reduce((count, char: string) => count + 1, 0)\n  .filter((count: number) => count > 0)\n  .map((count: number) => count)\n  .reduce((count, count: number) => count + count, 0)\n  .filter((count: number) => count > 0)\n  .map((count: number) => count)\n  .reduce((count, count: number) => count + count, 0)\n  .filter((count: number) => count > 0)\n  .map((count: number) => count)\n  .reduce((count, count: number) => count + count, 0)\n  .filter((count: number) => count > 0)\n  .map((count: number) => count)\n  .reduce((count, count: number) => count + count, 0)\n  .filter((count: number) => count > 0)\n  .map((count: number) => count)\n  .reduce((count, count: number) => count + count, 0)\n  .filter((count: number) => count > 0)\n  .map((count: number) => count)\n  .reduce((count, count: number) => count + count, 0)\n  .filter((count: number) => count > 0)\n  .map((count: number) => count)\n  .reduce((count, count: number) => count + count, 0)\n  .filter((count: number) => count > 0)\n  .map((count: number) => count)\n  .reduce((count, count: number) => count + count, 0)\n  .filter((count: number) => count > 0)\n  .map((count: number) => count)\n  .reduce((count, count: number) => count + count, 0)\n  .filter((count: number) => count > 0)\n  .map((count: number) => count)\n  .reduce((count, count: number) => count + count, 0)\n  .filter((count: number) => count > 0)\n  .map((", "  (string.length - 1) * (string.length - 2) / 2;", "  (string.length - 1) * (string.length - 2) / 2;", "  (string.length - 1) % string.length;", "  (string.length - 1) * (string.length - 2) / 2;", "  (string.length === 0) ? 0 :\n  (string.length === 1) ? 1 :\n  (string.length === 2) ? 2 :\n  (string.length === 3) ? 3 :\n  (string.length === 4) ? 4 :\n  (string.length === 5) ? 5 :\n  (string.length === 6) ? 6 :\n  (string.length === 7) ? 7 :\n  (string.length === 8) ? 8 :\n  (string.length === 9) ? 9 :\n  (string.length === 10) ? 10 :\n  (string.length === 11) ? 11 :\n  (string.length === 12) ? 12 :\n  (string.length === 13) ? 13 :\n  (string.length === 14) ? 14 :\n  (string.length === 15) ? 15 :\n  (string.length === 16) ? 16 :\n  (string.length === 17) ? 17 :\n  (string.length === 18) ? 18 :\n  (string.length === 19) ? 19 :\n  (string.length === 20) ? 20 :\n  (string.length === 21) ? 21 :\n  (string.length === 22) ? 22 :\n  (string.length === 23) ? 23 :\n  (string.length === 24) ? 24 :\n  (string.length === 25) ? 25 :\n  (string.length === 26) ? 26 :\n  (string.length === 27) ? 27 :\n  (string.length === 28) ? 28 :\n  (string.length === 29) ? 29 :\n  (string.length === 30) ? 30 :\n  (string.length === 31) ? 31 :\n  (string.length === 32) ? 32 :\n  (string.length === 33) ? 33 :\n  (string.length === 34) ? 34 :\n  (string.length === 35) ? 35 :\n  (string.length === 36) ? 36 :\n  (string.length === 37) ? 37 :\n  (string.length === 38) ? 38 :\n  (string.length === 39) ? 39 :\n  (string.length === 40) ? 40 :\n  (string.length === 41) ? 41 :\n  (string.length === 42)", "  (string.length - 1)\n  .map(x => x.charAt(0))\n  .reduce((a, b) => a + b, 0);", "  (string.length === 1 ? 1 : 0)\n  + (string.length === 2 ? 2 : 0)\n  + (string.length === 3 ? 3 : 0)\n  + (string.length === 4 ? 4 : 0)\n  + (string.length === 5 ? 5 : 0)\n  + (string.length === 6 ? 6 : 0)\n  + (string.length === 7 ? 7 : 0)\n  + (string.length === 8 ? 8 : 0)\n  + (string.length === 9 ? 9 : 0)\n  + (string.length === 10 ? 10 : 0)\n  + (string.length === 11 ? 11 : 0)\n  + (string.length === 12 ? 12 : 0)\n  + (string.length === 13 ? 13 : 0)\n  + (string.length === 14 ? 14 : 0)\n  + (string.length === 15 ? 15 : 0)\n  + (string.length === 16 ? 16 : 0)\n  + (string.length === 17 ? 17 : 0)\n  + (string.length === 18 ? 18 : 0)\n  + (string.length === 19 ? 19 : 0)\n  + (string.length === 20 ? 20 : 0)\n  + (string.length === 21 ? 21 : 0)\n  + (string.length === 22 ? 22 : 0)\n  + (string.length === 23 ? 23 : 0)\n  + (string.length === 24 ? 24 : 0)\n  + (string.length === 25 ? 25 : 0)\n  + (string.length === 26 ? 26 : 0)\n  + (string.length === 27 ? 27 : 0)\n  + (string.length === 28 ? 28 : 0)\n  + (string.length === 29 ? 29 : 0)\n  + (string.length === 30 ? 30 : 0)\n  + (string.length === 31 ? 31 : 0)\n  + (string.length === 32 ? 32 : 0)\n  + (string.length === 33 ? 33 : 0)\n  + (string.length === 34 ? 34 : 0)\n  + (string.length === 35 ? 35 : 0)\n  + (string.length === 36 ? 36 : 0)\n  + (string.length === 37 ?", "  (string.length - 1)\n  .filter((c: char) => c !== ' ')\n  .map((c: char) => c.toLowerCase())\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map((c: number) => c)\n  .reduce((acc: number), 0)\n  .map", "  (string.length === 0) ? 0 :\n  (string.length === 1) ? 1 :\n  (string.length === 2) ? 2 :\n  (string.length === 3) ? 3 :\n  (string.length === 4) ? 4 :\n  (string.length === 5) ? 5 :\n  (string.length === 6) ? 6 :\n  (string.length === 7) ? 7 :\n  (string.length === 8) ? 8 :\n  (string.length === 9) ? 9 :\n  (string.length === 10) ? 10 :\n  (string.length === 11) ? 11 :\n  (string.length === 12) ? 12 :\n  (string.length === 13) ? 13 :\n  (string.length === 14) ? 14 :\n  (string.length === 15) ? 15 :\n  (string.length === 16) ? 16 :\n  (string.length === 17) ? 17 :\n  (string.length === 18) ? 18 :\n  (string.length === 19) ? 19 :\n  (string.length === 20) ? 20 :\n  (string.length === 21) ? 21 :\n  (string.length === 22) ? 22 :\n  (string.length === 23) ? 23 :\n  (string.length === 24) ? 24 :\n  (string.length === 25) ? 25 :\n  (string.length === 26) ? 26 :\n  (string.length === 27) ? 27 :\n  (string.length === 28) ? 28 :\n  (string.length === 29) ? 29 :\n  (string.length === 30) ? 30 :\n  (string.length === 31) ? 31 :\n  (string.length === 32) ? 32 :\n  (string.length === 33) ? 33 :\n  (string.length === 34) ? 34 :\n  (string.length === 35) ? 35 :\n  (string.length === 36) ? 36 :\n  (string.length === 37) ? 37 :\n  (string.length === 38) ? 38 :\n  (string.length === 39) ? 39 :\n  (string.length === 40) ? 40 :\n  (string.length === 41) ? 41 :\n  (string.length === 42)", "  (string.length - 1)\n  .filter(x => x.toLowerCase().indexOf(string.toLowerCase()) !== -1)\n  .length;", "  (string.length - 1)\n  .filter((char: string) => char.toLowerCase() !== 'x')\n  .map(char => char.toLowerCase().length);", "  (string.length === 1 ? 0 :\n   string.length === 2 ? 1 :\n   string.length === 3 ? 2 :\n   string.length === 4 ? 3 :\n   string.length === 5 ? 4 :\n   string.length === 6 ? 5 :\n   string.length === 7 ? 6 :\n   string.length === 8 ? 7 :\n   string.length === 9 ? 8 :\n   string.length === 10 ? 9 :\n   string.length === 11 ? 10 :\n   string.length === 12 ? 11 :\n   string.length === 13 ? 12 :\n   string.length === 14 ? 13 :\n   string.length === 15 ? 14 :\n   string.length === 16 ? 15 :\n   string.length === 17 ? 16 :\n   string.length === 18 ? 17 :\n   string.length === 19 ? 18 :\n   string.length === 20 ? 19 :\n   string.length === 21 ? 20 :\n   string.length === 22 ? 21 :\n   string.length === 23 ? 22 :\n   string.length === 24 ? 23 :\n   string.length === 25 ? 24 :\n   string.length === 26 ? 25 :\n   string.length === 27 ? 26 :\n   string.length === 28 ? 27 :\n   string.length === 29 ? 28 :\n   string.length === 30 ? 29 :\n   string.length === 31 ? 30 :\n   string.length === 32 ? 31 :\n   string.length === 33 ? 32 :\n   string.length === 34 ? 33 :\n   string.length === 35 ? 34 :\n   string.length === 36 ? 35 :\n   string.length === 37 ? 36 :\n   string.length === 38 ? 37 :\n   string.length === 39 ? 38 :\n   string.length === 40 ? 39 :\n   string.length === 41 ? 40 :\n   string.length === 42 ? 41 :\n   string.length === 43 ? 42 :\n   string.length === 44 ? 43 :\n   string.length === 45 ? 44 :\n   string.length === 46 ? 45 :\n   string.length === 47 ? 46 :\n   string.length === 48 ? 47 :\n   string.length === 49 ? 48 :\n   string.length === 50 ? 49 :\n   string.length === 51 ? 50 :\n   ", "  (string.length - 1) * (string.length - 2) / 2;", "  (string.length - 1)\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !== ' ')\n  .filter(c => c !==", "  (string.length - 1)\n  .map((char: string) => {\n    return count_distinct_characters(char.toLowerCase())\n  })", "  (string.length === 1 ? 0 : 1)\n  .filter((char: string) => {\n    return count_distinct_characters(char.toLowerCase()) === 1\n  })\n  .map((char: string) => {\n    return char.toLowerCase().length\n  })", "  (string.length - 1) % string.length;"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}