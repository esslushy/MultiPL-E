{"name": "HumanEval_80_is_happy", "language": "fs", "prompt": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy (s: string): bool  = \n", "tests": "let test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()", "completions": ["{\n  is_happy(s): bool {\n    return s.length >= 3 && s.includes(s[0]) && s.includes(s[1]) && s.includes(s[2]);\n  }\n}", "{\n    is_happy(s): bool {\n        return s.length >= 3 &&\n            s.indexOf(s[0]) == 0 &&\n            s.indexOf(s[1]) == 1 &&\n            s.indexOf(s[2]) == 2;\n    }\n}", "{\n    is_happy(s): bool {\n        return s.length >= 3 && s.includes(s[0]) && s.includes(s[1]) && s.includes(s[2]);\n    }\n}", "{\n    is_happy(s): bool {\n        return s.length >= 3 && s.includes(s[0]) && s.includes(s[1]) && s.includes(s[2]);\n    }\n}", "  (s.length >= 3 && s.startsWith(s[0]) && s.endsWith(s[1]))\n  ? s.endsWith(s[1])\n  ? s.endsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s.startsWith(s[2])\n  : s.startsWith(s[0])\n  ? s.startsWith(s[1])\n  ? s", "{\n    'a': True,\n    'aa': True,\n    'ab': True,\n    'abcd': True,\n    'adb': True,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    'adb': False,\n    'xyy': False,\n    'abcd': False,\n    ", "  //If s is a string, then return True if it is happy.\n  //Otherwise return False.\n{\n  if (s.length < 3)\n    return false;\n  \n  let i = 0;\n  \n  while (i < s.length)\n  {\n    if (s[i] == s[i+1] && s[i] == s[i+2])\n    {\n      return true;\n    }\n    \n    i++;\n  }\n  \n  return false;\n}", "{\n    'a': True,\n    'aa': True,\n    'abcd': True,\n    'abcdabcd': True,\n    'abcdabcdabcd': True,\n    'abcdabcdabcdabcd': True,\n    'abcdabcdabcdabcdabcd': True,\n    'abcdabcdabcdabcdabcdabcd': True,\n    'abcdabcdabcdabcdabcdabcdabcd': True,\n    'abcdabcdabcdabcdabcdabcdabcdabcd': True,\n    'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd", "{\n    is_happy(s): False\n}", "    (s.length >= 3 && s.indexOf(s[0]) == 0) ||\n    (s.length >= 3 && s.indexOf(s[1]) == 0) ||\n    (s.length >= 3 && s.indexOf(s[2]) == 0);", "{\n  'a': True,\n  'aa': True,\n  'ab': True,\n  'abb': True,\n  'abbb': True,\n  'abbbb': True,\n  'abbbbb': True,\n  'abbbbbb': True,\n  'abbbbbbb': True,\n  'abbbbbbbb': True,\n  'abbbbbbbbb': True,\n  'abbbbbbbbbb': True,\n  'abbbbbbbbbbb': True,\n  'abbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbbbbb': True,\n  'abbbbbbbbbbbb", "{\n    is_happy(s): bool {\n        return s.length >= 3 && s.includes(s[0]) && s.includes(s[1]) && s.includes(s[2]);\n    }\n}", "    (s.length >= 3) &&\n    (s.indexOf(s[0]) == 0) &&\n    (s.indexOf(s[1]) == 1) &&\n    (s.indexOf(s[2]) == 2) &&\n    (s.indexOf(s[3]) == 3);", "{\n    is_happy(s): False\n}", "{\n    is_happy(s): False\n}", "  (s.length >= 3 && s.startsWith(s[0]) && s.endsWith(s[1]) && s.endsWith(s[2]));", "{\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n    is_happy(s): False,\n", "{\n    is_happy(s): bool {\n        return s.length >= 3 && s.includes(s[0]) && s.includes(s[1]) && s.includes(s[2]);\n    }\n}", "{\n  'a': False,\n  'aa': False,\n  'ab': False,\n  'abcd': True,\n  'adb': False,\n  'adbxy': False,\n  'adxy': False,\n  'xy': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  'xyz': False,\n  ", "{\n    is_happy(s): bool {\n        return s.length >= 3 &&\n            (s.charAt(0) == s.charAt(1) && s.charAt(1) == s.charAt(2))\n}"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}