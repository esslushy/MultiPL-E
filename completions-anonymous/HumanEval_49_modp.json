{"name": "HumanEval_49_modp", "language": "py", "prompt": "def f(arg1: int, arg2: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> f(3, 5)\n    3\n    >>> f(1101, 101)\n    2\n    >>> f(0, 101)\n    1\n    >>> f(3, 11)\n    8\n    >>> f(100, 101)\n    1\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(f)\n\ntest_check()\n", "completions": ["    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    return pow(pow(arg1, arg2), p)\n", "    if arg1 == 0:\n        return arg2\n    elif arg1 == 1:\n        return arg2 % p\n    else:\n        return arg2 % p\n<|endoftext|return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 > arg2:\n        raise ValueError(\"Arguments must be < 2.\")\n    if arg1 == arg2:\n        return arg1\n    return pow(arg1, arg2) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        return 0\n    elif arg1 > 0:\n        return 1\n    else:\n        return arg2 % p\n<|endoftext|>                                                                                                                                                      ", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        return 1\n    if arg2 < 0:\n        return 0\n    return pow(pow(arg1, arg2), p)\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    if arg1 < 0:\n        return 1\n    if arg2 < 0:\n        return 0\n    return pow(pow(arg1, arg2), p)\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        return 0\n    if arg2 < 0:\n        return 0\n    return pow(pow(arg1, arg2), p)\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        return 0\n    elif arg1 > 0:\n        return 1\n    else:\n        return arg2 % p\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    elif arg2 == 0:\n        return arg1\n    elif arg1 > arg2:\n        raise ValueError(\"arg1 must be <= arg2\")\n    return pow(pow(arg1, arg2), p)\n", "    if arg1 < 0:\n        return 0\n    if arg2 < 0:\n        return 1\n    return pow(pow(arg1, arg2), p)\n", "    return pow(p, n, p)\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        return 1\n    elif arg1 > 0:\n        return 0\n    else:\n        return arg2 % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n<|endoftext|return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p)\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 > arg2:\n        raise ValueError(\"arg1 must be <= arg2\")\n    if arg1 == arg2:\n        return arg1\n    return pow(arg1, arg2) % arg1\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p)\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 == 0:\n        return arg2\n    elif arg2 == 0:\n        return arg1\n    else:\n        return pow(pow(arg1, arg2), p) % p\n<|endoftext|>                                                                                                                                                                                                                                                                              ", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p)\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        return 1\n    elif arg1 > 0:\n        return 0\n    else:\n        return arg2 % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p)\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        return 1\n    if arg2 < 0:\n        return 0\n    return pow(pow(arg1, arg2), p)\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument\")\n    if arg1 > arg2:\n        raise ValueError(\"Argument out of range\")\n    return pow(p, arg1, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p)\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n\n", "    return pow(p, n, p) % p\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 > arg2:\n        raise ValueError(\"Arguments must be < 2.\")\n    if arg1 == arg2:\n        return arg1\n    return pow(arg1, arg2) % arg1\n", "    return pow(p, n, p)\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 > arg2:\n        raise ValueError(\"arg1 must be <= arg2\")\n    return pow(pow(arg1, arg2), p)\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p)\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        return 0\n    elif arg1 > 0:\n        return 1\n    else:\n        return arg2\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    if arg1 < 0:\n        return 1\n    if arg2 < 0:\n        return 0\n    return pow(pow(arg1, arg2), p)\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    if arg1 < 0:\n        return 0\n    if arg2 < 0:\n        return 1\n    return pow(pow(arg1, arg2), p)\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 > arg2:\n        raise ValueError(\"arg1 must be <= arg2\")\n    if arg1 == arg2:\n        return arg1\n    return pow(arg1, arg2) % arg1\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 > arg2:\n        raise ValueError(\"Arguments must be distinct.\")\n    if arg1 == arg2:\n        return arg1\n    return pow(arg1, arg2) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p)\n\n", "    if arg1 < 0:\n        return 1\n    elif arg1 > 0:\n        return 0\n    else:\n        return arg2 % p\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 > arg2:\n        raise ValueError(\"arg1 must be <= arg2\")\n    return pow(pow(arg1, arg2), p)\n\n", "    if arg1 < 0:\n        return 1\n    elif arg1 > 0:\n        return 0\n    else:\n        return arg2 % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p)\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        return 1\n    elif arg1 > 0:\n        return 0\n    else:\n        return arg2 % p\n\n", "    return pow(p, n, p) % p\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    return pow(pow(pow(pow(pow(pow(arg1, arg2), arg1), arg2), arg1), arg2), arg1)\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError('arg1 must be >= 0')\n    if arg2 < 0:\n        raise ValueError('arg2 must be >= 0')\n    if arg1 > arg2:\n        raise ValueError('arg1 must be <= arg2')\n    return pow(p, (arg1 - 1) * (arg2 - 1))\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 > arg2:\n        raise ValueError(\"arg1 must be <= arg2\")\n    return pow(p, arg1, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg2 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 > arg2:\n        raise ValueError(\"Arguments must be < 2.\")\n    return pow(pow(arg1, arg2), p)\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    elif arg2 == 0:\n        return arg1\n    else:\n        return pow(arg1, arg2) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n", "    if arg1 == 0:\n        return arg2\n    elif arg2 == 0:\n        return arg1\n    else:\n        return arg1 % arg2\n<|endoftext|return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        return 1\n    elif arg1 > 0:\n        return 0\n    else:\n        return arg2 % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 > arg2:\n        raise ValueError(\"arg1 must be <= arg2\")\n    if arg1 == arg2:\n        return arg1\n    return pow(arg1, arg2) % arg1\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 == 0:\n        return arg2\n    if arg2 == 0:\n        return arg1\n    return pow(pow(arg1, arg2), p) % p\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    if arg1 == 0:\n        return arg2\n    elif arg2 == 0:\n        return arg1\n    else:\n        return arg1 % arg2\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg2 < 0:\n        raise ValueError(\"arg2 must be >= 0\")\n    if arg1 > arg2:\n        raise ValueError(\"arg1 must be <= arg2\")\n    return pow(p, arg1, p) % p\n\n", "    return pow(p, n, p)\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n", "    return pow(p, n, p) % p\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}