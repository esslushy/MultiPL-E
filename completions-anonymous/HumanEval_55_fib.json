{"name": "HumanEval_55_fib", "language": "py", "prompt": "def f(arg1: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> f(10)\n    55\n    >>> f(1)\n    1\n    >>> f(8)\n    21\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\ndef test_check():\n    check(f)\n\ntest_check()\n", "completions": ["    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    if arg1 < 0:\n        raise ValueError('arg1 must be >= 0')\n    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"f() takes positive argument\")\n    if arg1 == 0:\n        return arg1\n    return arg1 + f(arg1 - 1)\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"f() argument must be non-negative\")\n    if arg1 == 0:\n        return 1\n    if arg1 == 1:\n        return arg1\n    return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"arg1 must be >= 0\")\n    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1)\n\n", "    if arg1 < 0:\n        raise ValueError('f(arg1) must be non-negative')\n    if arg1 == 0:\n        return arg1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"argument 1 must be non-negative\")\n    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        return arg1\n    elif arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1 - 1)\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    if arg1 < 0:\n        raise ValueError(\"argument must be non-negative\")\n    if arg1 == 0:\n        return arg1\n    if arg1 == 1:\n        return arg1\n    return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"f() argument must be non-negative\")\n    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    if arg1 < 0:\n        return arg1\n    elif arg1 == 0:\n        return arg1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return f(arg1 - 1) + f(arg1)\n<|endoftext|return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"f(arg1) must be non-negative\")\n    if arg1 == 0:\n        return arg1\n    if arg1 == 1:\n        return arg1\n    if arg1 == 2:\n        return arg1\n    return arg1 + f(arg1 - 1)\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"f() argument must be non-negative\")\n    if arg1 == 0:\n        return arg1\n    return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    if arg1 == 0:\n        return arg1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return f(arg1 - 1) + f(arg1)\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1)\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"argument 1 must be >= 0\")\n    if arg1 == 0:\n        return arg1\n    if arg1 == 1:\n        return arg1\n    return arg1 + f(arg1 - 1)\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"f(arg1) must be >= 0\")\n    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1 - 1)\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 == 0:\n        return arg1\n    if arg1 == 1:\n        return arg1\n    if arg1 == arg1:\n        return arg1\n    if arg1 > arg1:\n        return f(arg1 - 1)\n    return f(arg1 - 1) + f(arg1 - arg1)\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError('f() takes positive argument')\n    if arg1 == 0:\n        return 1\n    if arg1 == 1:\n        return arg1\n    return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1)\n\n", "    if arg1 < 0:\n        raise ValueError('f(arg1) must be >= 0')\n    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1 - 1)\n\n", "    if arg1 < 0:\n        raise ValueError('arg1 must be >= 0')\n    if arg1 == 0:\n        return arg1\n    if arg1 == 1:\n        return arg1\n    return arg1 + f(arg1 - 1)\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"f(arg1) must be non-negative\")\n    if arg1 == 0:\n        return arg1\n    if arg1 == 1:\n        return arg1\n    return arg1 + f(arg1 - 1)\n", "    if arg1 < 0:\n        raise ValueError(\"f() argument must be non-negative\")\n    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    elif arg1 == arg1:\n        return arg1\n    else:\n        return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"f(arg1) must be >= 0\")\n    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    elif arg1 > 1:\n        return f(arg1 - 1)\n    else:\n        return f(arg1 + 1)\n", "    if arg1 < 0:\n        raise ValueError(\"Negative argument.\")\n    if arg1 == 0:\n        return arg1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return f(arg1 - 1) + f(arg1)\n", "    if arg1 == 0:\n        return arg1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return f(arg1 - 1) + f(arg1)\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"f(arg1) must be >= 0\")\n    if arg1 == 0:\n        return arg1\n    elif arg1 == 1:\n        return arg1\n    elif arg1 == 2:\n        return arg1\n    elif arg1 == 3:\n        return arg1\n    elif arg1 == 4:\n        return arg1\n    elif arg1 == 5:\n        return arg1\n    elif arg1 == 6:\n        return arg1\n    elif arg1 == 7:\n        return arg1\n    elif arg1 == 8:\n        return arg1\n    elif arg1 == 9:\n        return arg1\n    else:\n        raise ValueError(\"f(arg1) must be 0, 1, 2, 3, 4, 5, or 6\")\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        raise ValueError(\"f() takes positive argument\")\n    if arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n", "    if arg1 < 0:\n        raise ValueError('argument must be non-negative')\n    if arg1 == 0:\n        return arg1\n    return arg1 + f(arg1 - 1)\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        return 0\n    if arg1 > 0:\n        return arg1\n    return arg1 + f(arg1)\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n", "    return arg1 + arg1\n\n", "    if arg1 < 0:\n        return arg1\n    elif arg1 == 0:\n        return 1\n    elif arg1 == 1:\n        return arg1\n    else:\n        return f(arg1-1) + f(arg1)\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n", "    return arg1 + arg1\n\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}