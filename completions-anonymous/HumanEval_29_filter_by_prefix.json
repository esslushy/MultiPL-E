{"name": "HumanEval_29_filter_by_prefix", "language": "py", "prompt": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(f)\n\ntest_check()\n", "completions": ["    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1[:arg1.find(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1[:arg1.find(arg2)]\n", "    return arg1 if arg1.startswith(arg2) else []\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1[arg2.startswith(arg1[0])]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1[:arg2.find(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1[:arg2.startswith(arg2)]\n", "    return arg1[:arg1.find(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1 if arg1.startswith(arg2) else []\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1[arg2.startswith(arg1[0])]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1[arg2.startswith(arg1[0].lower())]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1[:arg2.find(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1 if arg1.startswith(arg2) else []\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1[arg2.startswith(arg1[0].lower())]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1[arg1.find(arg2) + len(arg2):]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1 if arg1.startswith(arg2) else []\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return arg1[arg2.startswith(arg1[0])]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return arg1 if arg1[0].startswith(arg2) else []\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return arg1[arg2.startswith(arg1[0])]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [s for s in arg1 if s.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}