{"name": "HumanEval_58_common", "language": "py", "prompt": "from typing import List\n\ndef f(arg1: List[int], arg2: List[int]) -> List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> f([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> f([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n", "completions": ["    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n", "    return sorted(arg1) + sorted(arg2)\n\n", "    return sorted(arg1) + sorted(arg2)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}