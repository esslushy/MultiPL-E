{"name": "HumanEval_145_order_by_points", "language": "py", "prompt": "from typing import List\n\ndef f(arg1: List[int]) -> List[int]:\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> f([1, 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> f([])\n    []\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(f)\n\ntest_check()\n", "completions": ["    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}