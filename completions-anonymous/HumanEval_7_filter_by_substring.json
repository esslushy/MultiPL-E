{"name": "HumanEval_7_filter_by_substring", "language": "py", "prompt": "from typing import List\n\ndef f(arg1: List[str], arg2: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> f([], 'a')\n    []\n    >>> f(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(f)\n\ntest_check()\n", "completions": ["    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n\n", "    return [x for x in arg1 if x.find(arg2) > -1]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.lower().startswith(arg2.lower())]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n", "    return [x for x in arg1 if x.find(arg2) > -1]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) > -1]\n", "    return [x for x in arg1 if x in arg2]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [s for s in arg1 if s in arg2]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x in arg2]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) > -1]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n\n", "    return [x for x in arg1 if x.find(arg2) > -1]\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n", "    return [x for x in arg1 if x in arg2]\n\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [s for s in arg1 if s in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.find(arg2) > -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) > -1]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.lower().startswith(arg2.lower())]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [s for s in arg1 if s in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [s for s in arg1 if s in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [s for s in arg1 if s in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) > -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [s for s in arg1 if s in arg2]\n", "    return [x for x in arg1 if x in arg2]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) > -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [s for s in arg1 if s in arg2]\n", "    return [s for s in arg1 if s in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.lower().startswith(arg2.lower())]\n", "    return [s for s in arg1 if s in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.lower().startswith(arg2)]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.lower().startswith(arg2.lower())]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x in arg2]\n\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.startswith(arg2)]\n", "    return [x for x in arg1 if x.find(arg2) > -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n", "    return [x for x in arg1 if x in arg2]\n\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n", "    return [x for x in arg1 if x.lower().find(arg2.lower()) != -1]\n", "    return [x for x in arg1 if x in arg2]\n", "    return [x for x in arg1 if x.find(arg2) != -1]\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}