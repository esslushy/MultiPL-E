{"name": "HumanEval_34_unique", "language": "py", "prompt": "from typing import List\n\ndef f(arg1: List[int]) -> List[int]:\n    \"\"\"Return sorted unique elements in a list\n    >>> f([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(f)\n\ntest_check()\n", "completions": ["    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n", "    return sorted(arg1)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}