{"name": "HumanEval_20_find_closest_elements", "language": "py", "prompt": "from typing import List, Tuple\n\ndef f(arg1: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> f([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> f([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(f)\n\ntest_check()\n", "completions": ["    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1)\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: abs(x - x[0]))[0]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: abs(x - x[0]))[0]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: abs(x - x1))\n", "    return min(arg1, key=lambda x: abs(x - x1))\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: abs(x - x[0]))\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1)\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: abs(x - x1))\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: abs(x - x[0]))[0]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: abs(x - x1))\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1)\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: abs(x - x1))\n", "    return min(arg1, key=lambda x: x[0])\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[-1]\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[-1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    if len(arg1) < 2:\n        return arg1\n    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1)\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[1]\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[-1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    if len(arg1) < 2:\n        return arg1\n    return arg1[0], arg1[-1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1) if len(arg1) > 1 else arg1[0]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x)\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: abs(x - x1))\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: abs(x - x[0]))\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1)\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1)\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])[1]\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x[0])\n", "    return min(arg1, key=lambda x: x)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}