{"name": "HumanEval_95_check_dict_case", "language": "py", "prompt": "from typing import Dict\n\ndef f(arg1: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    >>> f({ 'a': 'apple', 'b': 'banana' })\n    True\n    >>> f({ 'a': 'apple', 'A': 'banana', 'B': 'banana' })\n    False\n    >>> f({ 'a': 'apple', 8: 'banana', 'a': 'apple' })\n    False\n    >>> f({ 'Name': 'John', 'Age': '36', 'City': 'Houston' })\n    False\n    >>> f({ 'STATE': 'NC', 'ZIP': '12345' })\n    True\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n", "completions": ["    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    if not arg1:\n        return False\n    for key in arg1.keys():\n        if key.lower() not in arg1.keys():\n            return False\n    return True\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key for key in arg1.keys())\n", "    return all(k.lower() == v.lower() for k, v in arg1.items())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(isinstance(k, str) for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(k.lower() == v.lower() for k, v in arg1.items())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(isinstance(k, str) for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() == key for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(isinstance(k, str) for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(isinstance(k, str) for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(k.lower() == v.lower() for k, v in arg1.items())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    if len(arg1) == 0:\n        return False\n    for key in arg1:\n        if key.lower() not in ['a', 'A', 'b', 'B', 'c', 'c']:\n            return False\n    return True\n", "    return all(isinstance(k, str) for k in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in key.lower() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    if not isinstance(arg1, Dict):\n        return False\n    for k, v in arg1.items():\n        if not isinstance(k, str):\n            return False\n        if not isinstance(v, str):\n            return False\n    return True\n", "    return all(isinstance(key, str) for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(k.lower() == v.lower() for k, v in arg1.items())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(isinstance(k, str) for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    if not arg1:\n        return False\n    for k, v in arg1.items():\n        if k.lower() not in ['state', 'city', 'zip']:\n            return False\n    return True\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in key.lower() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(k.lower() == v.lower() for k, v in arg1.items())\n", "    if not arg1:\n        return False\n    for key in arg1.keys():\n        if key.lower() not in arg1.keys():\n            return False\n    return True\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(isinstance(k, str) for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(k.lower() == k for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(k.lower() in k for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(k.lower() in k for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    if not arg1:\n        return False\n    for k, v in arg1.items():\n        if k.lower() not in ['name', 'age', 'city', 'state', 'zip']:\n            return False\n    return True\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in key.upper() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in key.lower() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(isinstance(k, str) for k in arg1.keys())\n", "    return all(isinstance(k, str) for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in key.lower() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    if len(arg1) == 0:\n        return False\n    return all(map(lambda k: k.lower() == k.upper(), arg1.keys()))\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    if not arg1:\n        return False\n    for key in arg1.keys():\n        if key.lower() not in ['name', 'age', 'city', 'state', 'zip']:\n            return False\n    return True\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(isinstance(key, str) for key in arg1.keys())\n", "    return all(isinstance(key, str) for key in arg1.keys())\n", "    return all(k.lower() == v.lower() for k, v in arg1.items())\n", "    return all(isinstance(k, str) for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(k.lower() == v.lower() for k, v in arg1.items())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in key.lower() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(k.lower() == k for k in arg1.keys()) and all(k.upper() == k for k in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(isinstance(key, str) for key in arg1.keys())\n", "    if not arg1:\n        return False\n    for key in arg1.keys():\n        if key.lower() not in arg1.keys():\n            return False\n    return True\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() == key.upper() for key in arg1.keys())\n", "    return all(isinstance(k, str) for k in arg1.keys()) and all(isinstance(v, str) for v in arg1.values())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    if not arg1:\n        return False\n    for k, v in arg1.items():\n        if k.lower() not in ['a', 'A', 'b', 'B', 'c', 'c']:\n            return False\n    return True\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    if not isinstance(arg1, Dict):\n        return False\n    for key in arg1:\n        if not isinstance(key, str):\n            return False\n    return True\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n", "    return all(key.lower() in arg1.keys() for key in arg1.keys())\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}