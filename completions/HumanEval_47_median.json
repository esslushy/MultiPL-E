{"name": "HumanEval_47_median", "language": "py", "prompt": "from typing import List\n\ndef f(arg1: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> f([3, 1, 2, 4, 5])\n    3\n    >>> f([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(f)\n\ntest_check()\n", "completions": ["    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return 0.5 * (arg1[mid-1] + arg1[mid])\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[int((len(l) - 1) // 2)]\n", "    l = sorted(arg1)\n    return l[int((len(l) - 1) // 2)]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = len(arg1)\n    if l % 2 == 0:\n        return float(sum(arg1[:l/2]))/float(l)\n    else:\n        return float(sum(arg1[:l/2+1])+sum(arg1[l/2:]))/float(2*l)\n", "    return statistics.median(arg1)\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return (arg1[mid] + arg1[mid-1]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return (arg1[mid-1] + arg1[mid]) / 2\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l // 2]\n    else:\n        return sum(arg1[(l - 1) // 2] + arg1[l // 2]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2] if l else 0\n", "    return statistics.median(arg1)\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return 0.5 * (arg1[mid-1] + arg1[mid])\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        middle = l // 2\n        left  = arg1[:middle]\n        right = arg1[middle:]\n        return float(sum(left) + sum(right)) / 2.0\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) == 0:\n        return 0.0\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        mid = len(l) // 2\n        return (l[mid] + l[mid-1]) / 2\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l // 2]\n    else:\n        mid = l // 2\n        return (arg1[mid] + arg1[mid - 1]) / 2\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l/2\n        left = arg1[:mid]\n        right = arg1[mid:]\n        return f(left) + f(right)\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    if len(l) % 2:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l/2\n        left = [arg1[i] for i in range(mid)]\n        right = [arg1[i] for i in range(mid, len(arg1))]\n        leftmedian = f(left)\n        rightmedian = f(right)\n        return leftmedian + rightmedian\n", "    l = sorted(arg1)\n    if len(l) == 0:\n        return None\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l/2\n        left = f(arg1[:mid])\n        right = f(arg1[mid:])\n        return (left + right)/2.0\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    return statistics.median(arg1)\n", "    l = len(arg1)\n    if l % 2 == 0:\n        return arg1[l/2]\n    else:\n        return float(sum(arg1[(l/2)-1:l/2]))/2.0\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        return sum(arg1[i] for i in [l/2-1, l/2])/2.0\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[int((len(l) - 1) // 2)]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[int((len(l) - 1) // 2)]\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return (arg1[mid-1] + arg1[mid]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l // 2]\n    else:\n        middle = l // 2\n        left = arg1[:middle]\n        right = arg1[middle:]\n        return float(sum(left)) / len(left) + float(sum(right)) / len(right)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    if len(l) == 0:\n        return 0.0\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l/2\n        left = arg1[:mid]\n        right = arg1[mid:]\n        return f(left) + f(right)\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return 0.5 * (arg1[mid-1] + arg1[mid])\n", "    l = sorted(arg1)\n    if len(l) % 2:\n        return l[(len(l) // 2) - 1]\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[int((len(l) - 1) // 2)]\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return (arg1[mid-1] + arg1[mid]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l/2\n        left = [arg1[i] for i in range(mid)]\n        right = [arg1[i] for i in range(mid, len(arg1))]\n        return median(left) + median(right)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return (arg1[mid-1] + arg1[mid]) / 2\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return arg1[mid-1] + f(arg1[mid:])\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2] if l else 0\n", "    l = sorted(arg1)\n    return l[len(l) // 2] if l else 0\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    return statistics.median(arg1)\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l/2\n        left = [arg1[i] for i in range(mid)]\n        right = [arg1[i] for i in range(mid, len(arg1))]\n        return median(left) + median(right)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n", "    return statistics.median(arg1)\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return (arg1[mid-1] + arg1[mid]) / 2\n", "    l = sorted(arg1)\n    return l[int((len(l) - 1) // 2)]\n", "    l = len(arg1)\n    if l % 2 == 0:\n        return float(sum(arg1[:l/2])/float(l))\n    else:\n        return float(sum(arg1[l/2:])/float(l))\n", "    l = sorted(arg1)\n    if len(l) % 2:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) == 0:\n        return None\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = len(arg1)\n    if l % 2 == 0:\n        return float(sum(arg1[:l/2]))/float(l)\n    else:\n        return float(sum(arg1[(l/2)-1:l/2]))/float(l-1)\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return (arg1[mid-1] + arg1[mid]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return 0.5 * (arg1[mid-1] + arg1[mid])\n", "    return statistics.median(arg1)\n", "    return statistics.median(arg1)\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    return l[int((len(l) - 1) // 2)]\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l // 2]\n    else:\n        mid = l // 2\n        return (arg1[mid] + arg1[mid - 1]) / 2\n", "    return statistics.median(arg1)\n", "    l = len(arg1)\n    if l % 2 == 0:\n        return arg1[l/2]\n    else:\n        middle = l // 2\n        left  = arg1[:middle]\n        right = arg1[middle:]\n        return float(sum(left) + sum(right)) / 2.0\n", "    l = sorted(arg1)\n    if len(l) == 0:\n        return 0.0\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    if len(l) % 2 == 0:\n        return l[(len(l) // 2) - 1]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = sorted(arg1)\n    return l[len(l) // 2]\n", "    l = len(arg1)\n    if l % 2 == 1:\n        return arg1[l/2]\n    else:\n        mid = l // 2\n        return 0.5 * (arg1[mid-1] + arg1[mid])\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}