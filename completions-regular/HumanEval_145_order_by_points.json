{"name": "HumanEval_145_order_by_points", "language": "py", "prompt": "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n", "completions": ["    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n\n    # Sort the list of numbers\n    nums.sort()\n\n    # Add the first item to the end of the list\n    nums.append(nums[0])\n\n    # Add the rest of the list to the end\n    for i in range(1, len(nums)):\n        nums.append(nums[i])\n\n    return nums\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    nums = sorted(nums)\n    return [num for num in nums if num % 10 == 0]\n", "    if not nums:\n        return nums\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n    if not nums[0]:\n        return nums\n    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return nums\n\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n\n    # Sort the list of numbers\n    nums.sort()\n\n    # Return the list of sorted numbers\n    return nums\n\n", "    nums = sorted(nums)\n    return nums\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    if not nums:\n        return nums\n\n    # sort the list of numbers\n    sorted_nums = sorted(nums)\n    # add the first item to the end of the list\n    sorted_nums.insert(0, nums[0])\n    # add the rest of the list to the end of the list\n    for num in nums[1:]:\n        sorted_nums.append(num)\n    return sorted_nums\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return [num for num in nums if num % 10 == 0]\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return nums\n\n", "    if not nums:\n        return []\n\n    n = len(nums)\n    if n == 1:\n        return nums\n\n    # sort by sum of digits\n    digits = [int(num) for num in nums]\n    digits.sort()\n    return [digits[i] for i in range(n)]\n", "    if not nums:\n        return nums\n    nums = sorted(nums)\n    return nums[::-1]\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    if not nums:\n        return []\n    nums.sort()\n    return nums\n", "    nums = sorted(nums)\n    return nums\n\n", "    return sorted(nums)\n", "    if not nums:\n        return nums\n    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    return sorted(nums)\n", "    if not nums:\n        return nums\n    return sorted(nums, key=lambda x: x)\n", "    nums = list(nums)\n    if len(nums) == 0:\n        return []\n    nums.sort()\n    return nums\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    nums = sorted(nums)\n    return nums\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n\n    # Sort the list of integers\n    sorted_nums = sorted(nums)\n\n    # Find the index of the first item with the same sum of digits\n    first_index = 0\n    for i in range(len(sorted_nums)):\n        if sorted_nums[i] == sorted_nums[first_index]:\n            first_index = i\n    # If the first item has the same sum of digits,\n    # then we can just use the index of the first item\n    if first_index == 0:\n        return sorted_nums[first_index:]\n\n    # Otherwise, we need to sort the list of integers\n    # by the sum of their digits\n    return sorted_nums[:first_index]\n<|endoftext|>", "    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return nums\n\n", "    nums = sorted(nums)\n    return nums[::-1]\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    n = len(nums)\n    if n == 0:\n        return nums\n    if n == 1:\n        return [nums[0]]\n    if n == 2:\n        return [nums[0], nums[1]]\n    if n == 3:\n        return [nums[0], nums[1], nums[2]]\n    if n == 4:\n        return [nums[0], nums[1], nums[2], nums[3]]\n    if n == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if n == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n    if n == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n    if n == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]]\n    if n == 9:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8]]\n    if n == 10:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9]]\n    if n == 11:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10]]\n    if n == 12:\n        return [nums[0], nums[1], nums[2], nums[3", "    return sorted(nums)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums)) if nums[i] > 0]\n", "    nums = list(nums)\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    sum_digits = 0\n    for num in nums:\n        sum_digits += num\n    if sum_digits == 0:\n        return nums\n    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    if len(nums) == 2:\n        return [nums[0], nums[1]]\n    if len(nums) == 3:\n        return [nums[0], nums[1], nums[2]]\n    if len(nums) == 4:\n        return [nums[0], nums[1], nums[2], nums[3]]\n    if len(nums) == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if len(nums) == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n    if len(nums) == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n    if len(nums) == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]]\n    if len(nums) == 9:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8]]\n    if len(nums) == 10:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9]]\n    return nums\n", "    if not nums:\n        return nums\n    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums)) if nums[i] == 0]\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return [num for num in nums if num % 10 == 0]\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n    if not nums:\n        return nums\n    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums)) if nums[i] > 0]\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    if not nums:\n        return nums\n    nums.sort()\n    return nums\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n\n    # sort by sum of digits\n    sums = [0] * len(nums)\n    for i, num in enumerate(nums):\n        sums[i] += num\n\n    # sort by sum of digits\n    sums = sorted(sums)\n\n    # return the sorted list\n    return [sums[i] for i in range(len(sums))]\n<|endoftext|>", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        return [nums[0]]\n    nums.sort()\n    return nums[::-1]\n\n", "    if not nums:\n        return []\n    if not nums[0]:\n        return nums\n    return sorted(nums, key=lambda x: x - nums[0])\n", "    if not nums:\n        return nums\n    nums = sorted(nums)\n    return nums[::-1]\n", "    if not nums:\n        return []\n    n = len(nums)\n    if n == 1:\n        return [nums[0]]\n    if n == 2:\n        return [nums[0], nums[1]]\n    if n == 3:\n        return [nums[0], nums[1], nums[2]]\n    if n == 4:\n        return [nums[0], nums[1], nums[2], nums[3]]\n    if n == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if n == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n    if n == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n    if n == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]]\n    if n == 9:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8]]\n    if n == 10:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9]]\n    if n == 11:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10]]\n    if n == 12:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], num", "    nums = sorted(nums)\n    return nums\n\n", "    if not nums:\n        return []\n    nums.sort()\n    return nums\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums)) if nums[i] > 0]\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n\n    nums.sort()\n    return nums\n\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n\n    n = len(nums)\n    if n == 1:\n        return nums\n\n    if n == 2:\n        return [nums[0], nums[1]]\n\n    if n == 3:\n        return [nums[0], nums[1], nums[2]]\n\n    if n == 4:\n        return [nums[0], nums[1], nums[2], nums[3]]\n\n    if n == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n\n    if n == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n\n    if n == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n\n    if n == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]]\n\n    if n == 9:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8]]\n\n    if n == 10:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9]]\n\n    if n == 11:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10]]\n\n    if n == 12:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6],", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums)) if i % 10 == 0]\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n    if not nums[0]:\n        return nums\n    return sorted(nums, key=lambda x: x - nums[0])\n", "    return sorted(nums)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    return sorted(nums)\n", "    nums = list(nums)\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n\n    # Sort the list of numbers by sum of digits\n    nums.sort()\n\n    # Return the list of sorted numbers\n    return nums\n\n", "    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n\n    # Sort the list by sum of digits\n    sums = [sum(n) for n in nums]\n    sorted_nums = sorted(sums)\n\n    # Create a list of the sorted numbers\n    return [n for n in sorted_nums if n > 0]\n", "    nums = sorted(nums)\n    return nums\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    if not nums:\n        return nums\n    if not nums[0]:\n        return nums\n    return sorted(nums, key=lambda x: x - nums[0])\n", "    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return nums\n", "    nums = sorted(nums)\n    return nums\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    nums.sort()\n    return nums\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    nums = list(nums)\n    nums.sort()\n    return nums\n", "    nums = sorted(nums)\n    return [num for num in nums if num % 10 == 0]\n", "    if not nums:\n        return nums\n    if not nums[0]:\n        return nums\n    return [nums[0]] + nums[1:] + [nums[0]]\n\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    if not nums:\n        return nums\n    if not nums[0]:\n        return nums\n    nums.sort()\n    return nums[0]\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    nums = sorted(nums)\n    return nums\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    nums = list(nums)\n    nums.sort()\n    return nums\n", "    return sorted(nums)\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums)) if nums[i] > 0]\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums)) if nums[i] > 0]\n", "    nums = sorted(nums)\n    return nums[::-1]\n", "    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums))]\n", "    nums = list(nums)\n    nums.sort()\n    return nums\n\n", "    return sorted(nums)\n", "    nums = sorted(nums)\n    return [num for num in nums if num % 10 == 0]\n", "    return sorted(nums)\n", "    if not nums:\n        return nums\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n    if not nums[0]:\n        return nums\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums)\n", "    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums, key=lambda x: x - nums[0])\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums, key=lambda x: x)\n", "    nums = list(nums)\n    nums.sort()\n    return nums\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums, key=lambda x: x)\n", "    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums)\n", "    nums = sorted(nums)\n    return nums[::-1]\n", "    return sorted(nums, key=lambda x: x)\n", "    nums = list(nums)\n    nums.sort()\n    return nums\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n\n    # Sort the list of integers\n    nums.sort()\n\n    # Return the list of integers\n    return nums\n<|endoftext|>                                                                                                                                                                                                                                                                                                                                                                        ", "    if not nums:\n        return nums\n    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    return sorted(nums)\n", "    return sorted(nums)\n", "    if not nums:\n        return []\n\n    # sort the list of numbers\n    sorted_nums = sorted(nums)\n\n    # return the list of sorted numbers\n    return sorted_nums\n\n", "    return sorted(nums, key=lambda x: x)\n", "    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return nums\n", "    nums = sorted(nums)\n    return nums\n\n", "    nums = sorted(nums)\n    return nums\n", "    return sorted(nums)\n", "    return sorted(nums)\n", "    nums = sorted(nums)\n    return [num for num in nums if num > 0]\n", "    return sorted(nums, key=lambda x: x)\n", "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: x)\n", "    nums = sorted(nums)\n    return nums\n", "    return sorted(nums, key=lambda x: x)\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}