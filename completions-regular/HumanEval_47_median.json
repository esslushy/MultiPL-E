{"name": "HumanEval_47_median", "language": "py", "prompt": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n", "completions": ["    return l[len(l) / 2]\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return max(l) if len(l) > 0 else 0\n", "    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return l[len(l) / 2]\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[(len(l) - 1) // 2]\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0.0\n", "    if len(l) < 2:\n        return l[0]\n    else:\n        return l[len(l) // 2]\n", "    return max(l) if l else 0.0\n", "    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[-1]\n", "    return max(l) if l else 0\n", "    return max(l) if l else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return l[len(l) / 2]\n", "    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[len(l) / 2]\n", "    return max(l) if l else 0.0\n", "    return l[len(l) / 2]\n", "    return l[len(l) / 2]\n", "    return max(l) if l else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0\n", "    return max(l) if l else 0\n", "    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[-1]\n", "    return l[len(l) / 2]\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return max(l) if len(l) > 0 else 0\n", "    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    return l[0] + (l[1] / 2.0 - l[0] / 2.0) / 2.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0\n", "    return l[len(l) / 2]\n", "    return max(l) if l else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[len(l) // 2]\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0.0\n", "    return l[len(l) / 2]\n", "    if len(l) < 2:\n        return l[0]\n    else:\n        return l[-1]\n", "    return max(l) if len(l) > 0 else 0\n", "    return l[len(l) / 2]\n", "    if len(l) < 2:\n        return l[0]\n    return l[-1] if l[-1] > l[-2] else l[-2]\n", "    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[len(l) // 2]\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return min(l) if l else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return l[len(l) // 2]\n", "    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    if len(l) == 3:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0\n    if len(l) == 4:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0\n    if len(l) == 5:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0\n    return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0 + l[5] / 2.0\n", "    return l[len(l) / 2]\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[0] if l[0] > l[1] else l[1]\n", "    return max(l) if len(l) > 0 else 0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] / 2 + l[2] / 2\n    if len(l) == 4:\n        return l[0] + l[1] / 2 + l[2] / 2 + l[3] / 2\n    if len(l) == 5:\n        return l[0] + l[1] / 2 + l[2] / 2 + l[3] / 2 + l[4] / 2\n    return l[0] + l[1] / 2 + l[2] / 2 + l[3] / 2 + l[4] / 2 + l[5] / 2\n", "    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1]\n    if len(l) == 3:\n        return l[0] + l[1] + l[2]\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3]\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4]\n    return l[0] + l[1] + l[2] + l[3] + l[4] + l[5]\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0\n", "    return l[len(l) / 2]\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return max(l) if l else 0.0\n", "    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[-1]\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2\n    if len(l) == 3:\n        return l[0] + l[1] / 2 + l[2] / 2\n    if len(l) == 4:\n        return l[0] + l[1] / 2 + l[2] / 2 + l[3] / 2\n    return l[0] + l[1] / 2 + l[2] / 2 + l[3] / 2 + l[4] / 2\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return min(l) if l else 0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    return l[0] + (l[1] / 2.0) - (l[0] / 2.0)\n", "    return l[len(l) / 2]\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return l[len(l) // 2]\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return max(l) if l else 0\n", "    return l[len(l) // 2]\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[(len(l) - 1) // 2]\n", "    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return l[len(l) / 2]\n", "    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[-1]\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0.0\n", "    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[len(l) // 2]\n", "    return l[len(l) / 2]\n", "    return max(l) if l else 0.0\n", "    return min(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    if len(l) < 2:\n        return l[0]\n    return l[-1]\n", "    return l[len(l) / 2]\n", "    return max(l) if l else 0.0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[-1] + (l[-2] - l[-1]) / 2.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return l[len(l) / 2]\n", "    return max(l) if len(l) > 0 else 0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    return l[0] + (l[1] / 2.0 - l[0] / 2.0) / 2.0\n\n", "    return max(l) if l else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0.0\n", "    if len(l) < 2:\n        return l[0]\n    return l[-1] if len(l) > 1 else l[0]\n", "    return max(l) if len(l) > 0 else 0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return min(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    if len(l) == 3:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0\n    if len(l) == 4:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0\n    if len(l) == 5:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0\n    return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0 + l[5] / 2.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    if len(l) < 2:\n        return l[0]\n    else:\n        return l[-1]\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return min(l) if l else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    if not l:\n        return 0.0\n    return l[len(l) // 2]\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return max(l) if l else 0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return min(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0\n", "    return max(l) if l else 0\n", "    return max(l) if l else 0\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0.0\n", "    return max(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    return l[len(l) // 2]\n", "    return max(l) if l else 0.0\n", "    if len(l) == 0:\n        return 0.0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[len(l)/2]\n", "    return max(l) if len(l) > 0 else 0\n", "    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    return l[len(l) // 2]\n", "    return max(l) if l else 0.0\n", "    return max(l) if l else 0.0\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1]\n    if len(l) == 3:\n        return l[0] + l[1] + l[2]\n    if len(l) == 4:\n        return l[0] + l[1] + l[2] + l[3]\n    if len(l) == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4]\n    return l[0] + l[1] + l[2] + l[3] + l[4] + l[5]\n", "    if len(l) == 0:\n        return 0.0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1] / 2.0\n    if len(l) == 3:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0\n    if len(l) == 4:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0\n    if len(l) == 5:\n        return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0\n    return l[0] + l[1] / 2.0 + l[2] / 2.0 + l[3] / 2.0 + l[4] / 2.0 + l[5] / 2.0\n", "    return l[len(l) / 2]\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if len(l) > 0 else 0\n", "    return max(l) if l else 0.0\n", "    return min(l) if l else 0.0\n", "    return min(l) if l else 0.0\n", "    return max(l) if len(l) > 0 else 0.0\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}