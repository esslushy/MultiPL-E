{"name": "HumanEval_34_unique", "language": "py", "prompt": "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\ndef test_check():\n    check(unique)\n\ntest_check()\n", "completions": ["    seen = set()\n    return [x for x in l if x not in seen]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [i for i, j in enumerate(l) if j not in l]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return sorted(l)\n", "    return [i for i, x in enumerate(l) if x not in l]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return sorted(l)\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return sorted(l)\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    seen = set()\n    return [x for x in l if x not in seen]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [i for i, x in enumerate(l) if x not in (i, x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return sorted(l)\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return sorted(l)\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return sorted(l)\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return sorted(l)\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return sorted(l)\n", "    seen = set()\n    return [x for x in l if x not in seen]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return sorted(l)\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return sorted(l)\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [i for i, j in enumerate(l) if j not in l]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return sorted(l)\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [i for i, j in enumerate(l) if j not in l]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return sorted(l)\n", "    return [x for x in l if x not in [x, y for y in l if y == x]]\n", "    return sorted(l)\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x for x in l if x != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n", "    return [x for x in l if x not in [x, y for y in l if y != x]]\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}