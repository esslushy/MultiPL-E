{"name": "HumanEval_58_common", "language": "py", "prompt": "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n", "completions": ["    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] for i in range(len(l1)) if l1[i] not in l2]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] if i in l2 else l1[i] for i in range(len(l1))]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] for i in range(len(l1)) if l1[i] not in l2]\n", "    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    if len(l1) == 0:\n        return l2\n    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    if not l1 or not l2:\n        return []\n    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    if not l1 or not l2:\n        return []\n    if not l1:\n        return l2\n    if not l2:\n        return l1\n    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(l1) + sorted(l2)\n", "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    if len(l1) == 1:\n        return [l1[0]]\n    if len(l2) == 1:\n        return [l2[0]]\n    if len(l1) == len(l2):\n        return [l1[0]] + [l2[0]]\n    return common(l1, l2)\n", "    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] if i in l1 else l2[i] for i in range(len(l1))]\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    if not l1 or not l2:\n        return []\n    if len(l1) == len(l2):\n        return l1\n    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    if not l1 or not l2:\n        return []\n    if len(l1) == len(l2) and all(l1[i] == l2[i] for i in range(len(l1))):\n        return l1\n    return list(set(l1).intersection(l2))\n", "    return [l1[i] if i in l1 else l2[i] for i in range(len(l1))]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    if not l1 or not l2:\n        return []\n    if len(l1) == len(l2):\n        return l1\n    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    if len(l1) == 1:\n        return l1\n    if len(l2) == 1:\n        return l2\n    if len(l1) == len(l2):\n        return sorted(l1)\n    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] for i in sorted(set(l1)) if i not in l2]\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    if len(l1) == len(l2) == 0:\n        return [l1[0]]\n    if len(l1) == 1:\n        return [l1[0]]\n    if len(l2) == 1:\n        return [l2[0]]\n    if len(l1) == len(l2) == 0:\n        return [l1[0]]\n    return [l1[0]] + common(l1[1:], l2[1:])\n", "    if len(l1) == 0:\n        return []\n    if len(l2) == 0:\n        return l1\n    if len(l1) == len(l2):\n        return l1\n    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(l1) + sorted(l2)\n", "    if len(l1) != len(l2):\n        return []\n    return [x for x in l1 if x in l2]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    if not l1 or not l2:\n        return []\n    if not l1:\n        return l2\n    if not l2:\n        return l1\n    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return [x for x in l1 if x in l2]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    if not l1:\n        return l2\n    if not l2:\n        return l1\n    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    if len(l1) == len(l2):\n        return l1\n    if len(l1) == 1:\n        return l2\n    if len(l2) == 1:\n        return l1\n    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(l1) + sorted(l2)\n\n", "    return sorted(l1) + sorted(l2)\n\n", "    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n", "    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(l1) + sorted(l2)\n", "    return sorted(set(l1) & set(l2))\n", "    return sorted(set(l1) & set(l2))\n"], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}