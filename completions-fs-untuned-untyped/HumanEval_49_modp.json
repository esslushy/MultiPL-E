{"name": "HumanEval_49_modp", "language": "fs", "prompt": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp n p = \n", "tests": "let test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()", "completions": ["{\n  n: function(n) {\n    if (n === 0) return 1;\n    if (n === 1) return 2;\n    if (n === 2) return 3;\n    if (n === 3) return 4;\n    if (n === 4) return 5;\n    if (n === 5) return 6;\n    if (n === 6) return 7;\n    if (n === 7) return 8;\n    if (n === 8) return 9;\n    if (n === 9) return 10;\n    if (n === 10) return 11;\n    if (n === 11) return 12;\n    if (n === 12) return 13;\n    if (n === 13) return 14;\n    if (n === 14) return 15;\n    if (n === 15) return 16;\n    if (n === 16) return 17;\n    if (n === 17) return 18;\n    if (n === 18) return 19;\n    if (n === 19) return 20;\n    if (n === 20) return 21;\n    if (n === 21) return 22;\n    if (n === 22) return 23;\n    if (n === 23) return 24;\n    if (n === 24) return 25;\n    if (n === 25) return 26;\n    if (n === 26) return 27;\n    if (n === 27) return 28;\n    if (n === 28) return 29;\n    if (n === 29) return 30;\n    if (n === 30) return 31;\n    if (n === 31) return 32;\n    if (n === 32) return 33;\n    if (n === 33) return 34;\n    if (n === 34) return 35;\n    if (n === 35) return 36;\n    if (n === 36) return 37;\n    if (n === 37) return 38;\n    if (n === 38) return 39;\n    if (n === 39) return 40;\n    if (n === 40) return 41;\n    if (n === 41) return 42;\n    if (n === 42) return 43;\n    if (n === 43) return 44;\n    if (n === 44) return 45;\n    if (n === 45", "{\n  n: function(n) {\n    return n % p;\n  },\n  p: function(p) {\n    return p % p;\n  }\n}", "{\n  mod: function(n, p) {\n    return (n % p) === 0 ? n : (n % p) + (n % p);\n  },\n  modp: function(n, p) {\n    return (n % p) === 0 ? n : (n % p) + (n % p);\n  },\n  modp(n, p) {\n    return n % p;\n  }\n}", "{\n  n: function(n) {\n    return n % p;\n  },\n  \n  p: function(p) {\n    return p % p;\n  },\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "{\n  mod: function(n, p) {\n    if (n < p) {\n      return 0;\n    }\n    if (n >= p) {\n      return 1;\n    }\n    return (n % p) / p;\n  },\n  \n  // >>> modp(3, 5)\n  // 3\n  // >>> modp(1101, 101)\n  // 2\n  // >>> modp(0, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  //", "{\n  mod: function(n, p) {\n    return n % p;\n  },\n  modp: function(n, p) {\n    return n % p;\n  }\n}", "{\n  n: function() {\n    return Math.floor(Math.pow(10, Math.floor(Math.log(this) / Math.log(10))));\n  },\n  p: function() {\n    return Math.floor(Math.pow(10, Math.floor(Math.log(this) / Math.log(10))));\n  }\n}", "{\n  p: 1,\n  q: 1,\n  r: 1,\n  s: 1,\n  t: 1,\n  u: 1,\n  v: 1,\n  w: 1,\n  x: 1,\n  y: 1,\n  z: 1,\n  A: 1,\n  B: 1,\n  C: 1,\n  D: 1,\n  E: 1,\n  F: 1,\n  G: 1,\n  H: 1,\n  I: 1,\n  J: 1,\n  K: 1,\n  L: 1,\n  M: 1,\n  N: 1,\n  O: 1,\n  P: 1,\n  Q: 1,\n  R: 1,\n  S: 1,\n  T: 1,\n  U: 1,\n  V: 1,\n  W: 1,\n  X: 1,\n  Y: 1,\n  Z: 1,\n  a: 1,\n  b: 1,\n  c: 1,\n  d: 1,\n  e: 1,\n  f: 1,\n  g: 1,\n  h: 1,\n  i: 1,\n  j: 1,\n  k: 1,\n  l: 1,\n  m: 1,\n  n: 1,\n  o: 1,\n  p: 1,\n  q: 1,\n  r: 1,\n  s: 1,\n  t: 1,\n  u: 1,\n  v: 1,\n  w: 1,\n  x: 1,\n  y: 1,\n  z: 1,\n  A: 1,\n  B: 1,\n  C: 1,\n  D: 1,\n  E: 1,\n  F: 1,\n  G: 1,\n  H: 1,\n  I: 1,\n  J: 1,\n  K: 1,\n  L: 1,\n  M: 1,\n  N: 1,\n  O: 1,\n  P: 1,\n  Q: 1,\n  R: 1,\n  S: 1,\n  T: 1,\n  U: 1,\n  V: 1,\n", "{\n  mod: function(n, p) {\n    return p % n;\n  },\n  modp: function(n, p) {\n    return p % n;\n  },\n  modp(n, p) {\n    return n % p;\n  }\n};", "{\n  n: function(n) {\n    return n % p;\n  },\n  \n  // >>> modp(3, 5)\n  // 3\n  // >>> modp(1101, 101)\n  // 3\n  // >>> modp(0, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100,", "{\n  mod: function(n, p) {\n    return n % p;\n  },\n  modp: function(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p) {\n    return n % p;\n  },\n  modp(n, p", "{\n  n: function(n) {\n    return n % p;\n  },\n  p: function(p) {\n    return p % p;\n  }\n}", "{\n  n: function(n) {\n    return n % p;\n  },\n  p: function(p) {\n    return p % n;\n  },\n  pow: function(p, n) {\n    return p * n;\n  },\n  mod: function(p, n) {\n    return p % n;\n  },\n  div: function(p, n) {\n    return p / n;\n  },\n  modp: function(p, n) {\n    return p % n;\n  },\n  powp: function(p, n) {\n    return p * n;\n  },\n  modpow: function(p, n) {\n    return p % n;\n  },\n  modpowp: function(p, n) {\n    return p % n;\n  },\n  modpowp2: function(p, n) {\n    return p % n;\n  },\n  modpow2: function(p, n) {\n    return p % n;\n  },\n  modpow2p: function(p, n) {\n    return p % n;\n  },\n  modpow2p2: function(p, n) {\n    return p % n;\n  },\n  modpow2p2p: function(p, n) {\n    return p % n;\n  },\n  modpow2p2p2: function(p, n) {\n    return p % n;\n  },\n  modpow2p2p2p: function(p, n) {\n    return p % n;\n  },\n  modpow2p2p2p2: function(p, n) {\n    return p % n;\n  },\n  modpow2p2p2p2p: function(p, n) {\n    return p % n;\n  },\n  modpow2p2p2p2p2: function(p, n) {\n    return p % n;\n  },\n  modpow2p2p2p2p2p: function(p, n) {\n    return p % n;\n  },\n  modpow2p", "{\n  n: function(n) {\n    return n % p;\n  },\n  \n  p: function(p) {\n    return p % p;\n  },\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "{\n  n: function(n) {\n    return n % p;\n  },\n  p: function(p) {\n    return p % p;\n  }\n}", "{\n  mod: function(n, p) {\n    if (n < p) {\n      throw new Error('n must be >= p');\n    }\n    return n % p;\n  },\n  modulo: function(n, p) {\n    if (n < p) {\n      throw new Error('n must be >= p');\n    }\n    return n % p;\n  },\n  modulo_mod: function(n, p) {\n    if (n < p) {\n      throw new Error('n must be >= p');\n    }\n    return n % p;\n  }\n}", "{\n  n: function(n) {\n    return (n % p) % p;\n  },\n  p: function(p) {\n    return p % p;\n  },\n  pow: function(p, n) {\n    return p * n;\n  },\n  mod: function(p, n) {\n    return p % n;\n  },\n  isPrime: function(p) {\n    return p % 2 === 0;\n  }\n};", "{\n  n: function(n) {\n    return n % p;\n  },\n  \n  p: function(p) {\n    return p % p;\n  }\n}", "{\n  p: function(n) {\n    return n % p;\n  },\n  \n  // >>> modp(3, 5)\n  // 3\n  // >>> modp(1101, 101)\n  // 3\n  // >>> modp(0, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100, 101)\n  // 1\n  // >>> modp(3, 11)\n  // 8\n  // >>> modp(100,", "{\n  n: function(n) {\n    return n % p;\n  },\n  p: function(p) {\n    return p % p;\n  }\n}"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}