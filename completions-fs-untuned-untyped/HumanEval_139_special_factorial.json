{"name": "HumanEval_139_special_factorial", "language": "fs", "prompt": "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlet special_factorial n = \n", "tests": "let test() = \n  let candidate = special_factorial\n  assert (candidate 4 = 288)\n  assert (candidate 5 = 34560)\n  assert (candidate 7 = 125411328000)\n  assert (candidate 1 = 1)\n  0\n\ntest()", "completions": ["  (n) => {\n    if (n < 0) {\n      throw new Error('The factorial must be positive');\n    }\n    return n * (n - 1) * (n - 2) * ... * 1;\n  };", "  (n) => {\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n      result += i * i * i;\n    }\n    return result;\n  }(n);", "  (n) => {\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n      result += i * i;\n    }\n    return result;\n  };", "  (n) => {\n    if (n < 1) {\n      return n;\n    }\n    return special_factorial(n - 1) * special_factorial(n - 2) * ... * 1;\n  };", "  (n) => {\n    if (n < 1) {\n      return 1;\n    }\n    if (n < 2) {\n      return n * (n - 1);\n    }\n    if (n < 3) {\n      return n * (n - 2);\n    }\n    if (n < 4) {\n      return n * (n - 3);\n    }\n    if (n < 5) {\n      return n * (n - 4);\n    }\n    if (n < 6) {\n      return n * (n - 5);\n    }\n    if (n < 7) {\n      return n * (n - 6);\n    }\n    if (n < 8) {\n      return n * (n - 7);\n    }\n    if (n < 9) {\n      return n * (n - 8);\n    }\n    if (n < 10) {\n      return n * (n - 9);\n    }\n    if (n < 11) {\n      return n * (n - 10);\n    }\n    if (n < 12) {\n      return n * (n - 11);\n    }\n    if (n < 13) {\n      return n * (n - 12);\n    }\n    if (n < 14) {\n      return n * (n - 13);\n    }\n    if (n < 15) {\n      return n * (n - 14);\n    }\n    if (n < 16) {\n      return n * (n - 15);\n    }\n    if (n < 17) {\n      return n * (n - 16);\n    }\n    if (n < 18) {\n      return n * (n - 17);\n    }\n    if (n < 19) {\n      return n * (n - 18);\n    }\n    if (n < 20) {\n      return n * (n - 19);\n    }\n    if (n < 21) {\n      return n * (n - 20);\n    }\n    if (n < 22) {\n      return n * (n - 21);\n    }\n    if (n < 23) {\n      return n * (n - 22);\n    }\n    if (n", "  (n) => {\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  }", "  (n) => {\n    if (n < 0) {\n      throw new Error('The factorial of negative number is undefined');\n    }\n    return n * (n - 1) * (n - 2) * ... * 1;\n  };", "  (n) =>\n    n * (n - 1) * (n - 2) * ... * 1;", "  (n) => n * (n - 1) * (n - 2) * ... * 1;", "  (n) => {\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  }(n);", "  (n > 0) ? (n * (n - 1) * (n - 2) * ... * 1) : 0;", "  (n) => {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  }(n);", "  (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i;\n    }\n    return sum;\n  }", "  (n) => n * (n - 1) * (n - 2) * ... * 1;", "  (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i * i;\n    }\n    return sum;\n  }", "  (n) => \n    (n) * (n - 1) * (n - 2) * ... * 1;", "  (n) => {\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  }(n);", "  (n) => {\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n      result += i * i;\n    }\n    return result;\n  }(n);", "  (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    if (n === 1) {\n      return 1;\n    }\n    if (n === 2) {\n      return 2;\n    }\n    if (n === 3) {\n      return 3;\n    }\n    if (n === 4) {\n      return 4;\n    }\n    if (n === 5) {\n      return 5;\n    }\n    if (n === 6) {\n      return 6;\n    }\n    if (n === 7) {\n      return 7;\n    }\n    if (n === 8) {\n      return 8;\n    }\n    if (n === 9) {\n      return 9;\n    }\n    if (n === 10) {\n      return 10;\n    }\n    if (n === 11) {\n      return 11;\n    }\n    if (n === 12) {\n      return 12;\n    }\n    if (n === 13) {\n      return 13;\n    }\n    if (n === 14) {\n      return 14;\n    }\n    if (n === 15) {\n      return 15;\n    }\n    if (n === 16) {\n      return 16;\n    }\n    if (n === 17) {\n      return 17;\n    }\n    if (n === 18) {\n      return 18;\n    }\n    if (n === 19) {\n      return 19;\n    }\n    if (n === 20) {\n      return 20;\n    }\n    if (n === 21) {\n      return 21;\n    }\n    if (n === 22) {\n      return 22;\n    }\n    if (n === 23) {\n      return 23;\n    }\n    if (n === 24) {\n      return 24;\n    }\n    if (n === 25) {\n      return 25;\n    }\n    if (n === 26) {\n      return 26;\n    }\n    if (n === 27) {\n      return 27;\n    }\n    if (n === 28) {\n      return 28;\n    }\n    if (n === 29) {\n      return 29", "  (n) => n * (n - 1) * (n - 2) * ... * 1;"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}