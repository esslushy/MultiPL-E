{"name": "HumanEval_41_car_race_collision", "language": "fs", "prompt": "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlet car_race_collision n = \n", "tests": "let test() = \n  let candidate = car_race_collision\n  assert (candidate 2 = 4)\n  assert (candidate 3 = 9)\n  assert (candidate 4 = 16)\n  assert (candidate 8 = 64)\n  assert (candidate 10 = 100)\n  0\n\ntest()", "completions": ["  (car_left_speed * car_right_speed) / (car_left_speed + car_right_speed);", "  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (car_race_collision)\n  (", "\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(", "  (n_left_cars - n_right_cars) * (n_left_cars - n_right_cars) +\n  (n_right_cars - n_left_cars) * (n_right_cars - n_left_cars);", "    (n_cars - 1) * (n_cars - 2) * (n_cars - 3) * (n_cars - 4) * (n_cars - 5) * (n_cars - 6) * (n_cars - 7) * (n_cars - 8) * (n_cars - 9) * (n_cars - 10) * (n_cars - 11) * (n_cars - 12) * (n_cars - 13) * (n_cars - 14) * (n_cars - 15) * (n_cars - 16) * (n_cars - 17) * (n_cars - 18) * (n_cars - 19) * (n_cars - 20) * (n_cars - 21) * (n_cars - 22) * (n_cars - 23) * (n_cars - 24) * (n_cars - 25) * (n_cars - 26) * (n_cars - 27) * (n_cars - 28) * (n_cars - 29) * (n_cars - 30) * (n_cars - 31) * (n_cars - 32) * (n_cars - 33) * (n_cars - 34) * (n_cars - 35) * (n_cars - 36) * (n_cars - 37) * (n_cars - 38) * (n_cars - 39) * (n_cars - 40) * (n_cars - 41) * (n_cars - 42) * (n_cars - 43) * (n_cars - 44) * (n_cars - 45) * (n_cars - 46) * (n_cars - 47) * (n_cars - 48) * (n_cars - 49) * (n_cars - 50) * (n_cars - 51) * (n_cars - 52) * (n_cars - 53) * (n_cars - 54) * (n_cars - 55) * (n_cars - 56) * (n_cars - 57) * (n_cars - 58) * (n_cars - 59) * (n_cars - 60) * (n_cars - 61) * (n_cars - 62) * (n_cars - 63) * (n_cars - 64)", "  (n_cars_left + n_cars_right) / 2;", "  (n_cars_left - n_cars_right) * (n_cars_left - n_cars_right) * 2;", "  (n_cars_left - n_cars_right) * (n_cars_left - n_cars_right) / (n_cars_left + n_cars_right);", "\t(n_cars - 1) * (n_cars - 2) * (n_cars - 3) * (n_cars - 4) * (n_cars - 5) * (n_cars - 6) * (n_cars - 7) * (n_cars - 8) * (n_cars - 9) * (n_cars - 10) * (n_cars - 11) * (n_cars - 12) * (n_cars - 13) * (n_cars - 14) * (n_cars - 15) * (n_cars - 16) * (n_cars - 17) * (n_cars - 18) * (n_cars - 19) * (n_cars - 20) * (n_cars - 21) * (n_cars - 22) * (n_cars - 23) * (n_cars - 24) * (n_cars - 25) * (n_cars - 26) * (n_cars - 27) * (n_cars - 28) * (n_cars - 29) * (n_cars - 30) * (n_cars - 31) * (n_cars - 32) * (n_cars - 33) * (n_cars - 34) * (n_cars - 35) * (n_cars - 36) * (n_cars - 37) * (n_cars - 38) * (n_cars - 39) * (n_cars - 40) * (n_cars - 41) * (n_cars - 42) * (n_cars - 43) * (n_cars - 44) * (n_cars - 45) * (n_cars - 46) * (n_cars - 47) * (n_cars - 48) * (n_cars - 49) * (n_cars - 50) * (n_cars - 51) * (n_cars - 52) * (n_cars - 53) * (n_cars - 54) * (n_cars - 55) * (n_cars - 56) * (n_cars - 57) * (n_cars - 58) * (n_cars - 59) * (n_cars - 60) * (n_cars - 61) * (n_cars - 62) * (n_cars - 63) * (n_cars - 64)", "  (n_cars_left - n_cars_right) * (n_cars_left - n_cars_right) +\n  (n_cars_right - n_cars_left) * (n_cars_right - n_cars_left);", "  (n_cars - 1) * (n_cars - 2) / 2;", "    (car_race_collision)\n    (function(car_race_collision) {\n        let n = 0;\n        let car_race_collision_left = car_race_collision.left;\n        let car_race_collision_right = car_race_collision.right;\n        let car_race_collision_straight = car_race_collision.straight;\n        let car_race_collision_left_straight = car_race_collision_left.straight;\n        let car_race_collision_right_straight = car_race_collision_right.straight;\n        let car_race_collision_straight_left = car_race_collision_straight.left;\n        let car_race_collision_straight_right = car_race_collision_straight.right;\n        let car_race_collision_straight_straight = car_race_collision_straight.straight;\n        let car_race_collision_straight_left_straight = car_race_collision_straight_left.straight;\n        let car_race_collision_straight_right_straight = car_race_collision_straight_right.straight;\n        let car_race_collision_straight_straight_left = car_race_collision_straight_straight.left;\n        let car_race_collision_straight_right_straight = car_race_collision_straight_straight.right;\n        let car_race_collision_straight_straight_left = car_race_collision_straight_straight.straight;\n        let car_race_collision_straight_right_straight_left = car_race_collision_straight_straight_left.straight;\n        let car_race_collision_straight_straight_left_straight = car_race_collision_straight_straight_left.straight;\n        let car_race_collision_straight_straight_right_straight = car_race_collision_straight_straight_right.straight;\n        let car_race_collision_straight_straight_right_straight_left = car_race_collision_straight_straight_right.straight;\n        let car_race_collision_straight_straight_right_", "    (n_cars_left - n_cars_right) * (n_cars_left - n_cars_right) +\n    (n_cars_right - n_cars_left) * (n_cars_right - n_cars_left);", "\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(car_race_collision)\n\t(", "\t(n_cars - 1) * (n_cars - 2) / 2;", "    (n_cars_left - n_cars_right) * (n_cars_left - n_cars_right) / (n_cars_left - n_cars_right + 1);", "  (car_race_collision(0, 0) + car_race_collision(1, 0) + car_race_collision(0, 1) + car_race_collision(1, 1)) / 2;", "    car_race_collision_count(car_race_collision_left, car_race_collision_right);", "\t(n_cars - 1) * (n_cars - 2) * (n_cars - 3) * (n_cars - 4) * (n_cars - 5) * (n_cars - 6) * (n_cars - 7) * (n_cars - 8) * (n_cars - 9) * (n_cars - 10) * (n_cars - 11) * (n_cars - 12) * (n_cars - 13) * (n_cars - 14) * (n_cars - 15) * (n_cars - 16) * (n_cars - 17) * (n_cars - 18) * (n_cars - 19) * (n_cars - 20) * (n_cars - 21) * (n_cars - 22) * (n_cars - 23) * (n_cars - 24) * (n_cars - 25) * (n_cars - 26) * (n_cars - 27) * (n_cars - 28) * (n_cars - 29) * (n_cars - 30) * (n_cars - 31) * (n_cars - 32) * (n_cars - 33) * (n_cars - 34) * (n_cars - 35) * (n_cars - 36) * (n_cars - 37) * (n_cars - 38) * (n_cars - 39) * (n_cars - 40) * (n_cars - 41) * (n_cars - 42) * (n_cars - 43) * (n_cars - 44) * (n_cars - 45) * (n_cars - 46) * (n_cars - 47) * (n_cars - 48) * (n_cars - 49) * (n_cars - 50) * (n_cars - 51) * (n_cars - 52) * (n_cars - 53) * (n_cars - 54) * (n_cars - 55) * (n_cars - 56) * (n_cars - 57) * (n_cars - 58) * (n_cars - 59) * (n_cars - 60) * (n_cars - 61) * (n_cars - 62) * (n_cars - 63) * (n_cars - 64)", "  (n_cars_left + n_cars_right) / 2;"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}