{"name": "HumanEval_147_get_max_triples", "language": "fs", "prompt": "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u00e2\u2030\u00a4 i \u00e2\u2030\u00a4 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlet get_max_triples n = \n", "tests": "let test() = \n  let candidate = get_max_triples\n  assert (candidate 5 = 1)\n  assert (candidate 6 = 4)\n  assert (candidate 10 = 36)\n  assert (candidate 100 = 53361)\n  0\n\ntest()", "completions": ["  [1, 3, 7, 13, 21];", "  [1, 3, 7, 13, 21]\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce", "  [1, 3, 7, 13, 21]\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0);", "  [1, 3, 7, 13, 21];", "  [1, 3, 7, 13, 21]\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce", "  [1, 3, 7, 13, 21];", "  1 << (n - 1)\n  + 1 << (n - 2)\n  + 1 << (n - 3)\n  + 1 << (n - 4)\n  + 1 << (n - 5)\n  + 1 << (n - 6)\n  + 1 << (n - 7)\n  + 1 << (n - 8)\n  + 1 << (n - 9)\n  + 1 << (n - 10)\n  + 1 << (n - 11)\n  + 1 << (n - 12)\n  + 1 << (n - 13)\n  + 1 << (n - 14)\n  + 1 << (n - 15)\n  + 1 << (n - 16)\n  + 1 << (n - 17)\n  + 1 << (n - 18)\n  + 1 << (n - 19)\n  + 1 << (n - 20)\n  + 1 << (n - 21)\n  + 1 << (n - 22)\n  + 1 << (n - 23)\n  + 1 << (n - 24)\n  + 1 << (n - 25)\n  + 1 << (n - 26)\n  + 1 << (n - 27)\n  + 1 << (n - 28)\n  + 1 << (n - 29)\n  + 1 << (n - 30)\n  + 1 << (n - 31)\n  + 1 << (n - 32)\n  + 1 << (n - 33)\n  + 1 << (n - 34)\n  + 1 << (n - 35)\n  + 1 << (n - 36)\n  + 1 << (n - 37)\n  + 1 << (n - 38)\n  + 1 << (n - 39)\n  + 1 << (n - 40)\n  + 1 << (n - 41)\n  + 1 << (n - 42)\n  + 1 << (n - 43)\n  + 1 << (n - 44)\n  + 1 << (n - 45)\n  + 1 << (n - 46)\n  + 1 << (n - 47)\n  + 1 << (n - 48)\n  + 1 << (n - 49)\n  + 1 << (n - 50)\n  + 1 << (n - 51)\n  + 1", "  [1, 3, 7, 13, 21]\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0);", "    1;", "  [1, 3, 7, 13, 21];", "  [1, 3, 7, 13, 21];", "    1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    + 1\n    ", "    (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (1 + 1) * (", "  [1, 3, 7, 13, 21];", "  [1, 3, 7, 13, 21]\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce", "  [1, 3, 7, 13, 21]\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a, b) => a + b, 0)\n  .map((i) => i * i)\n  .reduce((a", "  [1, 3, 7, 13, 21]\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i < n)\n  .map(i => i * i", "    (1 << (n - 1)) - 1;", "  [1, 3, 7, 13, 21]\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .", "  [1, 3, 7, 13, 21]\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i * i - i + 1)\n  .reduce"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}