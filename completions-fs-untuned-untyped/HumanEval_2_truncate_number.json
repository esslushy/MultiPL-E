{"name": "HumanEval_2_truncate_number", "language": "fs", "prompt": "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nlet truncate_number number = \n", "tests": "let test() = \n  let candidate = truncate_number\n  assert (candidate 3.5 = 0.5)\n  assert (candidate 1.25 = 0.25)\n  assert (candidate 123.0 = 0.0)\n  0\n\ntest()", "completions": ["  (number >= 0 ? number : -number)\n  .toFixed(2)\n  .toString();", "  (number < 0) ? -number : number;", "  (number < 0 ? -number : number)\n  .toFixed(2)\n  .toString();", "  (number < 0) ? -number : number;", "  (number.toString()).slice(0, -1)\n  .split('.')\n  .map(f => f.length)\n  .reduce((a, b) => a + b)\n  .map(f => f.length)\n  .reduce((a, b) => a - b)\n  .map(f => f.length)\n  .reduce((a, b) => a + b)\n  .map(f => f.length)\n  .reduce((a, b) => a - b)\n  .map(f => f.length)\n  .reduce((a, b) => a + b)\n  .map(f => f.length)\n  .reduce((a, b) => a - b)\n  .map(f => f.length)\n  .reduce((a, b) => a + b)\n  .map(f => f.length)\n  .reduce((a, b) => a - b)\n  .map(f => f.length)\n  .reduce((a, b) => a + b)\n  .map(f => f.length)\n  .reduce((a, b) => a - b)\n  .map(f => f.length)\n  .reduce((a, b) => a + b)\n  .map(f => f.length)\n  .reduce((a, b) => a - b)\n  .map(f => f.length)\n  .reduce((a, b) => a + b)\n  .map(f => f.length)\n  .reduce((a, b) => a - b)\n  .map(f => f.length)\n  .reduce((a, b) => a + b)\n  .map(f => f.length)\n  .reduce((a, b) => a - b)\n  .map(f => f.length)\n  .reduce((a, b) => a + b)\n  .map(f => f.length)\n  .reduce((a, b) => a - b)\n  .map(f => f.length)\n  .reduce((a, b) =>", "  (number) => {\n    let result = number;\n    let remainder = number % 10;\n    let decimals = remainder.toString().length;\n    let integer = remainder.toString().length - decimals;\n    let decimal = remainder.toString().length - decimals;\n    let leftover = remainder.toString().length - decimals;\n    let truncated = result.toString().length - decimals;\n    let truncated_integer = result.toString().length - decimals;\n    let truncated_decimal = result.toString().length - decimals;\n    let truncated_leftover = result.toString().length - decimals;\n    let truncated_truncated = result.toString().length - decimals;\n    let truncated_truncated_integer = result.toString().length - decimals;\n    let truncated_truncated_decimal = result.toString().length - decimals;\n    let truncated_truncated_leftover = result.toString().length - decimals;\n    let truncated_truncated_truncated = result.toString().length - decimals;\n    let truncated_truncated_truncated_integer = result.toString().length - decimals;\n    let truncated_truncated_truncated_decimal = result.toString().length - decimals;\n    let truncated_truncated_truncated_leftover = result.toString().length - decimals;\n    let truncated_truncated_truncated_truncated = result.toString().length - decimals;\n    let truncated_truncated_truncated_truncated_integer = result.toString().length - decimals;\n    let truncated_truncated_truncated_truncated_decimal = result.toString().length - decimals;\n    let truncated_truncated_truncated_leftover_decimal = result.toString().length - decimals;\n    let truncated_truncated_truncated_truncated_integer_decimal = result.toString().", "  (number < 0) ? -number : number;", "  (number < 0) ? -number : number;", "  (number) => {\n    let result = 0;\n    let digits = number.toString().split('.');\n    let i = 0;\n    let j = 0;\n    let digit = '';\n    let decimal = '';\n    let remainder = '';\n    let max = 0;\n    let min = 0;\n    let length = digits.length;\n    let length_remainder = digits.length - 1;\n    let length_max = length - 1;\n    let length_min = 0;\n    let length_remainder_max = 0;\n    let length_remainder_min = 0;\n    let length_max_min = 0;\n    let length_min_max = 0;\n    let length_remainder_max_min = 0;\n    let length_remainder_min_max = 0;\n    let length_max_min_max = 0;\n    let length_min_max_min = 0;\n    let length_remainder_max_min_max = 0;\n    let length_max_min_max_min = 0;\n    let length_min_max_min_max = 0;\n    let length_remainder_max_min_max = 0;\n    let length_max_min_max_min = 0;\n    let length_min_max_min_max = 0;\n    let length_remainder_max_min_max = 0;\n    let length_max_min_max_min_max = 0;\n    let length_min_max_min_max_min = 0;\n    let length_remainder_max_min_max_min = 0;\n    let length_max_min_max_min_max = 0;\n    let length_min_max_min_max_min_max = 0;\n    let length_remainder_max_min_max_min_max = 0;\n    let length_max_min_max_min_max_min_max = 0;\n    let length_min_max_min_max_min_max_min_max = 0;\n    let length_remainder_max_min_max_min_max_min_max =", "  (number) => {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    ", "  (number >= 0 ? number : -number)\n  .toFixed(2)\n  .toString();", "  (number >= 0) ? number : -number;", "  (number < 0) ? -number : number;", "  (number) => {\n    let result = number.toString();\n    let decimals = result.split('.');\n    let decimals_len = decimals.length;\n    let decimal = '';\n    let i = 0;\n    let j = 0;\n    let decimal_len = 0;\n    let decimal_pos = 0;\n    let decimal_pos_len = 0;\n    let decimal_pos_pos = 0;\n    let decimal_pos_pos_len = 0;\n    let decimal_pos_pos_pos = 0;\n    let decimal_pos_pos_pos_len = 0;\n    let decimal_pos_pos_pos_pos = 0;\n    let decimal_pos_pos_pos_pos_len = 0;\n    let decimal_pos_pos_pos_pos_pos = 0;\n    let decimal_pos_pos_pos_pos_pos_len = 0;\n    let decimal_pos_pos_pos_pos_pos_pos = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_len = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_pos = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_len = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n    let decimal_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_", "  (number < 0) ? -number : number;", "  (number >= 0) ? number : 0;", "  (number < 0) ? -number : number;", "  (number * 1) % 10;", "  (number) => {\n    let result = '';\n    let i = 0;\n    let j = 0;\n    let len = 0;\n    let len_dec = 0;\n    let len_int = 0;\n    let len_dec_int = 0;\n    let len_int_dec = 0;\n    let len_dec_int_dec = 0;\n    let len_int_dec_int = 0;\n    let len_int_dec_int_dec = 0;\n    let len_int_dec_int_dec_int = 0;\n    let len_int_dec_int_dec_int_dec = 0;\n    let len_int_dec_int_dec_int_dec_int = 0;\n    let len_int_dec_int_dec_int_dec_int_dec = 0;\n    let len_int_dec_int_dec_int_dec_int_dec_int = 0;\n    let len_int_dec_int_dec_int_dec_int_dec_int_dec_int = 0;\n    let len_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int = 0;\n    let len_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int = 0;\n    let len_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int = 0;\n    let len_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec_int_dec", "  (number < 0) ? -number : number;"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}