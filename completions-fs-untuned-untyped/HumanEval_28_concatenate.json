{"name": "HumanEval_28_concatenate", "language": "fs", "prompt": "//Concatenate list of strings into a single string\n// >>> concatenate([])\n// ''\n// >>> concatenate(['a', 'b', 'c'])\n// 'abc'\nlet concatenate strings = \n", "tests": "let test() = \n  let candidate = concatenate\n  assert (candidate [] = \"\")\n  assert (candidate [\"x\"; \"y\"; \"z\"] = \"xyz\")\n  assert (candidate [\"x\"; \"y\"; \"z\"; \"w\"; \"k\"] = \"xyzwk\")\n  0\n\ntest()", "completions": ["  (...strings) => strings.reduce((str, str2) => str + str2, '')", "    (str) => {\n        return str.split('').map(s => s.trim());\n    }", "    (str) => {\n        const newStr = '';\n        for (let i = 0; i < str.length; i++) {\n            newStr += str[i];\n        }\n        return newStr;\n    }", "    (str) => {\n        let result = '';\n        for (let i = 0; i < str.length; i++) {\n            result += str[i];\n        }\n        return result;\n    }", "  (str1, str2) => {\n    return str1 + str2\n  }", "    (str1, str2) => {\n        let concatenated = '';\n        let str1_len = str1.length;\n        let str2_len = str2.length;\n        let i = 0;\n        while (i < str1_len) {\n            concatenated += str1[i];\n            i++;\n        }\n        while (i < str2_len) {\n            concatenated += str2[i];\n            i++;\n        }\n        return concatenated;\n    }", "    (str) => {\n        const result = [];\n        for (let i = 0; i < str.length; i++) {\n            result.push(str[i]);\n        }\n        return result.join('');\n    }", "    (str) => {\n        let result = '';\n        for (let i = 0; i < str.length; i++) {\n            result += str[i];\n        }\n        return result;\n    };", "    (...strings) => {\n        let result = '';\n        for (let i = 0; i < strings.length; i++) {\n            result += strings[i];\n        }\n        return result;\n    };", "    (str1, str2) => str1 + str2", "    (...strings)\n    .map((s) => s.toLowerCase())\n    .reduce((str, s) => str + s)\n    .join(' ')\n    .toLowerCase();", "  (...strings) => strings.map(s => s.replace(/\\s+/g, ''));", "    (str) => {\n        let concatenated = '';\n        for (let i = 0; i < str.length; i++) {\n            concatenated += str[i];\n        }\n        return concatenated;\n    };", "  (str1, str2) => str1 + str2", "  (str) => {\n    return str.split('').map(s => s.trim()).join('');\n  }", "    (str) => {\n        let concatenated = '';\n        for (let i = 0; i < str.length; i++) {\n            concatenated += str[i];\n        }\n        return concatenated;\n    }", "    (str) => {\n        let result = '';\n        for (let i = 0; i < str.length; i++) {\n            result += str[i];\n        }\n        return result;\n    }", "    (str) => str.split('').map(s => s.trim());", "  (str1, str2) => str1.concat(str2)", "    (str) => {\n        return str.split('').map(s => s.trim()).join('');\n    }"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}