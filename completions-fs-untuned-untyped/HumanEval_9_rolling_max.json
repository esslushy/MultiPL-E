{"name": "HumanEval_9_rolling_max", "language": "fs", "prompt": "//From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nlet rolling_max numbers = \n", "tests": "let test() = \n  let candidate = rolling_max\n  assert (candidate [] = [])\n  assert (candidate [1; 2; 3; 4] = [1; 2; 3; 4])\n  assert (candidate [4; 3; 2; 1] = [4; 4; 4; 4])\n  assert (candidate [3; 2; 3; 100; 3] = [3; 3; 3; 100; 100])\n  0\n\ntest()", "completions": ["[1, 2, 3, 2, 3, 4, 2]", "[\n  [1, 2, 3, 2, 3, 4, 2],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n", "  [1, 2, 3, 2, 3, 4, 2]", "    [1, 2, 3, 2, 3, 4, 2];", "  [1, 2, 3, 2, 3, 4, 2]", "[1, 2, 3, 2, 3, 4, 2];", "[1, 2, 3, 2, 3, 4, 2]", "[1, 2, 3, 2, 3, 4, 2];", "[1, 2, 3, 2, 3, 4, 2];", "  [1, 2, 3, 2, 3, 4, 2];", "[1, 2, 3, 2, 3, 4, 2]", "[1, 2, 3, 2, 3, 4, 2]", "  [1, 2, 3, 2, 3, 4, 2]", "  [1, 2, 3, 2, 3, 4, 2]", "  [1, 2, 3, 2, 3, 4, 2]", "  [1, 2, 3, 2, 3, 4, 2]", "  [1, 2, 3, 2, 3, 4, 2]", "[\n  [1, 2, 3, 2, 3, 4, 2],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n  [1, 2, 3, 3, 3, 4, 3],\n", "[1, 2, 3, 2, 3, 4, 2];", "  [1, 2, 3, 2, 3, 4, 2]"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}