{"name": "HumanEval_7_filter_by_substring", "language": "fs", "prompt": "//Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nlet filter_by_substring strings substring = \n", "tests": "let test() = \n  let candidate = filter_by_substring\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  assert (candidate [\"xxx\"; \"asd\"; \"aaaxxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xx\" = [\"xxx\"; \"aaaxxy\"; \"xxxAAA\"; \"xxx\"])\n  assert (candidate [\"grunt\"; \"trumpet\"; \"prune\"; \"gruesome\"] \"run\" = [\"grunt\"; \"prune\"])\n  0\n\ntest()", "completions": ["  'abc'\n  .split(substring)\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))", "  'abc'\n  .split(substring)\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))", "  'abc'\n  .split(' ')\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .join(' ');", "  'abc'\n  .split(' ')\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n", "  'abc'\n  .split(substring)\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .filter(s => s.includes(substring))", "  strings =>\n    strings.filter(s => s.startsWith(substring))", "    strings =>\n        strings.filter(s => s.startsWith(substring))\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s => s)\n    .map(s => s.substring(substring.length))\n    .filter(s =>", "  'abc'\n  .split(substring)\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.length))\n  .map(s => s.substring(0, substring.", "  (str) => {\n    return str.includes(substring)\n  }", "    strings =>\n        strings.filter(s => s.startsWith(substring))", "  'abc'\n  .split(' ')\n  .filter(s => s.startsWith(substring))\n  .map(s => s.substring(substring.length))\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s => s.length > 0)\n  .map(s => s)\n  .filter(s", "  strings =>\n    strings.filter(s => s.startsWith(substring))", "  (str) => {\n    return str.split(substring).filter(s => s.length > 0);\n  };", "  'abc'\n  + 'bacd'\n  + 'cde'\n  + 'array'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n  + 'd'\n  + 'e'\n  + 'f'\n  + 'g'\n  + 'h'\n  + 'i'\n  + 'j'\n  + 'k'\n  + 'l'\n  + 'm'\n  + 'n'\n  + 'o'\n  + 'p'\n  + 'q'\n  + 'r'\n  + 's'\n  + 't'\n  + 'u'\n  + 'v'\n  + 'w'\n  + 'x'\n  + 'y'\n  + 'z'\n  + 'a'\n  + 'b'\n  + 'c'\n", "  'abc'\n  .split(substring)\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s", "  'abc'\n  .split(substring)\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s", "  'abc'\n  .split(substring)\n  .filter(s => s.includes(substring))\n  .map(s => s.toLowerCase())\n  .join('');", "  `\n  {{\n    filter_by_substring(['a', 'b', 'c'], 'd')\n    .map(s => s.toLowerCase())\n  }}\n  `;", "  'abc'\n  .split(substring)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s => s.toLowerCase())\n  .filter(s => s.length > 0)\n  .map(s", "  (str) => str.includes(substring)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}