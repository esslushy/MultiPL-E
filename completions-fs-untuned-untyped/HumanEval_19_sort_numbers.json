{"name": "HumanEval_19_sort_numbers", "language": "fs", "prompt": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n", "tests": "let test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()", "completions": ["    'zero one two three four five six seven eight nine'.split(' ');", "    'zero one three five'\nlet sorted_numbers = sort_numbers(numbers)", "\t'one three five'\n\t.replace(/\\d+/g, (n) => n.toString())\n\t.replace(/\\s+/g, ' ')\n\t.split(' ')\n\t.sort((a, b) => a.toString() < b.toString())\n\t.map((n) => n.toString())\n\t.join(' ')\n\t.slice(0, -1)\n\t.join(' ')\n\t.slice(0, -1)\n\t.join(' ')\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -1)\n\t.slice(0, -", "\t'one three five'\n\t.split(' ')\n\t.map(n => n.toLowerCase())\n\t.sort()\n\t.map(n => n.toLowerCase())\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' '", "  'zero one two three four five six seven eight nine'.split(' ');", "  'one three five'.split(' ');", "  'zero one two three four five six seven eight nine'.split(' ');", "  'zero one two three four five six seven eight nine'.split(' ');", "  'one three five'\n  .split(' ')\n  .map(n => n.toLowerCase())\n  .sort()\n  .map(n => n.toUpperCase())\n  .join(' ')\n  .toLowerCase();", "\t'one three five'\n\t.split(' ')\n\t.map(n => n.toLowerCase())\n\t.sort()\n\t.map(n => n.toUpperCase())\n\t.join(' ')", "  'one three five'\n  .split(' ')\n  .sort((a, b) => a - b)\n  .map((n) => n)\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1))\n  .join(' ')\n  .slice(0, -1)\n  .map((n) => n.slice(0, -1", "\t'one three five'\n\t.split('')\n\t.sort((a, b) => a - b)\n\t.map((n) => n.toString())\n\t.join('');", "    'one three five'\n    .split('')\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((a, b) => a.localeCompare(b))\n    .map(n => n.toUpperCase())\n    .sort((", "\t'zero one three five'\n\t.split(' ')\n\t.map(n => n.toLowerCase())\n\t.sort()\n\t.map(n => n.toLowerCase())\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join(' ')\n\t.join('", "    'zero one two three four five six seven eight nine'.split(' ');", "    'zero one three five'\n    .split(' ')\n    .map(n => n.toLowerCase())\n    .sort()\n    .map(n => n.toUpperCase())\n    .join(' ')", "\t'one three five'\n\t.split('')\n\t.sort()\n\t.map(n => n.toLowerCase())\n\t.map(n => n.charAt(0))\n\t.map(n => n.charAt(1))\n\t.map(n => n.charAt(2))\n\t.map(n => n.charAt(3))\n\t.map(n => n.charAt(4))\n\t.map(n => n.charAt(5))\n\t.map(n => n.charAt(6))\n\t.map(n => n.charAt(7))\n\t.map(n => n.charAt(8))\n\t.map(n => n.charAt(9))\n\t.map(n => n.charAt(10))\n\t.map(n => n.charAt(11))\n\t.map(n => n.charAt(12))\n\t.map(n => n.charAt(13))\n\t.map(n => n.charAt(14))\n\t.map(n => n.charAt(15))\n\t.map(n => n.charAt(16))\n\t.map(n => n.charAt(17))\n\t.map(n => n.charAt(18))\n\t.map(n => n.charAt(19))\n\t.map(n => n.charAt(20))\n\t.map(n => n.charAt(21))\n\t.map(n => n.charAt(22))\n\t.map(n => n.charAt(23))\n\t.map(n => n.charAt(24))\n\t.map(n => n.charAt(25))\n\t.map(n => n.charAt(26))\n\t.map(n => n.charAt(27))\n\t.map(n => n.charAt(28))\n\t.map(n => n.charAt(29))\n\t.map(n => n.charAt(30))\n\t.map(n => n.charAt(31))\n\t.map(n => n.charAt(32))\n\t.map(n => n.charAt(33))\n\t.map(", "\t'zero one two three four five six seven eight nine'.split(' ');", "  'zero one two three four five six seven eight nine'.split(' ');", "  'one three five'\n  .split(' ')\n  .map(n => n.toLowerCase())\n  .sort()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())\n  .reverse()\n  .map(n => n.toLowerCase())"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}