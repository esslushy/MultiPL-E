{"name": "HumanEval_98_count_upper", "language": "fs", "prompt": "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns 0\n// count_upper('dBBE') returns 0\nlet count_upper s = \n", "tests": "let test() = \n  let candidate = count_upper\n  assert (candidate \"aBCdEf\" = 1)\n  assert (candidate \"abcdefg\" = 0)\n  assert (candidate \"dBBE\" = 0)\n  assert (candidate \"B\" = 0)\n  assert (candidate \"U\" = 1)\n  assert (candidate \"\" = 0)\n  assert (candidate \"EEEE\" = 2)\n  0\n\ntest()", "completions": ["    'ABCDEFGH'\n    .split('')\n    .map(i => i.toUpperCase())\n    .reduce((a, b) => a + b, 0)", "  'abcdefg'\n  .split('')\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .length;", "  'ABCDEFGH'\n  .split('')\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.char", "  'abcdefg'\n  .split('')\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.char", "  'abcdefg'\n  .split('')\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.charCodeAt(0) - 65)\n  .reduce((u, c) => u + c, 0)\n  .map(i => i.char", "`[\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n]", "    'ABCDEFGH'\n    .split('')\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce((a, b) => a + b, 0)\n    .map(i => i.charCodeAt(0))\n    .reduce", "`", "  'abcdefg'\n  .split('')\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce((a, b) => a + b, 0)\n  .map(x => x.charCodeAt(0))\n  .reduce", "`", "  'abcdefg'\n  .split(' ')\n  .map(i => i.toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .filter(i => i.length % 2 === 0)\n  .map(i => i.length)\n  .reduce((a, b) => a", "  'abcdefg'\n  .split('')\n  .map(i => i.toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b)", "  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';", "  'abcdefg'\n  .split(' ')\n  .map(i => i.charCodeAt(0))\n  .filter(i => i >= 65 && i <= 90)\n  .reduce((u, c) => u + c, 0)", "  'abcdefg'\n  .split('')\n  .map(i => i.toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.length)\n  .reduce((a, b)", "  'ABCDEFGH'\n  .split('')\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a + b, 0)\n  .map(i => i.charAt(0).toUpperCase())\n  .reduce((a, b) => a +", "  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';", "  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';", "  'abcdefg'\n  .split('')\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.charCodeAt(0) - 32)\n  .reduce((u, c) => u + 1, 0)\n  .map(i => i.", "    'abcdefg'\n    .split(' ')\n    .map(i => i.charCodeAt(0).toUpperCase())\n    .reduce((a, b) => a + b, 0)\n    .join(' ')"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}