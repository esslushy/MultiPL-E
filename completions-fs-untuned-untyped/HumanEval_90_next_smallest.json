{"name": "HumanEval_90_next_smallest", "language": "fs", "prompt": "//You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3, 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n// next_smallest([1, 1]) == None\nlet next_smallest lst = \n", "tests": "let test() = \n  let candidate = next_smallest\n  assert (candidate [1; 2; 3; 4; 5] = 2)\n  assert (candidate [5; 1; 4; 3; 2] = 2)\n  assert (candidate [] = None)\n  assert (candidate [1; 1] = None)\n  assert (candidate [1; 1; 1; 1; 0] = 1)\n  assert (candidate [1; 1] = None)\n  assert (candidate [-35; 34; 12; -45] = -35)\n  0\n\ntest()", "completions": ["  [1, 2, 3, 4, 5]\n  .map(i => next_smallest(lst, i))\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None)\n  .filter(i => i != None", "  [1, 2, 3, 4, 5]\n  .map(i => i + 1)\n  .filter(i => i < 5)\n  .map(i => i)\n  .reduce((i, j) => i + j)\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_smallest\n  .next_small", "  [1, 2, 3, 4, 5]\n  .map(i => next_smallest(lst, i))\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n  .filter(i => i > 0)\n", "    [1, 2, 3, 4, 5]\n    .map(i => next_smallest(lst, i))\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .", "[1, 2, 3, 4, 5];", "  [1, 2, 3, 4, 5]\n  .map(i => i + 1)\n  .filter(i => i < 5)\n  .map(i => i)\n  .filter(i => i > 1)\n  .map(i => i)\n  .filter(i => i > 2)\n  .map(i => i)\n  .filter(i => i > 3)\n  .map(i => i)\n  .filter(i => i > 4)\n  .map(i => i)\n  .filter(i => i > 5)\n  .map(i => i)\n  .filter(i => i > 6)\n  .map(i => i)\n  .filter(i => i > 7)\n  .map(i => i)\n  .filter(i => i > 8)\n  .map(i => i)\n  .filter(i => i > 9)\n  .map(i => i)\n  .filter(i => i > 10)\n  .map(i => i)\n  .filter(i => i > 11)\n  .map(i => i)\n  .filter(i => i > 12)\n  .map(i => i)\n  .filter(i => i > 13)\n  .map(i => i)\n  .filter(i => i > 14)\n  .map(i => i)\n  .filter(i => i > 15)\n  .map(i => i)\n  .filter(i => i > 16)\n  .map(i => i)\n  .filter(i => i > 17)\n  .map(i => i)\n  .filter(i => i > 18)\n  .map(i => i)\n  .filter(i => i > 19)\n  .map(i => i)\n  .filter(i => i > 20)\n  .map(i => i)\n  .filter(i => i > 21)\n  .map(i => i)\n  .filter(i => i > 22)\n  .map(i => i)\n  .filter(i => i > 23)\n  .map(i => i)\n  .filter(i => i >", "    [1, 2, 3, 4, 5]\n    .map(i => next_smallest(lst, i))\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n    .filter(i => i != None)\n", "    [1, 2, 3, 4, 5]\n    .map(i => next_smallest(i))\n    .filter(i => i > 0)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter(i => i > 0)\n    .filter", "    [1, 2, 3, 4, 5];", "  [1, 2, 3, 4, 5]\n  .map(i => i + 1)\n  .filter(i => i < 5)\n  .map(i => i)\n  .sort((a, b) => a - b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .next_smallest(lst)", "    [1, 2, 3, 4, 5]\n    .map(i => next_smallest(lst, i))\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .filter(i => i != None)\n    .map(i => i)\n    .", "    [1, 2, 3, 4, 5]\n    .map(i => next_smallest(lst, i))\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort((i, j) => i - j)\n    .map(i => i)\n    .reverse()\n    .map(i => i)\n    .reduce((i, j) => i + j)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort((i, j) => i - j)\n    .map(i => i)\n    .reverse()\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort((i, j) => i - j)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .reverse()\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort((i, j) => i - j)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .reverse()\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .reverse()\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .reverse()\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .reverse", "    [1, 2, 3, 4, 5]\nlet smallest = next_smallest(lst)", "  [1, 2, 3, 4, 5]\n  .map(i => next_smallest(lst, i))\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i => i != None)\n  .map(i => i)\n  .reduce(i => i[0], [])\n  .filter(i =>", "    [1, 2, 3, 4, 5]\n    .map(i => next_smallest(lst, i))\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort(i => i)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort(i => i)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort(i => i)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort(i => i)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort(i => i)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort(i => i)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort(i => i)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort(i => i)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort(i => i)\n    .map(i => i)\n    .filter(i => i > 0)\n    .filter(i => i < 5)\n    .map(i => i)\n    .sort(i => i)\n    ", "    [1, 2, 3, 4, 5]\n    .sort((a, b) => a - b)\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x) => x)\n    .reverse()\n    .map((x", "[1, 2, 3, 4, 5]", "[1, 2, 3, 4, 5]", "    [1, 2, 3, 4, 5]", "  [1, 2, 3, 4, 5]\n  .map(i => i + 1)\n  .filter(i => i < 5)\n  .map(i => i)\n  .sort((a, b) => a - b)\n  .map(i => i)\n  .reduce((a, b) => a + b)\n  .next_smallest(lst)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}