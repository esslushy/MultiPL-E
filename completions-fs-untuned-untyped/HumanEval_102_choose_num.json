{"name": "HumanEval_102_choose_num", "language": "fs", "prompt": "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13, 12) = -1\nlet choose_num x y = \n", "tests": "let test() = \n  let candidate = choose_num\n  assert (candidate 12 15 = 14)\n  assert (candidate 13 12 = -1)\n  assert (candidate 33 12354 = 12354)\n  assert (candidate 5234 5233 = -1)\n  assert (candidate 6 29 = 28)\n  assert (candidate 27 10 = -1)\n  assert (candidate 7 7 = -1)\n  assert (candidate 546 546 = 546)\n  0\n\ntest()", "completions": ["{\n\tchoose_num(12, 15): 14,\n\tchoose_num(13, 12): -1\n}", "{\n    choose_num(x, y)\n    {\n        if (x == y)\n            return x;\n        if (x < y)\n            return choose_num(x, y);\n        return choose_num(y, x);\n    }\n}", "{\n  x: 12,\n  y: 15\n}", "{\n\tchoose_num(12, 15) : 14,\n\tchoose_num(13, 12) : -1\n}", "{\n\tx: 12,\n\ty: 15\n}", "{\n  x: 12,\n  y: 15\n}", "{\n\tx: 12,\n\ty: 15\n}", "{\n  x: 12,\n  y: 15\n}", "{\n    x: 12,\n    y: 15\n}", "{\n\tchoose_num(1, 1) : 1,\n\tchoose_num(2, 2) : 2,\n\tchoose_num(3, 3) : 3,\n\tchoose_num(4, 4) : 4,\n\tchoose_num(5, 5) : 5,\n\tchoose_num(6, 6) : 6,\n\tchoose_num(7, 7) : 7,\n\tchoose_num(8, 8) : 8,\n\tchoose_num(9, 9) : 9,\n\tchoose_num(10, 10) : 10,\n\tchoose_num(11, 11) : 11,\n\tchoose_num(12, 12) : 12,\n\tchoose_num(13, 13) : 13,\n\tchoose_num(14, 14) : 14,\n\tchoose_num(15, 15) : 15,\n\tchoose_num(16, 16) : 16,\n\tchoose_num(17, 17) : 17,\n\tchoose_num(18, 18) : 18,\n\tchoose_num(19, 19) : 19,\n\tchoose_num(20, 20) : 20,\n\tchoose_num(21, 21) : 21,\n\tchoose_num(22, 22) : 22,\n\tchoose_num(23, 23) : 23,\n\tchoose_num(24, 24) : 24,\n\tchoose_num(25, 25) : 25,\n\tchoose_num(26, 26) : 26,\n\tchoose_num(27, 27) : 27,\n\tchoose_num(28, 28) : 28,\n\tchoose_num(29, 29) : 29,\n\tchoose_num(30, 30) : 30,\n\tchoose_num(31, 31) : 31,\n\tchoose_num(32, 32) : 32,\n\tchoose_num(33, 33) : 33,\n\tchoose_num(34, 34) : 34,\n\tchoose_num(35, 35) : 35,\n\tchoose_num(36, 36) : 36,\n\tchoose_num(", "{\n\tchoose_num(12, 15) : -1,\n\tchoose_num(13, 12) : -1\n}", "{\n\tchoose_num(12, 15) : -1,\n\tchoose_num(13, 12) : -1\n}", "{\n  x: 12,\n  y: 15\n}", "{\n\tx: 12,\n\ty: 15\n}", "{\n\tchoose_num(12, 15) : -1,\n\tchoose_num(13, 12) : -1\n}", "{\n\tchoose_num(x, y) {\n\t\tif (x < y) {\n\t\t\treturn y;\n\t\t} else {\n\t\t\treturn x;\n\t\t}\n\t}\n}", "{\n    choose_num(x, y) {\n        if (x < y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "{\n  x: 12,\n  y: 15\n}", "{\n\tchoose_num(12, 15)\n\t, choose_num(13, 12)\n\t, choose_num(14, 13)\n\t, choose_num(15, 14)\n}", "{\n\tchoose_num(x, y) {\n\t\tif (x === y) return x;\n\t\tif (x < y) return choose_num(x, y);\n\t\treturn choose_num(y, x);\n\t}\n}"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}