{"name": "HumanEval_116_sort_array", "language": "fs", "prompt": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array arr = \n", "tests": "let test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()", "completions": ["[1, 5, 2, 3, 4]", "[1, 2, 3, 4, 5]\nlet sorted_arr = sort_array(arr)", "[1, 2, 3, 4, 5]", "[1, 5, 2, 3, 4]", "[1, 0, 2, 3, 4]\nlet sorted_arr = sort_array(arr)", "[1, 5, 2, 3, 4]\nlet sorted_arr = sort_array(arr)", "[1, 5, 2, 3, 4];\nsort_array(arr);", "[1, 5, 2, 3, 4]\nlet sorted_arr = sort_array(arr)", "[1, 2, 3, 4, 5]\nlet sorted_arr = sort_array(arr)", "[1, 5, 2, 3, 4]\nlet sorted_arr = sort_array(arr)", "[1, 5, 2, 3, 4]\nlet sorted_arr = sort_array(arr)", "[1, 5, 2, 3, 4]\nlet sorted_arr = sort_array(arr)\nlet sorted_arr_len = sorted_arr.length\nlet sorted_arr_i = 0\nlet sorted_arr_j = 0\nlet sorted_arr_len_i = 0\nlet sorted_arr_len_j = 0", "[1, 2, 3, 4, 5]\nlet sorted_arr = sort_array(arr)", "[1, 5, 2, 3, 4]\nlet sorted_arr = sort_array(arr)", "[1, 2, 3, 4, 5]", "[1, 5, 2, 3, 4]\nsort_array(arr)", "[1, 0, 2, 3, 4];", "[1, 2, 3, 4, 5]\nlet sorted_arr = sort_array(arr)", "[1, 0, 2, 3, 4]", "[1, 2, 3, 4, 5]\nsort_array(arr) == [1, 2, 3, 4, 5]"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}