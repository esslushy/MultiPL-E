{"name": "HumanEval_117_select_words", "language": "fs", "prompt": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n", "tests": "let test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()", "completions": ["    \"Mary had a little lamb\"\n    .split(\" \")\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .map(word => word.split(\" \"))\n    .filter(word => word.length == n)\n    .", "{\n    \"simple white space\" : [\"simple\"],\n    \"Hello world\" : [\"world\"],\n    \"Uncle sam\" : [\"sam\"]\n}", "    \"Mary had a little lamb\"\n    .split(\" \")\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .filter(word => word.length == n)\n    .map(word => word.slice(0, n))\n    .sort()\n    .map(word => word.slice(0, -1))\n    .reverse()\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n    .map(word => word.slice(0, -1))\n", "    (s) => {\n        let words = [];\n        for (let i = 0; i < s.length; i++) {\n            if (s.charAt(i) === ' ') {\n                words.push(s.slice(i, i + 1));\n            }\n        }\n        return words;\n    }();", "\t(s) => \n\t\ts.split(\" \").map((c) => c.toLowerCase()).filter((c) => c.length >= n).map((c) => c)", "    \"Mary had a little lamb\"\n    .split(\" \")\n    .filter(x => x.length == n)\n    .map(x => x.toLowerCase())\n    .sort()\n    .map(x => x.substr(0, n))\n    .reverse()\n    .join(\" \")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")\n    .join(\"\")", "    \"Hello world\"\n    .split(\" \")\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .sort()\n    .map(word => word.toLowerCase())\n    .", "    (n) => {\n        let words = [];\n        for (let i = 0; i < n; i++) {\n            words.push(s[i]);\n        }\n        return words;\n    }", "{\n\t\"simple white space\": [\"simple\", \"white space\"],\n\t\"Hello world\": [\"Hello\", \"world\"],\n\t\"Uncle sam\": [\"Uncle\", \"sam\"]\n}", "    \"Mary had a little lamb\"\n    .split(\" \")\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .", "    \"Hello world\"\n    .split(\" \")\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length < n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length < n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length < n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length < n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length < n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word", "\t(s) => {\n\t\tlet words = [];\n\t\tfor (let i = 0; i < s.length; i++) {\n\t\t\tif (s[i] === ' ') {\n\t\t\t\twords.push(s.slice(0, i));\n\t\t\t}\n\t\t}\n\t\treturn words;\n\t}(s);", "    \"Hello world\"\n    .split(\" \")\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word", "\t\"Mary had a little lamb\"\n\t.split(\" \")\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())\n\t.filter(word => word.length == n)\n\t.map(word => word.toLowerCase())\n\t.sort()\n\t.map(word => word.toLowerCase())", "    (s) => {\n        let words = [];\n        for (let i = 0; i < s.length; i++) {\n            if (s.charAt(i) === ' ') {\n                words.push(s.slice(i, i + 1));\n            }\n        }\n        return words;\n    }", "\t(s) => \n\t\ts.split(\" \").map((word) => word.toLowerCase()).filter((word) => word.length % n == 0).map((word) => word.toLowerCase());", "    (s) => {\n        let words = [];\n        let count = 0;\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] === ' ') {\n                count++;\n            } else {\n                words.push(s[i]);\n            }\n        }\n        return words;\n    }", "{\n    \"little\": [\"little\"],\n    \"lamb\": [\"lamb\"],\n    \"world\": [\"world\"]\n}", "    \"Hello world\"\n    .split(\" \")\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length <= n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length <= n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length <= n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length <= n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length <= n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length <= n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length > n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length <= n)\n    .map(word", "    \"Hello world\"\n    .split(\" \")\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word => word.toLowerCase())\n    .filter(word => word.length == n)\n    .map(word"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}