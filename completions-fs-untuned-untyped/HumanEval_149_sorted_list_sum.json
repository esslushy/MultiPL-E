{"name": "HumanEval_149_sorted_list_sum", "language": "fs", "prompt": "//Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlet sorted_list_sum lst = \n", "tests": "let test() = \n  let candidate = sorted_list_sum\n  assert (candidate [\"aa\"; \"a\"; \"aaa\"] = [\"aa\"])\n  assert (candidate [\"school\"; \"AI\"; \"asdf\"; \"b\"] = [\"AI\"; \"asdf\"; \"school\"])\n  assert (candidate [\"d\"; \"b\"; \"c\"; \"a\"] = [])\n  assert (candidate [\"d\"; \"dcba\"; \"abcd\"; \"a\"] = [\"abcd\"; \"dcba\"])\n  assert (candidate [\"AI\"; \"ai\"; \"au\"] = [\"AI\"; \"ai\"; \"au\"])\n  assert (candidate [\"a\"; \"b\"; \"b\"; \"c\"; \"c\"; \"a\"] = [])\n  assert (candidate [\"aaaa\"; \"bbbb\"; \"dd\"; \"cc\"] = [\"cc\"; \"dd\"; \"aaaa\"; \"bbbb\"])\n  0\n\ntest()", "completions": ["  (list) => {\n    let sum = 0;\n    for (let i = 0; i < list.length; i++) {\n      sum += list[i];\n    }\n    return sum;\n  };", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"]);", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n  .map(x => x.toString())\n  .sort()\n", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .sort()\n  .map(str => str.length)\n  .", "  [...list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])];", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])\n  .sort((a, b) => a.length - b.length)\n  .reverse()\n  .map((s) => s.toLowerCase())\n  .map((s) => s.charAt(0).toUpperCase() + s.slice(1))\n  .map((s) => s.charAt(0).toLowerCase() + s.slice(1))\n  .map((s) => s.charAt(0).toUpperCase() + s.slice(1))\n  .map((s) => s.charAt(0).toLowerCase() + s.slice(1))\n  .sort((a, b) => a.length - b.length)\n  .reverse()\n  .map((s) => s.toLowerCase())\n  .map((s) => s.charAt(0).toUpperCase() + s.slice(1))\n  .map((s) => s.charAt(0).toLowerCase() + s.slice(1))\n  .map((s) => s.charAt(0).toUpperCase() + s.slice(1))\n  .sort((a, b) => a.length - b.length)\n  .reverse()\n  .map((s) => s.toLowerCase())\n  .map((s) => s.charAt(0).toUpperCase() + s.slice(1))\n  .map((s) => s.charAt(0).toLowerCase() + s.slice(1))\n  .map((s) => s.charAt(0).toUpperCase() + s.slice(1))\n  .sort((a, b) => a.length - b.length)\n  .reverse()\n  .map((s) => s.toLowerCase())\n  .map((s) => s.charAt(0).toUpperCase() + s.slice(1))\n  .map((s) => s.charAt(0).toLowerCase() + s.slice(1))\n  .sort((a, b) => a.length - b.length)\n  .reverse()\n  .map", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"]);", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"]);", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()\n  .map(x => x.toUpperCase())\n  .sort()", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])\n  .map(x => x.toLowerCase())\n  .sort()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])\n  .map(str => str.length)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  .map(str => str)\n  .sort()\n  ", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"]);\nassert(sorted_list_sum == [\"aa\", \"a\", \"aaa\", \"cd\"]);", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])\n  .map(str => str.length)\n  .sort()\n  .map(str => str)\n  .reverse()\n  .map(str => str.length)\n  .sort()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()\n  .map(str => str)\n  .reverse()", "    list_sort([\"aa\", \"a\", \"aaa\", \"cd\"]);\nconsole.log(sorted_list_sum);", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])\n  .map(s => s.length)\n  .sort()\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(s => s.length)\n  .map(", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"]);", "  (list) => list.reduce((sum, word) => sum + word.length, 0)", "  [...list_sort([\"aa\", \"a\", \"aaa\"]), ...list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])]", "  list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])\n  .map(x => x.toLowerCase())\n  .sort()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .sort()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x.toLowerCase())\n  .reverse()\n  .map(x => x", "    list_sort([\"aa\", \"a\", \"aaa\", \"cd\"])\n    .map(s => s.toLowerCase())\n    .sort()\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.substring(2))\n    .map(s => s.substring(0, 2))\n    .map(s => s.sub"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}