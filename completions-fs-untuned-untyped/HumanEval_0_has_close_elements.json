{"name": "HumanEval_0_has_close_elements", "language": "fs", "prompt": "//Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// True\nlet has_close_elements numbers threshold = \n", "tests": "let test() = \n  let candidate = has_close_elements\n  assert (candidate [1.0; 2.0; 3.9; 4.0; 5.0; 2.2] 0.3 = true)\n  assert (candidate [1.0; 2.0; 3.9; 4.0; 5.0; 2.2] 0.05 = false)\n  assert (candidate [1.0; 2.0; 5.9; 4.0; 5.0] 0.95 = true)\n  assert (candidate [1.0; 2.0; 5.9; 4.0; 5.0] 0.8 = false)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0; 2.0] 0.1 = true)\n  assert (candidate [1.1; 2.2; 3.1; 4.1; 5.1] 1.0 = true)\n  assert (candidate [1.1; 2.2; 3.1; 4.1; 5.1] 0.5 = false)\n  0\n\ntest()", "completions": ["  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_list = numbers.map(numbers, has_close_elements)", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_threshold = has_close_elements(threshold, 0.3)", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_threshold = has_close_elements(threshold, 0.5)", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];\nlet has_close_elements_2 = \n  [1.0, 2.8, 3.0, 4.0, 5.0, 2.0];", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_threshold = \n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_threshold = has_close_elements(threshold, 0.5)", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_list = [\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.8, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  [1.0, 2.0, 3.0,", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_list = numbers.map(numbers, has_close_elements)", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_threshold = \n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0];", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_threshold = has_close_elements(threshold, 0.3)", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_threshold = has_close_elements(threshold, 0.3)", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_2numbers threshold = \n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]", "  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\nlet has_close_elements_threshold = \n  [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}