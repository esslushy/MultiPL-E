{"name": "HumanEval_40_triples_sum_to_zero", "language": "fs", "prompt": "//triples_sum_to_zero takes a list of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n// False\nlet triples_sum_to_zero l = \n", "tests": "let test() = \n  let candidate = triples_sum_to_zero\n  assert (candidate [1; 3; 5; 0] = false)\n  assert (candidate [1; 3; 5; -1] = false)\n  assert (candidate [1; 3; -2; 1] = true)\n  assert (candidate [1; 2; 3; 7] = false)\n  assert (candidate [1; 2; 5; 7] = false)\n  assert (candidate [2; 4; -5; 3; 9; 7] = true)\n  assert (candidate [1] = false)\n  assert (candidate [1; 3; 5; -100] = false)\n  assert (candidate [100; 3; 5; -100] = false)\n  0\n\ntest()", "completions": ["  [1, 3, 5, 0]\n  .map(x => x + x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(x => x > 0)\n  .map(x => x)\n  .reduce((sum, x)", "  [1, 3, 5, 0]\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i", "  [1, 3, 5, 0]\n  .map(x => x * x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .sum()\n  .map(x", "  [1, 3, 5, 0]\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i", "  [1, 3, 5, 0]\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .reduce((sum, x) =>", "  [1, 3, 5, 0]\n  .map(x => x * x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) => sum + x)\n  .map(x => x)\n  .reduce((sum, x) =>", "  [1, 3, 5, 0]\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(", "  [1, 3, 5, 0]\n  .map(i => i + i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i => i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i)\n  .sum()\n  .map(i", "  [1, 3, 5, 0]\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .filter(", "    [1, 3, 5, 0]\n    .map(x => x * x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x => x)\n    .reduce((sum, x) => sum + x, 0)\n    .map(x", "  [1, 3, 5, 0]\n  .map(i => i + i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(", "  [1, 3, 5, 0]\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .filter(i => i > 0)\n  .map(i => i)\n", "  [1, 3, 5, 0]\n  .map(x => x * x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x", "  [1, 3, 5, 0]\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i", "    [1, 3, 5, 0]\nlet sum_to_zero = (l) => {\n    let sum = 0\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i]\n    }\n    return sum\n}", "  [1, 3, 5, 0]\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i", "  [1, 3, 5, 0]\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i)\n  .map(i => i * i)\n  .reduce((sum, x)", "[1, 3, 5, 0]\nlet result = triples_sum_to_zero(l)\nlet is_zero = result === false\nlet is_one = result === true\nlet is_zero_or_one = result === true\nlet is_zero_or_two = result === true\nlet is_zero_or_three = result === true\nlet is_zero_or_four = result === true\nlet is_zero_or_five = result === true\nlet is_zero_or_six = result === true\nlet is_zero_or_seven = result === true\nlet is_zero_or_eight = result === true\nlet is_zero_or_nine = result === true\nlet is_zero_or_ten = result === true\nlet is_zero_or_eleven = result === true\nlet is_zero_or_twelve = result === true\nlet is_zero_or_thirteen = result === true\nlet is_zero_or_fourteen = result === true\nlet is_zero_or_fifteen = result === true\nlet is_zero_or_sixteen = result === true\nlet is_zero_or_seventeen = result === true\nlet is_zero_or_eighteen = result === true\nlet is_zero_or_nineteen = result === true\nlet is_zero_or_twenty = result === true\nlet is_zero_or_twenty_one = result === true\nlet is_zero_or_twenty_two = result === true\nlet is_zero_or_twenty_three = result === true\nlet is_zero_or_twenty_four = result === true\nlet is_zero_or_twenty_five = result === true\nlet is_zero_or_twenty_six = result === true\nlet is_zero_or_twenty_seven = result === true\nlet is_zero_or_twenty_eight = result === true\nlet is_zero_or_twenty_nine = result === true\nlet is_zero_or_twenty_ten = result === true\nlet is_zero_or_twenty_eleven = result === true\nlet is_zero_or_twenty_twelve = result === true\nlet is_zero", "  (i, j, k) => {\n    if (i == j && k == j) {\n      return true;\n    } else if (i == j && k == k) {\n      return true;\n    } else if (i == k && j == k) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == j && k == k) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == j && k == k) {\n      return true;\n    } else if (i == k && j == k) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == j && k == k) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == k && j == k) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == k && j == k) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == k && j == k) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == k && j == k) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == k && j == k) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == k && j == k) {\n      return true;\n    } else if (i == k && j == j) {\n      return true;\n    } else if (i == k && j == k) {\n      return true;\n    } else", "  [1, 3, 5, 0]\n  .map(x => x * x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x => x)\n  .reduce((sum, x) => sum + x, 0)\n  .map(x"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}