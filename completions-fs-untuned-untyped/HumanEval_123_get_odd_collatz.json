{"name": "HumanEval_123_get_odd_collatz", "language": "fs", "prompt": "//Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\nlet get_odd_collatz n = \n", "tests": "let test() = \n  let candidate = get_odd_collatz\n  assert (candidate 14 = [1; 5; 7; 11; 13; 17])\n  assert (candidate 5 = [1; 5])\n  assert (candidate 12 = [1; 3; 5])\n  assert (candidate 1 = [1])\n  0\n\ntest()", "completions": ["\t(n: number) => \n\t\tn > 1 \n\t\t? [n, n - 1] \n\t\t: [n, n + 1]\n\t", "\t(n, i) => {\n\t\tif (i == 0) return [1];\n\t\tif (i % 2 == 0) return [n];\n\t\treturn [n, n + 1];\n\t}", "    (n >= 1) ? n : \n    (n >= 2) ? n + 1 : \n    (n >= 3) ? n + 2 : \n    (n >= 4) ? n + 3 : \n    (n >= 5) ? n + 4 : \n    (n >= 6) ? n + 5 : \n    (n >= 7) ? n + 6 : \n    (n >= 8) ? n + 7 : \n    (n >= 9) ? n + 8 : \n    (n >= 10) ? n + 9 : \n    (n >= 11) ? n + 10 : \n    (n >= 12) ? n + 11 : \n    (n >= 13) ? n + 12 : \n    (n >= 14) ? n + 13 : \n    (n >= 15) ? n + 14 : \n    (n >= 16) ? n + 15 : \n    (n >= 17) ? n + 16 : \n    (n >= 18) ? n + 17 : \n    (n >= 19) ? n + 18 : \n    (n >= 20) ? n + 19 : \n    (n >= 21) ? n + 20 : \n    (n >= 22) ? n + 21 : \n    (n >= 23) ? n + 22 : \n    (n >= 24) ? n + 23 : \n    (n >= 25) ? n + 24 : \n    (n >= 26) ? n + 25 : \n    (n >= 27) ? n + 26 : \n    (n >= 28) ? n + 27 : \n    (n >= 29) ? n + 28 : \n    (n >= 30) ? n + 29 : \n    (n >= 31) ? n + 30 : \n    (n >= 32) ? n + 31 : \n    (n >= 33) ? n + 32 : \n    (n >= 34) ? n + 33 : \n    (n >= 35) ? n + 34 : \n    (n >= 36) ? n + 35 : \n    (n >= 37) ? n + 36 : \n    (n >= 38) ? n + 37 : \n    (n >= 39) ? n + 38 : \n    (n >= 40) ?", "{\n\t1: [1],\n\t2: [1, 5],\n\t3: [1, 5, 7],\n\t4: [1, 5, 7, 3],\n\t5: [1, 5, 7, 3, 2],\n\t6: [1, 5, 7, 3, 2, 1],\n\t7: [1, 5, 7, 3, 2, 1, 4],\n\t8: [1, 5, 7, 3, 2, 1, 4, 2],\n\t9: [1, 5, 7, 3, 2, 1, 4, 2, 1],\n\t10: [1, 5, 7, 3, 2, 1, 4, 2, 1, 4],\n\t11: [1, 5, 7, 3, 2, 1, 4, 2, 1, 4, 2],\n\t12: [1, 5, 7, 3, 2, 1, 4, 2, 1, 4, 2, 1, 4],\n\t13: [1, 5, 7, 3, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2],\n\t14: [1, 5, 7, 3, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4],\n\t15: [1, 5, 7, 3, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2],\n\t16: [1, 5, 7, 3, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4],\n\t17: [1, 5, 7, 3, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2],\n\t18: [1, 5, 7, 3, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4],\n\t19: [1, 5, 7, 3, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1,", "    (n, i) => {\n        if (i % 2 == 0) {\n            return [n];\n        } else {\n            return [n, get_odd_collatz(n - 1)];\n        }\n    };", "\t(n % 2 == 0) ? n : n - 1;", "  (n) => \n    (n % 2) == 0 ? n : \n    (n % 2) == 1 ? n : \n    (n % 3) == 0 ? n : \n    (n % 3) == 1 ? n : \n    (n % 5) == 0 ? n : \n    (n % 5) == 1 ? n : \n    (n % 7) == 0 ? n : \n    (n % 7) == 1 ? n : \n    (n % 11) == 0 ? n : \n    (n % 11) == 1 ? n : \n    (n % 13) == 0 ? n : \n    (n % 13) == 1 ? n : \n    (n % 17) == 0 ? n : \n    (n % 17) == 1 ? n : \n    (n % 19) == 0 ? n : \n    (n % 19) == 1 ? n : \n    (n % 23) == 0 ? n : \n    (n % 23) == 1 ? n : \n    (n % 29) == 0 ? n : \n    (n % 29) == 1 ? n : \n    (n % 31) == 0 ? n : \n    (n % 31) == 1 ? n : \n    (n % 37) == 0 ? n : \n    (n % 37) == 1 ? n : \n    (n % 41) == 0 ? n : \n    (n % 41) == 1 ? n : \n    (n % 43) == 0 ? n : \n    (n % 43) == 1 ? n : \n    (n % 47) == 0 ? n : \n    (n % 47) == 1 ? n : \n    (n % 53) == 0 ? n : \n    (n % 53) == 1 ? n : \n    (n % 59) == 0 ? n : \n    (n % 59) == 1 ? n : \n    (n % 61) == 0 ? n : \n    (n % 61) == 1 ? n : \n    (n % 67) == 0 ? n : \n    (n % 67) == 1 ? n : \n    (n % 71) == 0 ? n :", "    (n = 1)\n    .then(() => {\n        return n\n            .then(() => {\n                return n\n                    .then(() => {\n                        return n\n                            .then(() => {\n                                return n\n                                    .then(() => {\n                                        return n\n                                            .then(() => {\n                                                return n\n                                                    .then(() => {\n                                                        return n\n                                                            .then(() => {\n                                                                return n\n                                                                    .then(() => {\n                                                                        return n\n                                                                            .then(() => {\n                                                                                return n\n                                                                                    .then(() => {\n                                                                                    return n\n                                                                                        .then(() => {\n                                                                                            return n\n                                                                                              .then(() => {\n                                                                                                return n\n                                                                                                    .then(() => {\n                                                                                                        return n\n                                                                                                              .then(() => {\n                                                                                                                return n\n                                                                                                                  return n\n                                                                                                                  .then(() => {\n                                                                                                                    return n\n                                                                                                                          .then(() => {\n                                                                                                                            return n\n                                                                                                                            .then(() => {\n                                                                                                                            return n\n                                                                                                                            .then(() => {\n                                                                                                                            return n\n                                                                                                                            .then(() => {\n                                                                                                                            return n\n                                                                                                                            .then(() => {\n                                                                                                                            return n\n                                                                                                                            .then(() => {\n                                                                                                                            return n\n                                                                                                                            .then(() => {\n                                                                                                                            return n\n                                                                                                                            .then(() => {\n                                                                                                                            return n\n                                                                                                                            .then(() => {\n                                                                                                                            return n\n                                                                                                                            .then(() => {\n                                                                                                                            return n\n                                                                                                                            .then(() => {\n                                                                                                                            return n\n", "    (n: number) =>\n    n.toString().split('').reverse().map(n => n.toString()).reduce((a, b) => a + b, 0)", "    (n: number) =>\n    (n % 2) === 1 ? [n] : [n, n + 1]", "    (n >= 1) ? n : \n    (n % 2 == 0) ? n : \n    (n % 3 == 0) ? n : \n    (n % 5 == 0) ? n : \n    (n % 7 == 0) ? n : \n    (n % 11 == 0) ? n : \n    (n % 13 == 0) ? n : \n    (n % 17 == 0) ? n : \n    (n % 19 == 0) ? n : \n    (n % 23 == 0) ? n : \n    (n % 29 == 0) ? n : \n    (n % 31 == 0) ? n : \n    (n % 37 == 0) ? n : \n    (n % 41 == 0) ? n : \n    (n % 43 == 0) ? n : \n    (n % 47 == 0) ? n : \n    (n % 53 == 0) ? n : \n    (n % 59 == 0) ? n : \n    (n % 61 == 0) ? n : \n    (n % 67 == 0) ? n : \n    (n % 71 == 0) ? n : \n    (n % 73 == 0) ? n : \n    (n % 79 == 0) ? n : \n    (n % 81 == 0) ? n : \n    (n % 83 == 0) ? n : \n    (n % 87 == 0) ? n : \n    (n % 91 == 0) ? n : \n    (n % 93 == 0) ? n : \n    (n % 97 == 0) ? n : \n    (n % 101 == 0) ? n : \n    (n % 103 == 0) ? n : \n    (n % 107 == 0) ? n : \n    (n % 111 == 0) ? n : \n    (n % 113 == 0) ? n : \n    (n % 117 == 0) ? n : \n    (n % 121 == 0) ? n : \n    (n % 123 == 0) ? n : \n    (n % 127 == 0) ? n : \n    (n % 131 == 0) ? n : \n    (n % 133 == 0", "  (n: number) => \n    (n % 2 === 0) ? \n      [n, n] : \n      [n, n, n]\n  .sort((a, b) => a[1] - b[1])\n  .reverse()\n  .map((x) => x[1])\n  .filter((x) => x > 1)\n  .map((x) => x[0])\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x) => x > 1)\n  .filter((x)", "  (n = 1)\n  .then(() => {\n    return n\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      })\n      .then(() => {\n        return n\n      ", "    (n, i) => {\n        let odd = i % 2;\n        let next = i / 2;\n        if (odd == 1) {\n            return [n];\n        } else if (odd == 0) {\n            return [next];\n        } else {\n            return [n, next];\n        }\n    }(1);", "    (n: number) => {\n        let odd = n % 2;\n        let next = n / 2;\n        let prev = n - odd;\n        return [odd, next, prev];\n    }", "  (n) => \n    (n % 2) === 1 ? n : \n    (n % 2) === 0 ? n + 1 : \n    (n % 2) === 1 ? n + 2 : \n    (n % 2) === 2 ? n + 3 : \n    (n % 2) === 3 ? n + 4 : \n    (n % 2) === 4 ? n + 5 : \n    (n % 2) === 5 ? n + 6 : \n    (n % 2) === 6 ? n + 7 : \n    (n % 2) === 7 ? n + 8 : \n    (n % 2) === 8 ? n + 9 : \n    (n % 2) === 9 ? n + 10 : \n    (n % 2) === 10 ? n + 11 : \n    (n % 2) === 11 ? n + 12 : \n    (n % 2) === 12 ? n + 13 : \n    (n % 2) === 13 ? n + 14 : \n    (n % 2) === 14 ? n + 15 : \n    (n % 2) === 15 ? n + 16 : \n    (n % 2) === 16 ? n + 17 : \n    (n % 2) === 17 ? n + 18 : \n    (n % 2) === 18 ? n + 19 : \n    (n % 2) === 19 ? n + 20 : \n    (n % 2) === 20 ? n + 21 : \n    (n % 2) === 21 ? n + 22 : \n    (n % 2) === 22 ? n + 23 : \n    (n % 2) === 23 ? n + 24 : \n    (n % 2) === 24 ? n + 25 : \n    (n % 2) === 25 ? n + 26 : \n    (n % 2) === 26 ? n + 27 : \n    (n % 2) === 27 ? n + 28 : \n    (n % 2) === 28 ? n + 29 : \n    (n % 2) === 29 ? n + 30 : \n    (n % 2) === 30 ? n + 31 : \n    (n % 2) === 31 ? n + 32 : \n    (n % 2) === 32 ? n + 33", "    (n >= 1) ? n : (n % 2 == 0) ? n - 1 : n + 1;", "    (n % 2 == 0) ? n : (n % 2 == 1) ? n + 1 : n;", "  (n = 1)\n  .then(() => {\n    return get_odd_collatz(n)\n  })\n  .then(odd_list => {\n    console.log(odd_list)\n  })", "    (n >= 1) ? n : (n % 2 == 0 ? 1 : 2);"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}