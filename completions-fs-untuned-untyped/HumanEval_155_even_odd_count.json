{"name": "HumanEval_155_even_odd_count", "language": "fs", "prompt": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nlet even_odd_count num = \n", "tests": "let test() = \n  let candidate = even_odd_count\n  assert (candidate 7 = (0, 1))\n  assert (candidate -78 = (1, 1))\n  assert (candidate 3452 = (2, 2))\n  assert (candidate 346211 = (3, 3))\n  assert (candidate -345821 = (3, 3))\n  assert (candidate -2 = (1, 0))\n  assert (candidate -45347 = (2, 3))\n  assert (candidate 0 = (1, 0))\n  0\n\ntest()", "completions": ["  (even_odd_count(12) + even_odd_count(123)) % 2;", "  (n => n % 2 == 0 ? n : n - 1)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n : n - 1)\n  .reduce((n, i) => n + i, 0)\n  .map((n) => n % 2 == 0 ? n", "\t(even_odd_count(12) + even_odd_count(123)) % 2 == 0", "\teven_odd_count(12)\n\teven_odd_count(123)\n\teven_odd_count(1234)\n\teven_odd_count(12345)\n\teven_odd_count(123456)\n\teven_odd_count(1234567)\n\teven_odd_count(12345678)\n\teven_odd_count(123456789)\n\teven_odd_count(1234567890)\n\teven_odd_count(12345678901)\n\teven_odd_count(123456789012)\n\teven_odd_count(1234567890123)\n\teven_odd_count(12345678901234)\n\teven_odd_count(123456789012345)\n\teven_odd_count(1234567890123456)\n\teven_odd_count(12345678901234567)\n\teven_odd_count(123456789012345678)\n\teven_odd_count(1234567890123456789)\n\teven_odd_count(12345678901234567890)\n\teven_odd_count(123456789012345678901)\n\teven_odd_count(1234567890123456789012)\n\teven_odd_count(12345678901234567890123)\n\teven_odd_count(123456789012345678901234)\n\teven_odd_count(1234567890123456789012345)\n\teven_odd_count(12345678901234567890123456)\n\teven_odd_count(123456789012345678901234567)\n\teven_odd_count(1234567890123456789012345678)\n\teven_odd_count(12345678901234567890123456789)\n\teven_odd_count(123456789012345678901234567890)\n\teven_odd_count(1234567890123456789012345678901)\n\teven_odd_count(12345678901234567", "\teven_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count", "  even_odd_count(12)\n  .then(num => num % 2 == 0)\n  .then(num => num % 2 == 1)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)", "\teven_odd_count(12)\n\t.then(num => num.length === 2)\n\t.then(num => num.length === 1)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.length === 0)\n\t.then(num => num.", "\teven_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(1234)\n\t+ even_odd_count(12345)\n\t- even_odd_count(123456)\n\t+ even_odd_count(1234567)\n\t- even_odd_count(12345678)\n\t+ even_odd_count(123456789)\n\t- even_odd_count(1234567890)\n\t+ even_odd_count(12345678901)\n\t- even_odd_count(123456789012)\n\t+ even_odd_count(1234567890123)\n\t- even_odd_count(12345678901234)\n\t+ even_odd_count(123456789012345)\n\t- even_odd_count(1234567890123456)\n\t+ even_odd_count(12345678901234567)\n\t- even_odd_count(123456789012345678)\n\t+ even_odd_count(1234567890123456789)\n\t- even_odd_count(12345678901234567890)\n\t+ even_odd_count(123456789012345678901)\n\t- even_odd_count(12345678901234567890)\n\t+ even_odd_count(12345678901234567890123)\n\t- even_odd_count(12345678901234567890)\n\t+ even_odd_count(1234567890123456789012345)\n\t- even_odd_count(12345678901234567890)\n\t+ even_odd_count(1234567890123456789012345)\n\t- even_odd_count(12345678901234567890)\n\t+ even_odd_count(1234567890123456789012345)\n\t- even_odd_count(12345678901234567890)\n\t+ even_odd_count(1234567890123456789012345)\n\t- even_odd_count", "  (n => n % 2 == 0 ? n : n - 1)", "  even_odd_count(12)\n  .then(num => num % 2 == 0)\n  .then(num => num % 2 == 1)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)\n  .then(num => num)", "  (num % 2) === 0 ? num : num - 1;", "  (n) => (n % 2) === 0 ? (n / 2) : (n / 2 + 1)", "    (even_odd_count(12) + even_odd_count(123)) % 2;", "\teven_odd_count(12)\n\t+ even_odd_count(123)\n\t- even_odd_count(1234)\n\t+ even_odd_count(1234)\n\t- even_odd_count(12345)\n\t+ even_odd_count(12345)\n\t- even_odd_count(123456)\n\t+ even_odd_count(123456)\n\t- even_odd_count(1234567)\n\t+ even_odd_count(1234567)\n\t- even_odd_count(12345678)\n\t+ even_odd_count(12345678)\n\t- even_odd_count(123456789)\n\t+ even_odd_count(123456789)\n\t- even_odd_count(1234567890)\n\t+ even_odd_count(1234567890)\n\t- even_odd_count(12345678901)\n\t+ even_odd_count(12345678901)\n\t- even_odd_count(123456789012)\n\t+ even_odd_count(1234567890123)\n\t+ even_odd_count(12345678901234)\n\t+ even_odd_count(123456789012345)\n\t+ even_odd_count(1234567890123456)\n\t+ even_odd_count(12345678901234567)\n\t+ even_odd_count(123456789012345678)\n\t+ even_odd_count(1234567890123456789)\n\t+ even_odd_count(12345678901234567890)\n\t+ even_odd_count(123456789012345678901)\n\t+ even_odd_count(1234567890123456789012)\n\t+ even_odd_count(12345678901234567890123)\n\t+ even_odd_count(123456789012345678901234)\n\t+ even_odd_count(1234567890123456789012345)\n\t+ even_odd_count(12345678901234567890123456)\n", "  (even_odd_count(12) + even_odd_count(123)) % 2;", "\teven_odd_count(123)\n\t.then(num => {\n\t\tconsole.log(num);\n\t})", "  (n) =>\n    (n % 2) === 0 ? (n / 2) : (n / 2 + 1)\nlet even_odd_count_tuple = \n  (n) =>\n    (n % 2) === 0 ? (n / 2) : (n / 2 + 1)", "\teven_odd_count(12)\n\t.then(num =>\n\t\teven_odd_count(num)\n\t)", "    even_odd_count(123)\nlet even_odd_count_result = \n    (num.even_odd_count, num.odd_count)", "\t(num % 2) == 0 ? num : num - (num % 2);"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}