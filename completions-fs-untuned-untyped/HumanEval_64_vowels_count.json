{"name": "HumanEval_64_vowels_count", "language": "fs", "prompt": "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nlet vowels_count s = \n", "tests": "let test() = \n  let candidate = vowels_count\n  assert (candidate \"abcde\" = 2)\n  assert (candidate \"Alone\" = 3)\n  assert (candidate \"key\" = 2)\n  assert (candidate \"bye\" = 1)\n  assert (candidate \"keY\" = 2)\n  assert (candidate \"bYe\" = 1)\n  assert (candidate \"ACEDY\" = 3)\n  0\n\ntest()", "completions": ["  `\n  ${\n    `\n    ${\n      ${\n        `\n        ${\n          ${\n            ${\n              ${\n                ${\n                  ${\n                    ${\n                      ${\n                        ${\n                          ${\n                            ${\n                              ${\n                                ${\n                                  ${\n                                    ${\n                                      ${\n                                        ${\n                                          ${\n                                            ${\n                                              ${\n                                                ${\n                                                  ${\n                                                    ${\n                                                      ${\n                                                      ${\n                                                        ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                   ", "  `\n  ${\n    'a'\n    'e'\n    'i'\n    'o'\n    'u'\n  }\n  `;", "`y`", "  `${vowels_count(s)}${vowels_count(s.substring(0, s.length - 1))}`;", "  `\n  ${\n    'a'\n    'e'\n    'i'\n    'o'\n    'u'\n  }\n  `;", "  `\n  (\n    (\n      (\n        (\n          (\n            (\n              (\n                (\n                  (\n                    (\n                      (\n                        (\n                          (\n                            (\n                              (\n                                (\n                                  (\n                                    (\n                                      (\n                                        (\n                                          (\n                                            (\n                                              (\n                                                (\n                                                   (\n                                                      (\n                                                        (\n                                                            (\n                                                            (\n                                                              (\n                                                                (\n                                                                (\n                                                                (\n                                                                  (\n                                                                    (\n                                                                    (\n                                                                      (\n                                                                        (\n                                                                          (\n                                                                            (\n                                                                              (\n                                                                                (\n                                                                                 (\n                                                                                    (\n                                                                                    (\n                                                                                      (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n                                                                                        (\n", "  `\n  ${\n    'a'\n    'e'\n    'i'\n    'o'\n    'u'\n  }\n  `;", "  `\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $\n  $", "  `${vowels_count}${vowels_count}${vowels_count}`;", "  `\n  ${\n    s.map(v => `${v}`).join('')\n  }\n  `;", "  \"abcde\"\n  .split(\"\")\n  .map(word => word.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len) => acc + len, 0)\n  .map(vowel => vowel.length)\n  .reduce((acc, len)", "  `${s}`;", "  `\n  {{\n    \"a\"\n    \"e\"\n    \"i\"\n    \"o\"\n    \"u\"\n  }}\n  `;", "  `\n  ${\n    s.map(v => v.charAt(0).toUpperCase() + v.slice(1)\n  }\n  `;", "  `\n  ${\n    `\n    ${\n      `\n      ${\n        ${\n          `\n          ${\n            ${\n              `\n              ${\n                ${\n                  `\n                  ${\n                    ${\n                      ${\n                        ${\n                          ${\n                            ${\n                              ${\n                                ${\n                                  ${\n                                    ${\n                                      ${\n                                        ${\n                                          ${\n                                            ${\n                                              ${\n                                                ${\n                                                  ${\n                                                    ${\n                                                     ${\n                                                      ${\n                                                      ${\n                                                        ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                                                            ${\n                               ", "  `\n  ${\n    'a'\n    'e'\n    'i'\n    'o'\n    'u'\n  }\n  `;", "  `\n  {{\n    \"a\"\n    \"e\"\n    \"i\"\n    \"o\"\n    \"u\"\n  }}\n  `;", "  \"abcde\"\n  .replace(/[aeiouu]/g, '')\n  .replace(/[y]/g, '')\n  .split('')\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b) => a + b, 0)\n  .map(v => v.length)\n  .reduce((a, b)", "`\n\t// Write a function vowels_count which takes a string representing\n\t// a word as input and returns the number of vowels in the string.\n\t// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is\n\t// also a vowel, but only when it is at the end of the given word.\n\t// Example:\n\t// >>> vowels_count(\"abcde\")\n\t// 2\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t// 3\n\t// >>> vowels_count(\"ACEDY\")\n\t", "  `\n  ${s.split(\" \").map(v => `${v}`).join(\" \")}\n  `;"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}