{"name": "HumanEval_80_is_happy", "language": "fs", "prompt": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy s = \n", "tests": "let test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()", "completions": ["\t\"abcdefghijklmnopqrstuvwxyz\"\n\t.split(\"\")\n\t.map(s => s.length === 3 && s.includes(s[0]))\n\t.reduce((a, b) => a && b, false)\n\t.join(\"\");", "`", "    \"a\"\n    .repeat(3)\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .join(\"\")\n    .split(\"\")\n    .", "\t\"a\"\n\t\"aa\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyy\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb\"\n\t\"xyz\"\n\t\"abcd\"\n\t\"adb", "{\n\t'a': false,\n\t'aa': false,\n\t'abcd': true,\n\t'adb': false,\n\t'xyy': true\n}", "{\n    'a': false,\n    'aa': false,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    'abcd': true,\n    'ab': true,\n    ", "\t\"abcdefghijklmnopqrstuvwxyz\"\n\t.split(\"\")\n\t.map(s => s.length > 3 && s.includes(s[0]))\n\t.reduce((a, b) => a && b, true)\n\t.join(\"\")\n\t.toLowerCase();", "\t\"a\"\n\t\"ab\"\n\t\"abc\"\n\t\"abcd\"\n\t\"abcdabcd\"\n\t\"abcdabcdabcd\"\n\t\"abcdabcdabcdabcd\"\n\t\"abcdabcdabcdabcdabcd\"\n\t\"abcdabcdabcdabcdabcdabcd\"\n\t\"abcdabcdabcdabcdabcdabcdabcd\"\n\t\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab", "    \"abcdefghijklmnopqrstuvwxyz\"\n    .split(\"\")\n    .map(s => s.length > 3)\n    .reduce((a, b) => a && b, false)\n    .join(\"\");", "`", "    \"abcdefghijklmnopqrstuvwxyz\".split(\"\");", "{\n\t'a': false,\n\t'aa': false,\n\t'abcd': true,\n\t'adb': false,\n\t'xyy': false\n}", "    \"a\"\n    + \"ab\"\n    + \"ac\"\n    + \"ad\"\n    + \"b\"\n    + \"c\"\n    + \"d\"\n    + \"e\"\n    + \"f\"\n    + \"g\"\n    + \"h\"\n    + \"i\"\n    + \"j\"\n    + \"k\"\n    + \"l\"\n    + \"m\"\n    + \"n\"\n    + \"o\"\n    + \"p\"\n    + \"q\"\n    + \"r\"\n    + \"s\"\n    + \"t\"\n    + \"u\"\n    + \"v\"\n    + \"w\"\n    + \"x\"\n    + \"y\"\n    + \"z\";", "{\n\t\"a\": false,\n\t\"aa\": false,\n\t\"abcd\": false,\n\t\"adb\": false,\n\t\"xyy\": false,\n\t\"aabb\": true,\n\t\"adb\": true,\n\t\"xyy\": true,\n\t\"aabb\": false,\n\t\"adb\": false,\n\t\"xyy\": false,\n\t\"aabb\": true\n}", "  \"abcdefghijklmnopqrstuvwxyz\".split(\"\");", "    \"abcdefghijklmnopqrstuvwxyz\"\n    .split('')\n    .map(s => s.length > 3)\n    .reduce((a, b) => a && b, true)\n    .join('')", "    \"a\"\n    + \"b\"\n    + \"c\"\n    + \"d\"\n    + \"e\"\n    + \"f\"\n    + \"g\"\n    + \"h\"\n    + \"i\"\n    + \"j\"\n    + \"k\"\n    + \"l\"\n    + \"m\"\n    + \"n\"\n    + \"o\"\n    + \"p\"\n    + \"q\"\n    + \"r\"\n    + \"s\"\n    + \"t\"\n    + \"u\"\n    + \"v\"\n    + \"w\"\n    + \"x\"\n    + \"y\"\n    + \"z\"\n    + \"a\"\n    + \"b\"\n    + \"c\"\n    + \"d\"\n    + \"e\"\n    + \"f\"\n    + \"g\"\n    + \"h\"\n    + \"i\"\n    + \"j\"\n    + \"k\"\n    + \"l\"\n    + \"m\"\n    + \"n\"\n    + \"o\"\n    + \"p\"\n    + \"q\"\n    + \"r\"\n    + \"s\"\n    + \"t\"\n    + \"u\"\n    + \"v\"\n    + \"w\"\n    + \"x\"\n    + \"y\"\n    + \"z\"\n    + \"a\"\n    + \"b\"\n    + \"c\"\n    + \"d\"\n    + \"e\"\n    + \"f\"\n    + \"g\"\n    + \"h\"\n    + \"i\"\n    + \"j\"\n    + \"k\"\n    + \"l\"\n    + \"m\"\n    + \"n\"\n    + \"o\"\n    + \"p\"\n    + \"q\"\n    + \"r\"\n    + \"s\"\n    + \"t\"\n    + \"u\"\n    + \"v\"\n    + \"w\"\n    + \"x\"\n    + \"y\"\n    + \"z\"\n    + \"a\"\n    + \"b\"\n    + \"c\"\n    + \"d\"\n    + \"e\"\n    + \"f\"\n    + \"g\"\n    + \"", "    \"abcdefghijklmnopqrstuvwxyz\"\n    .split('')\n    .map(str => {\n        if (str.length < 3) {\n            return false\n        }\n        return str.charAt(0) === 'a' && str.charAt(str.length - 1) === 'b' && str.charAt(str.length - 2) === 'c'\n    })\n    .reduce((a, b) => a && b, true)\n    .join('')", "{\n\t'a': false,\n\t'aa': false,\n\t'abcd': true,\n\t'adb': true,\n\t'xyy': false\n}", "{\n    \"a\": false,\n    \"aa\": false,\n    \"abcd\": true,\n    \"adb\": false,\n    \"xyy\": false\n}"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}