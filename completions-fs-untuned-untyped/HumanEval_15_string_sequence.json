{"name": "HumanEval_15_string_sequence", "language": "fs", "prompt": "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nlet string_sequence n = \n", "tests": "let test() = \n  let candidate = string_sequence\n  assert (candidate 0 = \"0\")\n  assert (candidate 3 = \"0 1 2 3\")\n  assert (candidate 10 = \"0 1 2 3 4 5 6 7 8 9 10\")\n  0\n\ntest()", "completions": ["  '0 1 2 3 4 5'\n  .split('')\n  .map(n)\n  .reduce((a, b) => a + b)\n  .join('')", "  '0 1 2 3 4 5'\n  .split(' ')\n  .map(n => n)\n  .reduce((a, b) => a + b)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .map(n", "  '0 1 2 3 4 5'\n  .split('')\n  .map(n)\n  .reduce((a, b) => a + b)\n  .join('')", "\t'0 1 2 3 4 5'\n\t.split(' ')\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.join(' ')\n\t.slice(0, n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(0, n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(0, n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(0, n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(0, n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(0, n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(n)\n\t.map(i => i.toString())\n\t.reduce((a, b) => a + b, '')\n\t.slice(0, n)\n\t.map(i =>", "  string_sequence(0)\n  .append(string_sequence(1))\n  .append(string_sequence(2))\n  .append(string_sequence(3))\n  .append(string_sequence(4))\n  .append(string_sequence(5))\n  .toString();", "  '0 1 2 3 4 5'\n  .split('')\n  .map(n)\n  .reduce((s, n) => s + n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n", "  '0 1 2 3 4 5'\n  .split(' ')\n  .map(n => n)\n  .reduce((a, b) => a + b)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' '", "  '0 1 2 3 4 5'\n  .split('')\n  .map(i => i.toString())\n  .reduce((a, b) => a + b, '')\n  .join('');", "  '0 1 2 3 4 5'\n  .split(' ')\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join", "  '0 1 2 3 4 5'\n  .split('')\n  .map(n)\n  .reduce((a, b) => a + b)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n", "  '0 1 2 3 4 5'\n  .split('')\n  .map(n)\n  .reduce((a, b) => a + b)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n  .slice(0, n)\n", "  '0 1 2 3 4 5'\n  .split(' ')\n  .map(n => n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')\n  .slice(0, n)\n  .join(' ')\n  .slice(n)\n  .join(' ')", "  '0 1 2 3 4 5'\n  .split('')\n  .map(i => i.toString())\n  .reduce((a, b) => a + b)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join('')\n  .slice(0, n)\n  .join(", "  '0 1 2 3 4 5'\n  .split(' ')\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n)\n  .map(n", "  '0 1 2 3 4 5'\n  .split('')\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length))\n  .map(n => n.slice(n.length))\n  .map(n => n.slice(0, n.length", "  '0 1 2 3 4 5'\n  .split(' ')\n  .map(x => x.toString())\n  .reduce((a, b) => a + b, '')\n  .join(' ')\n  .toString();", "  '0 1 2 3 4 5'\n  .split(' ')\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n  .slice(0, n)\n  .map(n => n.toString())\n  .join(' ')\n", "    '0 1 2 3 4 5'\n    .split(' ')\n    .map(n)\n    .reduce((a, b) => a + b)\n    .join(' ')\n    .slice(0, n)\n    .join(' ')", "    '0 1 2 3 4 5'\n    .split(' ')\n    .map(i => i.toString())\n    .join(' ')\n    .slice(0, n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(0, n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(0, n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(0, n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(0, n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(0, n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(0, n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(0, n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(0, n)\n    .map(i => i.toString())\n    .join(' ')\n    .slice(n)\n    .map(i => i.to", "  '0 1 2 3 4 5'\n  .split(' ')\n  .map(n => n)\n  .reduce((a, b) => a + b)\n  .join(' ')\n  .slice(0, n);"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}