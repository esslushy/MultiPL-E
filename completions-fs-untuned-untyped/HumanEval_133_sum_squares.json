{"name": "HumanEval_133_sum_squares", "language": "fs", "prompt": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlet sum_squares lst = \n", "tests": "let test() = \n  let candidate = sum_squares\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 2.0; 3.0] = 14)\n  assert (candidate [1.0; 3.0; 5.0; 7.0] = 84)\n  assert (candidate [1.4; 4.2; 0.0] = 29)\n  assert (candidate [-2.4; 1.0; 1.0] = 6)\n  assert (candidate [100.0; 1.0; 15.0; 2.0] = 10230)\n  assert (candidate [10000.0; 10000.0] = 200000000)\n  assert (candidate [-1.4; 4.6; 6.3] = 75)\n  assert (candidate [-1.4; 17.9; 18.9; 19.9] = 1086)\n  assert (candidate [0.0] = 0)\n  assert (candidate [-1.0] = 1)\n  assert (candidate [-1.0; 1.0; 0.0] = 2)\n  0\n\ntest()", "completions": ["sum_squares(lst)", "  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]", "  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\nlet sum_squares_rounded = \n  [14,98,84,29]", "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]", "sum_squares(lst)", "[\n  [1,2,3],\n  [1,4,9],\n  [1,0,0]\n]", "  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]", "[\n  [1,2,3],\n  [1,4,9],\n  [1,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],\n  [1,7,5,7],", "  lst.map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x)\n  .map(i => i * i)\n  .reduce((", "  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\n  .sort()\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0)\n  .map(i => i * i)\n  .reduce((sum, x) => sum + x, 0", "  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\n  .sort()\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0)\n  .map(n => n * n)\n  .reduce((sum, x) => sum + x, 0", "  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\nlet sum_squares_rounded = \n  [1,4,9,14,28,34,46,54,66,80,94,126,156,180,194,216,252,288,304,336,376,408,544,576,608,624,720,832,896,1216,1536,1920,2560,3072,3264,3520,4032,4464,4880,5120,5496,6144,6288,7168,7520,8192,9472,9840,10288,11584,12288,13008,14336,15008,16384,18016,20352,22176,23552,24576,25600,26672,28704,29152,30720,32016,33264,34688,35008,36016,37008,38008,39008,40800,41000,42000,43000,44000,45000,46000,47000,48000,49000,50000,51000,52000,53000,54000,55000,56000,57000,58000,59000,60000,61000,62000,63000,64000,65000,66000,67000,68000,69000,70000,71000,72000,73000,74000,75000,76000,77000,78000,79000,80000,81000,82000,83000,84000,85000,86000,87000,88000,89000,90000,91000,92000,93000,94000,95000,96000,97000,98000,99000,100000]", "  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]", "[\n  [1,2,3],\n  [1,4,9],\n  [1,5,7],\n  [1,6,8],\n  [1,7,5],\n  [1,8,5],\n  [1,9,7],\n  [1,10,5],\n  [1,11,7],\n  [1,12,5],\n  [1,13,7],\n  [1,14,5],\n  [1.4,4.2,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1.4,4.2,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [1,0,0", "sum_squares(lst)", "  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\n  .sort()\n  .map(i => i * i)\n  .reduce((sum, i) => sum + i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()\n  .map(i => i * i)\n  .reverse()", "\t[\n\t\t[1,2,3],\n\t\t[1,4,9],\n\t\t[1,0,0],\n\t\t[1.4,4.2,0],\n\t\t[1,3,5,7],\n\t\t[1,0,0],\n\t];", "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]", "\t[\n\t\t[1,2,3],\n\t\t[1,4,9],\n\t\t[1,5,7],\n\t\t[1,6,5,7],\n\t\t[1,7,4,5,7],\n\t\t[1.4,4.2,0],\n\t\t[-2.4,1,1]\n\t]", "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}