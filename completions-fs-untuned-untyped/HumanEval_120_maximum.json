{"name": "HumanEval_120_maximum", "language": "fs", "prompt": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n", "tests": "let test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()", "completions": ["  arr.reduce((a, b) => a + b)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((a) => a)\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .", "  arr.reduce((a, b) => a + b)", "  arr.map(i => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((i) => i)\n  .sort((a, b) => a - b)\n  .reverse()\n  .", "  arr.map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse();", "\tarr.map((i) => i * i)\n\t.reduce((a, b) => a + b)\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.map((i) => i)\n\t.reverse()\n\t.map((i) => i)\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()\n\t.map((i) => i)\n\t.reverse()\n\t.sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n\t.reverse()", "  arr.reduce((a, b) => a + b, 0)\nlet sorted = maximum.sort(k)\nconsole.log(sorted)\n<|endoftext|arr.map(i => i % 10)\n  .sort((a, b) => a - b)\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  .reverse()\n  .map(i => i)\n  ", "    arr.map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse()\n    .map((i) => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b ? -1 : a < b ? 1 : 0)\n    .reverse", "    arr.map(i => i * i)\n    .reduce((a, b) => a + b)\n    .sort((a, b) => a > b)\n    .reverse()\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((i) => i)\n    .filter((i) => i > 0)\n    .map((", "  arr.map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i)", "  arr.map((i) => i + 1)\n  .sort((a, b) => a - b)\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i", "  arr.reduce((a, b) => a + b, 0)", "  arr.reduce((a, b) => a + b)\n  .sort((a, b) => a - b)\n  .reverse()\n  .map((a, b) => a - b)\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reverse()\n  .reversearr.reduce((a, b) => a + b)", "  arr.map((i) => i * i)\n  .reduce((max, i) => max + i)\n  .sort((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .map((i) => i)\n  .reverse()\n  .maparr.reduce((a, b) => a + barr.map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)\n  .reduce((a, b) => a + b)\n  .sort((a, b) => a > b ? a : b)\n  .reverse()\n  .map((i) => i * i)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}