{"name": "HumanEval_59_largest_prime_factor", "language": "fs", "prompt": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlet largest_prime_factor n = \n", "tests": "let test() = \n  let candidate = largest_prime_factor\n  assert (candidate 15 = 5)\n  assert (candidate 27 = 3)\n  assert (candidate 63 = 7)\n  assert (candidate 330 = 11)\n  assert (candidate 13195 = 29)\n  0\n\ntest()", "completions": ["  (n * (n + 1)) / 2;", "  (n * (n - 1)) / 2;", "  (n * (n - 1)) / 2;", "  (n > 1) ? n : (n === 0 ? 1 : 2);", "  (n * (n - 1)) / 2;", "  (n > 1) ? n : (n > 2) ? n - 2 : 1;", "  (n > 1) ? n : (n === 0 ? 1 : 2);", "  (n * (n - 1)) / 2;", "  (n > 1) ? n : (n === 0 ? 1 : 2);", "  (n * (n + 1)) / 2;", "  (n * (n - 1)) / 2;", "  (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17) * (n - 18) * (n - 19) * (n - 20) * (n - 21) * (n - 22) * (n - 23) * (n - 24) * (n - 25) * (n - 26) * (n - 27) * (n - 28) * (n - 29) * (n - 30) * (n - 31) * (n - 32) * (n - 33) * (n - 34) * (n - 35) * (n - 36) * (n - 37) * (n - 38) * (n - 39) * (n - 40) * (n - 41) * (n - 42) * (n - 43) * (n - 44) * (n - 45) * (n - 46) * (n - 47) * (n - 48) * (n - 49) * (n - 50) * (n - 51) * (n - 52) * (n - 53) * (n - 54) * (n - 55) * (n - 56) * (n - 57) * (n - 58) * (n - 59) * (n - 60) * (n - 61) * (n - 62) * (n - 63) * (n - 64) * (n - 65) * (n - 66) * (n - 67) * (n - 68) * (n - 69) * (n - 70) * (n - 71) * (n - 72) * (n - 73) * (n - 74) * (n - 75) * (n - 76) * (n - 77) * (n - 78) * (n - 79) * (n - 80) * (n - 81) * (n - 82) * (n - 83) * (n - 84) * (n - 85) * (", "  (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17) * (n - 18) * (n - 19) * (n - 20) * (n - 21) * (n - 22) * (n - 23) * (n - 24) * (n - 25) * (n - 26) * (n - 27) * (n - 28) * (n - 29) * (n - 30) * (n - 31) * (n - 32) * (n - 33) * (n - 34) * (n - 35) * (n - 36) * (n - 37) * (n - 38) * (n - 39) * (n - 40) * (n - 41) * (n - 42) * (n - 43) * (n - 44) * (n - 45) * (n - 46) * (n - 47) * (n - 48) * (n - 49) * (n - 50) * (n - 51) * (n - 52) * (n - 53) * (n - 54) * (n - 55) * (n - 56) * (n - 57) * (n - 58) * (n - 59) * (n - 60) * (n - 61) * (n - 62) * (n - 63) * (n - 64) * (n - 65) * (n - 66) * (n - 67) * (n - 68) * (n - 69) * (n - 70) * (n - 71) * (n - 72) * (n - 73) * (n - 74) * (n - 75) * (n - 76) * (n - 77) * (n - 78) * (n - 79) * (n - 80) * (n - 81) * (n - 82) * (n - 83) * (n - 84) * (n - 85) * (", "  (n > 1) ? (n % 2 == 0 ? n : n - 1) : 0;", "  (n * (n - 1)) / 2;", "  (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) * (n & -n) *", "  (n * (n + 1)) / 2;", "  (n * (n - 1)) / 2;", "  (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17) * (n - 18) * (n - 19) * (n - 20) * (n - 21) * (n - 22) * (n - 23) * (n - 24) * (n - 25) * (n - 26) * (n - 27) * (n - 28) * (n - 29) * (n - 30) * (n - 31) * (n - 32) * (n - 33) * (n - 34) * (n - 35) * (n - 36) * (n - 37) * (n - 38) * (n - 39) * (n - 40) * (n - 41) * (n - 42) * (n - 43) * (n - 44) * (n - 45) * (n - 46) * (n - 47) * (n - 48) * (n - 49) * (n - 50) * (n - 51) * (n - 52) * (n - 53) * (n - 54) * (n - 55) * (n - 56) * (n - 57) * (n - 58) * (n - 59) * (n - 60) * (n - 61) * (n - 62) * (n - 63) * (n - 64) * (n - 65) * (n - 66) * (n - 67) * (n - 68) * (n - 69) * (n - 70) * (n - 71) * (n - 72) * (n - 73) * (n - 74) * (n - 75) * (n - 76) * (n - 77) * (n - 78) * (n - 79) * (n - 80) * (n - 81) * (n - 82) * (n - 83) * (n - 84) * (n - 85) * (", "  (n * (n - 1)) / 2;"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}