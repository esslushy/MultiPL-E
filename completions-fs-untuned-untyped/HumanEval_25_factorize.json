{"name": "HumanEval_25_factorize", "language": "fs", "prompt": "//Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nlet factorize n = \n", "tests": "let test() = \n  let candidate = factorize\n  assert (candidate 2 = [2])\n  assert (candidate 4 = [2; 2])\n  assert (candidate 8 = [2; 2; 2])\n  assert (candidate 57 = [3; 19])\n  assert (candidate 3249 = [3; 3; 19; 19])\n  assert (candidate 185193 = [3; 3; 3; 19; 19; 19])\n  assert (candidate 20577 = [3; 19; 19; 19])\n  assert (candidate 18 = [2; 3; 3])\n  0\n\ntest()", "completions": ["factorize(8)", "{\n  [n]() {\n    return [n];\n  },\n  [n, n]() {\n    return [n, n];\n  },\n  [n, n, n]() {\n    return [n, n, n];\n  },\n  [n, n, n, n]() {\n    return [n, n, n, n];\n  },\n  [n, n, n, n, n, n]() {\n    return [n, n, n, n, n, n];\n  },\n  [n, n, n, n, n, n, n, n, n, n, n, n, n, n, n]() {\n    return [n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n,", "factorize(8)\nlet factorize2 = factorize(25)\nlet factorize3 = factorize(70)", "  (n) => {\n    let factor = 1;\n    let prime = [];\n    let factorized = [];\n    let factorizedPrime = [];\n    let factorizedPrimePrime = [];\n    let primeFactor = 1;\n    let primeFactorPrime = 1;\n    let primeFactorPrime = 1;\n    let primeFactorPrimePrime = 1;\n    let primeFactorPrimePrime = 1;\n    let primeFactorPrimePrime = 1;\n    let primeFactorPrimePrimePrime = 1;\n    let primeFactorPrimePrimePrime = 1;\n    let primeFactorPrimePrimePrime = 1;\n    let primeFactorPrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrimePrime = 1;\n    let primeFactorPrimePrimePrimePrime", "  (n) => {\n    let factor = [];\n    let factor_count = 0;\n    let factor_sum = 0;\n    let factor_sum_count = 0;\n    let factor_sum_sum = 0;\n    let factor_sum_sum_count = 0;\n    let factor_sum_sum_sum = 0;\n    let factor_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum = 0;\n    let factor_sum_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum_sum = 0;\n    let factor_sum_sum_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum_sum_sum = 0;\n    let factor_sum_sum_sum_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum_sum_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count = 0;\n    let factor_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum", "// >>> factorize(8)", "{\n  [n]() {\n    let factor = 1;\n    for (let i = 2; i <= n; i++) {\n      if (i % 2 == 0) {\n        factor = factor * i;\n      }\n    }\n    return factor;\n  },\n  [n]() {\n    let factor = 1;\n    for (let i = 2; i <= n; i++) {\n      if (i % 2 == 0) {\n        factor = factor * i;\n      }\n    }\n    return factor;\n  },\n  [n]() {\n    let factor = 1;\n    for (let i = 2; i <= n; i++) {\n      if (i % 2 == 0) {\n        factor = factor * i;\n      }\n    }\n    return factor;\n  },\n  [n]() {\n    let factor = 1;\n    for (let i = 2; i <= n; i++) {\n      if (i % 2 == 0) {\n        factor = factor * i;\n      }\n    }\n    return factor;\n  },\n  [n]() {\n    let factor = 1;\n    for (let i = 2; i <= n; i++) {\n      if (i % 2 == 0) {\n        factor = factor * i;\n      }\n    }\n    return factor;\n  },\n  [n]() {\n    let factor = 1;\n    for (let i = 2; i <= n; i++) {\n      if (i % 2 == 0) {\n        factor = factor * i;\n      }\n    }\n    return factor;\n  },\n  [n]() {\n    let factor = 1;\n    for (let i = 2; i <= n; i++) {\n      if (i % 2 == 0) {\n        factor = factor * i;\n      }\n    }\n    return factor;\n  },\n  [n]() {\n    let factor = 1;\n    for (let i = 2; i <= n; i++) {\n      if (i % 2 == 0) {\n        factor = factor * i;\n      }\n    }\n    return factor;\n  },\n  [n]() {", "  (n) => {\n    let factor = [];\n    let factorized = [];\n    let factorized_count = 0;\n    let factorized_count_max = 0;\n    let factorized_count_min = 0;\n    let factorized_count_min_max = 0;\n    let factorized_count_min_max_max = 0;\n    let factorized_count_min_max_max_max = 0;\n    let factorized_count_min_max_max_max = 0;\n    let factorized_count_min_max_max_max_max = 0;\n    let factorized_count_min_max_max_max_max = 0;\n    let factorized_count_min_max_max_max_max = 0;\n    let factorized_count_min_max_max_max_max = 0;\n    let factorized_count_min_max_max_max_max_max = 0;\n    let factorized_count_min_max_max_max_max_max = 0;\n    let factorized_count_min_max_max_max_max_max_max = 0;\n    let factorized_count_min_max_max_max_max_max_max_max = 0;\n    let factorized_count_min_max_max_max_max_max_max_max_max = 0;\n    let factorized_count_min_max_max_max_max_max_max_max_max_max_max_max = 0;\n    let factorized_count_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max", "// >>> factorize(8)", "  (n) => {\n    let factor = [];\n    let prime = [];\n    let factorized = [];\n    let factorizedPrime = [];\n    let factorizedPrime2 = [];\n    let factorizedPrime2Prime = [];\n    let factorizedPrime2Prime2 = [];\n    let factorizedPrime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2 = [];\n    let factorizedPrime2Prime2Prime2 = [];\n    let factorizedPrime2Prime2Prime2 = [];\n    let factorizedPrime2Prime2Prime2 = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2Prime2Prime = [];\n    let factorizedPrime2Prime2", "// >>> factorize(8)", "// >>> factorize(8)", "// >>> factorize(8)", "// >>> factorize(8)", "{\n    //Return list of prime factors of given integer in the order from smallest to largest\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n    // [2, 5, 7]\n    factorize(n)\n    .forEach(function(n) {\n        console.log(n);\n    });\n}\n<|endoftext|>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ", "{\n  //Return list of prime factors of given integer in the order from smallest to largest\n  // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  // Input number should be equal to the product of all factors\n  // >>> factorize(8)\n  // [2, 2, 2]\n  // >>> factorize(25)\n  // [5, 5]\n  // >>> factorize(70)\n  // [2, 5, 7]\n  factorize(n) {\n    let factor = [];\n    let prime = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let m1 = 0;\n    let m2 = 0;\n    let m3 = 0;\n    let m4 = 0;\n    let m5 = 0;\n    let m6 = 0;\n    let m7 = 0;\n    let m8 = 0;\n    let m9 = 0;\n    let m10 = 0;\n    let m11 = 0;\n    let m12 = 0;\n    let m13 = 0;\n    let m14 = 0;\n    let m15 = 0;\n    let m16 = 0;\n    let m17 = 0;\n    let m18 = 0;\n    let m19 = 0;\n    let m20 = 0;\n    let m21 = 0;\n    let m22 = 0;\n    let m23 = 0;\n    let m24 = 0;\n    let m25 = 0;\n    let m26 = 0;\n    let m27 = 0;\n    let m28 = 0;\n    let m29 = 0;\n    let m30 = 0;\n    let m31 = 0;\n    let m32 = 0;\n    let m33 = 0;\n    let m34 = 0;\n    let m35 = 0;\n    let m36 = 0;\n    let m37 = 0;\n    let m38 = 0;\n    let m39 = 0;\n    let m40 = 0;\n    let m41 = 0;\n    let m42 = 0;\n", "// >>> factorize(8)", "// >>> factorize(8)", "// >>> factorize(8)", "{\n  // >>> factorize(8)\n  // [2, 2, 2]\n  // >>> factorize(25)\n  // [5, 5]\n  // >>> factorize(70)\n  // [2, 5, 7]\n  // >>> factorize(100)\n  // [2, 2, 2]\n  // >>> factorize(250)\n  // [5, 5]\n  // >>> factorize(500)\n  // [2, 2, 2]\n  // >>> factorize(1000)\n  // [2, 2, 2]\n  // >>> factorize(10000)\n  // [2, 2, 2]\n  // >>> factorize(100000)\n  // [2, 2, 2]\n  // >>> factorize(1000000)\n  // [2, 2, 2]\n  // >>> factorize(10000000)\n  // [2, 2, 2]\n  // >>> factorize(100000000)\n  // [2, 2, 2]\n  // >>> factorize(1000000000)\n  // [2, 2, 2]\n  // >>> factorize(10000000000)\n  // [2, 2, 2]\n  // >>> factorize(100000000000)\n  // [2, 2, 2]\n  // >>> factorize(1000000000000)\n  // [2, 2, 2]\n  // >>> factorize(10000000000000)\n  // [2, 2, 2]\n  // >>> factorize(100000000000000)\n  // [2, 2, 2]\n  // >>> factorize(1000000000000000)\n  // [2, 2, 2]\n  // >>> factorize(100000000000000000)\n  // [2, 2, 2]\n  // >>> factorize(100000000000000000)\n  // [2, 2, 2]\n  // >>> factorize(100000000000000000)\n  // [2, 2, 2]\n  // >>> factorize(100000000000000000)\n  // [2, 2, 2]\n  // >>> factorize(100000000000000000)\n  // [2, 2, 2]\n  // >>> factorize(100000000000000000)\n  // [2, 2, 2]\n  // >>>"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}