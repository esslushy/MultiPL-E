{"name": "HumanEval_1_separate_paren_groups", "language": "fs", "prompt": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()', '(())', '(()())']\nlet separate_paren_groups paren_string = \n", "tests": "let test() = \n  let candidate = separate_paren_groups\n  assert (candidate \"(()()) ((())) () ((())()())\" = [\"(()())\"; \"((()))\"; \"()\"; \"((())()())\"])\n  assert (candidate \"() (()) ((())) (((())))\" = [\"()\"; \"(())\"; \"((()))\"; \"(((())))\"])\n  assert (candidate \"(()(())((())))\" = [\"(()(())((())))\"])\n  assert (candidate \"( ) (( )) (( )( ))\" = [\"()\"; \"(())\"; \"(()())\"])\n  0\n\ntest()", "completions": ["'( ) (( ) (( ) )')", "  '(( )(())(())'\nlet split_paren_groups = (str) => {\n  let groups = []\n  let open_braces = 0\n  let close_braces = 0\n  let open_paren = 0\n  let close_paren = 0\n  let open_bracket = 0\n  let close_bracket = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_close = 0\n  let open_paren_open = 0\n  let close_paren_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_bracket_open = 0\n  let close_bracket_close = 0\n  let open_", "  '( ) (( ) ) (( ) )';", "'( ) (( ) (( ) )')", "'( ) (( ) (( ) )')", "  '( ) (( ) ) (( ) )';", "`(\n\t`(\n\t\t`(\n\t\t\t`(\n\t\t\t\t`(\n\t\t\t\t\t`(\n\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "  '( ) (( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )", "  '(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "  '(()()()())'", "  '(()()()())';", "  '( ) (( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )", "  '(( ))()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "  '(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "  '(()()()()())';", "  '( ) (( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )(( )", "`(\n\t`(\n\t\t`(\n\t\t\t`(\n\t\t\t\t`(\n\t\t\t\t\t`(\n\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "`(\n\t`(\n\t\t`(\n\t\t\t`(\n\t\t\t\t`(\n\t\t\t\t\t`(\n\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tn  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n  + '(( )( )'\n"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}