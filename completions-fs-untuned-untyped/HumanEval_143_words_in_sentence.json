{"name": "HumanEval_143_words_in_sentence", "language": "fs", "prompt": "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nlet words_in_sentence sentence = \n", "tests": "let test() = \n  let candidate = words_in_sentence\n  assert (candidate \"This is a test\" = \"is\")\n  assert (candidate \"lets go for swimming\" = \"go for\")\n  assert (candidate \"there is no place available here\" = \"there is no place\")\n  assert (candidate \"Hi I am Hussein\" = \"Hi am Hussein\")\n  assert (candidate \"go for it\" = \"go for it\")\n  assert (candidate \"here\" = \"\")\n  assert (candidate \"here is\" = \"is\")\n  0\n\ntest()", "completions": ["sentence.split(\" \").map(word => word.toLowerCase()).filter(word => word.length > 1).join(\" \");", "sentence.split(\" \").map(word => word.toLowerCase());", "    \"This is a test\"\n    .split(\" \")\n    .map(word => word.charAt(0))\n    .filter(word => word.length > 1)\n    .map(word => word.substring(1))\n    .reduce((prev, cur) => prev + cur, \"\")\n    .join(\" \")\n    .join(\"\");", "sentence.split(\" \").map(word => word.toLowerCase()).filter(word => word.length > 1).join(\" \");", "sentence.split(\" \").map(word => word.charAt(0)).reduce((prev, curr) => prev + curr, \"\")", "sentence.split(\" \").map(word => word.toLowerCase());", "\t\"This is a test\"\n\t.split(\" \")\n\t.map(word => word.charAt(0))\n\t.filter(word => word.length > 1)\n\t.map(word => word.substring(1))\n\t.reduce((prev, cur) => prev + cur, \"\")\n\t.join(\" \")\n\t.join(\"\");", "\"This is a test\"\nlet words_in_sentence_result = words_in_sentence.split(\" \")\nlet words_in_sentence_result_len = words_in_sentence_result.length", "sentence.split(\" \").map(word => word.toLowerCase()).filter(word => word.length > 1).join(\" \");", "  \"This is a test\"\n  .split(\" \")\n  .map(word => word.toLowerCase())\n  .filter(word => word.length > 1)\n  .map(word => word.substring(0, 1))\n  .reduce((prev, curr) => prev + curr, \"\")\n  .join(\"\");", "\"This is a test\"\nlet words_in_sentence_new = \n\"lets go for swimming\"\nlet words_in_sentence_new_len = \n\"go for\"\nlet words_in_sentence_new_order = \n\"lets go for swimming\"", "\t\"This is a test\"\n\t.split(\" \")\n\t.map(word => word.toLowerCase())\n\t.reduce((prev, curr) => prev + curr, \"\")\n\t.join(\" \")\n\t.toLowerCase();", "sentence.split(\" \").map(word => {\n  return word.toLowerCase();\n}).reduce((prev, curr) => {\n  return prev + curr;\n}, \"\").join(\" \");", "sentence.split(\" \");", "  \"This is a test\"\nlet words_in_sentence_new = \n  \"lets go for swimming\"\nlet words_in_sentence_new_len = \n  \"lets go for swimming\"\nlet words_in_sentence_new_len_len = \n  \"lets go for swimming\"", "    \"This is a test\"\nlet words_in_sentence_result = \n    \"is\"\nlet words_in_sentence_result_prime = \n    \"go\"\nlet words_in_sentence_result_prime_len = \n    100\nlet words_in_sentence_result_prime_len_prime = \n    100\nlet words_in_sentence_result_prime_len_prime_prime = \n    100", "\"This is a test\"", "sentence.split(\" \").map(word => {\n  return word.toLowerCase();\n}).filter(word => word.length > 1);", "    sentence.split(\" \").map(word => word.toLowerCase()).filter(word => word.length > 1);", "  \"This is a test\"\n  .split(\" \")\n  .map(word => word.toLowerCase())\n  .filter(word => word.length > 1)\n  .map(word => word.substr(0, 1))\n  .reduce((prev, curr) => prev + curr, \"\")\n  .join(\" \")\n  .join(\"\");"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}