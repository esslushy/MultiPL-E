{"name": "HumanEval_108_count_nums", "language": "fs", "prompt": "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nlet count_nums arr = \n", "tests": "let test() = \n  let candidate = count_nums\n  assert (candidate [] = 0)\n  assert (candidate [-1; -2; 0] = 0)\n  assert (candidate [1; 1; 2; -2; 3; 4; 5] = 6)\n  assert (candidate [1; 6; 9; -6; 0; 1; 5] = 5)\n  assert (candidate [1; 100; 98; -7; 1; -1] = 4)\n  assert (candidate [12; 23; 34; -45; -56; 0] = 5)\n  assert (candidate [0; 1] = 1)\n  assert (candidate [1] = 1)\n  0\n\ntest()", "completions": ["[-1, 11, -11, -1, 1, 2, 3]", "[\n  -1,\n  11,\n  -11,\n  1,\n  2,\n  3\n];", "  [-1, 11, -11]\nlet count_nums_s = count_nums.sum\nlet count_nums_d = count_nums.count_nums(arr)", "[\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],", "[-1, 11, -11]\nlet count_nums_s = count_nums(arr)\nlet count_nums_s_len = count_nums_s.length\nlet count_nums_s_i = 0\nlet count_nums_s_j = 0\nlet count_nums_s_k = 0\nlet count_nums_s_l = 0\nlet count_nums_s_m = 0\nlet count_nums_s_n = 0\nlet count_nums_s_o = 0\nlet count_nums_s_p = 0\nlet count_nums_s_q = 0\nlet count_nums_s_r = 0\nlet count_nums_s_s = 0\nlet count_nums_s_t = 0\nlet count_nums_s_u = 0\nlet count_nums_s_v = 0\nlet count_nums_s_w = 0\nlet count_nums_s_x = 0\nlet count_nums_s_y = 0\nlet count_nums_s_z = 0\nlet count_nums_s_w_len = count_nums_s.length\nlet count_nums_s_i = 0\nlet count_nums_s_j = 0\nlet count_nums_s_k = 0\nlet count_nums_s_l = 0\nlet count_nums_s_m = 0\nlet count_nums_s_n = 0\nlet count_nums_s_o = 0\nlet count_nums_s_p = 0\nlet count_nums_s_q = 0\nlet count_nums_s_r = 0\nlet count_nums_s_s = 0\nlet count_nums_s_t = 0\nlet count_nums_s_u = 0\nlet count_nums_s_v = 0\nlet count_nums_s_w = 0\nlet count_nums_s_x = 0\nlet count_nums_s_y = 0\nlet count_nums_s_z = 0\nlet count_nums_s_w_len = count_", "[-1, 11, -11]", "  [-1, 11, -11]\nlet count_nums_s = count_nums.sum\nlet count_nums_d = count_nums.count", "  [-1, 11, -11]\nlet count_nums_s = count_nums.sum\nlet count_nums_s_s = count_nums_s.sum", "[\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -1, -1],\n  [-1, -", "[-1, 11, -11]\nlet count_nums_sgn = \n[-1, -1, -1]", "[-1, 11, -11]\nlet sum = 0\nfor (let i = 0; i < arr.length; i++) {\n  sum += arr[i]\n}", "  [-1, 11, -11]", "[-1, 11, -11, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -", "[\n  -1,\n  11,\n  -11,\n  1,\n  2,\n  3\nn  -1,\n  11,\n  -11,\n  1,\n  2,\n  3\n];", "[-1, 11, -11]", "[\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],\n  [1, 1, 2],\n  [-1, 11, -11],"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}