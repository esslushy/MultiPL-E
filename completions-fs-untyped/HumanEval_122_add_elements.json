{"name": "HumanEval_122_add_elements", "language": "fs", "prompt": "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlet add_elements arr k = \n", "tests": "let test() = \n  let candidate = add_elements\n  assert (candidate [1; -2; -3; 41; 57; 76; 87; 88; 99] 3 = -4)\n  assert (candidate [111; 121; 3; 4000; 5; 6] 2 = 0)\n  assert (candidate [11; 21; 3; 90; 5; 6; 7; 8; 9] 4 = 125)\n  assert (candidate [111; 21; 3; 4000; 5; 6; 7; 8; 9] 4 = 24)\n  assert (candidate [1] 1 = 1)\n  0\n\ntest()", "completions": ["    let rec add_elements' acc elem =\n        match elem with\n        | 0 -> acc\n        | _ -> add_elements' (acc + elem) (elem - 1)\n    add_elements' 0 0", "    let rec sum_elements acc i =\n        if i <= k then acc\n        else sum_elements (acc + arr.[i]) (i - 1)\n    sum_elements 0 0", "    let rec add_elements' acc elem =\n        match elem with\n        | 0 -> acc\n        | _ -> add_elements' (acc + elem) (elem - 1)\n    add_elements' 0 arr", "    let rec loop i =\n        if i <= k then arr.[i] + loop (i + 1)\n        else arr.[i]\n    loop 0", "    let rec add_elements_rec acc elem =\n        match elem with\n        | 0 -> acc\n        | _ -> add_elements_rec (acc + elem) (elem - 1)\n    add_elements_rec 0 0", "    let rec loop i acc =\n        if i <= k then loop (i+1) (acc + arr.[i])\n        else acc\n    loop 0 0", "    let rec loop acc elem = \n        match elem with\n        | 0 -> acc\n        | _ -> loop (acc + elem) (elem - 1)\n    loop 0 arr.[k]", "    let rec sum_elements acc elem =\n        match elem with\n        | 0 -> acc\n        | _ -> sum_elements (acc + elem) (elem - 1)\n    sum_elements 0 arr", "    let rec add_elements' acc elem =\n        match elem with\n        | 0 -> acc\n        | _ -> add_elements' (elem::acc) (elem - 1)\n    add_elements' [] 0", "    let rec loop i acc =\n        if i = 0 then acc\n        else loop (i - 1) (acc + arr.[i])\n    loop k arr", "    let rec loop acc elem =\n        if elem = 0 then acc\n        else loop (elem - 1) (arr.[elem])\n    loop 0 arr.[k]", "    let rec add_elements' acc elem =\n        match elem with\n        | 0 -> acc\n        | _ -> add_elements' (acc + elem) (elem - 1)\n    add_elements' 0 0", "    let rec add_elements' acc elem = \n        match elem with\n        | 0 -> acc\n        | _ -> add_elements' (acc + elem) (elem - 1)\n    add_elements' 0 0", "    let rec add_elements' acc elem =\n        if elem = 0 then acc\n        else add_elements' (elem :: acc) (elem - 1)\n    add_elements' [] (k - 1)", "    let rec add_elements' acc elem =\n        match elem with\n        | 0 -> acc\n        | _ -> add_elements' (acc + elem) (elem - 1)\n    add_elements' 0 0", "    let rec loop i acc =\n        if i <= k then\n            acc + arr.[i]\n        else\n            loop (i - k) (acc + arr.[i])\n    loop 0 0", "    let rec loop acc elem = \n        match elem with\n        | 0 -> acc\n        | _ -> loop (acc + elem) (elem - 1)\n    loop 0 arr.[k]", "    let rec add_elements' acc elem =\n        match elem with\n        | 0 -> acc\n        | 1 -> acc + 1\n        | _ -> add_elements' (acc + 1) (elem - 1)\n    add_elements' 0 arr", "    let rec sum_elements acc elem =\n        match elem with\n        | 0 -> acc\n        | 1 -> acc + 1\n        | _ -> sum_elements (acc + elem) (elem - 1)\n    sum_elements 0 arr", "    let rec add_elements' acc elem =\n        match elem with\n        | 0 -> acc\n        | 1 -> acc + 1\n        | _ -> add_elements' (acc + 1) (elem - 1)\n    add_elements' 0 arr"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}