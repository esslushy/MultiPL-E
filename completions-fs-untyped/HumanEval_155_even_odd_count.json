{"name": "HumanEval_155_even_odd_count", "language": "fs", "prompt": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nlet even_odd_count num = \n", "tests": "let test() = \n  let candidate = even_odd_count\n  assert (candidate 7 = (0, 1))\n  assert (candidate -78 = (1, 1))\n  assert (candidate 3452 = (2, 2))\n  assert (candidate 346211 = (3, 3))\n  assert (candidate -345821 = (3, 3))\n  assert (candidate -2 = (1, 0))\n  assert (candidate -45347 = (2, 3))\n  assert (candidate 0 = (1, 0))\n  0\n\ntest()", "completions": ["    let even = num % 2\n    let odd = num % 2\n    (even, odd)", "    let even_odd_count_int = \n        if num = 0 then 0\n        else\n            let even_odd_count_int = num % 2\n            (even_odd_count_int, even_odd_count_int)\n    even_odd_count_int", "    let even = num % 2\n    let odd = num % 2\n    (even, odd)", "    let even_odd_count_int = num % 2\n    let even_odd_count_int_2 = even_odd_count_int / 2\n    let even_odd_count_int_3 = even_odd_count_int / 3\n    (even_odd_count_int_2, even_odd_count_int_3)", "    let even_odd_count_int = num % 2\n    let even_odd_count_int_2 = even_odd_count_int / 2\n    (even_odd_count_int_2, even_odd_count_int_2)", "    let even_odd_count_int = num % 2\n    let even_odd_count_int_int = even_odd_count_int * 2\n    let even_odd_count_int_int_int = even_odd_count_int_int * 2\n    (even_odd_count_int_int, even_odd_count_int_int_int)", "    let even_odd_count_int = num % 2\n    let even_odd_count_int_int = num / 2\n    (even_odd_count_int, even_odd_count_int_int)", "    let even_odd_count_int = num % 2\n    if even_odd_count_int = 0 then 1 else 2", "    let even_odd_count_int = num % 2\n    let even_odd_count_int_int = even_odd_count_int * 2\n    (even_odd_count_int_int, even_odd_count_int_int)", "    let even = num % 2\n    let odd = num / 2\n    (even, odd)", "    let even = num % 2\n    let odd = num % 2\n    (even, odd)", "    let even_odd_count_int = int num\n    let even_odd_count_int_divisor = even_odd_count_int / even_odd_count_int_divisor\n    (even_odd_count_int_divisor, even_odd_count_int_divisor - 1)", "    let even = num % 2\n    let odd = num / 2\n    (even, odd)", "    let even_odd_count_int = num % 2\n    let even_odd_count_int_int = even_odd_count_int * 2\n    (even_odd_count_int_int, even_odd_count_int_int)", "    let even_odd_count_int = \n        num \n        |> int \n        |> fun x -> if x % 2 = 0 then 1 else 0\n    (even_odd_count_int, even_odd_count_int)", "    let even_odd_count_int = \n        if num % 2 = 0 then 1\n        else 0\n    (even_odd_count_int, even_odd_count_int)", "    let even_odd_count_n = num % 2\n    let even_odd_count_o = num / 2\n    (even_odd_count_n, even_odd_count_o)", "    let even_odd_count_int = num % 2\n    let even_odd_count_int_2 = even_odd_count_int / 2\n    (even_odd_count_int_2, even_odd_count_int_2)", "    let even_odd_count_int = num % 2\n    let even_odd_count_int_2 = even_odd_count_int / 2\n    (even_odd_count_int_2, even_odd_count_int_2)", "    let even_odd_count_int = num % 2\n    let even_odd_count_int_2 = even_odd_count_int / 2\n    let even_odd_count_int_3 = even_odd_count_int % 2\n    (even_odd_count_int_2, even_odd_count_int_3)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}