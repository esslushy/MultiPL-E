{"name": "HumanEval_145_order_by_points", "language": "fs", "prompt": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nlet order_by_points nums = \n", "tests": "let test() = \n  let candidate = order_by_points\n  assert (candidate [1; 11; -1; -11; -12] = [-1; -11; 1; -12; 11])\n  assert (candidate [1234; 423; 463; 145; 2; 423; 423; 53; 6; 37; 3457; 3; 56; 0; 46] = [0; 2; 3; 6; 53; 423; 423; 423; 1234; 145; 37; 46; 56; 463; 3457])\n  assert (candidate [] = [])\n  assert (candidate [1; -11; -32; 43; 54; -98; 2; -3] = [-3; -32; -98; -11; 1; 2; 43; 54])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11] = [1; 10; 2; 11; 3; 4; 5; 6; 7; 8; 9])\n  assert (candidate [0; 6; 6; -76; -21; 23; 4] = [-76; -21; 0; 4; 23; 6; 6])\n  0\n\ntest()", "completions": ["    nums \n    |> List.map (fun x -> x.ToString())\n    |> List.sort", "    nums |> List.map (fun x -> x.ToString()) |> List.sort", "    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort", "    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort", "    nums \n    |> List.map (fun x -> x.ToString())\n    |> List.sort", "    nums\n    |> List.map (fun x -> x * 10)\n    |> List.sort", "    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort", "    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort", "    nums |> List.map (fun x -> x.ToString()) |> List.sort", "    nums \n    |> List.sortBy (fun x -> x)\n    |> List.map (fun x -> x.ToString())", "    nums \n    |> List.map (fun x -> x * 10)\n    |> List.sort", "    let rec sort_nums nums = \n        match nums with\n        | [] -> []\n        | x::xs -> \n            let nums = x::nums\n            let rec sort_nums' nums = \n                match nums with\n                | [] -> []\n                | x::xs -> \n                    let nums = x::nums\n                    let rec sort_nums'' nums = \n                        match nums with\n                        | [] -> []\n                        | x::xs -> \n                            let nums = x::nums\n                            let rec sort_nums''' nums = \n                                match nums with\n                                | [] -> []\n                                | x::xs -> \n                                    let nums = x::nums\n                                    let rec sort_nums''' nums = \n                                        match nums with\n                                        | [] -> []\n                                        | x::xs -> \n                                            let nums = x::nums\n                                            let rec sort_nums''' nums = \n                                                match nums with\n                                                | [] -> []\n                                                | x::xs -> \n                                                    let nums = x::nums\n                                                    let rec sort_nums''' nums = \n                                                        match nums with\n                                                        | [] -> []\n                                                        | x::xs -> \n                                                            let nums = x::nums\n                                                            let rec sort_nums''' nums = \n                                                                match nums with\n                                                                | [] -> []\n                                                                | x::xs -> \n                                                                    let nums = x::nums\n                                                                    let rec sort_nums''' nums = \n                                                                        match nums with\n                                                                        | [] -> []\n                                                                        | x::xs -> \n                                                                            let nums = x::nums\n                                                                            let rec sort_nums''' nums = \n                                                                                match nums with\n                                                                                | [] -> []\n                                                                                | x::xs -> \n                                                                                    let nums = x::nums\n                                                                                    let rec sort_nums''' nums = \n                                                                                        match nums with\n                                                                                        | [] -> []", "    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort", "    let rec order_by_nums (nums:int list) = \n        match nums with\n        | [] -> []\n        | x::xs -> \n            let nums = x::nums\n            let nums = nums |> List.rev\n            let nums = nums |> List.map (fun x -> x - x % 10)\n            order_by_nums nums\n    order_by_nums nums", "    nums |> List.map (fun x -> x * 10)", "    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort", "    nums\n    |> List.map (fun x -> x.ToString())\n    |> List.sort", "    nums |> List.sortBy (fun x -> x.Sum)", "    nums\n    |> List.map (fun x -> x * 10)\n    |> List.sort", "    nums |> List.map (fun x -> x.ToString()) |> List.sort"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}