{"name": "HumanEval_5_intersperse", "language": "fs", "prompt": "//Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nlet intersperse numbers delimeter = \n", "tests": "let test() = \n  let candidate = intersperse\n  assert (candidate [] 7 = [])\n  assert (candidate [5; 6; 3; 2] 8 = [5; 8; 6; 8; 3; 8; 2])\n  assert (candidate [2; 2; 2] 2 = [2; 2; 2; 2; 2])\n  0\n\ntest()", "completions": ["    let rec intersperse' (numbers: 'a list) (delimeter: 'a) =\n        match numbers with\n        | [] -> [delimeter]\n        | head::tail ->\n            let tail' = intersperse' tail delimeter\n            intersperse' tail' head\n    intersperse' numbers delimeter", "    let rec loop n = \n        match n with\n        | [] -> []\n        | x::xs -> \n            let ys = x::xs\n            let zs = ys |> List.rev\n            loop zs\n    loop numbers", "    let rec intersperse' (numbers:seq<'T>) (delimeter: 'T) =\n        match numbers with\n        | [] -> delimeter\n        | head :: tail ->\n            let tail' = intersperse' tail delimeter\n            intersperse' tail' head\n    intersperse' numbers delimeter", "    let rec loop n =\n        match n with\n        | 0 -> []\n        | _ ->\n            let tail = List.tail numbers\n            let head = List.head numbers\n            let tail' = intersperse tail head\n            loop tail'\n    loop numbers", "    let rec loop i =\n        match numbers with\n        | [] -> []\n        | h::t ->\n            let newNums = h::t\n            loop (i+1)\n    loop 0", "    let rec intersperse' (numbers:list<int>, delimeter:int) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let tail' = intersperse' (tail, delimeter)\n            intersperse' (head::tail', delimeter)\n    intersperse' (numbers, delimeter)", "    let rec intersperse' (numbers:list<int>) (delimeter:int) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let tail' = intersperse' tail delimeter\n            intersperse' tail' (head + delimeter)\n    intersperse' numbers delimeter", "    let rec intersperse' (numbers:list<int>) (delimeter:int) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let tail' = intersperse' tail delimeter\n            intersperse' tail' (head + delimeter)\n    intersperse' numbers delimeter", "    let rec intersperse' (numbers: 'a list) (delimeter: 'a) =\n        match numbers with\n        | [] -> [delimeter]\n        | head :: tail ->\n            let tail' = intersperse' tail delimeter\n            intersperse' tail' head\n    intersperse' numbers delimeter", "    let rec intersperse' acc list = \n        match list with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x = delimeter -> intersperse' (x::acc) xs\n            | x -> intersperse' (x::acc) xs\n    intersperse' [] numbers", "    let rec intersperse' (numbers: int list) (delimeter: int) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let xs = x::xs\n            intersperse' xs (delimeter - 1)\n    intersperse' numbers delimeter", "    let rec loop n = \n        match n with\n        | 0 -> []\n        | 1 -> [delimeter]\n        | n -> \n            let tail = intersperse (numbers (n-1)) (delimeter)\n            loop (n-1) tail\n    loop numbers", "    let rec intersperse' (numbers: 'a list) (delimeter: 'a) =\n        match numbers with\n        | [] -> [delimeter]\n        | head :: tail ->\n            let tail' = intersperse' tail delimeter\n            (head :: tail')\n    intersperse' numbers delimeter", "    let rec intersperse' n =\n        match n with\n        | [] -> []\n        | x::xs -> x::(intersperse' xs)\n    intersperse' numbers", "    let rec intersperse' (numbers: 'a list) (delimeter: 'a) = \n        match numbers with\n        | [] -> [delimeter]\n        | head::tail -> \n            match head with\n            | x when x = delimeter -> intersperse' tail (delimeter)\n            | _ -> intersperse' tail (x::numbers)\n    intersperse' numbers delimeter", "    let rec intersperse' (numbers: 'a list) (delimeter: 'a) =\n        match numbers with\n        | [] -> [delimeter]\n        | head::tail ->\n            let tail' = intersperse' tail delimeter\n            intersperse' tail' head\n    intersperse' numbers delimeter", "    let rec intersperse' acc list =\n        match list with\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | x when x = delimeter -> intersperse' (acc@[x]) xs\n            | x -> intersperse' (acc@[x]) xs\n    intersperse' [] numbers", "    let rec intersperse' n = \n        match n with\n        | [] -> [delimeter]\n        | x::xs -> \n            let xs = x::xs\n            intersperse' xs\n    intersperse' numbers", "    let rec loop n = \n        match n with\n        | [] -> []\n        | x::xs -> \n            let xs = x::xs\n            let ys = intersperse xs delimeter\n            if ys = [] then xs\n            else loop ys\n    loop numbers", "    let rec intersperse' (numbers: 'a list) (delimeter: 'a) =\n        match numbers with\n        | [] -> [delimeter]\n        | head :: tail ->\n            let tail' = intersperse' tail delimeter\n            intersperse' tail' head\n    intersperse' numbers delimeter"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}