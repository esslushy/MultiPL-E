{"name": "HumanEval_118_get_closest_vowel", "language": "fs", "prompt": "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nlet get_closest_vowel word = \n", "tests": "let test() = \n  let candidate = get_closest_vowel\n  assert (candidate \"yogurt\" = \"u\")\n  assert (candidate \"full\" = \"u\")\n  assert (candidate \"easy\" = \"\")\n  assert (candidate \"eAsy\" = \"\")\n  assert (candidate \"ali\" = \"\")\n  assert (candidate \"bad\" = \"a\")\n  assert (candidate \"most\" = \"o\")\n  assert (candidate \"ab\" = \"\")\n  assert (candidate \"ba\" = \"\")\n  assert (candidate \"quick\" = \"\")\n  assert (candidate \"anime\" = \"i\")\n  assert (candidate \"Asia\" = \"\")\n  assert (candidate \"Above\" = \"o\")\n  0\n\ntest()", "completions": ["    let vowels = ['a'..'z']\n    let vowels_to_find = ['A'..'Z']\n    let vowels_to_find_list = vowels |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list = vowels_to_find |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list_list = vowels_to_find_list |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list_list_list = vowels_to_find_list_list |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list_list_list = vowels_to_find_list_list_list |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list_list_list = vowels_to_find_list_list_list |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list_list_list = vowels_to_find_list_list_list |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list_list_list = vowels_to_find_list_list_list |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list_list_list = vowels_to_find_list_list_list |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list_list_list = vowels_to_find_list_list_list |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list_list_list = vowels_to_find_list_list_list |> List.map (fun c -> c.ToString())\n    let vowels_to_find_list_list_list_list = vowels_to_find_list_list_list |> List", "    let vowels = ['a'..'z']\n    let vowels_in_word = \n        word \n        |> Seq.filter (fun c -> vowels |> Seq.contains c)\n        |> Seq.toList\n    if vowels_in_word.Length = 0 then\n        \"\"\n    else\n        vowels_in_word\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.reduce (fun acc c -> acc + c)", "    let vowels = ['a'..'z']\n    let vowels_in_word = ['a'..'z']\n    let vowels_in_word_end = ['a'..'z']\n    let vowels_in_word_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a'..'z']\n    let vowels_in_word_end_end_end_end = ['a", "    let vowels = ['a'..'z']\n    let vowels_in_word = word.ToCharArray() |> Array.filter (fun c -> vowels |> Array.contains c)\n    if vowels_in_word.Length = 0 then\n        \"\"\n    else\n        let vowels_in_word = vowels_in_word |> Array.map (fun c -> c.ToString())\n        let vowels = vowels_in_word |> Array.filter (fun c -> vowels |> Array.contains c)\n        if vowels.Length = 0 then\n            \"\"\n        else\n            vowels |> Array.map (fun c -> c.ToString()) |> String.concat \"\"", "    let vowels = \n        word \n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (", "    let vowels = \n        [\n            \"a\"; \"e\"; \"i\"; \"o\"; \"u\"; \"y\"; \"yogurt\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";\n            \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\"; \"ugur\";", "    let vowels = \n        [\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"o\"\n            \"y\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"", "    let vowels = \n        word.ToCharArray()\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' &&", "    let vowels = \n        [\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"g\"\n            \"t\"\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"", "    let vowels = \n        word.ToCharArray()\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToLower())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToUpper())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToLower())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToUpper())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToLower())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToUpper())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToLower())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToUpper())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToLower())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToUpper())\n        |> Array", "    let vowels = ['a'..'z']\n    let vowels_left = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_right = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_left_right = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_left_right_vowels = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_right_left = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_right_left_vowels = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_left_right_vowels_right = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_right_left_vowels_right_vowels = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_left_right_vowels_right_vowels_right = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_right_left_vowels_right_vowels_right_vowels = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_left_right_vowels_right_vowels_right_vowels_right = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_right_left_vowels_right_vowels_right_vowels_right_vowels = List.filter (fun v -> vowels |> List.contains v |> not) vowels\n    let vowels_left_right_vowels_right_vowels_right_vowels_right_", "    let vowels = ['a'..'z']\n    let vowels_to_find = vowels |> List.filter (fun x -> x <> 'a' && x <> 'e')\n    let vowels_to_find_end = vowels |> List.filter (fun x -> x <> 'a' && x <> 'e')\n    let vowels_to_find_start = vowels |> List.filter (fun x -> x <> 'a' && x <> 'e')\n    let vowels_to_find_end_start = vowels |> List.filter (fun x -> x <> 'a' && x <> 'e' && x <> 'i')\n    let vowels_to_find_end_start_end = vowels |> List.filter (fun x -> x <> 'a' && x <> 'e' && x <> 'i' && x <> 'o')\n    let vowels_to_find_end_start_end_end = vowels |> List.filter (fun x -> x <> 'a' && x <> 'e' && x <> 'i' && x <> 'o' && x <> 'u')\n    let vowels_to_find_end_start_end_end_end = vowels |> List.filter (fun x -> x <> 'a' && x <> 'e' && x <> 'i' && x <> 'o' && x <> 'u' && x <> 'y')\n    let vowels_to_find_end_start_end_end_end_end = vowels |> List.filter (fun x -> x <> 'a' && x <> 'e' && x <> 'i' && x <> 'o' && x <> 'u' && x <> 'y' && x <> 'a')\n    let vowels_to_find_end_start_end_end_end_end_end = vowels |> List.filter (fun x -> x <> 'a' && x <> 'e' && x <> 'i' && x <> 'o' && x <> 'u' && x <> 'y' && x <", "    let vowels = \n        [|\n            'a'\n            'e'\n            'i'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            'u'\n            'y'\n            'o'\n            ", "    let vowels = \n        word \n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c.Length > 0)\n        |> Seq.map (fun c -> c.ToLower())\n        |> Seq.toList\n    if vowels.Length = 0 then \"\"\n    else vowels |> List.minBy (fun c -> c.Length) |> fun c -> c.ToString()", "    let vowels = \n        word.ToCharArray()\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToLower())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToUpper())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToLower())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToUpper())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToLower())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToUpper())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToLower())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToUpper())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToLower())\n        |> Array.filter (fun c -> c <> \"\")\n        |> Array.map (fun c -> c.ToUpper())\n        |> Array", "    let vowels = \n        word.ToCharArray()\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' && c <> 'e')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> 'a' &&", "    let vowels = \n        [ 'a' .. 'z' ]\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c -> not (word.Contains(c)))\n        |> List.map (fun c -> c.ToString())\n        |> List.filter (fun c ->", "    let vowels = \n        [\n            \"a\"\n            \"e\"\n            \"i\"\n            \"o\"\n            \"u\"\n            \"y\"\n            \"o\"\n            \"y\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"o\"\n            \"", "    let vowels = \n        word \n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToLower())\n        |> Seq.toList\n    let vowels_in_word = \n        word \n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> \"\")\n        |> Seq.map (fun c -> c.ToLower())\n        |> Seq.toList\n    if vowels.Length = 0 && vowels_in_word.Length = 0 then \"\"\n    else\n        let closest_vowel = \n            vowels\n            |> List.sortBy (fun c -> c.ToString())\n            |> List.head\n        let closest_vowel_in_word = \n            vowels_in_word\n            |> List.sortBy (fun c -> c.ToString())\n            |> List.head\n        closest_vowel_in_word", "    let vowels = \n        [\n            \"A\"\n            \"E\"\n            \"I\"\n            \"O\"\n            \"U\"\n            \"Y\"\n            \"Yogurt\"\n            \"Full\"\n            \"Quick\"\n            \"Ab\"\n            \"U\"\n            \"Yogurt\"\n            \"Full\"\n            \"Quick\"\n            \"Ab\"\n            \"U\"\n            \"Yogurt\"\n            \"Full\"\n        ]\n    let vowels_index = vowels |> Array.findIndex (fun v -> v = word)\n    vowels.[vowels_index]"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}