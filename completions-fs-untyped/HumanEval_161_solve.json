{"name": "HumanEval_161_solve", "language": "fs", "prompt": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nlet solve s = \n", "tests": "let test() = \n  let candidate = solve\n  assert (candidate \"AsDf\" = \"aSdF\")\n  assert (candidate \"1234\" = \"4321\")\n  assert (candidate \"ab\" = \"AB\")\n  assert (candidate \"#a@C\" = \"#A@c\")\n  assert (candidate \"#AsdfW^45\" = \"#aSDFw^45\")\n  assert (candidate \"#6@2\" = \"2@6#\")\n  assert (candidate \"#$a^D\" = \"#$A^d\")\n  assert (candidate \"#ccc\" = \"#CCC\")\n  0\n\ntest()", "completions": ["    let reverse (s:string) = \n        s.ToCharArray()\n        |> Array.rev\n        |> String\n    let isLetter (s:string) = \n        s.Length > 0 && s.[0] = 'a' && s.[1] = 'A'\n    let isDigit (s:string) = \n        s.Length > 0 && s.[0] = '0' && s.[1] = '0'\n    let isUpper (s:string) = \n        s.Length > 0 && s.[0] = 'A' && s.[1] = 'A'\n    let isLower (s:string) = \n        s.Length > 0 && s.[0] = 'a' && s.[1] = 'A'\n    let isNumber (s:string) = \n        s.Length > 0 && s.[0] = '0' && s.[1] = '0'\n    let isAlpha (s:string) = \n        s.Length > 0 && s.[0] = 'a' && s.[1] = 'A'\n    let isAlphaLower (s:string) = \n        s.Length > 0 && s.[0] = 'a' && s.[1] = 'A' && s.[2] = 'a'\n    let isAlphaUpper (s:string) = \n        s.Length > 0 && s.[0] = 'a' && s.[1] = 'A' && s.[2] = 'A' && s.[3] = 'a'\n    let isAlphaDigit (s:string) = \n        s.Length > 0 && s.[0] = 'a' && s.[1] = 'A' && s.[2] = 'a' && s.[3] = 'a'\n    let isAlphaUpperDigit (s:string) = \n        s.Length > 0 && s.[0] = 'a' && s.[1] = 'A' && s.[2] = 'a' && s.[3] = 'A' && s.[4] = 'a'\n    let isAlphaLowerDigit (s:string) = \n        s.Length > 0 && s.[0] = '", "    let reverse = \n        let mutable i = 0\n        while i < s.Length do\n            let c = s.[i]\n            if c >= 'a' && c <= 'z' then\n                i <- i + 1\n            else\n                i <- i - 1\n        s.[i]\n    reverse", "    let rec reverse s = \n        match s with\n        | [] -> \"\"\n        | x::xs -> reverse xs\n    reverse s", "    let reverse (s:string) = \n        let s' = s.ToCharArray()\n        let s'' = Array.rev s'\n        s''.Substring(0, s'.Length - 1)\n    let isLetter (c:char) = \n        c >= 'a' && c <= 'z'\n    let isDigit (c:char) = \n        c >= '0' && c <= '9'\n    let isValid (c:char) = \n        c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z'\n    let isValidDigit (c:char) = \n        c >= '0' && c <= '9'\n    let isValidUpper (c:char) = \n        c >= 'A' && c <= 'Z'\n    let isValidLower (c:char) = \n        c >= 'a' && c <= 'z'\n    let isValidUpperLower (c:char) = \n        c >= 'A' && c <= 'Z'\n    let isValidLowerUpper (c:char) = \n        c >= 'a' && c <= 'z' && c <> 'A' && c <> 'Z'\n    let isValidLowerUpperLower (c:char) = \n        c >= 'a' && c <= 'z' && c <> 'A' && c <> 'Z'\n    let isValidLowerUpperLowerUpper (c:char) = \n        c >= 'a' && c <= 'z' && c <> 'A' && c <> 'Z' && c <> 'A'\n    let isValidLowerUpperLowerUpperLower (c:char) = \n        c >= 'a' && c <= 'z' && c <> 'A' && c <> 'Z' && c <> 'A' && c <> 'Z'\n    let isValidLowerUpperLowerUpperLowerUpper (c:char) = \n        c >= 'a' && c <= 'z' && c <> 'A' && c <> 'Z' && c <> 'A' && c <> 'Z' && c <> 'A'\n    ", "    let reverse = \n        let rec reverse i = \n            if i < s.Length then \n                s.[i] <- s.[i] + s.[i-1]\n                reverse (i+1)\n            else\n                s.[i-1] <- s.[i-1]\n                reverse (i-1)\n        reverse 0\n    reverse s", "    let rec reverse s = \n        match s with\n        | [] -> \"\"\n        | x::xs -> reverse xs\n    reverse s", "    let rec reverse s = \n        match s with\n        | [] -> \"\"\n        | x::xs -> reverse (x::xs)\n    reverse s", "    let reverse (s:string) = \n        let s' = s.ToCharArray()\n        let s'' = s'.ToCharArray()\n        let s''' = s''.ToCharArray()\n        let s'''' = s''.ToCharArray()\n        let s''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s'''''' = s''.ToCharArray()\n        let s", "    let reverse = \n        let rec reverse' i = \n            if i = s.Length then s\n            else reverse' (i - 1)\n        reverse' 0\n    reverse s", "    let reverse (s:string) = \n        let mutable i = s.Length - 1\n        while i >= 0 && s.[i] <> '#' do\n            i <- i - 1\n        s.[i] <- '#'\n        s\n    let rec reverse' s = \n        match s with\n        | \"\" -> \"\"\n        | _ -> reverse' (reverse s)\n    reverse' s", "    let rev (s:string) = \n        let mutable i = 0\n        let mutable c = s.[i]\n        while i < s.Length && c <> '\\n' do\n            i <- i + 1\n            c <- s.[i]\n        if i = s.Length then s\n        else s.[0..i-1] + s.[i+1..]\n    rev s", "    let rec reverse s = \n        match s with \n        | [] -> \"\"\n        | x::xs -> \n            let x = x.ToString()\n            let x = x.ToUpper()\n            let x = x.ToLower()\n            reverse xs\n    reverse s", "    let reverse = function\n        | 'A' -> 'B'\n        | 'B' -> 'A'\n        | _ -> failwith \"Invalid character\"\n    let isLetter = function\n        | 'a' -> true\n        | 'b' -> true\n        | 'c' -> true\n        | _ -> false\n    let isDigit = function\n        | '0' -> true\n        | '1' -> true\n        | '2' -> true\n        | '3' -> true\n        | '4' -> true\n        | '5' -> true\n        | '6' -> true\n        | '7' -> true\n        | '8' -> true\n        | '9' -> true\n        | _ -> false\n    let isNumber = function\n        | '0' -> true\n        | '1' -> true\n        | '2' -> true\n        | '3' -> true\n        | '4' -> true\n        | '5' -> true\n        | '6' -> true\n        | '7' -> true\n        | '8' -> true\n        | '9' -> true\n        | _ -> false\n    let isLetterOrDigit = function\n        | 'a' -> true\n        | 'b' -> true\n        | 'c' -> true\n        | 'd' -> true\n        | 'e' -> true\n        | 'f' -> true\n        | 'g' -> true\n        | 'h' -> true\n        | 'i' -> true\n        | 'j' -> true\n        | 'k' -> true\n        | 'l' -> true\n        | 'm' -> true\n        | 'n' -> true\n        | 'o' -> true\n        | 'p' -> true\n        | 'q' -> true\n        | 'r' -> true\n        | 's' -> true\n        | 't' -> true\n        | 'u' -> true\n        | 'v' -> true\n        | 'w' -> true\n        | 'x' -> true\n        | 'y' -> true\n        | 'z' -> true\n        | _ -> false\n    let isNumberOrLetter = function\n        | '0' -> true\n        | '1' -> true\n        |", "    let rev = \n        let mutable i = 0\n        while i < s.Length do\n            if s[i] = '#' then\n                i <- i + 1\n            else\n                i <- i - 1\n        rev\n    \n    if s.Length = 0 then\n        \"0\"\n    else\n        rev", "    let rec reverse s = \n        match s with\n        | [] -> \"\"\n        | x::xs -> reverse xs\n    reverse s", "    let rec reverse s = \n        match s with\n        | [] -> \"\"\n        | x::xs -> reverse (x::xs)\n    reverse s", "    let rec reverse s = \n        match s with\n        | [] -> \"\"\n        | x::xs -> reverse xs\n    reverse s", "    let reverse = function\n        | 'A' -> 'B'\n        | 'B' -> 'A'\n        | _ -> failwith \"Invalid character\"\n    s |> Seq.map reverse |> Seq.toList", "    let reverse (s:string) = \n        let mutable i = s.Length - 1\n        while i >= 0 && s.[i] <> '#' do\n            i <- i - 1\n        s.[i] <- '#'\n        s\n    let rec reverse' s = \n        match s with\n        | '#' -> reverse' (reverse s)\n        | _ -> s\n    reverse' s", "    let rec reverse s = \n        match s with \n        | [] -> \"\"\n        | x::xs -> reverse xs\n    reverse s"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}