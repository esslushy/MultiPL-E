{"name": "HumanEval_30_get_positive", "language": "fs", "prompt": "//Return only positive numbers in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nlet get_positive l = \n", "tests": "let test() = \n  let candidate = get_positive\n  assert (candidate [-1; -2; 4; 5; 6] = [4; 5; 6])\n  assert (candidate [5; 3; -5; 2; 3; 3; 9; 0; 123; 1; -10] = [5; 3; 2; 3; 3; 9; 123; 1])\n  assert (candidate [-1; -2] = [])\n  assert (candidate [] = [])\n  0\n\ntest()", "completions": ["    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1)\n            else loop (acc + x)\n    loop 0", "    let rec loop i = \n        if i < 0 then []\n        else \n            let res = \n                l \n                |> List.map (fun x -> if x > 0 then loop (i-1) else x)\n            if res |> List.isEmpty then []\n            else res\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc + x)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | -1 -> loop (acc + 1)\n            | x -> loop (acc + x)\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | -1 -> loop (acc + 1)\n            | x -> loop (acc + x)\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop i = \n        if i < 0 then []\n        else \n            let head = List.head l\n            if head = 0 then []\n            else loop (i - 1)\n    loop 0", "    let rec loop i = \n        if i < 0 then []\n        else \n            let res = List.rev (List.rev l)\n            loop (i - 1)\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] l", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc + x)\n            else loop (acc - x)\n    loop 0", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 0 -> loop (acc + 1)\n            | _ -> loop (acc + x)\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | -1 -> loop (acc + 1)\n            | x -> loop (acc + x)\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x :: xs -> loop (acc + x) xs\n    loop 0 l"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}