{"name": "HumanEval_158_find_max", "language": "fs", "prompt": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlet find_max words = \n", "tests": "let test() = \n  let candidate = find_max\n  assert (candidate [\"name\"; \"of\"; \"string\"] = \"string\")\n  assert (candidate [\"name\"; \"enam\"; \"game\"] = \"enam\")\n  assert (candidate [\"aaaaaaa\"; \"bb\"; \"cc\"] = \"aaaaaaa\")\n  assert (candidate [\"abc\"; \"cba\"] = \"abc\")\n  assert (candidate [\"play\"; \"this\"; \"game\"; \"of\"; \"footbott\"] = \"footbott\")\n  assert (candidate [\"we\"; \"are\"; \"gonna\"; \"rock\"] = \"gonna\")\n  assert (candidate [\"we\"; \"are\"; \"a\"; \"mad\"; \"nation\"] = \"nation\")\n  assert (candidate [\"this\"; \"is\"; \"a\"; \"prrk\"] = \"this\")\n  assert (candidate [\"b\"] = \"b\")\n  assert (candidate [\"play\"; \"play\"; \"play\"] = \"play\")\n  0\n\ntest()", "completions": ["    let rec find_max_rec words = \n        match words with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | \"name\" -> find_max_rec xs\n            | \"of\" -> find_max_rec xs\n            | \"string\" -> find_max_rec xs\n            | _ -> find_max_rec xs\n    find_max_rec words", "    let rec find_max_rec (words: string list) = \n        match words with \n        | [] -> 0\n        | x::xs -> \n            let max = List.max xs\n            if max = x then \n                find_max_rec xs\n            else\n                find_max_rec (xs@[max])\n    find_max_rec words", "    let rec find_max_rec words =\n        match words with\n        | [] -> 0\n        | word :: rest ->\n            let max_number =\n                match word with\n                | \"name\" -> 1\n                | \"of\" -> 2\n                | \"string\" -> 3\n                | \"game\" -> 4\n                | _ -> failwith \"Invalid word\"\n            let number = find_max_rec rest\n            number + max_number\n    find_max_rec words", "    let rec find_max_rec words = \n        match words with\n        | [] -> \"\"\n        | word :: rest -> \n            let max_char = \n                words \n                |> List.map (fun word -> \n                    word.Length)\n                |> List.max\n            let word = word.ToCharArray()\n            if word.Length > max_char then\n                word.[0..max_char-1]\n            else\n                word\n    find_max_rec words", "    let rec find_max_rec words = \n        match words with\n        | [] -> \"\"\n        | x::xs -> \n            let rec find_max_rec_rec words = \n                match words with\n                | [] -> \"\"\n                | x::xs -> \n                    let rec find_max_rec_rec_rec words = \n                        match words with\n                        | [] -> \"\"\n                        | x::xs -> \n                            let rec find_max_rec_rec_rec words = \n                                match words with\n                                | [] -> \"\"\n                                | x::xs -> \n                                    let rec find_max_rec_rec_rec words = \n                                        match words with\n                                        | [] -> \"\"\n                                        | x::xs -> \n                                            let rec find_max_rec_rec_rec words = \n                                                match words with\n                                                | [] -> \"\"\n                                                | x::xs -> \n                                                    let rec find_max_rec_rec_rec words = \n                                                        match words with\n                                                        | [] -> \"\"\n                                                        | x::xs -> \n                                                            let rec find_max_rec_rec_rec words = \n                                                                match words with\n                                                                | [] -> \"\"\n                                                                | x::xs -> \n                                                                    let rec find_max_rec_rec_rec words = \n                                                                        match words with\n                                                                        | [] -> \"\"\n                                                                        | x::xs -> \n                                                                            let rec find_max_rec_rec_rec words = \n                                                                                match words with\n                                                                                | [] -> \"\"\n                                                                                | x::xs -> \n                                                                                    let rec find_max_rec_rec_rec words = \n                                                                                        match words with\n                                                                                        | [] -> \"\"\n                                                                                        | x::xs -> \n                                                                                            let rec find_max_rec_rec_rec words = \n                                                                                               match words with\n                                                                                               | [] -> \"\"\n                                                                                               | x::xs -> \n                                                                                                   let rec find_max_rec_rec_rec words = \n                                                                                                       match words with\n                                                                                                       | [] -> \"\"\n                                                                                                       | x::xs", "    let rec find_max_rec words =\n        match words with\n        | [] -> None\n        | x::xs ->\n            let max_char = List.max x\n            if max_char <> x then\n                Some(max_char, xs)\n            else\n                find_max_rec xs\n    find_max_rec words", "    let rec find_max_rec acc words = \n        match words with\n        | [] -> acc\n        | (word, _)::tail -> \n            let new_acc = find_max_rec acc tail\n            if word = new_acc then acc\n            else find_max_rec new_acc tail\n    find_max_rec \"\" words", "    let rec find_max_rec words = \n        match words with\n        | [] -> \"\"\n        | x::xs -> \n            let max_char = List.max xs\n            if max_char = \"\" then \n                find_max_rec xs\n            else\n                let max_char = List.max xs\n                if max_char = \"\" then \n                    find_max_rec xs\n                else\n                    max_char\n    find_max_rec words", "    let rec find_max_rec words = \n        match words with\n        | [] -> \"\"\n        | x::xs -> \n            match x with\n            | \"name\" -> \"name\"\n            | \"of\" -> \"of\"\n            | \"string\" -> \"string\"\n            | \"game\" -> \"game\"\n            | _ -> find_max_rec xs\n    find_max_rec words", "    let rec find_max_rec words = \n        match words with\n        | [] -> 0\n        | x::xs -> \n            let max_count = List.max xs\n            if max_count > List.length xs then\n                List.rev xs\n                |> find_max_rec\n            else\n                max_count\n    find_max_rec words", "    let rec find_max_rec (words: string list) =\n        match words with\n        | [] -> \"\"\n        | head::tail ->\n            let max_char = List.max [for word in words -> word.Length]\n            if head.Length > max_char then\n                find_max_rec tail\n            else\n                head\n    find_max_rec words", "    let rec find_max_rec (words:string list) = \n        match words with\n        | [] -> 0\n        | x::xs -> \n            let max_num = List.max xs\n            if max_num = 0 then 0\n            else find_max_rec xs\n    find_max_rec words", "    let rec find_max_rec words = \n        match words with\n        | [] -> \"\"\n        | head::tail -> \n            let max_count = List.length head\n            if max_count > List.length tail then\n                find_max_rec tail\n            else\n                head\n    find_max_rec words", "    let rec find_max_rec words =\n        match words with\n        | [] -> \"\"\n        | (word, words)::tail ->\n            if List.length words = List.length tail then\n                let max_word = List.max words\n                let max_words = List.length words\n                if max_words > max_word then\n                    find_max_rec tail\n                else\n                    word\n            else\n                find_max_rec tail\n    find_max_rec words", "    let rec find_max_rec words = \n        match words with\n        | [] -> 0\n        | word :: rest -> \n            let max_count = \n                match find_max_rec rest with\n                | 0 -> 0\n                | _ -> max_count\n            if max_count = 0 then word\n            else find_max_rec rest\n    find_max_rec words", "    let rec find_max_rec words = \n        match words with \n        | [] -> \"\"\n        | head :: tail -> \n            let max_length = List.maxBy (fun word -> word.Length) words\n            let max_word = head.Substring(0, max_length)\n            if max_length = 0 then max_word\n            else find_max_rec tail\n    find_max_rec words", "    let rec find_max_rec (words:list<string>) =\n        match words with\n        | [] -> 0\n        | head::tail ->\n            let max_count = List.length head\n            if max_count > List.length tail then\n                find_max_rec tail\n            else\n                let max_count = List.length tail\n                if max_count > List.length head then\n                    find_max_rec head\n                else\n                    find_max_rec tail\n    find_max_rec words", "    let rec find_max_rec (words:list<string>) = \n        match words with\n        | [] -> \"\"\n        | head::tail -> \n            let max = head.Length\n            if head.Length > max then\n                let head_max = head.Length\n                let tail_max = tail.Length\n                let max_head = head.Length\n                let max_tail = tail.Length\n                let max_head_max = head_max\n                let max_tail_max = tail_max\n                let max_head_max_tail = head_max\n                let max_tail_max_tail = tail_max\n                let max_head_max_tail_max = head_max\n                let max_tail_max_tail_max = tail_max\n                let max_head_max_tail_max_tail = head_max\n                let max_tail_max_tail_max_tail = tail_max\n                let max_head_max_tail_max_tail_max = head_max\n                let max_tail_max_tail_max_tail_max = tail_max\n                let max_head_max_tail_max_tail_max_tail = tail_max\n                let max_tail_max_tail_max_tail_max_tail = tail_max\n                let max_head_max_tail_max_tail_max_tail_max = tail_max\n                let max_tail_max_tail_max_tail_max_tail = tail_max\n                let max_head_max_tail_max_tail_max_tail_max = tail_max\n                let max_tail_max_tail_max_tail_max_tail = tail_max\n                let max_head_max_tail_max_tail_max_tail_max = tail_max\n                let max_tail_max_tail_max_tail_max_tail = tail_max\n                let max_head_max_tail_max_tail_max_tail_max = tail_max\n                let max_tail_max_tail_max_tail_max_tail = tail_max\n                let max_head_max_tail_max_tail_max_tail_max = tail_max\n                let max_tail_", "    let rec find_max_rec words = \n        match words with\n        | [] -> 0\n        | x::xs -> \n            let max = \n                match x with\n                | \"name\" -> 1\n                | \"of\" -> 2\n                | \"string\" -> 3\n                | \"game\" -> 4\n                | _ -> failwith \"Invalid word\"\n            find_max_rec xs\n    find_max_rec words", "    let rec find_max_rec (words:string list) =\n        match words with\n        | [] -> 0\n        | head::tail ->\n            let max_count = List.length words - 1\n            if head.Length > max_count then\n                find_max_rec tail\n            else\n                let max_count = List.length words - 1\n                if head.Length > max_count then\n                    find_max_rec tail\n                else\n                    let max_count = List.length words - 1\n                    if head.Length > max_count then\n                        find_max_rec tail\n                    else\n                        let max_count = List.length words - 1\n                        if head.Length > max_count then\n                            find_max_rec tail\n                        else\n                            let max_count = List.length words - 1\n                            if head.Length > max_count then\n                                find_max_rec tail\n                            else\n                                let max_count = List.length words - 1\n                                if head.Length > max_count then\n                                    find_max_rec tail\n                                else\n                                    let max_count = List.length words - 1\n                                    if head.Length > max_count then\n                                        find_max_rec tail\n                                    else\n                                        let max_count = List.length words - 1\n                                        if head.Length > max_count then\n                                            find_max_rec tail\n                                        else\n                                            let max_count = List.length words - 1\n                                            if head.Length > max_count then\n                                                find_max_rec tail\n                                            else\n                                                let max_count = List.length words - 1\n                                                if head.Length > max_count then\n                                                    find_max_rec tail\n                                                else\n                                                    let max_count = List.length words - 1\n                                                    if head.Length > max_count then\n                                                        find_max_rec tail\n                                                    else\n                                                        let max_count = List.length words - 1\n                                                        if head.Length > max_count then\n                                                            find_max_rec tail\n                                                        else\n                                                            let max_count = List.length words - 1\n                                                            if head.Length > max_count then\n                                                                find_max_"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}