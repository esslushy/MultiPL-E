{"name": "HumanEval_149_sorted_list_sum", "language": "fs", "prompt": "//Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlet sorted_list_sum lst = \n", "tests": "let test() = \n  let candidate = sorted_list_sum\n  assert (candidate [\"aa\"; \"a\"; \"aaa\"] = [\"aa\"])\n  assert (candidate [\"school\"; \"AI\"; \"asdf\"; \"b\"] = [\"AI\"; \"asdf\"; \"school\"])\n  assert (candidate [\"d\"; \"b\"; \"c\"; \"a\"] = [])\n  assert (candidate [\"d\"; \"dcba\"; \"abcd\"; \"a\"] = [\"abcd\"; \"dcba\"])\n  assert (candidate [\"AI\"; \"ai\"; \"au\"] = [\"AI\"; \"ai\"; \"au\"])\n  assert (candidate [\"a\"; \"b\"; \"b\"; \"c\"; \"c\"; \"a\"] = [])\n  assert (candidate [\"aaaa\"; \"bbbb\"; \"dd\"; \"cc\"] = [\"cc\"; \"dd\"; \"aaaa\"; \"bbbb\"])\n  0\n\ntest()", "completions": ["    let rec loop acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec loop acc lst = \n        match lst with\n        | [] -> acc\n        | hd::tl -> loop (acc + hd) tl\n    loop 0 lst", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec loop acc lst = \n        match lst with \n        | [] -> acc\n        | hd::tl -> loop (acc + hd) tl\n    loop 0 lst", "    let rec sort_list lst = \n        match lst with\n        | [] -> []\n        | hd::tl ->\n            let rec sort_list_hd hd = \n                match hd with\n                | hd::tl -> sort_list_hd tl\n                | _ -> hd::tl\n            sort_list_hd hd\n    sort_list lst", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec loop acc lst = \n        match lst with\n        | [] -> acc\n        | hd::tl -> loop (acc + hd) tl\n    loop 0 lst", "    let rec loop acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec loop acc = function\n        | [] -> acc\n        | hd::tl -> loop (hd::acc) tl\n    loop [] lst", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec loop acc lst =\n        match lst with\n        | [] -> acc\n        | hd::tl -> loop (acc + hd) tl\n    loop 0 lst", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec loop acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec loop acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec sort_list lst =\n        match lst with\n        | [] -> []\n        | x::xs ->\n            let y = x + (snd x)\n            if y > fst x then\n                sort_list xs\n            else\n                y::sort_list ys\n    sort_list lst", "    let rec sort_list_sum acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs ->\n            let xs_sum = List.sum xs\n            if xs_sum % 2 = 0 then sort_list_sum (x::acc) xs\n            else sort_list_sum (x::acc) xs\n    sort_list_sum [] lst", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec loop acc lst =\n        match lst with\n        | [] -> acc\n        | hd::tl -> loop (acc + hd) tl\n    loop 0 lst"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}