{"name": "HumanEval_57_monotonic", "language": "fs", "prompt": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic l = \n", "tests": "let test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()", "completions": ["    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x > 0 -> loop (acc + x)\n            | x -> loop (acc + x)\n    loop 0", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop []", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then loop (x::acc)\n            else loop (x::acc)\n    loop []", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc + x)\n            else loop (acc - x)\n    loop 0", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop []", "    let rec monotonic' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> monotonic' (x::acc) xs\n    monotonic' []", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x <= acc then loop (acc + x)\n            else loop (acc - x)\n    loop 0", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x :: xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc =\n        match l with\n        | [] -> acc\n        | x::xs ->\n            if x > acc then loop (x::acc)\n            else loop (acc::xs)\n    loop []", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then loop (x::acc)\n            else loop (x::acc)\n    loop []", "    let rec monotonic' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> monotonic' (x::acc) xs\n    monotonic' []", "    let rec loop acc =\n        match l with\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x > 0 -> loop (acc + x)\n            | x -> loop (acc - x)\n    loop 0", "    let rec monotonic' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> monotonic' (x::acc) xs\n    monotonic' []", "    let rec monotonic' acc = \n        match l with \n        | [] -> acc\n        | x :: xs -> monotonic' (x :: acc) xs\n    monotonic' []", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x :: xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            loop acc'\n    loop 0", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc + x)\n            else loop (acc - x)\n    loop 0", "    let rec monotonic' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> monotonic' (x::acc) xs\n    monotonic' []"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}