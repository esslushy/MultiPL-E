{"name": "HumanEval_8_sum_product", "language": "fs", "prompt": "//For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nlet sum_product numbers = \n", "tests": "let test() = \n  let candidate = sum_product\n  assert (candidate [] = (0, 1))\n  assert (candidate [1; 1; 1] = (3, 1))\n  assert (candidate [100; 0] = (100, 0))\n  assert (candidate [3; 5; 7] = (15, 105))\n  assert (candidate [10] = (10, 10))\n  0\n\ntest()", "completions": ["    let rec sum_product_numbers (numbers:int list) =\n        match numbers with\n        | [] -> 0\n        | head::tail ->\n            let sum = head + sum_product_numbers tail\n            sum_product_numbers tail\n    sum_product_numbers numbers", "    let rec sum_product_numbers (numbers:int list) = \n        match numbers with\n        | [] -> 0\n        | head :: tail -> \n            let sum = head + sum_product_numbers tail\n            sum_product_numbers tail\n    sum_product_numbers numbers", "    let rec sum_product_numbers (sum, product) = \n        match numbers with\n        | [] -> sum\n        | x::xs -> sum_product_numbers (sum + x, product * xs)\n    sum_product_numbers (0, 0)", "    let rec sum_product_numbers (numbers:int list) = \n        match numbers with\n        | [] -> 0\n        | head::tail -> \n            let sum = head + sum_product_numbers tail\n            sum_product_numbers tail\n    sum_product_numbers numbers", "    let rec sum_product_rec acc (numbers:int list) = \n        match numbers with\n        | [] -> acc\n        | head::tail -> \n            let sum = head + acc\n            sum_product_rec (sum * tail) tail\n    sum_product_rec 0 numbers", "    let rec sum_product_rec acc (numbers:int list) =\n        match numbers with\n        | [] -> acc\n        | x::xs -> sum_product_rec (acc + x) xs\n    sum_product_rec 0 numbers", "    let rec sum_product' acc (numbers:int list) =\n        match numbers with\n        | [] -> acc\n        | x::xs -> sum_product' (acc + x) xs\n    sum_product' 0 numbers", "    let rec sum_product_numbers (numbers:int list) = \n        match numbers with\n        | [] -> 0\n        | head::tail ->\n            let sum = head + (sum_product_numbers tail)\n            sum_product_numbers tail\n    sum_product_numbers numbers", "    let rec sum_product_numbers (numbers:int list) = \n        match numbers with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + sum_product_numbers xs\n            sum_product_numbers xs\n    sum_product_numbers numbers", "    let rec sum_product_rec acc (numbers:int list) =\n        match numbers with\n        | [] -> acc\n        | x::xs -> sum_product_rec (acc + x) xs\n    sum_product_rec 0 numbers", "    let rec sum_product_rec acc xs =\n        match xs with\n        | [] -> acc\n        | x :: xs -> sum_product_rec (acc + x) xs\n    sum_product_rec 0 numbers", "    let rec sum_product_numbers (numbers:int list) = \n        match numbers with \n        | [] -> 0\n        | x::xs -> sum_product_numbers xs\n    sum_product_numbers numbers", "    let rec sum_product' acc numbers =\n        match numbers with\n        | [] -> acc\n        | x::xs -> sum_product' (acc + x) xs\n    sum_product' 0 numbers", "    let rec sum_product_numbers (numbers: int list) =\n        match numbers with\n        | [] -> 0\n        | x::xs -> sum_product_numbers xs\n    sum_product_numbers numbers", "    let rec sum_product_rec acc (numbers:int list) =\n        match numbers with\n        | [] -> acc\n        | x::xs -> sum_product_rec (x::acc) xs\n    sum_product_rec [] numbers", "    let rec sum_product_numbers (numbers:int list) = \n        match numbers with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + sum_product_numbers xs\n            sum_product_numbers xs\n    sum_product_numbers numbers", "    let rec sum_product_rec acc (numbers:int list) =\n        match numbers with\n        | [] -> acc\n        | x::xs -> sum_product_rec (acc + x) xs\n    sum_product_rec 0 numbers", "    let rec sum_product_rec acc = function\n        | [] -> acc\n        | x :: xs -> sum_product_rec (acc + x) xs\n    sum_product_rec 0 numbers", "    let rec sum_product_numbers (numbers:int list) = \n        match numbers with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + sum_product_numbers xs\n            sum_product_numbers xs\n    sum_product_numbers numbers", "    let rec sum_product_numbers (numbers:int list) = \n        match numbers with\n        | [] -> 0\n        | head::tail -> \n            let sum = head + tail\n            sum_product_numbers tail\n    sum_product_numbers numbers"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}