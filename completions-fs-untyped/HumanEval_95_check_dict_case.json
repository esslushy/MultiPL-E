{"name": "HumanEval_95_check_dict_case", "language": "fs", "prompt": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nlet check_dict_case dict = \n", "tests": "let test() = \n  let candidate = check_dict_case\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"b\", \"banana\")] = true)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"A\", \"banana\"); (\"B\", \"banana\")] = false)\n  assert (candidate Map [(\"p\", \"pineapple\"); (\"5\", \"banana\"); (\"a\", \"apple\")] = false)\n  assert (candidate Map [(\"Name\", \"John\"); (\"Age\", \"36\"); (\"City\", \"Houston\")] = false)\n  assert (candidate Map [(\"STATE\", \"NC\"); (\"ZIP\", \"12345\")] = true)\n  assert (candidate Map [(\"fruit\", \"Orange\"); (\"taste\", \"Sweet\")] = true)\n  assert (candidate Map [] = false)\n  0\n\ntest()", "completions": ["    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v)\n    let allKeys = dict |> List.map (fun (KeyValue(k,v)) -> k)\n    let allKeysLower = allKeys |> List.map (fun k -> k.ToLower())\n    let allKeysUpper = allKeys |> List.map (fun k -> k.ToUpper())\n    let allKeysLower = allKeys |> List.map (fun k -> k.ToLower())\n    let allKeysUpper = allKeys |> List.map (fun k -> k.ToUpper())\n    let allKeysLower = allKeys |> List.map (fun k -> k.ToLower())\n    let allKeysUpper = allKeys |> List.map (fun k -> k.ToUpper())\n    let allKeysLower = allKeys |> List.map (fun k -> k.ToLower())\n    let allKeysUpper = allKeys |> List.map (fun k -> k.ToUpper())\n    let allKeysLower = allKeys |> List.map (fun k -> k.ToLower())\n    let allKeysUpper = allKeys |> List.map (fun k -> k.ToUpper())\n    let allKeysLower = allKeys |> List.map (fun k -> k.ToLower())\n    let allKeysUpper = allKeys |> List.map (fun k -> k.ToUpper())\n    let allKeysLower = allKeys |> List.map (fun k -> k.ToLower())\n    let allKeysUpper = allKeys |> List.map (fun k -> k.ToUpper())\n    let allKeysLower = allKeys |> List.map (fun k -> k.ToLower())\n    let allKeysUpper = allKeys |> List.map (fun k -> k.ToUpper())\n    let allKeysLower = allKeys |> List.map (fun k -> k.ToLower())\n    let allKeysUpper = allKeys |> List.map (fun k -> k.ToUpper())\n    let allKeysLower = allKeys |> List.map (fun k -> k.ToLower())\n", "    let dict_keys = dict |> Seq.map (fun k -> k.ToLower()) |> Seq.toList\n    let dict_values = dict |> Seq.map (fun k -> k.ToUpper()) |> Seq.toList\n    dict_keys |> List.forall (fun k -> dict_values |> List.exists (fun v -> k = v))", "    let dict_keys = dict |> Seq.map (fun k -> k.ToLower())\n    let dict_values = dict |> Seq.map (fun k -> k.ToUpper())\n    dict_keys |> Seq.forall (fun k -> dict_values |> Seq.forall (fun v -> k = v))", "    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v)\n    let is_string_in_lower_case (k:string) = \n        k.ToLower() = k.ToUpper()\n    let is_string_in_upper_case (k:string) = \n        k.ToUpper() = k.ToLower()\n    let is_string_in_upper_case_with_case_insensitive (k:string) = \n        k.ToUpper() = k.ToLower()\n    let is_string_in_lower_case_with_case_insensitive (k:string) = \n        k.ToLower() = k.ToUpper()\n    let is_string_in_upper_case_with_case_insensitive (k:string) = \n        k.ToUpper() = k.ToLower()\n    let is_string_in_lower_case_with_case_insensitive (k:string) = \n        k.ToLower() = k.ToUpper()\n    let is_string_in_upper_case_with_case_insensitive (k:string) = \n        k.ToUpper() = k.ToLower()\n    let is_string_in_lower_case_with_case_insensitive (k:string) = \n        k.ToLower() = k.ToUpper()\n    let is_string_in_upper_case_with_case_insensitive (k:string) = \n        k.ToUpper() = k.ToLower()\n    let is_string_in_upper_case_with_case_insensitive (k:string) = \n        k.ToUpper() = k.ToLower()\n    let is_string_in_lower_case_with_case_insensitive (k:string) = \n        k.ToLower() = k.ToUpper()\n    let is_string_in_upper_case_with_case_insensitive (k:string) = \n        k.ToUpper() = k.ToLower()\n    let is_string_in_lower_case_with_", "    let dict = dict |> Map.toList |> List.map (fun (k,v) -> k.ToLower(),v)\n    let all_keys = dict |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_values = dict |> List.map (fun (k,v) -> v)\n    let all_values_lower = all_values |> List.map (fun v -> v.ToLower())\n    let all_values_upper = all_values |> List.map (fun v -> v.ToUpper())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper", "    let dict_keys = dict |> Seq.map (fun k -> k.ToLower()) |> Seq.toList\n    let dict_values = dict |> Seq.map (fun k -> k.ToUpper()) |> Seq.toList\n    dict_keys |> List.forall (fun k -> dict_values |> List.exists (fun v -> k = v))", "    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v)\n    let all_keys = dict |> List.map (fun (KeyValue(k,v)) -> k,v) |> List.distinct\n    let all_keys_lower = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToLower())\n    let all_keys_upper = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToUpper())\n    let all_keys_upper_lower = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToUpper(),v)\n    let all_keys_lower = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToLower(),v)\n    let all_keys_lower_upper = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToLower(),v)\n    let all_keys_upper = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToUpper(),v)\n    let all_keys_upper_lower = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToUpper(),v)\n    let all_keys_upper_lower = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToUpper(),v)\n    let all_keys_upper_lower = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToLower(),v)\n    let all_keys_upper_lower = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToUpper(),v)\n    let all_keys_upper_lower = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToLower(),v)\n    let all_keys_upper_lower = all_keys |> List.map (fun (KeyValue(k,v)) -> k.ToUpper(),v)\n    let all_keys_upper", "    let rec check_dict_case_rec dict = function\n        | (KeyValue(k,v), KeyValue(k',v',_)) -> \n            if k = k' then \n                if v = v' then \n                    true\n                else \n                    check_dict_case_rec dict (KeyValue(k',v',v'))\n            else\n                check_dict_case_rec dict (KeyValue(k,v))\n        | _ -> false\n    check_dict_case_rec dict dict", "    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v)\n    let all_keys = dict |> List.map (fun (KeyValue(k,v)) -> k)\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper_lower = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_upper_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToUpper())", "    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v)\n    let rec check_dict_case_list dict = \n        match dict with\n        | [] -> true\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_case_list v\n        | [KeyValue(k,v)] -> check_dict_", "    let rec check_dict_case_rec dict = \n        match dict with\n        | [] -> true\n        | (k,v) :: rest -> \n            if k = \"State\" then \n                if v = \"NC\" then \n                    check_dict_case_rec rest\n                else \n                    false\n            else \n                check_dict_case_rec rest\n    check_dict_case_rec dict", "    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v)\n    let all_keys = dict |> List.map (fun (KeyValue(k,v)) -> k)\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_lower_upper_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper_upper_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper_upper_upper_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper_upper_upper_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper_upper_upper_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper_upper_upper_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper_upper_upper_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper_upper_upper_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper_upper_upper_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper_upper_upper_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_upper_upper_upper_upper = all_keys |> List.map (fun k -> k", "    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v)\n    let all_keys = dict |> List.map (fun (KeyValue(k,v)) -> k)\n    let all_keys_lower = all_keys |> List.map (fun k -> k.ToLower())\n    let all_keys_upper = all_keys |> List.map (fun k -> k.ToUpper())\n    let all_keys_lower_and_upper = all_keys |> List.map (fun k -> k.ToLower(), k.ToUpper())\n    let all_keys_lower_and_upper_and_lower = all_keys |> List.map (fun k -> k.ToLower(), k.ToUpper())\n    let all_keys_lower_and_upper_and_lower_and_upper = all_keys |> List.map (fun k -> k.ToLower(), k.ToUpper())\n    let all_keys_lower_and_upper_and_lower_and_upper_and_lower = all_keys |> List.map (fun k -> k.ToLower(), k.ToUpper())\n    let all_keys_lower_and_upper_and_lower_and_upper_and_lower_and_upper = all_keys |> List.map (fun k -> k.ToLower(), k.ToUpper())\n    let all_keys_lower_and_upper_and_lower_and_upper_and_lower_and_upper_and_upper = all_keys |> List.map (fun k -> k.ToLower(), k.ToUpper())\n    let all_keys_lower_and_upper_and_lower_and_upper_and_lower_and_upper_and_upper = all_keys |> List.map (fun k -> k.ToLower(), k.ToUpper())\n    let all_keys_lower_and_upper_and_lower_and_upper_and_lower_and_upper_and_upper = all_keys |> List.map (fun k -> k.ToLower(), k.ToUpper())\n    let all_keys_lower_and_upper_and", "    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v) |> Map.ofList\n    let dict = dict |> Map.toList |> List.map (fun", "    let dict_keys = dict |> Seq.map (fun k -> k.ToLower())\n    let dict_values = dict |> Seq.map (fun k -> k.ToUpper())\n    let dict_values_lower = dict_values |> Seq.filter (fun k -> k.ToLower() = \"apple\")\n    let dict_values_upper = dict_values |> Seq.filter (fun k -> k.ToUpper() = \"banana\")\n    let dict_values_upper = dict_values |> Seq.filter (fun k -> k.ToLower() = \"banana\")\n    let dict_values_lower = dict_values |> Seq.filter (fun k -> k.ToLower() = \"apple\")\n    let dict_values_upper = dict_values |> Seq.filter (fun k -> k.ToUpper() = \"banana\")\n    let dict_values_upper = dict_values |> Seq.filter (fun k -> k.ToLower() = \"banana\")\n    let dict_values_lower = dict_values |> Seq.filter (fun k -> k.ToLower() = \"apple\")\n    let dict_values_upper = dict_values |> Seq.filter (fun k -> k.ToUpper() = \"banana\")\n    let dict_values_upper = dict_values |> Seq.filter (fun k -> k.ToLower() = \"banana\")\n    let dict_values_lower = dict_values |> Seq.filter (fun k -> k.ToLower() = \"apple\")\n    let dict_values_upper = dict_values |> Seq.filter (fun k -> k.ToUpper() = \"banana\")\n    let dict_values_upper = dict_values |> Seq.filter (fun k -> k.ToLower() = \"banana\")\n    let dict_values_lower = dict_values |> Seq.filter (fun k -> k.ToLower() = \"apple\")\n    let dict_values_upper = dict_values |> Seq.filter (fun k -> k.ToUpper() = \"banana\")\n    let dict_values_upper = dict_values |> Seq.filter", "    let dict_keys = dict |> Seq.map (fun k -> k.ToLower()) |> Seq.toList\n    let dict_values = dict |> Seq.map (fun k -> k.ToUpper()) |> Seq.toList\n    dict_keys |> List.forall (fun k -> dict_values |> List.exists (fun v -> k = v))", "    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v)\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"ZIP\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"City\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"State\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"Age\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"Name\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"ZIP\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"City\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"State\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"Age\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"Name\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"ZIP\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"City\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"State\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"Age\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"Name\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"ZIP\")\n    let dict = dict |> List.filter (fun (KeyValue(k,v)) -> k <> \"City\")\n", "    let dict = dict |> Map.toList |> List.map (fun (k,v) -> k.ToLower(),v)\n    let all_keys = dict |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_values = dict |> List.map (fun (k,v) -> v)\n    let all_keys_lower = all_keys |> List.map (fun (k,v) -> k.ToLower())\n    let all_keys_upper = all_keys |> List.map (fun (k,v) -> k.ToUpper())\n    let all_keys_lower_upper = all_keys |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_keys_lower_upper_upper = all_keys |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_keys_lower_upper_lower = all_keys |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_keys_lower_upper_lower = all_keys |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_keys_lower_upper_lower_upper = all_keys |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_keys_lower_upper_lower_upper_upper = all_keys |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_keys_lower_upper_lower_upper_lower = all_keys |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_keys_lower_upper_lower_upper_lower = all_keys |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_keys_lower_upper_lower_upper_lower = all_keys |> List.map (fun (k,v) -> k.ToUpper(),v)\n    let all_keys_lower_upper_lower_upper_lower = all_", "    let rec check_dict_case_rec dict = \n        match dict with\n        | [] -> true\n        | (k,v)::rest -> \n            if k.ToLower() = v.ToLower() then \n                check_dict_case_rec rest\n            else\n                false\n    check_dict_case_rec dict", "    let dict = dict |> Map.toList |> List.map (fun (KeyValue(k,v)) -> k,v)\n    let rec check_dict_case_rec dict = \n        match dict with\n        | [] -> true\n        | [KeyValue(k,v)] -> check_dict_case_rec v\n        | KeyValue(k,v) :: rest -> \n            if k.ToLower() = v.ToLower() then \n                check_dict_case_rec rest\n            else\n                false\n    check_dict_case_rec dict"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}