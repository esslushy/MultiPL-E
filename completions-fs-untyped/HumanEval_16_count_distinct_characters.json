{"name": "HumanEval_16_count_distinct_characters", "language": "fs", "prompt": "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlet count_distinct_characters string = \n", "tests": "let test() = \n  let candidate = count_distinct_characters\n  assert (candidate \"\" = 0)\n  assert (candidate \"abcde\" = 5)\n  assert (candidate \"abcdecadeCADE\" = 5)\n  assert (candidate \"aaaaAAAAaaaa\" = 1)\n  assert (candidate \"Jerry jERRY JeRRRY\" = 5)\n  0\n\ntest()", "completions": ["    let rec count_distinct_characters' (acc:string) (acc_count:int) (acc_list:string list) =\n        match acc_list with\n        | [] -> acc_count\n        | x::xs ->\n            if x = string then\n                acc_count + 1\n            else\n                count_distinct_characters' x (acc_count + 1) xs\n    count_distinct_characters' \"\" 0 []", "    let rec count_distinct_characters_rec (acc:int) (s:string) = \n        match s with\n        | \"\" -> acc\n        | _ -> \n            let mutable acc = acc + 1\n            let mutable i = 0\n            while i < s.Length && acc <> 0 do\n                if s.[i] = ' ' then \n                    acc <- acc + 1\n                    i <- i + 1\n                else\n                    i <- i + 1\n            count_distinct_characters_rec acc s\n    count_distinct_characters_rec 0 string", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length do\n        if string.[i] = string.[i] then\n            count <- count + 1\n        i <- i + 1\n    count", "    let rec count_distinct_characters_rec (acc:int) (acc_count:int) (acc_count_distinct:int) (acc_count_distinct_characters:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int) (acc_count_distinct_characters_rec:int)", "    let mutable count = 0\n    let mutable count_distinct_characters = 0\n    for c in string do\n        if c = ' ' then\n            count_distinct_characters <- count_distinct_characters + 1\n        else\n            count <- count + 1\n    count_distinct_characters", "    let rec count_distinct_characters' (acc:string list) (acc_count:int) =\n        match acc with\n        | [] -> acc_count\n        | x::xs ->\n            if x = string then acc_count + 1\n            else count_distinct_characters' xs (acc_count + 1)\n    count_distinct_characters' [] 0", "    let mutable count = 0\n    for c in string do\n        if (c = 'x') then\n            count <- count + 1\n    count", "    let count_distinct_characters_list = \n        string.ToCharArray()\n        |> Array.map (fun c -> if c = ' ' then 1 else 0)\n        |> Array.filter (fun c -> c <> 0)\n        |> Array.length\n    count_distinct_characters_list", "    let count_distinct_characters_list = \n        string \n        |> Seq.distinctBy (fun c -> c.Length) \n        |> Seq.toList\n    count_distinct_characters_list", "    let mutable count = 0\n    for c in string do\n        if (c = 'x' || c = 'X' || c = 'y' || c = 'Y' || c = 'z' || c = 'Z') then\n            count <- count + 1\n    count", "    let rec count_distinct_characters_rec (acc:string list) (acc_count:int) (acc_list:string list) =\n        match acc_list with\n        | [] -> acc_count\n        | x::xs ->\n            let new_acc = x::acc\n            count_distinct_characters_rec new_acc (acc_count+1) xs\n    count_distinct_characters_rec [] 0 string", "    let count_distinct_characters_list = \n        string \n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.distinct\n        |> Seq.length\n    count_distinct_characters_list", "    let count_distinct_characters' (s:string) = \n        let mutable count = 0\n        for c in s do\n            if count = 0 then\n                count <- count + 1\n            else\n                if count = 1 then\n                    count <- count - 1\n                else\n                    count <- count - 1\n        count\n    string |> count_distinct_characters'", "    let distinct_characters = \n        string \n        |> Seq.distinctBy (fun c -> c.ToString())\n        |> Seq.length\n    distinct_characters", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length do\n        if string.[i] = string.[i-1] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let count_distinct_characters_list = \n        string \n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.distinct\n    count_distinct_characters_list", "    let count_distinct_characters_list = \n        string.ToCharArray()\n        |> Array.map (fun c -> if c = ' ' then 1 else 0)\n        |> Array.filter (fun c -> c <> 0)\n        |> Array.length\n    count_distinct_characters_list", "    let mutable count = 0\n    for char in string do\n        if count = 0 then\n            count <- count + 1\n        else\n            if char = ' ' then\n                count <- count + 1\n            else\n                count <- count + 1\n    count", "    let mutable count = 0\n    for c in string do\n        if Char.IsDigit c then\n            count <- count + 1\n    count", "    let distinct_characters = \n        string \n        |> Seq.distinctBy (fun c -> c.ToString())\n        |> Seq.length\n    distinct_characters"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}