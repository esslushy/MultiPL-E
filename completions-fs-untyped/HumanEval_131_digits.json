{"name": "HumanEval_131_digits", "language": "fs", "prompt": "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4)  == 0\n// digits(235) == 15\nlet digits n = \n", "tests": "let test() = \n  let candidate = digits\n  assert (candidate 5 = 5)\n  assert (candidate 54 = 5)\n  assert (candidate 120 = 1)\n  assert (candidate 5014 = 5)\n  assert (candidate 98765 = 315)\n  assert (candidate 5576543 = 2625)\n  assert (candidate 2468 = 0)\n  0\n\ntest()", "completions": ["    if n = 0 then 0\n    else\n        let even = n % 2 = 0\n        if even then digits(n / 2)\n        else digits(n / 2) + digits(n / 3)", "    let rec digits' n = \n        if n = 0 then 0\n        else digits' (n-1) + digits' (n-2)\n    digits' n", "    if n = 0 then 0\n    else\n        let evens = [0..n-1]\n        let odds = [0..n-1]\n        let evens' = evens |> List.filter (fun x -> x % 2 = 0)\n        let odds' = odds |> List.filter (fun x -> x % 2 = 0)\n        let evens'' = evens |> List.filter (fun x -> x % 2 = 0)\n        let odds'' = odds |> List.filter (fun x -> x % 2 = 0)\n        let evens''' = evens |> List.filter (fun x -> x % 2 = 0)\n        let odds''' = odds |> List.filter (fun x -> x % 2 = 0)\n        let evens'''' = evens |> List.filter (fun x -> x % 2 = 0)\n        let odds'''' = odds |> List.filter (fun x -> x % 2 = 0)\n        let evens''''' = evens |> List.filter (fun x -> x % 2 = 0)\n        let odds'''''' = odds |> List.filter (fun x -> x % 2 = 0)\n        let evens'''''' = evens |> List.filter (fun x -> x % 2 = 0)\n        let odds'''''' = odds |> List.filter (fun x -> x % 2 = 0)\n        let evens''''''' = evens |> List.filter (fun x -> x % 2 = 0)\n        let odds''''''''' = odds |> List.filter (fun x -> x % 2 = 0)\n        let evens''''''''' = evens |> List.filter (fun x -> x % 2 = 0)\n        let odds''''''''''' = odds |> List.filter (fun x -> x % 2 = 0)\n        let evens''''''''''' = evens |> List.filter (fun x -> x % 2 = 0)\n        let odds''''''''''''' = odds |> List.filter (fun x -> x % 2 = 0)\n        let evens", "    if n = 0 then 0\n    else\n        let evens = [0..n-1]\n        let odds = [0..n-1]\n        let rec loop acc =\n            match evens, odds with\n            | [], [] -> acc\n            | _, [] -> acc\n            | _, _ ->\n                let even = List.exists (fun x -> x % 2 = 0) evens\n                let odd = List.exists (fun x -> x % 2 = 0) odds\n                if even then loop (acc + 1)\n                else loop (acc + odd)\n        loop 0", "    let rec digits' n = \n        match n with\n        | 0 -> 0\n        | _ -> digits' (n-1)\n    digits' n", "    if n = 0 then 0\n    else\n        let even = (n % 2) = 0\n        if even then digits(n / 2) else 0", "    if n = 0 then 0\n    else\n        let even = (n % 2) = 0\n        if even then\n            n / 2\n        else\n            n / 2", "    if n < 0 then failwith \"negative number\"\n    if n = 0 then 0\n    else\n        let evens = [0..n-1]\n        let odds = [0..n-1]\n        let rec loop i =\n            if i < 0 then 0\n            else\n                let even = evens |> List.tryFind (fun x -> x % 2 = 0)\n                let odd = odds |> List.tryFind (fun x -> x % 2 = 0)\n                if even.IsSome && odd.IsSome then\n                    loop (i+1)\n                else\n                    odds |> List.tryFind (fun x -> x % 2 = 0) |> Option.defaultValue 0\n        loop n", "    if n < 0 then failwith \"negative number\"\n    if n = 0 then 0\n    else\n        let even = n % 2 = 0\n        if even then\n            let odd = n / 2\n            if odd = 0 then 0\n            else digits(odd)\n        else\n            let even = n / 2\n            if even = 0 then 0\n            else digits(even)", "    if n < 0 then failwith \"n must be non-negative\"\n    let even = n % 2 = 0\n    let odd = n % 3 = 0\n    if odd then even * 2\n    else odd * 3", "    let rec digits' n = \n        if n = 0 then 0\n        elif n % 2 = 0 then digits' (n / 2)\n        else digits' (n / 2) + digits' (n / 2)\n    digits' n", "    let rec digits' n = \n        if n = 0 then 0\n        else digits' (n - 1) + digits' (n - 2)\n    digits' n", "    if n = 0 then 0\n    else\n        let evens = [0..n-1]\n        let odds = [0..n-1]\n        let evens' = evens |> List.map (fun i -> i % 2)\n        let odds' = odds |> List.map (fun i -> i % 2)\n        let evens'' = evens |> List.map (fun i -> i % 2)\n        let odds'' = odds |> List.map (fun i -> i % 2)\n        let evens''' = evens |> List.map (fun i -> i % 2)\n        let odds''' = odds |> List.map (fun i -> i % 2)\n        let evens'''' = evens |> List.map (fun i -> i % 2)\n        let odds'''' = odds |> List.map (fun i -> i % 2)\n        let evens''''' = evens |> List.map (fun i -> i % 2)\n        let odds'''''' = odds |> List.map (fun i -> i % 2)\n        let evens'''''' = evens |> List.map (fun i -> i % 2)\n        let evens''''''' = evens |> List.map (fun i -> i % 2)\n        let evens'''''''' = evens |> List.map (fun i -> i % 2)\n        let evens''''''''' = evens |> List.map (fun i -> i % 2)\n        let evens''''''''''' = evens |> List.map (fun i -> i % 2)\n        let evens''''''''''''' = evens |> List.map (fun i -> i % 2)\n        let evens''''''''''''' = evens |> List.map (fun i -> i % 2)\n        let evens''''''''''''''' = evens |> List.map (fun i -> i % 2)\n        let evens''''''''''''''' = evens |> List.map (fun i -> i % 2)\n        let evens''''", "    if n >= 0 then\n        let even = n % 2 = 0\n        if even then\n            n / 2\n        else\n            n\n    else\n        0", "    let rec digits' n = \n        if n = 0 then 0 \n        else digits' (n - 1) + digits' (n - 2)\n    digits' n", "    let rec digits' n =\n        if n = 0 then 0\n        else digits' (n - 1) + digits' (n - 2)\n    digits' n", "    let rec digits' n = \n        match n with\n        | 0 -> 0\n        | _ -> digits' (n - 1)\n    digits' n", "    let rec digits' n = \n        if n = 0 then 0\n        else digits' (n-1) + digits' (n-2)\n    digits' n", "    let rec loop i acc =\n        if i = 0 then acc\n        else loop (i-1) (acc * i)\n    loop n 0", "    if n < 0 then failwith \"negative number\"\n    if n = 0 then 0\n    else\n        let evens = [1..n]\n        let odds = [0..n-1]\n        let result = \n            evens\n            |> List.map (fun x -> x * x)\n            |> List.reduce (fun x y -> x * y)\n        if odds.Length = 0 then result\n        else\n            odds\n            |> List.map (fun x -> x * x)\n            |> List.reduce (fun x y -> x * y)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}