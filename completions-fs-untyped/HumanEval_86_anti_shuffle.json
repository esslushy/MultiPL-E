{"name": "HumanEval_86_anti_shuffle", "language": "fs", "prompt": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle s = \n", "tests": "let test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()", "completions": ["    let words = s.Split(' ')\n    words.[0] <- words.[0] + words.[1]\n    words.[1] <- words.[1] + words.[2]\n    words.[2] <- words.[2] + words.[3]\n    words.[3] <- words.[3] + words.[4]\n    words.[4] <- words.[4] + words.[5]\n    words.[5] <- words.[5] + words.[6]\n    words.[6] <- words.[6] + words.[7]\n    words.[7] <- words.[7] + words.[8]\n    words.[8] <- words.[8] + words.[9]\n    words.[9] <- words.[9] + words.[10]\n    words.[10] <- words.[10] + words.[11]\n    words.[11] <- words.[11] + words.[12]\n    words.[12] <- words.[12] + words.[13]\n    words.[13] <- words.[13] + words.[14]\n    words.[14] <- words.[14] + words.[15]\n    words.[15] <- words.[15] + words.[16]\n    words.[16] <- words.[16] + words.[17]\n    words.[17] <- words.[17] + words.[18]\n    words.[18] <- words.[18] + words.[19]\n    words.[19] <- words.[19] + words.[20]\n    words.[20] <- words.[20] + words.[21]\n    words.[21] <- words.[21] + words.[22]\n    words.[22] <- words.[22] + words.[23]\n    words.[23] <- words.[23] + words.[24]\n    words.[24] <- words.[24] + words.[25]\n    words.[25] <- words.[25] + words.[26]\n    words.[26] <- words.[26] + words.[27]\n    words.[27] <- words.[27] + words.[28]\n    words.[28] <- words.[28] + words.[29]\n    words.[29] <- words.[29] + words.[30]\n    words.[30] <- words.[30] + words.[31]\n    words.[31]", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.Split(' ')\n    words.[0] <- words.[0].ToUpper() + words.[1]\n    words.[1..] |> List.map (fun w -> w.ToUpper()) |> List.reduce (fun x y -> x + y)", "    let words = s.Split(' ')\n    words.[0] <- words.[0].ToUpper() + words.[1]\n    words.[1] <- words.[1].ToUpper() + words.[2]\n    words.[2] <- words.[2].ToUpper() + words.[3]\n    words.[3] <- words.[3].ToUpper() + words.[4]\n    words.[4] <- words.[4].ToUpper() + words.[5]\n    words.[5] <- words.[5].ToUpper() + words.[6]\n    words.[6] <- words.[6].ToUpper() + words.[7]\n    words.[7] <- words.[7].ToUpper() + words.[8]\n    words.[8] <- words.[8].ToUpper() + words.[9]\n    words.[9] <- words.[9].ToUpper() + words.[10]\n    words.[10] <- words.[10].ToUpper() + words.[11]\n    words.[11] <- words.[11].ToUpper() + words.[12]\n    words.[12] <- words.[12].ToUpper() + words.[13]\n    words.[13] <- words.[13].ToUpper() + words.[14]\n    words.[14] <- words.[14].ToUpper() + words.[15]\n    words.[15] <- words.[15].ToUpper() + words.[16]\n    words.[16] <- words.[16].ToUpper() + words.[17]\n    words.[17] <- words.[17].ToUpper() + words.[18]\n    words.[18] <- words.[18].ToUpper() + words.[19]\n    words.[19] <- words.[19].ToUpper() + words.[20]\n    words.[20] <- words.[20].ToUpper() + words.[21]\n    words.[21] <- words.[21].ToUpper() + words.[22]\n    words.[22] <- words.[22].ToUpper() + words.[23]\n    words.[23] <- words.[23].ToUpper() + words.[24]\n    words.[24] <- words.[24].ToUpper() + words.[25]\n    ", "    let words = s.Split(' ')\n    words.[0] <- words.[0].ToUpper() + words.[1]\n    words.[words.Length - 1] <- words.[words.Length - 1].ToUpper() + words.[words.Length - 2]\n    words", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n    words.[words.Length - 1]", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.Split(' ')\n    words.[0] <- words.[0] + words.[1]\n    words.[1] <- words.[1] + words.[2]\n    words.[2] <- words.[2] + words.[3]\n    words.[3] <- words.[3] + words.[4]\n    words.[4] <- words.[4] + words.[5]\n    words.[5] <- words.[5] + words.[6]\n    words.[6] <- words.[6] + words.[7]\n    words.[7] <- words.[7] + words.[8]\n    words.[8] <- words.[8] + words.[9]\n    words.[9] <- words.[9] + words.[10]\n    words.[10] <- words.[10] + words.[11]\n    words.[11] <- words.[11] + words.[12]\n    words.[12] <- words.[12] + words.[13]\n    words.[13] <- words.[13] + words.[14]\n    words.[14] <- words.[14] + words.[15]\n    words.[15] <- words.[15] + words.[16]\n    words.[16] <- words.[16] + words.[17]\n    words.[17] <- words.[17] + words.[18]\n    words.[18] <- words.[18] + words.[19]\n    words.[19] <- words.[19] + words.[20]\n    words.[20] <- words.[20] + words.[21]\n    words.[21] <- words.[21] + words.[22]\n    words.[22] <- words.[22] + words.[23]\n    words.[23] <- words.[23] + words.[24]\n    words.[24] <- words.[24] + words.[25]\n    words.[25] <- words.[25] + words.[26]\n    words.[26] <- words.[26] + words.[27]\n    words.[27] <- words.[27] + words.[28]\n    words.[28] <- words.[28] + words.[29]\n    words.[29] <- words.[29] + words.[30]\n    words.[30] <- words.[30] + words.[31]\n    words.[31]", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.Split(' ')\n    words.[0] <- words.[0] + words.[1]\n    words.[1] <- words.[1] + words.[2]\n    words.[2] <- words.[2] + words.[3]\n    words.[3] <- words.[3] + words.[4]\n    words.[4] <- words.[4] + words.[5]\n    words.[5] <- words.[5] + words.[6]\n    words.[6] <- words.[6] + words.[7]\n    words.[7] <- words.[7] + words.[8]\n    words.[8] <- words.[8] + words.[9]\n    words.[9] <- words.[9] + words.[10]\n    words.[10] <- words.[10] + words.[11]\n    words.[11] <- words.[11] + words.[12]\n    words.[12] <- words.[12] + words.[13]\n    words.[13] <- words.[13] + words.[14]\n    words.[14] <- words.[14] + words.[15]\n    words.[15] <- words.[15] + words.[16]\n    words.[16] <- words.[16] + words.[17]\n    words.[17] <- words.[17] + words.[18]\n    words.[18] <- words.[18] + words.[19]\n    words.[19] <- words.[19] + words.[20]\n    words.[20] <- words.[20] + words.[21]\n    words.[21] <- words.[21] + words.[22]\n    words.[22] <- words.[22] + words.[23]\n    words.[23] <- words.[23] + words.[24]\n    words.[24] <- words.[24] + words.[25]\n    words.[25] <- words.[25] + words.[26]\n    words.[26] <- words.[26] + words.[27]\n    words.[27] <- words.[27] + words.[28]\n    words.[28] <- words.[28] + words.[29]\n    words.[29] <- words.[29] + words.[30]\n    words.[30] <- words.[30] + words.[31]\n    words.[31]", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.Split(' ')\n    words.[0] <- words.[0] + words.[1]\n    words.[1] <- words.[1] + words.[2]\n    words.[2] <- words.[2] + words.[3]\n    words.[3] <- words.[3] + words.[4]\n    words.[4] <- words.[4] + words.[5]\n    words.[5] <- words.[5] + words.[6]\n    words.[6] <- words.[6] + words.[7]\n    words.[7] <- words.[7] + words.[8]\n    words.[8] <- words.[8] + words.[9]\n    words.[9] <- words.[9] + words.[10]\n    words.[10] <- words.[10] + words.[11]\n    words.[11] <- words.[11] + words.[12]\n    words.[12] <- words.[12] + words.[13]\n    words.[13] <- words.[13] + words.[14]\n    words.[14] <- words.[14] + words.[15]\n    words.[15] <- words.[15] + words.[16]\n    words.[16] <- words.[16] + words.[17]\n    words.[17] <- words.[17] + words.[18]\n    words.[18] <- words.[18] + words.[19]\n    words.[19] <- words.[19] + words.[20]\n    words.[20] <- words.[20] + words.[21]\n    words.[21] <- words.[21] + words.[22]\n    words.[22] <- words.[22] + words.[23]\n    words.[23] <- words.[23] + words.[24]\n    words.[24] <- words.[24] + words.[25]\n    words.[25] <- words.[25] + words.[26]\n    words.[26] <- words.[26] + words.[27]\n    words.[27] <- words.[27] + words.[28]\n    words.[28] <- words.[28] + words.[29]\n    words.[29] <- words.[29] + words.[30]\n    words.[30] <- words.[30] + words.[31]\n    words.[31]", "    let words = s.Split(' ')\n    words.[0] <- words.[0] + words.[1]\n    words.[1] <- words.[1] + words.[2]\n    words.[2] <- words.[2] + words.[3]\n    words.[3] <- words.[3] + words.[4]\n    words.[4] <- words.[4] + words.[5]\n    words.[5] <- words.[5] + words.[6]\n    words.[6] <- words.[6] + words.[7]\n    words.[7] <- words.[7] + words.[8]\n    words.[8] <- words.[8] + words.[9]\n    words.[9] <- words.[9] + words.[10]\n    words.[10] <- words.[10] + words.[11]\n    words.[11] <- words.[11] + words.[12]\n    words.[12] <- words.[12] + words.[13]\n    words.[13] <- words.[13] + words.[14]\n    words.[14] <- words.[14] + words.[15]\n    words.[15] <- words.[15] + words.[16]\n    words.[16] <- words.[16] + words.[17]\n    words.[17] <- words.[17] + words.[18]\n    words.[18] <- words.[18] + words.[19]\n    words.[19] <- words.[19] + words.[20]\n    words.[20] <- words.[20] + words.[21]\n    words.[21] <- words.[21] + words.[22]\n    words.[22] <- words.[22] + words.[23]\n    words.[23] <- words.[23] + words.[24]\n    words.[24] <- words.[24] + words.[25]\n    words.[25] <- words.[25] + words.[26]\n    words.[26] <- words.[26] + words.[27]\n    words.[27] <- words.[27] + words.[28]\n    words.[28] <- words.[28] + words.[29]\n    words.[29] <- words.[29] + words.[30]\n    words.[30] <- words.[30] + words.[31]\n    words.[31]", "    let words = s.Split(' ')\n    words.[0] <- words.[0].ToUpper() + words.[1]\n    words.[words.Length - 1] <- words.[words.Length - 1].ToUpper() + words.[words.Length - 2]\n    words", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n    words.[0]"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}