{"name": "HumanEval_84_solve", "language": "fs", "prompt": "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n// Constraints: 0 \u00e2\u2030\u00a4 N \u00e2\u2030\u00a4 10000.\n// Output:\n// a string of binary number\nlet solve N = \n", "tests": "let test() = \n  let candidate = solve\n  assert (candidate 1000 = \"1\")\n  assert (candidate 150 = \"110\")\n  assert (candidate 147 = \"1100\")\n  assert (candidate 333 = \"1001\")\n  assert (candidate 963 = \"10010\")\n  0\n\ntest()", "completions": ["    let rec sumDigits (n:int) =\n        if n = 0 then \"\"\n        else\n            let digits = string (n % 10)\n            if digits.Length = 1 then digits\n            else sumDigits (n / 10) + digits\n    sumDigits N", "    let rec sumDigits (digits:int list) =\n        match digits with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | 0 -> 0\n            | 1 -> 1\n            | _ -> sumDigits xs\n    sumDigits N", "    let rec sumDigits (digits:int list) =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            match head with\n            | 0 -> \"\"\n            | 1 -> \"1\"\n            | _ -> sumDigits tail\n    sumDigits N", "    let rec sumDigits (digits:int list) =\n        match digits with\n        | [] -> 0\n        | x :: xs -> x + sumDigits xs\n    sumDigits N", "    let rec sumDigits (digits:int list) = \n        match digits with\n        | [] -> 0\n        | x::xs -> \n            let newDigits = x::digits\n            sumDigits newDigits\n    sumDigits [1..N]", "    let rec sumDigits (n:int) =\n        if n = 0 then \"\"\n        else\n            let digits = n.ToString()\n            if digits.Length > 1 then\n                sumDigits (n - 1) + digits\n            else\n                digits\n    sumDigits N", "    let rec sumDigits (n:int) =\n        if n = 0 then \"\"\n        elif n = 1 then \"\"\n        elif n = 2 then \"\"\n        elif n = 3 then \"\"\n        elif n = 4 then \"\"\n        elif n = 5 then \"\"\n        elif n = 6 then \"\"\n        elif n = 7 then \"\"\n        elif n = 8 then \"\"\n        elif n = 9 then \"\"\n        elif n = 10 then \"\"\n        elif n = 11 then \"\"\n        elif n = 12 then \"\"\n        elif n = 13 then \"\"\n        elif n = 14 then \"\"\n        elif n = 15 then \"\"\n        elif n = 16 then \"\"\n        elif n = 17 then \"\"\n        elif n = 18 then \"\"\n        elif n = 19 then \"\"\n        elif n = 20 then \"\"\n        elif n = 21 then \"\"\n        elif n = 22 then \"\"\n        elif n = 23 then \"\"\n        elif n = 24 then \"\"\n        elif n = 25 then \"\"\n        elif n = 26 then \"\"\n        elif n = 27 then \"\"\n        elif n = 28 then \"\"\n        elif n = 29 then \"\"\n        elif n = 30 then \"\"\n        elif n = 31 then \"\"\n        elif n = 32 then \"\"\n        elif n = 33 then \"\"\n        elif n = 34 then \"\"\n        elif n = 35 then \"\"\n        elif n = 36 then \"\"\n        elif n = 37 then \"\"\n        elif n = 38 then \"\"\n        elif n = 39 then \"\"\n        elif n = 40 then \"\"\n        elif n = 41 then \"\"\n        elif n = 42 then \"\"\n        elif n = 43 then \"\"\n        elif n = 44 then \"\"\n        elif n = 45 then \"\"\n        elif n = 46 then \"\"\n        elif n = 47 then \"\"\n        elif n = 48 then \"\"\n        elif n = 49 then \"\"\n        elif n = 50 then \"\"\n        elif n = 51 then \"\"\n        elif n = 52 then \"\"\n        elif n = 53 then \"\"\n        elif n = 54 then \"\"\n        elif n =", "    let rec sumDigits (digits: int list) =\n        match digits with\n        | [] -> 0\n        | h :: t ->\n            let sum = (h * 10) + (sumDigits t)\n            sum / 10\n    \n    sumDigits N", "    let rec sumDigits (digits:int list) =\n        match digits with\n        | [] -> 0\n        | x :: xs -> x + sumDigits xs", "    let rec sumDigits (n:int) =\n        if n < 0 then\n            failwith \"N must be positive.\"\n        else\n            let digit = (n % 10) + (n / 10)\n            if digit = 0 then\n                n\n            else\n                sumDigits (n / 10) + digit\n    sumDigits N", "    let rec sumDigits (n:int) =\n        if n = 0 then \"\"\n        elif n = 1 then \"\"\n        elif n = 2 then \"\"\n        elif n = 3 then \"\"\n        elif n = 4 then \"\"\n        elif n = 5 then \"\"\n        elif n = 6 then \"\"\n        elif n = 7 then \"\"\n        elif n = 8 then \"\"\n        elif n = 9 then \"\"\n        elif n = 10 then \"\"\n        elif n = 11 then \"\"\n        elif n = 12 then \"\"\n        elif n = 13 then \"\"\n        elif n = 14 then \"\"\n        elif n = 15 then \"\"\n        elif n = 16 then \"\"\n        elif n = 17 then \"\"\n        elif n = 18 then \"\"\n        elif n = 19 then \"\"\n        elif n = 20 then \"\"\n        elif n = 21 then \"\"\n        elif n = 22 then \"\"\n        elif n = 23 then \"\"\n        elif n = 24 then \"\"\n        elif n = 25 then \"\"\n        elif n = 26 then \"\"\n        elif n = 27 then \"\"\n        elif n = 28 then \"\"\n        elif n = 29 then \"\"\n        elif n = 30 then \"\"\n        elif n = 31 then \"\"\n        elif n = 32 then \"\"\n        elif n = 33 then \"\"\n        elif n = 34 then \"\"\n        elif n = 35 then \"\"\n        elif n = 36 then \"\"\n        elif n = 37 then \"\"\n        elif n = 38 then \"\"\n        elif n = 39 then \"\"\n        elif n = 40 then \"\"\n        elif n = 41 then \"\"\n        elif n = 42 then \"\"\n        elif n = 43 then \"\"\n        elif n = 44 then \"\"\n        elif n = 45 then \"\"\n        elif n = 46 then \"\"\n        elif n = 47 then \"\"\n        elif n = 48 then \"\"\n        elif n = 49 then \"\"\n        elif n = 50 then \"\"\n        elif n = 51 then \"\"\n        elif n = 52 then \"\"\n        elif n = 53 then \"\"\n        elif n = 54 then \"\"\n        elif n =", "    let rec sumDigits (digits:int list) =\n        match digits with\n        | [] -> \"\"\n        | x :: xs -> \n            match x with\n            | 0 -> \"\"\n            | 1 -> \"1\"\n            | _ -> sumDigits xs\n    sumDigits N", "    let rec sumDigits (n:int) =\n        if n < 0 then\n            failwith \"N must be positive.\"\n        elif n = 0 then\n            \"0\"\n        else\n            let digit = (n % 10) + (n / 10)\n            sprintf \"%c%d\" (digit + '0') digit\n    \n    let rec sumDigits' (n:int) =\n        if n < 0 then\n            failwith \"N must be positive.\"\n        elif n = 0 then\n            \"0\"\n        else\n            let digit = (n % 10) + (n / 10)\n            sumDigits' (digit + '0')\n    \n    let rec sumDigits'' (n:int) =\n        if n < 0 then\n            failwith \"N must be positive.\"\n        elif n = 0 then\n            \"0\"\n        else\n            let digit = (n % 10) + (n / 10)\n            sumDigits'' (digit + '0')\n    \n    let rec sumDigits''' (n:int) =\n        if n < 0 then\n            failwith \"N must be positive.\"\n        elif n = 0 then\n            \"0\"\n        else\n            let digit = (n % 10) + (n / 10)\n            sumDigits''' (digit + '0')\n    \n    let rec sumDigits'''' (n:int) =\n        if n < 0 then\n            failwith \"N must be positive.\"\n        elif n = 0 then\n            \"0\"\n        else\n            let digit = (n % 10) + (n / 10)\n            sumDigits'''' (digit + '0')\n    \n    let rec sumDigits''''' (n:int) =\n        if n < 0 then\n            failwith \"N must be positive.\"\n        elif n = 0 then\n            \"0\"\n        else\n            let digit = (n % 10) + (n / 10)\n            sumDigits''''' (digit + '0')\n    \n    let rec sumDigits'''''' (n:int) =\n        if n < 0 then\n            failwith \"N must be positive.\"\n        elif n = 0", "    let rec sumDigits (n:int) =\n        if n = 0 then \"\"\n        elif n = 1 then \"\"\n        elif n = 2 then \"\"\n        elif n = 3 then \"\"\n        elif n = 4 then \"\"\n        elif n = 5 then \"\"\n        elif n = 6 then \"\"\n        elif n = 7 then \"\"\n        elif n = 8 then \"\"\n        elif n = 9 then \"\"\n        elif n = 10 then \"\"\n        elif n = 11 then \"\"\n        elif n = 12 then \"\"\n        elif n = 13 then \"\"\n        elif n = 14 then \"\"\n        elif n = 15 then \"\"\n        elif n = 16 then \"\"\n        elif n = 17 then \"\"\n        elif n = 18 then \"\"\n        elif n = 19 then \"\"\n        elif n = 20 then \"\"\n        elif n = 21 then \"\"\n        elif n = 22 then \"\"\n        elif n = 23 then \"\"\n        elif n = 24 then \"\"\n        elif n = 25 then \"\"\n        elif n = 26 then \"\"\n        elif n = 27 then \"\"\n        elif n = 28 then \"\"\n        elif n = 29 then \"\"\n        elif n = 30 then \"\"\n        elif n = 31 then \"\"\n        elif n = 32 then \"\"\n        elif n = 33 then \"\"\n        elif n = 34 then \"\"\n        elif n = 35 then \"\"\n        elif n = 36 then \"\"\n        elif n = 37 then \"\"\n        elif n = 38 then \"\"\n        elif n = 39 then \"\"\n        elif n = 40 then \"\"\n        elif n = 41 then \"\"\n        elif n = 42 then \"\"\n        elif n = 43 then \"\"\n        elif n = 44 then \"\"\n        elif n = 45 then \"\"\n        elif n = 46 then \"\"\n        elif n = 47 then \"\"\n        elif n = 48 then \"\"\n        elif n = 49 then \"\"\n        elif n = 50 then \"\"\n        elif n = 51 then \"\"\n        elif n = 52 then \"\"\n        elif n = 53 then \"\"\n        elif n = 54 then \"\"\n        elif n =", "    let rec sumDigits (digits:int list) =\n        match digits with\n        | [] -> 0\n        | x::xs ->\n            let sum = x + (sumDigits xs)\n            sum / N\n    sumDigits N", "    let rec sumDigits n = \n        if n = 0 then \"\"\n        elif n % 2 = 0 then sumDigits (n / 2)\n        else sumDigits (n / 2) + \".\" + sumDigits (n / 2)\n    sumDigits N", "    let rec sumDigits (digits: int list) =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let sum = head + (sumDigits tail)\n            sum + (sumDigits tail)\n    sumDigits N", "    let rec sumDigits (digits:int list) =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let sum = head + (sumDigits tail)\n            sum\n    \n    let rec sumDigits' (digits:int list) =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let sum = head + (sumDigits' tail)\n            sum\n    \n    sumDigits' N", "    let rec sumDigits (digits:int list) =\n        match digits with\n        | [] -> \"\"\n        | x::xs ->\n            let sum = x + (sumDigits xs)\n            if N % sum = 0 then sum\n            else sumDigits xs\n    sumDigits [1..N]", "    let rec sumDigits (n:int) =\n        if n < 0 then\n            failwith \"N must be positive.\"\n        else\n            let sum = n * 10\n            if sum > 0 then\n                sumDigits (n - 1)\n            else\n                sum\n    sumDigits N"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}