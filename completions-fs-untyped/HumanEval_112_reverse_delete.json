{"name": "HumanEval_112_reverse_delete", "language": "fs", "prompt": "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nlet reverse_delete s c = \n", "tests": "let test() = \n  let candidate = reverse_delete\n  assert (candidate \"abcde\" \"ae\" = (\"bcd\", false))\n  assert (candidate \"abcdef\" \"b\" = (\"acdef\", false))\n  assert (candidate \"abcdedcba\" \"ab\" = (\"cdedc\", true))\n  assert (candidate \"dwik\" \"w\" = (\"dik\", false))\n  assert (candidate \"a\" \"a\" = (\"\", true))\n  assert (candidate \"abcdedcba\" \"\" = (\"abcdedcba\", true))\n  assert (candidate \"abcdedcba\" \"v\" = (\"abcdedcba\", true))\n  assert (candidate \"vabba\" \"v\" = (\"abba\", true))\n  assert (candidate \"mamma\" \"mia\" = (\"\", true))\n  0\n\ntest()", "completions": ["    let rec reverse_delete_rec (s:string) (c:char) = \n        if s.Length = 0 then \n            c\n        else\n            let c' = s.[0]\n            reverse_delete_rec (s.Substring(1)) c'\n    reverse_delete_rec s c", "    let rec reverse_delete_c (s:string) (c:char) =\n        if s.Length = 0 then\n            c\n        else\n            let c' = s.[0]\n            if c = c' then\n                reverse_delete_c s (c' - 1)\n            else\n                c\n    reverse_delete_c s c", "    let rec reverse_delete_rec (s:string) (c:char) =\n        if s.Length = 0 then\n            c\n        else\n            let c' = s.[0]\n            if c = c' then\n                reverse_delete_rec (s.Substring(1)) c'\n            else\n                c\n    reverse_delete_rec s c", "    let rec reverse_delete_rec s c = \n        if s = c then \n            c,True\n        else\n            let c',b = reverse_delete_rec s c\n            reverse_delete_rec s c',b\n    reverse_delete_rec s c", "    let rec reverse_delete_rec (s:string) (c:char) = \n        if s.Length = 0 then \n            c\n        else\n            let c = s.[0]\n            reverse_delete_rec (s.Substring(1)) c\n    reverse_delete_rec s c", "    let rec reverse_delete_rec (s:string) (c:char) =\n        if s.Length = 0 then\n            c\n        else\n            let c' = s.[0]\n            reverse_delete_rec (s.Substring(1)) c'\n    reverse_delete_rec s c", "    let rec reverse_delete_rec s c = \n        if s = c then \n            (s,True)\n        else\n            reverse_delete_rec (s+c) c\n    reverse_delete_rec s c", "    let rec reverse_delete_rec s c = \n        match c with\n        | 'a' -> 'b'\n        | 'b' -> 'a'\n        | 'c' -> 'd'\n        | 'd' -> 'c'\n        | 'e' -> 'f'\n        | 'f' -> 'e'\n        | 'g' -> 'h'\n        | 'h' -> 'g'\n        | _ -> failwith \"Invalid character\"\n    reverse_delete_rec s c", "    let rec reverse_delete_rec s c = \n        match c with\n        | 'a' -> 'b'\n        | 'b' -> 'a'\n        | 'c' -> 'd'\n        | 'd' -> 'c'\n        | _ -> failwith \"Invalid character\"\n    reverse_delete_rec s c", "    let rec reverse_delete_rec (s:string) (c:char) =\n        if s.Length = 0 then\n            c\n        else\n            let c' = s.[0]\n            if c = c' then\n                reverse_delete_rec (s.Substring(1)) c'\n            else\n                c'\n    reverse_delete_rec s c", "    let rec reverse_delete_rec s c = \n        match c with\n        | 'a' -> s\n        | 'b' -> s\n        | 'c' -> s\n        | 'd' -> s\n        | 'e' -> s\n        | 'f' -> s\n        | 'g' -> s\n        | 'h' -> s\n        | 'i' -> s\n        | 'j' -> s\n        | 'k' -> s\n        | 'l' -> s\n        | 'm' -> s\n        | 'n' -> s\n        | 'o' -> s\n        | 'p' -> s\n        | 'q' -> s\n        | 'r' -> s\n        | 's' -> s\n        | 't' -> s\n        | 'u' -> s\n        | 'v' -> s\n        | 'w' -> s\n        | 'x' -> s\n        | 'y' -> s\n        | 'z' -> s\n        | _ -> failwith \"Invalid character\"\n    reverse_delete_rec s c", "    let rec reverse_delete_rec s c = \n        match c with\n        | 'a' -> 'b'\n        | 'b' -> 'a'\n        | 'c' -> 'd'\n        | 'd' -> 'c'\n        | 'e' -> 'f'\n        | 'f' -> 'e'\n        | 'g' -> 'h'\n        | 'h' -> 'g'\n        | 'i' -> 'j'\n        | 'j' -> 'i'\n        | 'k' -> 'l'\n        | 'l' -> 'k'\n        | 'm' -> 'n'\n        | 'n' -> 'm'\n        | 'o' -> 'p'\n        | 'p' -> 'o'\n        | 'q' -> 'r'\n        | 'r' -> 'q'\n        | 's' -> 't'\n        | 't' -> 's'\n        | 'u' -> 'v'\n        | 'v' -> 'u'\n        | 'w' -> 'x'\n        | 'x' -> 'w'\n        | 'y' -> 'y'\n        | 'y' -> 'y'\n        | 'z' -> 'z'\n        | 'z' -> 'z'\n        | _ -> failwith \"Invalid character\"\n    reverse_delete_rec s c", "    let rec reverse_delete_loop (s:string) (c:char) =\n        if s.Length = 0 then\n            c\n        else\n            let c' = s.[0]\n            if c = c' then\n                reverse_delete_loop s (c' - 1)\n            else\n                c\n    reverse_delete_loop s c", "    let rec reverse_delete_rec (s:string) (c:char) =\n        if s.Length = 0 then\n            c\n        else\n            let c' = s.[0]\n            reverse_delete_rec (s.Substring(1)) c'\n    reverse_delete_rec s c", "    let rec reverse_delete_rec s c = \n        match c with\n        | 'a' -> 'b'\n        | 'b' -> 'a'\n        | 'c' -> 'd'\n        | 'd' -> 'c'\n        | _ -> failwith \"Invalid character\"\n    reverse_delete_rec s c", "    let rec reverse_delete_rec s c = \n        match c with\n        | 'a' -> 'b'\n        | 'b' -> 'a'\n        | 'c' -> 'd'\n        | 'd' -> 'c'\n        | 'e' -> 'f'\n        | 'f' -> 'e'\n        | 'g' -> 'h'\n        | 'h' -> 'g'\n        | 'i' -> 'j'\n        | 'j' -> 'i'\n        | 'k' -> 'l'\n        | 'l' -> 'k'\n        | 'm' -> 'n'\n        | 'n' -> 'm'\n        | 'o' -> 'p'\n        | 'p' -> 'o'\n        | 'q' -> 'r'\n        | 'r' -> 'q'\n        | 's' -> 't'\n        | 't' -> 's'\n        | 'u' -> 'v'\n        | 'v' -> 'u'\n        | 'w' -> 'x'\n        | 'x' -> 'w'\n        | 'y' -> 'y'\n        | 'y' -> 'y'\n        | 'z' -> 'z'\n        | 'z' -> 'z'\n        | _ -> failwith \"Invalid char\"\n    reverse_delete_rec s c", "    let rec reverse_delete_rec (s:string) (c:char) =\n        if s.Length = 0 then\n            (c,False)\n        else\n            let c = s.[0]\n            let c = c.ToString()\n            let c = c.ToCharArray()\n            reverse_delete_rec (c.[0..s.Length-1]) c\n    reverse_delete_rec s c", "    let rec reverse_delete_rec s c = \n        if s = c then \n            c,True\n        else\n            reverse_delete_rec s (c-1)\n    reverse_delete_rec s c", "    let rec reverse_delete_c (s:string) (c:char) =\n        if s.Length = 0 then\n            c\n        else\n            let c' = s.[0]\n            reverse_delete_c (s.Substring(1)) c'\n    reverse_delete_c s c", "    let rec reverse_delete_rec s c = \n        if c = s then \n            s, c\n        else\n            reverse_delete_rec s (c + 1)\n    reverse_delete_rec s c"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}