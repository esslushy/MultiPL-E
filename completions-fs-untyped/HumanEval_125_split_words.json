{"name": "HumanEval_125_split_words", "language": "fs", "prompt": "//Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// split_words(\"Hello world!\") \u00e2\u017e\u017e [\"Hello\", \"world!\"]\n// split_words(\"Hello,world!\") \u00e2\u017e\u017e [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") == 3\nlet split_words txt = \n", "tests": "let test() = \n  let candidate = split_words\n  assert (candidate \"Hello world!\" = [\"Hello\"; \"world!\"])\n  assert (candidate \"Hello,world!\" = [\"Hello\"; \"world!\"])\n  assert (candidate \"Hello world,!\" = [\"Hello\"; \"world,!\"])\n  assert (candidate \"Hello,Hello,world !\" = [\"Hello,Hello,world\"; \"!\"])\n  assert (candidate \"abcdef\" = 3)\n  assert (candidate \"aaabb\" = 2)\n  assert (candidate \"aaaBb\" = 1)\n  assert (candidate \"\" = 0)\n  0\n\ntest()", "completions": ["    let words = txt.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n    words\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (", "    let words = txt.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n    words |> List.map (fun word -> word.ToLower())", "    let words = txt.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n    words\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 = 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length % 2 =", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    words |> Array.map (fun word -> word.ToLower())", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    if words.Length = 0 then\n        [], 0\n    else\n        let words = words.[0].Split([|' '|], StringSplitOptions.None)\n        if words.Length = 0 then\n            [], 0\n        else\n            words.[0].Split([|' '|], StringSplitOptions.None)\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.filter (fun word -> word.Length % 2 = 0)\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |> Array.map (fun word -> word.ToUpper())\n            |> Array.map (fun word -> word.ToLower())\n            |", "    let words = txt.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n    words\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (fun word -> word.Length > 0)\n    |> List.map (fun word -> word.ToLower())\n    |> List.filter (", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    words |> List.map (fun word -> word.ToLower())", "    let words = txt.ToLower()\n    let words_lower = words.ToLower()\n    let words_upper = words.ToUpper()\n    let words_upper_lower = words_upper.ToLower()\n    let words_upper_upper = words_upper.ToUpper()\n    let words_upper_upper_lower = words_upper_upper.ToLower()\n    let words_upper_upper_upper = words_upper_upper.ToUpper()\n    let words_upper_upper_upper_lower = words_upper_upper_upper.ToLower()\n    let words_upper_upper_upper_upper = words_upper_upper_upper.ToUpper()\n    let words_upper_upper_upper_upper_lower = words_upper_upper_upper_upper.ToLower()\n    let words_upper_upper_upper_upper_upper = words_upper_upper_upper.ToUpper()\n    let words_upper_upper_upper_upper_upper_lower = words_upper_upper_upper_upper_upper.ToLower()\n    let words_upper_upper_upper_upper_upper_upper = words_upper_upper_upper_upper.ToUpper()\n    let words_upper_upper_upper_upper_upper_upper_lower = words_upper_upper_upper_upper_upper_upper.ToLower()\n    let words_upper_upper_upper_upper_upper_upper_upper = words_upper_upper_upper_upper_upper.ToUpper()\n    let words_upper_upper_upper_upper_upper_upper_upper = words_upper_upper_upper_upper_upper.ToUpper()\n    let words_upper_upper_upper_upper_upper_upper_upper_lower = words_upper_upper_upper_upper_upper_upper_upper.ToLower()\n    let words_upper_upper_upper_upper_upper_upper_upper_upper = words_upper_upper_upper_upper_upper_upper.ToUpper()\n    let words_upper_upper_upper_upper_upper_upper_upper_upper_lower = words_upper_upper_upper_upper_upper_upper_upper_upper.ToLower()\n    let words_upper_", "    let words = txt.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n    words |> List.map (fun word -> word.ToLower())", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    let lowercase = words |> Array.map (fun word -> word.ToLower())\n    let ord = lowercase |> Array.map (fun word -> if word.Length % 2 = 0 then ord_of_char word.[0] else ord_of_char word.[1])\n    ord", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    let lowercase = words |> Array.map (fun x -> x.ToLower())\n    let even = lowercase |> Array.filter (fun x -> x % 2 = 0)\n    let odd = lowercase |> Array.filter (fun x -> x % 2 <> 0)\n    even, odd", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    words |> Array.map (fun word -> word.ToLower())", "    let words = txt.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n    words |> List.map (fun word -> word.ToLower())", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    words |> Array.map (fun w -> w.ToLower())", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    let lower = words |> Array.map (fun word -> word.ToLower())\n    let upper = words |> Array.map (fun word -> word.ToUpper())\n    lower, upper", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    if words.Length <> 2 then failwith \"split_words: invalid input\"\n    words.[0], words.[1]", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    if words.Length = 0 then\n        [], 0\n    else\n        words, words.Length", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    let lowercase = words |> Array.map (fun word -> word.ToLower())\n    let ord = lowercase |> Array.map (fun word -> if word.Length > 1 then ord_of_char word.[0] else ord_of_char ' ')\n    words, lowercase, ord", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    if words.Length <> 2 then failwith \"split_words: invalid input\"\n    words.[0], words.[1]", "    let words = txt.Split([|' '|], StringSplitOptions.None)\n    if words.Length <> 2 then failwith \"split_words: invalid input\"\n    words.[0], words.[1]"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}