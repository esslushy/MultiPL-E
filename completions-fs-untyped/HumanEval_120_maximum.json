{"name": "HumanEval_120_maximum", "language": "fs", "prompt": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum arr k = \n", "tests": "let test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()", "completions": ["    let rec maxk acc = \n        match acc with\n        | [] -> failwith \"maxk: empty list\"\n        | x::xs -> if k > x then maxk xs else maxk (x::acc)\n    maxk [] arr", "    let len = Array.length arr\n    if k < 0 then invalidArg \"k\" \"k must be positive\"\n    if k > len then invalidArg \"k\" \"k must be less than len(arr)\"\n    if k = 0 then [0]\n    elif k = len then arr\n    else\n        let rec max_k (arr: int[]) k =\n            if k < 0 then invalidArg \"k\" \"k must be positive\"\n            if k > len then invalidArg \"k\" \"k must be less than len(arr)\"\n            if k = 0 then arr\n            elif k = len then arr\n            else\n                let max = arr[k-1]\n                if k = len-1 then arr\n                else max_k arr (k-1)\n        max_k arr k", "    let rec max k len =\n        match len with\n        | 0 -> [0]\n        | _ ->\n            let max = Array.max arr\n            if k > max then max\n            else max + (if k = max then 1 else 0)\n    max k (Array.length arr)", "    let rec max (arr: int[]) k = \n        if k = 0 then arr\n        else\n            let max = Array.max arr\n            if k = max then arr\n            else max arr (k - 1)\n    max arr k", "    let rec max k acc =\n        if k = 0 then acc\n        elif k = len(arr) then acc\n        else max (k - 1) (max acc arr (k - 1))\n    max k 0", "    let len = Array.length arr\n    if k < 0 then invalidArg \"k\" \"k must be non-negative.\"\n    if len <= k then invalidArg \"k\" \"k must be positive.\"\n    let rec max_index i =\n        if i <= len then\n            if arr.[i] > arr.[i-1] then i\n            else max_index (i-1)\n        else i\n    max_index k", "    let rec max k = \n        match k with\n        | 0 -> []\n        | _ -> \n            let max = Array.max arr\n            let min = Array.min arr\n            [min..max]\n    max k", "    let len = Array.length arr\n    if k < 0 then failwith \"k < 0\"\n    if k > len then failwith \"k > len\"\n    let rec max_k (arr: int[]) k =\n        if k < 0 then failwith \"k < 0\"\n        if k > len then failwith \"k > len\"\n        if arr.[k] > arr.[k-1] then arr.[k] else max_k arr (k-1)\n    max_k arr k", "    let rec maxi i =\n        if i <= k then\n            maxi (i + 1)\n        else\n            i\n    maxi k", "    let rec max (arr: _[]) k = \n        if k = 0 then arr\n        else max arr (k-1)\n    max arr k", "    let rec max_k (arr:int[]) k =\n        if k = 0 then arr\n        elif k = len(arr) then arr\n        else max_k (arr.[0..k-1]) (k-1)\n    max_k arr k", "    let rec max k acc =\n        if k = 0 then acc\n        else max (k-1) (max acc (arr.[k]))\n    max k arr", "    let len = Array.length arr\n    let rec maxLen acc = \n        if acc = len then acc\n        else maxLen (acc + 1)\n    maxLen k arr", "    let len = Array.length arr\n    let max = Array.max arr\n    let maxLen = max - len\n    let maxLen = maxLen * k\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt\n    let maxLen = maxLen |> maxLenToInt", "    let rec max k = \n        match k with\n        | 0 -> []\n        | _ -> \n            let max = \n                arr \n                |> Array.map (fun x -> \n                    if x > k then x else max k)\n            max k\n    max k", "    let len = Array.length arr\n    if k < 0 then invalidArg \"k\" \"k must be non-negative.\"\n    if k > len then invalidArg \"k\" \"k must be less than len(arr) in the range of [-1000, 1000].\"\n    let rec max_k = function\n        | [] -> invalidArg \"k\" \"k must be non-negative.\"\n        | x::xs -> if k = x then x else max_k xs\n    max_k arr", "    let len = Array.length arr\n    if len < k then\n        invalidArg \"arr\" \"The input array is empty.\"\n    elif len = k then\n        arr\n    else\n        let max = Array.max arr\n        let min = Array.min arr\n        [min .. max]", "    let len = Array.length arr\n    if k < 0 || k > len then invalidArg \"k\" \"k must be between 0 and len(arr) - 1\"\n    let rec max_acc (acc: int list) (arr: int list) =\n        match arr with\n        | [] -> acc\n        | h::t -> max_acc (h::acc) t\n    max_acc [] arr", "    let len = Array.length arr\n    if len <= k then\n        arr\n    else\n        let max = arr |> Array.max\n        let min = arr |> Array.min\n        [min .. max]", "    let rec maxi i =\n        if i <= k then\n            let max = arr.[i]\n            maxi (i+1)\n        else\n            max\n    maxi k"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}