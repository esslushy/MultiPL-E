{"name": "HumanEval_27_flip_case", "language": "fs", "prompt": "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nlet flip_case string = \n", "tests": "let test() = \n  let candidate = flip_case\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hello!\" = \"hELLO!\")\n  assert (candidate \"These violent delights have violent ends\" = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n  0\n\ntest()", "completions": ["    let lowercase = string |> Seq.toList |> List.map (fun c -> c.ToUpper())\n    let uppercase = string |> Seq.toList |> List.map (fun c -> c.ToLower())\n    String.Join(\",\", lowercase @ uppercase)", "    let lowercase = string |> String.toLower\n    let uppercase = string |> String.toUpper\n    let result = lowercase + uppercase\n    result", "    let mutable result = string\n    for c in string do\n        result <- result.ToUpper() + c.ToString()\n    result", "    let mutable result = string\n    for c in string do\n        result <- result.ToUpper() + c.ToString()\n    result", "    let mutable result = string\n    for c in string do\n        if c = 'a' then\n            result <- result.ToUpper() + result\n        elif c = 'A' then\n            result <- result.ToLower() + result\n        else\n            result <- result + string c\n    result", "    let s = string\n    let s' = s.ToUpper()\n    let s'' = s'.ToLower()\n    s''", "    let mutable result = string\n    for c in string do\n        result <- result.ToUpper() + c.ToString()\n    result", "    let mutable result = string\n    for c in string do\n        result <- result.ToUpper() + c.ToString()\n    result", "    let mutable result = string\n    for c in string do\n        result <- result.ToUpper() + c.ToString()\n    result", "    let mutable result = string\n    for c in string do\n        result <- result.ToUpper() + c.ToString()\n    result", "    let mutable result = string\n    for c in string do\n        result <- result.ToUpper() + c.ToString()\n    result", "    let lowercase = string |> String.toLower\n    let uppercase = string |> String.toUpper\n    (lowercase, uppercase)", "    let mutable result = string\n    for c in string do\n        if c = 'a' then\n            result <- result.ToUpper() + result\n        elif c = 'A' then\n            result <- result.ToLower() + result\n        else\n            result <- result.ToUpper() + result\n    result", "    let mutable result = string\n    for c in string do\n        result <- result.ToUpper() + c.ToString()\n    result", "    let mutable result = string\n    for c in string do\n        if c = 'A' then\n            result <- result.ToUpper() + result.Substring(1)\n        elif c = 'a' then\n            result <- result.ToLower() + result.Substring(1)\n        else\n            result <- result.ToUpper() + result.Substring(1)\n    result", "    let s = string\n    let s' = s.ToUpper()\n    s'", "    let mutable result = string\n    for c in string do\n        result <- result.ToUpper() + c.ToString()\n    result", "    let s = string\n    let s = s.ToUpper()\n    let s = s.ToLower()\n    s", "    let mutable result = string\n    for c in string do\n        result <- result.ToUpper() + c.ToString()\n    result", "    let mutable res = string\n    for c in string do\n        res <- res.ToUpper() + res\n    res"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}