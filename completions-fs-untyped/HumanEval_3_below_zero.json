{"name": "HumanEval_3_below_zero", "language": "fs", "prompt": "//You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1, 2, -4, 5])\n// True\nlet below_zero operations = \n", "tests": "let test() = \n  let candidate = below_zero\n  assert (candidate [] = false)\n  assert (candidate [1; 2; -3; 1; 2; -3] = false)\n  assert (candidate [1; 2; -4; 5; 6] = true)\n  assert (candidate [1; -1; 2; -2; 5; -5; 4; -4] = false)\n  assert (candidate [1; -1; 2; -2; 5; -5; 4; -5] = true)\n  assert (candidate [1; -2; 2; -2; 5; -5; 4; -4] = true)\n  0\n\ntest()", "completions": ["    let rec below_zero_rec acc = function\n        | [] -> acc\n        | operation::rest ->\n            match operation with\n            | Zero -> below_zero_rec (acc @ [operation]) rest\n            | Negative -> below_zero_rec (acc @ [operation]) rest\n            | Positive -> below_zero_rec (acc @ [operation]) rest\n    below_zero_rec [] operations", "    let rec below_zero_rec acc = \n        match operations with\n        | [] -> acc\n        | head::tail -> \n            if head = 0 then below_zero_rec acc\n            else below_zero_rec (head::acc) tail\n    below_zero_rec []", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | x::xs ->\n            if x < 0 then\n                below_zero_rec (x::acc) xs\n            else\n                below_zero_rec (x::acc) xs\n    below_zero_rec [] operations", "    operations\n    |> List.filter (fun operation -> operation <> Zero)\n    |> List.length", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | operation::rest ->\n            let operation_result = operation |> below_zero_rec acc\n            if operation_result then below_zero_rec (operation::acc) rest\n            else operation_result\n    below_zero_rec [] operations", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | (x::xs) -> \n            if x <= 0.0 then below_zero_rec (x::acc) xs\n            else below_zero_rec (x::acc) xs\n    below_zero_rec [] operations", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | operation::rest -> \n            let operation_result = below_zero_rec (operation::acc) rest\n            if operation_result then below_zero_rec (operation::acc) rest\n            else operation_result\n    below_zero_rec [] operations", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | x::xs -> if x < 0.0 then below_zero_rec (x::acc) xs else acc\n    below_zero_rec [] operations", "    let rec below_zero_rec acc = \n        match operations with\n        | [] -> acc\n        | head::tail -> \n            if head = 0 then below_zero_rec (acc + 1)\n            else below_zero_rec (acc - 1)\n    below_zero_rec 0", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | operation::rest ->\n            let operation_result = operation |> below_zero_rec acc\n            if operation_result = false then below_zero_rec rest\n            else operation_result\n    below_zero_rec false operations", "    let rec below_zero_rec acc = \n        match operations with\n        | [] -> acc\n        | head::tail -> \n            if head < 0 then below_zero_rec (acc + head) tail\n            else below_zero_rec (acc + head) tail\n    below_zero_rec 0 operations", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | (x::xs) -> if x < 0 then below_zero_rec (x::acc) xs else acc\n    below_zero_rec [] operations", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | operation::rest ->\n            let operation_result = operation |> below_zero_rec acc\n            if operation_result then below_zero_rec rest\n            else operation_result\n    below_zero_rec false operations", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | operation::rest ->\n            let operation_result = operation |> below_zero_rec acc\n            if operation_result then below_zero_rec (operation::acc) rest\n            else operation_result\n    below_zero_rec [] operations", "    operations |> List.filter (fun operation -> operation.Amount > 0.0) |> List.length", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | (x, y) :: rest ->\n            if x < 0 then\n                below_zero_rec (x :: acc) rest\n            else\n                below_zero_rec (x :: acc) rest\n    \n    let rec below_zero_rec acc = function\n        | [] -> acc\n        | (x, y) :: rest ->\n            if y < 0 then\n                below_zero_rec (x :: acc) rest\n            else\n                below_zero_rec (x :: acc) rest\n    \n    let rec below_zero_rec acc = function\n        | [] -> acc\n        | (x, y) :: rest ->\n            if y < 0 then\n                below_zero_rec (x :: acc) rest\n            else\n                below_zero_rec (x :: acc) rest\n    \n    below_zero_rec [] operations", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | (balance, operation)::rest ->\n            if balance < 0.0 then\n                below_zero_rec (balance::acc) rest\n            else\n                below_zero_rec (balance::acc) rest\n    below_zero_rec [] operations", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | operation::rest ->\n            let operation_result = operation |> below_zero_rec acc\n            if operation_result then below_zero_rec (operation::acc) rest\n            else operation_result\n    below_zero_rec [] operations", "    operations\n    |> List.filter (fun operation -> operation.Amount < 0.0)\n    |> List.length\n    |> function\n        | 0 -> None\n        | _ -> Some true", "    let rec below_zero_rec acc = function\n        | [] -> acc\n        | operation::rest ->\n            let operation_result = operation |> below_zero_rec acc\n            if operation_result then below_zero_rec (operation::acc) rest\n            else operation_result\n    below_zero_rec [] operations"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}