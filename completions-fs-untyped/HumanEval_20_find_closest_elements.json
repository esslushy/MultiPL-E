{"name": "HumanEval_20_find_closest_elements", "language": "fs", "prompt": "//From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nlet find_closest_elements numbers = \n", "tests": "let test() = \n  let candidate = find_closest_elements\n  assert (candidate [1.0; 2.0; 3.9; 4.0; 5.0; 2.2] = (3.9, 4.0))\n  assert (candidate [1.0; 2.0; 5.9; 4.0; 5.0] = (5.0, 5.9))\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0; 2.2] = (2.0, 2.2))\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0; 2.0] = (2.0, 2.0))\n  assert (candidate [1.1; 2.2; 3.1; 4.1; 5.1] = (2.2, 3.1))\n  0\n\ntest()", "completions": ["    let rec find_closest_numbers (numbers:list<float>) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let y = x + xs\n            if y <> x then find_closest_numbers xs\n            else find_closest_numbers ys\n    find_closest_numbers numbers", "    let rec find_closest_elements' (numbers:seq<float>) =\n        match numbers with\n        | [] -> None\n        | x::xs ->\n            let closest_number = find_closest_number x\n            if closest_number <> None then\n                Some(closest_number, xs)\n            else\n                find_closest_elements' xs\n    find_closest_elements' numbers", "    let rec find_closest_elements' (numbers:list<float>) =\n        match numbers with\n        | [] -> None\n        | x::xs ->\n            let y = x + xs\n            if y > numbers.Head then\n                find_closest_elements' xs\n            else\n                Some (x, y)\n    find_closest_elements' numbers", "    let rec find_closest_elements_rec (numbers:list<float>) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let y = x + xs.[0]\n            if y < x then find_closest_elements_rec xs\n            else find_closest_elements_rec xs\n    find_closest_elements_rec numbers", "    let rec find_closest_elements' (numbers:list<float>) = \n        match numbers with \n        | [] -> []\n        | x::xs -> \n            let xs = find_closest_elements' xs\n            let xs = x::xs\n            xs\n    find_closest_elements' numbers", "    let rec find_closest_elements' (numbers:seq<float>) = \n        match numbers with\n        | [] -> None\n        | x::xs -> \n            let closest_number = x\n            let closest_number_list = find_closest_elements' xs\n            if closest_number_list.IsEmpty then None\n            else Some (closest_number_list.Head, closest_number_list.Tail)\n    find_closest_elements' numbers", "    let rec find_closest_elements' (numbers:list<float>) = \n        match numbers with\n        | [] -> []\n        | x::xs -> \n            let y = x + xs\n            if y <> x then find_closest_elements' xs\n            else find_closest_elements' xs\n    find_closest_elements' numbers", "    let rec find_closest_elements_numbers (numbers:list<float>) =\n        match numbers with\n        | [] -> None\n        | x::xs ->\n            let closest_number = find_closest_number x\n            if closest_number = None then\n                find_closest_elements_numbers xs\n            else\n                Some(closest_number, x)\n    find_closest_elements_numbers numbers", "    let rec find_closest_elements' (numbers:list<float>) =\n        match numbers with\n        | [] -> None\n        | x::xs ->\n            match find_closest_elements' xs with\n            | Some(y) -> Some(y)\n            | None -> find_closest_elements' xs\n    find_closest_elements' numbers", "    let rec find_closest_numbers (numbers:list<float>) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let y = x\n            if y < x then find_closest_numbers xs\n            else find_closest_numbers xs\n    find_closest_numbers numbers", "    let rec find_closest_elements' (numbers:list<float>) = \n        match numbers with\n        | [] -> None\n        | x::xs -> \n            let y = x + xs\n            if y <> x then \n                find_closest_elements' xs\n            else\n                Some(y)\n    find_closest_elements' numbers", "    let rec find_closest_elements' (numbers:list<float>) =\n        match numbers with\n        | [] -> None\n        | x::xs ->\n            let y = x + xs.[0]\n            if y < numbers.[0] then Some(y)\n            else find_closest_elements' xs\n    find_closest_elements' numbers", "    let rec find_closest_elements' (numbers:seq<float>) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let y = x + xs\n            if y > n then\n                y::find_closest_elements' xs\n            else\n                find_closest_elements' xs\n    find_closest_elements' numbers", "    let rec find_closest_numbers (numbers:list<float>) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let new_numbers = x::xs\n            if find_closest_numbers new_numbers then\n                new_numbers\n            else\n                find_closest_numbers new_numbers\n    find_closest_numbers numbers", "    let rec find_closest_elements' (numbers:list<float>) = \n        match numbers with\n        | [] -> None\n        | x::xs -> \n            let y = x + xs\n            if y < numbers.[0] then Some (x, y)\n            else find_closest_elements' xs\n    find_closest_elements' numbers", "    let rec find_closest_numbers (numbers:list<float>) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let y = x + xs\n            if y < numbers.[0] then find_closest_numbers xs\n            else find_closest_numbers numbers\n    find_closest_numbers numbers", "    let rec find_closest_elements' (numbers:list<float>) = \n        match numbers with\n        | [] -> []\n        | x::xs -> \n            let xs = x::xs\n            let xs = find_closest_elements' xs\n            xs\n    find_closest_elements' numbers", "    let rec find_closest_elements' (numbers:list<float>) = \n        match numbers with \n        | [] -> numbers\n        | x::xs -> \n            let xs' = find_closest_elements' xs\n            if xs' <> xs then find_closest_elements' xs'\n    find_closest_elements' numbers", "    let rec find_closest_numbers (numbers:list<float>) =\n        match numbers with\n        | [] -> None\n        | head::tail ->\n            let closest_number = head\n            let closest_numbers = find_closest_numbers tail\n            if closest_number < closest_numbers.Head then\n                closest_numbers\n            else\n                find_closest_numbers tail\n    find_closest_numbers numbers", "    let rec find_closest_elements' (numbers:seq<float>) =\n        match numbers with\n        | [] -> None\n        | x::xs ->\n            let y = x\n            if y <> x then\n                let ys = find_closest_elements' xs\n                if ys <> None then Some ys else find_closest_elements' xs\n            else find_closest_elements' xs\n    find_closest_elements' numbers"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}