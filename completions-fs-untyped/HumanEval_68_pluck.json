{"name": "HumanEval_68_pluck", "language": "fs", "prompt": "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nlet pluck arr = \n", "tests": "let test() = \n  let candidate = pluck\n  assert (candidate [4; 2; 3] = [2; 1])\n  assert (candidate [1; 2; 3] = [2; 1])\n  assert (candidate [] = [])\n  assert (candidate [5; 0; 3; 0; 4; 2] = [0; 1])\n  assert (candidate [1; 2; 3; 0; 5; 3] = [0; 3])\n  assert (candidate [5; 4; 8; 4; 8] = [4; 1])\n  assert (candidate [7; 6; 7; 1] = [6; 1])\n  assert (candidate [7; 9; 7; 1] = [])\n  0\n\ntest()", "completions": ["    let rec loop i = \n        if i < arr.length then \n            let value = arr.[i]\n            if value > 0 then \n                loop (i + 1)\n            else \n                arr.[i]\n        else \n            arr.[0]\n    loop 0", "    let rec loop i =\n        if i < arr.length then\n            let v = arr.[i]\n            if v <> 0 then loop (i + 1)\n            else i\n        else\n            i\n    loop 0", "    let rec loop i =\n        if i < arr.length then\n            let v = arr.[i]\n            if v <> 0 then\n                loop (i + 1)\n            else\n                arr.[i]\n        else\n            0\n    loop 0", "    let rec loop i =\n        if i = 0 then []\n        else\n            let node = arr.[i]\n            if node.value = 0 then loop (i-1)\n            else loop (i-1)\n    loop 0", "    let rec loop i =\n        if i < arr.length then\n            let value = arr.[i]\n            if value <> 0 then\n                let new_arr = Array.copy arr\n                new_arr.[i] <- value\n                loop (i+1)\n            else\n                new_arr\n        else\n            [|0..(arr.length-1)|]\n    loop 0", "    let rec loop i =\n        if i < arr.length then\n            let node = arr.[i]\n            if node.value > 0 then\n                node.value :: loop (i + 1)\n            else\n                [node]\n        else\n            []\n    loop 0", "    let rec loop i =\n        if i = 0 then\n            [0, i]\n        else\n            let n = arr.[i]\n            let n' = loop (i - 1)\n            if n = n' then\n                [n, i]\n            else\n                loop (i - 1)\n    loop 0", "    let rec loop i = \n        if i < arr.length then\n            let value = arr.[i]\n            let index = value % 2\n            if index = 0 then\n                arr.[i] <- arr.[i] + 1\n            else\n                arr.[i] <- arr.[i] - 1\n            loop (i + 1)\n        else\n            arr\n    loop 0", "    let rec loop i = \n        if i < arr.length then\n            let v = arr.[i]\n            if v <> 0 then loop (i+1)\n            else i\n        else\n            0\n    loop 0", "    let rec loop i =\n        if i = arr.length then\n            [arr.[0]]\n        else\n            let node = arr.[i]\n            let new_node = node.value\n            if new_node <> 0 then\n                loop (i + 1)\n            else\n                loop (i + 1)\n    loop 0", "    let rec loop i = \n        if i < arr.length then\n            let value = arr.[i]\n            if value <> 0 then\n                let new_value = value - 1\n                if new_value <> i then\n                    loop (new_value)\n                else\n                    loop (i + 1)\n            else\n                i\n        else\n            i\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop i = \n        if i < arr.length then\n            let value = arr.[i]\n            if value > 0 then\n                let next = loop (i + 1)\n                (value, next)\n            else\n                (i, i + 1)\n        else\n            (i, i + 1)\n    loop 0", "    let rec loop i = \n        if i < arr.length then\n            let node = arr.[i]\n            if node.value = 0 then\n                loop (i+1)\n            else\n                node\n        else\n            arr.[0]\n    loop 0", "    let rec loop i =\n        if i = arr.length then\n            [arr.[0]]\n        else\n            let node = arr.[i]\n            let new_node = node.value\n            if new_node > node.value then\n                loop (i + 1)\n            else\n                loop (i + 1)\n    loop 0", "    let rec loop i = \n        if i < arr.length then \n            let value = arr.[i]\n            if value > 0 then \n                loop (i + 1)\n            else \n                arr.[i]\n    loop 0", "    let rec loop i = \n        if i < arr.length then\n            let value = arr.[i]\n            if value > 0 then\n                let next = loop (i + 1)\n                (i, value)\n            else\n                (i, 0)\n        else\n            (i, 0)\n    loop 0", "    let rec loop i = \n        if i < arr.length then\n            let value = arr.[i]\n            if value = 0 then\n                loop (i + 1)\n            else\n                loop (i + 1)\n        else\n            arr\n    loop 0", "    let rec loop i = \n        if i < arr.length then \n            let node = arr.[i]\n            if node.value = 0 then loop (i+1)\n            else loop (i+1)\n        else []\n    loop 0", "    let rec loop i =\n        if i < arr.length then\n            let node = arr.[i]\n            if node.value < i then\n                loop (i + 1)\n            else\n                node\n        else\n            arr.[0]\n    loop 0"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}