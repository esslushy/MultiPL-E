{"name": "HumanEval_94_skjkasdkd", "language": "fs", "prompt": "//You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlet skjkasdkd lst = \n", "tests": "let test() = \n  let candidate = skjkasdkd\n  assert (candidate [0; 3; 2; 1; 3; 5; 7; 4; 5; 5; 5; 2; 181; 32; 4; 32; 3; 2; 32; 324; 4; 3] = 10)\n  assert (candidate [1; 0; 1; 8; 2; 4597; 2; 1; 3; 40; 1; 2; 1; 2; 4; 2; 5; 1] = 25)\n  assert (candidate [1; 3; 1; 32; 5107; 34; 83278; 109; 163; 23; 2323; 32; 30; 1; 9; 3] = 13)\n  assert (candidate [0; 724; 32; 71; 99; 32; 6; 0; 5; 91; 83; 0; 5; 6] = 11)\n  assert (candidate [0; 81; 12; 3; 1; 21] = 3)\n  assert (candidate [0; 8; 1; 2; 1; 7] = 7)\n  assert (candidate [8191] = 19)\n  assert (candidate [8191; 123456; 127; 7] = 19)\n  assert (candidate [127; 97; 8192] = 10)\n  0\n\ntest()", "completions": ["    let rec findMax (lst:int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            match x with\n            | 0 -> x\n            | x -> findMax xs\n    findMax lst", "    let rec skjkasdkd' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 0 -> skjkasdkd' (acc + x) xs\n            | 1 -> skjkasdkd' (acc + x) xs\n            | _ -> skjkasdkd' (acc + x) xs\n    skjkasdkd' 0 lst", "    let rec skjkasdkd' lst acc = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            let acc' = \n                match x with \n                | 0 -> acc\n                | 1 -> skjkasdkd' xs (acc + 1)\n                | _ -> acc\n            skjkasdkd' xs acc'\n    skjkasdkd' lst 0", "    let rec skjkasdkd' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let xs' = skjkasdkd' (acc + x) xs\n            skjkasdkd' (acc + x) xs'\n    skjkasdkd' 0 lst", "    let rec skjkasdkd' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 0 -> skjkasdkd' (acc + x) xs\n            | 1 -> skjkasdkd' (acc + x) xs\n            | _ -> skjkasdkd' (acc + x) xs\n    skjkasdkd' 0 lst", "    let rec skjkasdkd' lst acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            skjkasdkd' xs acc'\n    skjkasdkd' lst 0", "    let rec skjkasdkd' lst acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            skjkasdkd' xs (acc' + x)\n    skjkasdkd' lst 0", "    let rec skjkasdkd' lst acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            skjkasdkd' xs (acc' + x)\n    skjkasdkd' lst 0", "    let rec skjkasdkd' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 0 -> skjkasdkd' (acc + x) xs\n            | 1 -> skjkasdkd' (acc + x) xs\n            | _ -> skjkasdkd' (acc + x) xs\n    skjkasdkd' 0 lst", "    let rec skjkasdkd' lst acc = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            let acc' = acc + x\n            skjkasdkd' xs acc'\n    skjkasdkd' lst 0", "    let rec skjkasdkd' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 0 -> skjkasdkd' (acc + x) xs\n            | 1 -> skjkasdkd' (acc + x) xs\n            | _ -> skjkasdkd' (acc + x) xs\n    skjkasdkd' 0 lst", "    let rec skjkasdkd' lst acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | 0 -> skjkasdkd' xs (acc + x)\n            | 1 -> skjkasdkd' xs (acc + x)\n            | x ->\n                let x' = x - 1\n                skjkasdkd' xs (acc + x')\n    skjkasdkd' lst 0", "    let rec skjkasdkd' lst acc = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            match x with\n            | 0 -> skjkasdkd' xs (acc + x)\n            | 1 -> skjkasdkd' xs (acc + x)\n            | x -> \n                let x' = x - 1\n                skjkasdkd' xs (acc + x')\n    skjkasdkd' lst 0", "    let rec findMaxDigits (lst:int list) =\n        match lst with\n        | [] -> 0\n        | x::xs ->\n            let max = x::xs\n            let maxDigits = findMaxDigits max\n            maxDigits\n    findMaxDigits lst", "    let rec skjkasdkd' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 0 -> skjkasdkd' (acc + x) xs\n            | 1 -> skjkasdkd' (acc + x) xs\n            | _ -> skjkasdkd' (acc + x) xs\n    skjkasdkd' 0 lst", "    let rec skjkasdkd' lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            let xs' = x::xs\n            let xs'' = skjkasdkd' xs'\n            if xs'' = xs then xs''\n            else xs'' + xs'\n    skjkasdkd' lst", "    let rec skjkasdkd' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let xs' = x::xs\n            skjkasdkd' (acc + xs') xs'\n    skjkasdkd' 0 lst", "    let rec skjkasdkd' lst acc =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            let acc' = acc + x\n            skjkasdkd' xs (acc' + x)\n    skjkasdkd' lst 0", "    let rec skjkasdkd' lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | 0 -> skjkasdkd' xs\n            | x -> x * x\n    skjkasdkd' lst", "    let rec skjkasdkd' lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            match x with\n            | 0 -> 0\n            | 1 -> 1\n            | _ -> skjkasdkd' xs\n    skjkasdkd' lst"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}