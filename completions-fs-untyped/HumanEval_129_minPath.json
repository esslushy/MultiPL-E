{"name": "HumanEval_129_minPath", "language": "fs", "prompt": "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:\n// Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n// Output: [1, 2, 1]\n// Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n// Output: [1]\nlet minPath grid k = \n", "tests": "let test() = \n  let candidate = minPath\n  assert (candidate [[1; 2; 3]; [4; 5; 6]; [7; 8; 9]] 3 = [1; 2; 1])\n  assert (candidate [[5; 9; 3]; [4; 1; 6]; [7; 8; 2]] 1 = [1])\n  assert (candidate [[1; 2; 3; 4]; [5; 6; 7; 8]; [9; 10; 11; 12]; [13; 14; 15; 16]] 4 = [1; 2; 1; 2])\n  assert (candidate [[6; 4; 13; 10]; [5; 7; 12; 1]; [3; 16; 11; 15]; [8; 14; 9; 2]] 7 = [1; 10; 1; 10; 1; 10; 1])\n  assert (candidate [[8; 14; 9; 2]; [6; 4; 13; 15]; [5; 7; 1; 12]; [3; 10; 11; 16]] 5 = [1; 7; 1; 7; 1])\n  assert (candidate [[11; 8; 7; 2]; [5; 16; 14; 4]; [9; 3; 15; 6]; [12; 13; 10; 1]] 9 = [1; 6; 1; 6; 1; 6; 1; 6; 1])\n  assert (candidate [[12; 13; 10; 1]; [9; 3; 15; 6]; [5; 16; 14; 4]; [11; 8; 7; 2]] 12 = [1; 6; 1; 6; 1; 6; 1; 6; 1; 6; 1; 6])\n  assert (candidate [[2; 7; 4]; [3; 1; 5]; [6; 8; 9]] 8 = [1; 3; 1; 3; 1; 3; 1; 3])\n  assert (candidate [[6; 1; 5]; [3; 8; 9]; [2; 7; 4]] 8 = [1; 5; 1; 5; 1; 5; 1; 5])\n  assert (candidate [[1; 2]; [3; 4]] 10 = [1; 2; 1; 2; 1; 2; 1; 2; 1; 2])\n  assert (candidate [[1; 3]; [3; 2]] 10 = [1; 3; 1; 3; 1; 3; 1; 3; 1; 3])\n  0\n\ntest()", "completions": ["    let rec go n = \n        if n = 0 then []\n        else \n            let lst_A = List.init k (fun i -> grid.[i,i])\n            let lst_B = List.init k (fun i -> grid.[i,i])\n            let lst_A_B = List.map (fun x -> x, x) lst_A\n            let lst_B_A = List.map (fun x -> x, x) lst_B\n            let lst_A_B_A = List.map (fun x -> x, x) lst_A_B\n            let lst_A_B_A_B = List.map (fun x -> x, x) lst_A_B_A\n            let lst_A_B_A_B_A = List.map (fun x -> x, x) lst_A_B_A_B\n            let lst_A_B_A_B_A_B = List.map (fun x -> x, x) lst_A_B_A_B_A\n            let lst_A_B_A_B_A_B_A = List.map (fun x -> x, x) lst_A_B_A_B_A_B\n            let lst_A_B_A_B_A_B_A_B = List.map (fun x -> x, x) lst_A_B_A_B_A_B\n            let lst_A_B_A_B_A_B_A_B_A = List.map (fun x -> x, x) lst_A_B_A_B_A_B_A\n            let lst_A_B_A_B_A_B_A_B_A_B = List.map (fun x -> x, x) lst_A_B_A_B_A_B_A_B\n            let lst_A_B_A_B_A_B_A_B_A_B_A = List.map (fun x -> x, x) lst_A_B_A_B_A_B_A_B\n            let l", "    let rec go k = \n        if k = 0 then []\n        else \n            let lst_A = List.map (fun x -> x * x) grid\n            let lst_B = List.map (fun x -> x * x) grid\n            let rec go' k = \n                if k = 0 then []\n                else \n                    let lst_A = List.map (fun x -> x * x) grid\n                    let lst_B = List.map (fun x -> x * x) grid\n                    let rec go'' k = \n                        if k = 0 then []\n                        else \n                            let lst_A = List.map (fun x -> x * x) grid\n                            let lst_B = List.map (fun x -> x * x) grid\n                            let rec go''' k = \n                                if k = 0 then []\n                                else \n                                    let lst_A = List.map (fun x -> x * x) grid\n                                    let lst_B = List.map (fun x -> x * x) grid\n                                    let rec go'''' k = \n                                        if k = 0 then []\n                                        else \n                                            let lst_A = List.map (fun x -> x * x) grid\n                                            let lst_B = List.map (fun x -> x * x) grid\n                                            let rec go'''' k = \n                                                if k = 0 then []\n                                                else \n                                                    let lst_A = List.map (fun x -> x * x) grid\n                                                    let lst_B = List.map (fun x -> x * x) grid\n                                                    let rec go'''' k = \n                                                        if k = 0 then []\n                                                        else \n                                                            let lst_A = List.map (fun x -> x * x) grid\n                                                            let lst_B = List.map (fun x -> x * x) grid\n                                                            let rec go'''' k = \n                                                                if k = 0 then []\n                                                                else \n                                                                    let lst_A = List.map (fun x -> x * x) grid\n                                                                    let lst_B = List.map (fun x ->", "    let rec go lst_A lst_B = \n        match lst_A, lst_B with\n        | [], [] -> []\n        | [], _ -> []\n        | _, [] -> []\n        | _, _ -> \n            let min_i = \n                lst_A \n                |> List.map (fun x -> \n                    match x with\n                    | [] -> 0\n                    | xs -> List.min xs)\n                |> List.min\n            let min_j = \n                lst_B \n                |> List.map (fun x -> \n                    match x with\n                    | [] -> 0\n                    | xs -> List.min xs)\n                |> List.min\n            go (min_i :: lst_A) (min_j :: lst_B)\n    go [] []", "    let rec go n = \n        if n = 0 then []\n        else \n            let lst_A = List.map (fun x -> x - 1) grid\n            let lst_B = List.map (fun x -> x - 1) grid\n            let lst_A_min = List.min lst_A\n            let lst_B_min = List.min lst_B\n            if lst_A_min < lst_B_min then go (n - 1)\n            else go (n - 1)\n    go k", "    let rec go (lst_A:list<int>) (lst_B:list<int>) =\n        match lst_A, lst_B with\n        | [], [] -> []\n        | [], _ -> []\n        | _, [] -> []\n        | _, _ -> \n            let min_A = min lst_A\n            let min_B = min lst_B\n            let rec go_A (lst_A:list<int>) (lst_B:list<int>) =\n                match lst_A, lst_B with\n                | [], [] -> []\n                | [], _ -> []\n                | _, [] -> []\n                | _, _ -> \n                    let min_A = min lst_A\n                    let min_B = min lst_B\n                    let rec go_A_B (lst_A:list<int>) (lst_B:list<int>) =\n                        match lst_A, lst_B with\n                        | [], [] -> []\n                        | [], _ -> []\n                        | _, [] -> []\n                        | _, _ -> \n                            let min_A = min lst_A\n                            let min_B = min lst_B\n                            let rec go_A_B_B (lst_A:list<int>) (lst_B:list<int>) =\n                                match lst_A, lst_B with\n                                | [], [] -> []\n                                | [], _ -> []\n                                | _, [] -> []\n                                | _, _ -> \n                                    let min_A = min lst_A\n                                    let min_B = min lst_B\n                                    let rec go_A_B_B_B (lst_A:list<int>) (lst_B:list<int>) =\n                                        match lst_A, lst_B with\n                                        | [], [] -> []\n                                        | [], _ -> []\n                                        | _, [] -> []\n                                        | _, _ -> \n                                            let min_A = min lst_A\n                                            let min_B = min lst_B\n                                            let rec go_A", "    let rec go i j = \n        if i = 0 || j = 0 then []\n        else \n            let lst_A = List.init k (fun _ -> grid.[i,j])\n            let lst_B = List.init k (fun _ -> grid.[i-1,j])\n            let lst_A_B = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C_D = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C_D_E = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C_D_E_F = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C_D_E_F_G = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C_D_E_F_G_H = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C_D_E_F_G_H_I = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C_D_E_F_G_H_I_J = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C_D_E_F_G_H_I_J_K = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C_D_E_F_G_H_I_J_K_L = List.init k (fun _ -> grid.[i-1,j-1])\n            let lst_A_B_C_D_E_F_G_H_I_", "    let rec go n = \n        if n = 0 then []\n        else \n            let lst_A = List.map (fun x -> x, n) grid\n            let lst_B = List.map (fun x -> x, n) grid\n            let lst_A_min = List.min lst_A\n            let lst_B_min = List.min lst_B\n            if lst_A_min < lst_B_min then go (n - 1)\n            else go (n - 1)\n    go k", "    let rec go lst_A lst_B =\n        match lst_A, lst_B with\n        | [], [] -> []\n        | [], _ -> []\n        | [], _ -> []\n        | _, [] -> []\n        | _, _ ->\n            let min_i = List.min lst_A\n            let min_j = List.min lst_B\n            let min_k = List.min lst_A.[min_i]\n            let min_lst_A = go lst_A.[min_i] lst_A.[min_j]\n            let min_lst_B = go lst_A.[min_i] lst_B.[min_j]\n            let min_lst_A = go lst_A.[min_i] lst_A.[min_j]\n            let min_lst_B = go lst_A.[min_i] lst_B.[min_j]\n            let min_lst_A = go lst_A.[min_i] lst_A.[min_j]\n            let min_lst_B = go lst_A.[min_i] lst_B.[min_j]\n            let min_lst_A = go lst_A.[min_i] lst_A.[min_j]\n            let min_lst_B = go lst_A.[min_i] lst_B.[min_j]\n            let min_lst_A = go lst_A.[min_i] lst_A.[min_j]\n            let min_lst_B = go lst_A.[min_i] lst_B.[min_j]\n            let min_lst_A = go lst_A.[min_i] lst_A.[min_j]\n            let min_lst_B = go lst_A.[min_i] lst_B.[min_j]\n            let min_lst_A = go lst_A.[min_i] lst_A.[min_j]\n            let min_lst_B = go lst_A.[min_i] lst_", "    let rec go n = \n        if n = 0 then []\n        else \n            let lst_A = List.map (fun x -> x, n) grid\n            let lst_B = List.map (fun x -> x, n) grid\n            let lst_A_min = List.min lst_A\n            let lst_B_min = List.min lst_B\n            if lst_A_min < lst_B_min then go (n - 1)\n            else go (n - 1)\n    go k", "    let rec go i j = \n        if i = 0 then \n            if j = 0 then []\n            else [grid.[i-1,j-1]]\n        else \n            if j = 0 then [grid.[i-1,j]]\n            else go (i-1) (j-1)\n    go 0 0", "    let rec go (lst_A:list<int>) (lst_B:list<int>) =\n        match lst_A, lst_B with\n        | [], [] -> []\n        | [], _ -> []\n        | _, [] -> []\n        | _, _ ->\n            let min_i = min (min (List.length lst_A) (List.length lst_B))\n            let min_j = min (min (List.length lst_A) (List.length lst_B))\n            let lst_A_i = List.take min_i lst_A\n            let lst_A_j = List.take min_j lst_A\n            let lst_B_i = List.take min_i lst_B\n            let lst_B_j = List.take min_j lst_B\n            let lst_A_i_j = List.mapi (fun i j -> i,j) lst_A_i\n            let lst_A_i_j_k = List.mapi (fun i j k -> i,j,k) lst_A_i_j\n            let lst_B_i_j = List.mapi (fun i j -> i,j) lst_B_i\n            let lst_B_i_j_k = List.mapi (fun i j k -> i,j,k) lst_B_i_j\n            let lst_A_i_j_k = List.mapi (fun i j k -> i,j,k) lst_A_i_j\n            let lst_A_i_j_k_lst = List.mapi (fun i j k lst -> i,j,k,lst) lst_A_i_j_k\n            let lst_B_i_j_k_lst = List.mapi (fun i j k lst -> i,j,k,lst) lst_B_i_j_k\n            let lst_A_i_j_k_lst = List.mapi (fun i j k lst -> i,j,k,", "    let rec go lst_A lst_B =\n        match lst_A, lst_B with\n        | [], [] -> []\n        | [], _ -> []\n        | lst_A, lst_B -> \n            let min_i = min lst_A lst_B\n            let min_j = min lst_A lst_B\n            [min_i; min_j]\n    go grid [1..k]", "    let rec go (lst_A:list<int>) (lst_B:list<int>) =\n        match lst_A, lst_B with\n        | [], [] -> []\n        | [], _ -> []\n        | _, [] -> []\n        | _, _ -> \n            let min_i = lst_A.Min(lst_B)\n            let min_j = lst_A.Min(lst_B, min_i)\n            go (lst_A.Tail) (lst_B.Tail)\n            |> List.filter (fun x -> x < min_i)\n            |> List.map (fun x -> x, min_j)\n            |> List.sortBy (fun (x, y) -> x)\n            |> List.map (fun (x, y) -> x, y)\n            |> List.map (fun (x, y) -> x, y)\n            |> List.filter (fun (x, y) -> x < min_i)\n            |> List.map (fun (x, y) -> x, y)\n            |> List.sortBy (fun (x, y) -> x)\n            |> List.map (fun (x, y) -> x, y)\n            |> List.filter (fun (x, y) -> x < min_i)\n            |> List.map (fun (x, y) -> x, y)\n            |> List.sortBy (fun (x, y) -> x)\n            |> List.map (fun (x, y) -> x, y)\n            |> List.filter (fun (x, y) -> x < min_i)\n            |> List.map (fun (x, y) -> x, y)\n            |> List.sortBy (fun (x, y) -> x)\n            |> List.map (fun (x, y) -> x, y)\n            |> List.filter (fun (x, y) -> x < min_i)\n            |> List.map (fun (x, y) -> x, y)\n            |> List.sortBy (fun (x, y) -> x)", "    let rec go i j =\n        if i = 0 || j = 0 then []\n        else\n            let lst_A = List.map (fun x -> x + (if i = k then 1 else 0)) grid.[i-1]\n            let lst_B = List.map (fun x -> x + (if j = k then 1 else 0)) grid.[j-1]\n            let lst_A_B = List.map (fun x -> x + (if i = k then 1 else 0)) lst_A\n            let lst_B_A = List.map (fun x -> x + (if j = k then 1 else 0)) lst_B\n            if i = k then lst_A_B else lst_B_A\n    go 0 0", "    let rec go lst =\n        match lst with\n        | [] -> []\n        | hd::tl -> \n            match hd with\n            | hd when hd = k -> go tl\n            | _ -> go tl\n    go grid", "    let rec go lst_A lst_B = \n        match lst_A, lst_B with \n        | [], [] -> []\n        | [], _ -> []\n        | _, [] -> []\n        | lst_A, lst_B -> \n            let min_i = min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min (min", "    let rec go n = \n        if n = 0 then []\n        else \n            let lst_A = List.init n (fun i -> grid.[i])\n            let lst_B = List.init n (fun i -> grid.[i])\n            let rec go_lst n = \n                if n = 0 then []\n                else \n                    let lst_A = List.init n (fun i -> go_lst (i - 1))\n                    let lst_B = List.init n (fun i -> go_lst (i + 1))\n                    lst_A @ lst_B\n            go_lst n\n    go k", "    let rec go i j =\n        if i = 0 && j = 0 then []\n        elif i = 0 then [grid.[j]]\n        elif j = 0 then [grid.[i-1]]\n        elif j = k then [grid.[i-1]]\n        else go (i-1) (j-1)\n    go 0 0", "    let rec go i =\n        if i = k then\n            [0]\n        else\n            let lst_A = List.init i (fun j -> grid.[i,j])\n            let lst_B = List.init i (fun j -> grid.[i,j])\n            let lst_A_B = List.map (fun x -> x, x) lst_A\n            let lst_B_A = List.map (fun x -> x, x) lst_B\n            let lst_A_B_C = List.map (fun x -> x, x) lst_A_B\n            let lst_B_A_C = List.map (fun x -> x, x) lst_B_A\n            let lst_A_B_C_D = List.map (fun x -> x, x) lst_A_B_C\n            let lst_B_A_C_D = List.map (fun x -> x, x) lst_B_A_C\n            let lst_A_B_C_D_E = List.map (fun x -> x, x) lst_A_B_C_D\n            let lst_B_A_C_D_E = List.map (fun x -> x, x) lst_B_A_C_D\n            let lst_A_B_C_D_E = List.map (fun x -> x, x) lst_A_B_C_D_E\n            let lst_B_A_C_D_E = List.map (fun x -> x, x) lst_B_A_C_D_E\n            let lst_A_B_C_D_E_F = List.map (fun x -> x, x) lst_A_B_C_D_E_F\n            let lst_B_A_C_D_E_F = List.map (fun x -> x, x) lst_B_A_C_D_E_F\n            let lst_A_B_C_D_E_F_G = List.map (fun x -> x, x) lst_A", "    let rec go (lst : int list) (k : int) =\n        match lst with\n        | [] -> []\n        | h :: t ->\n            if k = h then\n                go t (k + 1)\n            else\n                go (h :: t) (k + 1)\n    go grid k"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}