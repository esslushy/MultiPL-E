{"name": "HumanEval_4_mean_absolute_deviation", "language": "fs", "prompt": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nlet mean_absolute_deviation numbers = \n", "tests": "let test() = \n  let candidate = mean_absolute_deviation\n  assert (candidate [1.0; 2.0] = 0.5)\n  assert (candidate [1.0; 2.0; 3.0; 4.0] = 1.0)\n  assert (candidate [1.0; 2.0; 3.0; 4.0; 5.0] = 1.2)\n  0\n\ntest()", "completions": ["    let mean = numbers |> Array.average\n    let x_mean = numbers |> Array.map (fun x -> x - mean) |> Array.average\n    x_mean", "    let mean = numbers |> Array.average\n    let x_mean = numbers |> Array.map (fun x -> x - mean) |> Array.average\n    x_mean", "    let mean = Seq.average numbers\n    let mean_deviation = Seq.map (fun x -> x - mean) numbers\n    let total_deviation = Seq.sum (Seq.map (fun x -> x - mean) numbers)\n    mean_deviation / total_deviation", "    let mean_deviation = \n        numbers \n        |> Seq.map (fun x -> x - x_mean)\n        |> Seq.average\n    mean_deviation", "    let mean = Seq.average numbers\n    let mean_deviation = Seq.map (fun x -> x - mean) numbers\n    Seq.sum mean_deviation", "    let mean = numbers |> Array.map (fun x -> x / float (numbers.Length)) |> Array.average\n    let x_mean = mean |> Array.map (fun x -> x * (float numbers.Length)) |> Array.average\n    let x_mean_sq = x_mean * x_mean\n    let x_mean_sq_sq = x_mean_sq * x_mean_sq\n    let x_mean_sq_sq_sq = x_mean_sq_sq * x_mean_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean_sq_sq_sq\n    let x_mean_sq_sq_sq_sq = x_mean_sq_sq_sq_sq * x_mean", "    let mean = numbers |> Array.sumBy (fun x -> x / float (numbers.Length))\n    let x_mean = mean / float (numbers.Length)\n    x_mean", "    let mean = numbers |> Array.average\n    let mean_deviation = numbers |> Array.sumBy (fun x -> abs(x - mean))\n    mean_deviation", "    let mean = Array.average numbers\n    let mean_deviation = Array.sum (Array.map (fun x -> abs (x - mean)) numbers)\n    mean_deviation", "    let mean = numbers |> Array.average\n    let mean_deviation = numbers |> Array.map (fun x -> x - mean) |> Array.average\n    mean_deviation", "    let mean = numbers |> Array.average\n    let mean_deviation = numbers |> Array.sumBy (fun x -> abs (x - mean))\n    mean_deviation", "    let mean = numbers |> Array.average\n    let x_mean = numbers |> Array.map (fun x -> x - mean) |> Array.average\n    x_mean", "    let mean_deviation = \n        numbers\n        |> Seq.map (fun x -> x - x_mean)\n        |> Seq.sum\n    mean_deviation / (float numbers.Length)", "    let mean = numbers |> Array.average\n    let mean_deviation = numbers |> Array.map (fun x -> x - mean) |> Array.average\n    mean_deviation", "    let mean_absolute_deviation_list = numbers |> List.map (fun x -> x - x_mean)\n    let mean_absolute_deviation_list = mean_absolute_deviation_list |> List.map (fun x -> x / x_mean)\n    mean_absolute_deviation_list", "    let mean = numbers |> Array.average\n    let mean_dev = numbers |> Array.map (fun x -> x - mean) |> Array.average\n    mean_dev", "    let mean_absolute_deviation_list = numbers |> List.map (fun x -> x - x_mean)\n    let mean_absolute_deviation_list = mean_absolute_deviation_list |> List.map (fun x -> x / x_mean)\n    mean_absolute_deviation_list", "    let mean_deviation = \n        numbers \n        |> Array.map (fun x -> x - x_mean)\n        |> Array.average\n    mean_deviation", "    let mean = numbers |> Array.average\n    let mean_deviation = numbers |> Array.map (fun x -> x - mean) |> Array.average\n    mean_deviation", "    let mean_abs_dev = \n        numbers\n        |> Array.map (fun x -> x - x_mean)\n        |> Array.average\n    mean_abs_dev"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}