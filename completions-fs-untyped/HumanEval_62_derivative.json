{"name": "HumanEval_62_derivative", "language": "fs", "prompt": "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nlet derivative xs = \n", "tests": "let test() = \n  let candidate = derivative\n  assert (candidate [3; 1; 2; 4; 5] = [1; 4; 12; 20])\n  assert (candidate [1; 2; 3] = [2; 6])\n  assert (candidate [3; 2; 1] = [2; 2])\n  assert (candidate [3; 2; 1; 0; 4] = [2; 2; 0; 16])\n  assert (candidate [1] = [])\n  0\n\ntest()", "completions": ["    let rec derivative' xs = \n        match xs with\n        | [] -> []\n        | x :: xs -> \n            let x' = x + xs.[0]\n            let x'' = x + xs.[1]\n            let x''' = x + xs.[2]\n            let x'''' = x + xs.[3]\n            let x''''' = x + xs.[4]\n            let x'''''' = x + xs.[5]\n            [x'; x'''; x'''''; x''''''' ]\n            |> List.map (fun (x', y') -> (x', y') + (x''', y'''))\n            |> derivative' xs\n    derivative' xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x :: xs -> derivative' (x::acc) xs\n    derivative' [] xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x :: xs -> derivative' (x :: acc) xs\n    derivative' [] xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x::xs -> derivative' (x::acc) xs\n    derivative' [] xs", "    let rec derivative' xs =\n        match xs with\n        | [] -> []\n        | x::xs ->\n            let x' = x + xs.[0]\n            let x'' = x + xs.[1]\n            let x''' = x + xs.[2]\n            let x'''' = x + xs.[3]\n            let x''''' = x + xs.[4]\n            let x'''''' = x + xs.[5]\n            [x'; x'''; x'''''; x''''''']\n    derivative' xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x :: xs -> derivative' (x :: acc) xs\n    derivative' [] xs", "    let rec derivative' xs = \n        match xs with\n        | [] -> []\n        | (x, y)::xs -> \n            let xs' = x::xs\n            let ys = derivative' xs'\n            ys @ ys\n    derivative' xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x::xs -> derivative' (acc + x) xs\n    derivative' 0 xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | (x, y)::tail -> derivative' (x::acc) tail\n    derivative' [] xs", "    let rec derivative' xs = \n        match xs with\n        | [] -> []\n        | x :: xs -> \n            let x' = x + xs.[0]\n            let x'' = x + xs.[1]\n            let x''' = x + xs.[2]\n            let x'''' = x + xs.[3]\n            let x''''' = x + xs.[4]\n            let x'''''' = x + xs.[5]\n            let x''''''' = x + xs.[6]\n            let x'''''''' = x + xs.[7]\n            let x''''''''' = x + xs.[8]\n            let x''''''''' = x + xs.[9]\n            let x''''''''''' = x + xs.[10]\n            let x''''''''''' = x + xs.[11]\n            let x''''''''''' = x + xs.[12]\n            let x''''''''''' = x + xs.[13]\n            let x''''''''''' = x + xs.[14]\n            let x''''''''''' = x + xs.[15]\n            let x''''''''''' = x + xs.[16]\n            let x''''''''''' = x + xs.[17]\n            let x''''''''''' = x + xs.[18]\n            let x''''''''''' = x + xs.[19]\n            let x''''''''''' = x + xs.[20]\n            let x''''''''''' = x + xs.[21]\n            let x''''''''''' = x + xs.[22]\n            let x''''''''''' = x + xs.[23]\n            let x''''''''''' = x + xs.[24]\n            let x''''''''''' = x + xs.[25]\n            let x''''''''''' = x + xs.[26]\n            let x''''''''''' = x + xs.[27]\n            let x''''''''", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x::xs -> derivative' (x::acc) xs\n    derivative' [] xs", "    let rec derivative' acc xs = \n        match xs with\n        | [] -> acc\n        | x :: xs -> derivative' (x :: acc) xs\n    derivative' [] xs", "    let rec derivative' xs =\n        match xs with\n        | [] -> []\n        | x :: xs ->\n            let x' = x - xs.[0]\n            let x'' = xs.[1] * x + xs.[2] * x^2\n            let x''' = x'' - xs.[3]\n            derivative' x''\n    derivative' xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x :: xs -> derivative' (acc + x) xs\n    derivative' 0 xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x :: xs -> derivative' (acc + x) xs\n    derivative' 0 xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x::xs -> derivative' (x::acc) xs\n    derivative' [] xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x::xs -> derivative' (x::acc) xs\n    derivative' [] xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x::xs -> derivative' (x::acc) xs\n    derivative' [] xs", "    let rec derivative' xs =\n        match xs with\n        | [] -> []\n        | x :: xs ->\n            let y = x - xs.[0]\n            let z = xs.[1] * y + xs.[2] * y^2\n            let w = xs.[3] * y + xs.[4] * y^2 * y\n            derivative' (x::xs)\n    derivative' xs", "    let rec derivative' acc xs =\n        match xs with\n        | [] -> acc\n        | x::xs -> derivative' (x::acc) xs\n    derivative' [] xs"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}