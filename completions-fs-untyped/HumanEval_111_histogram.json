{"name": "HumanEval_111_histogram", "language": "fs", "prompt": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram test = \n", "tests": "let test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()", "completions": ["    let rec histogram' (acc:Map<string,int>) (acc' : Map<string,int>) (str : string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable acc' = acc\n            let mutable acc = acc'\n            for i = 0 to str.Length - 1 do\n                let c = str.[i]\n                if acc.ContainsKey(c) then\n                    acc <- Map.add c (acc.Item(c)) acc\n                else\n                    acc <- Map.add c 1 acc\n            histogram' acc' acc' str\n    histogram' Map.empty Map.empty test", "    let rec histogram' (s:string) =\n        let rec histogram' (s:string) =\n            let mutable acc = 0\n            let mutable count = 0\n            for i in s do\n                if i = ' ' then\n                    acc <- acc + 1\n                else\n                    if i = '\\n' then\n                        count <- count + 1\n                    else\n                        acc <- acc + 1\n                    if count = 1 then\n                        acc <- acc + 1\n                    else\n                        acc <- acc + 1\n                    if count = 1 then\n                        acc <- acc + 1\n                    else\n                        acc <- acc + 1\n            if count = 0 then\n                acc\n            else\n                acc\n        histogram' test\n    histogram' test", "    let rec histogram' (acc:Dictionary<char,int>) (s:string) =\n        match s with\n        | \"\" -> acc\n        | _ ->\n            let mutable i = 0\n            let mutable res = Dictionary<char,int>()\n            while i < s.Length do\n                let c = s.[i]\n                if res.ContainsKey c then\n                    res.[c] <- res.[c] + 1\n                else\n                    res <- histogram' res (s.[i])\n                i <- i + 1\n            histogram' acc res\n    histogram' Map.empty test", "    let rec histogram' (acc: Dictionary<char, int>) (str: string) =\n        match str with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            for c in str do\n                if acc.ContainsKey c then\n                    acc.[c] <- acc.[c] + 1\n                else\n                    acc.Add(c, 1)\n            histogram' (acc |> Map.add ' ' count) str\n    histogram' Map.empty test", "    let rec histo acc = function\n        | 'a' -> acc + 1\n        | 'b' -> acc + 1\n        | 'c' -> acc + 1\n        | _ -> histo (acc + 1) (List.tail test)\n    histo 0 test", "    let rec histo acc = function\n        | [] -> acc\n        | x :: xs -> \n            match x with\n            | ' ' -> histo (acc + 1) xs\n            | '\\t' -> histo (acc + 1) xs\n            | '\\n' -> histo (acc + 1) xs\n            | '\\r' -> histo (acc + 1) xs\n            | x -> histo (acc + 1) xs\n    histo 0 test", "    let rec histogram' (s:string) = \n        match s with\n        | ' ' -> []\n        | '\\t' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n        | '\\r' -> []\n        | '\\n' -> []\n", "    let rec histogram' (s:string) = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let s = s.ToLower()\n            let rec histo' (s:string) = \n                match s with\n                | \"\" -> []\n                | _ -> \n                    let s = s.ToLower()\n                    if s.Contains(s) then \n                        let s = s.Substring(0, s.Length - 1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s = s.ToLower()\n                        let s = s.Substring(1)\n                        let s =", "    let rec histogram' (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) (acc:Dictionary<char,int>) =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        |", "    let rec histogram' acc = function\n        | 'a' -> acc\n        | 'b' -> histogram' (acc + 1) 'b'\n        | 'c' -> histogram' (acc + 1) 'c'\n        | _ -> acc\n    histogram' 0 test", "    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test", "    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs ->\n            let count = x.Length\n            if count = 0 then histogram' (acc + 1) xs\n            else histogram' (acc + count) (x::xs)\n    histogram' 0 test", "    let rec histogram' acc = function\n        | [] -> acc\n        | x :: xs -> histogram' (acc + 1) xs\n    histogram' 0 test", "    let rec histogram' (s:string) =\n        match s with\n        | \"\" -> Map.empty\n        | _ ->\n            let mutable count = 0\n            let mutable result = Map.empty\n            for letter in s do\n                if count = 0 then\n                    result <- Map.add letter count result\n                else\n                    let count = count + 1\n                    if count = 1 then\n                        result <- Map.add letter result\n                    else\n                        let newResult = Map.add letter (count - 1) result\n                        result <- Map.add letter newResult\n            result\n    histogram' test", "    let rec histogram' (s:string) =\n        let rec histogram' (s:string) =\n            let s = s.ToLower()\n            match s with\n            | \"a\" -> 1\n            | \"b\" -> 1\n            | \"c\" -> 1\n            | _ ->\n                let s = s.Substring(0, 1).ToLower()\n                match s with\n                | \"a\" -> 1\n                | \"b\" -> 1\n                | \"c\" -> 1\n                | _ ->\n                    let s = s.Substring(1)\n                    match s with\n                    | \"a\" -> 1\n                    | \"b\" -> 1\n                    | \"c\" -> 1\n                    | _ ->\n                        let s = s.Substring(1)\n                        match s with\n                        | \"a\" -> 1\n                        | \"b\" -> 1\n                        | \"c\" -> 1\n                        | _ ->\n                            let s = s.Substring(1)\n                            match s with\n                            | \"a\" -> 1\n                            | \"b\" -> 1\n                            | \"c\" -> 1\n                            | _ ->\n                                let s = s.Substring(1)\n                                match s with\n                                | \"a\" -> 1\n                                | \"b\" -> 1\n                                | \"c\" -> 1\n                                | _ ->\n                                    let s = s.Substring(1)\n                                    match s with\n                                    | \"a\" -> 1\n                                    | \"b\" -> 1\n                                    | \"c\" -> 1\n                                    | _ ->\n                                        let s = s.Substring(1)\n                                        match s with\n                                        | \"a\" -> 1\n                                        | \"b\" -> 1\n                                        | \"c\" -> 1\n                                        | _ ->\n                                            let s = s.Substring(1)\n                                            match s with\n                                            | \"a\" -> 1\n                                            | \"b\" -> 1\n                                            | \"c\" -> 1\n                                            | _ ->\n                                                let s = s.Substring(1)\n                                                match s with\n                                                | \"a\" -> 1\n                                                | \"b\" -> 1\n                                                | \"c\" -> 1\n                                                | _ ->", "    let rec histogram' (s:string) =\n        let s = s.ToLower()\n        match s with\n        | \"a\" -> 1\n        | \"b\" -> 1\n        | \"c\" -> 1\n        | _ ->\n            let rec histo' (s:string) =\n                match s with\n                | \"a\" -> 1\n                | \"b\" -> 1\n                | \"c\" -> 1\n                | _ ->\n                    let rec histo'' (s:string) =\n                        match s with\n                        | \"a\" -> 1\n                        | \"b\" -> 1\n                        | \"c\" -> 1\n                        | _ ->\n                            let rec histo''' (s:string) =\n                                match s with\n                                | \"a\" -> 1\n                                | \"b\" -> 1\n                                | \"c\" -> 1\n                                | _ ->\n                                    let rec histo''''' (s:string) =\n                                        match s with\n                                        | \"a\" -> 1\n                                        | \"b\" -> 1\n                                        | \"c\" -> 1\n                                        | _ ->\n                                            let rec histo''''''' (s:string) =\n                                                match s with\n                                                | \"a\" -> 1\n                                                | \"b\" -> 1\n                                                | \"c\" -> 1\n                                                | _ ->\n                                                    let rec histo''''''''' (s:string) =\n                                                        match s with\n                                                        | \"a\" -> 1\n                                                        | \"b\" -> 1\n                                                        | \"c\" -> 1\n                                                        | _ ->\n                                                            let rec histo''''''''''' (s:string) =\n                                                                match s with\n                                                                | \"a\" -> 1\n                                                                | \"b\" -> 1\n                                                                | \"c\" -> 1\n                                                                | _ ->\n                                                                    let rec histo''''''''''''' (s:string) =\n                                                                        match s with\n                                                                        | \"a\" -> 1\n                                                                        | \"b\" -> 1\n                                                                        | \"c\" -> 1\n                                                                        | _ ->\n                                                                            let rec histo''''''''''''''' (s", "    let rec histogram' (s:string) =\n        let mutable count = 0\n        let mutable result = Map.empty\n        for c in s do\n            if result.ContainsKey(c) then\n                result <- Map.add c (count + 1) result\n            else\n                result <- Map.add c 1 result\n        result\n    histogram' test", "    let rec histogram' (acc:Dictionary<char,int>) (s:string) =\n        match s with\n        | \"\" -> acc\n        | _ ->\n            let mutable count = 0\n            let mutable i = 0\n            while i < s.Length do\n                if acc.ContainsKey(s.[i]) then\n                    count <- count + 1\n                    acc.[s.[i]] <- count\n                else\n                    acc.Add(s.[i], count)\n                i <- i + 1\n            histogram' (acc.Add(\"\", count)) s.[i..]\n    histogram' (Dictionary()) test", "    let rec histogram' acc = function\n        | x::xs -> histogram' (acc + 1) xs\n        | [] -> acc\n    histogram' 0 test", "    let rec histogram' acc = function\n        | [] -> acc\n        | x::xs -> histogram' (acc + 1) xs\n    histogram' 0 test"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}