{"name": "HumanEval_78_hex_key", "language": "fs", "prompt": "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2.\nlet hex_key num = \n", "tests": "let test() = \n  let candidate = hex_key\n  assert (candidate \"AB\" = 1)\n  assert (candidate \"1077E\" = 2)\n  assert (candidate \"ABED1A33\" = 4)\n  assert (candidate \"2020\" = 2)\n  assert (candidate \"123456789ABCDEF0\" = 6)\n  assert (candidate \"112233445566778899AABBCCDDEEFF00\" = 12)\n  0\n\ntest()", "completions": ["    let rec hex_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit", "    let rec hex_digit num = \n        match num with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | 2 -> \"2\"\n        | 3 -> \"3\"\n        | 4 -> \"4\"\n        | 5 -> \"5\"\n        | 6 -> \"6\"\n        | 7 -> \"7\"\n        | 8 -> \"8\"\n        | 9 -> \"9\"\n        | A -> \"A\"\n        | B -> \"B\"\n        | C -> \"C\"\n        | D -> \"D\"\n        | E -> \"E\"\n        | F -> \"F\"\n        | _ -> failwith \"hex_digit: invalid number\"\n    hex_digit num", "    let rec hex_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit", "    let rec hex_digit num = \n        match num with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | 2 -> \"2\"\n        | 3 -> \"3\"\n        | 4 -> \"4\"\n        | 5 -> \"5\"\n        | 6 -> \"6\"\n        | 7 -> \"7\"\n        | 8 -> \"8\"\n        | 9 -> \"9\"\n        | 10 -> \"A\"\n        | 11 -> \"B\"\n        | 12 -> \"C\"\n        | 13 -> \"D\"\n        | 14 -> \"E\"\n        | 15 -> \"F\"\n        | _ -> failwith \"Invalid hexadecimal number.\"\n    hex_digit num", "    let rec hex_digit num = \n        match num with\n        | 0 -> 0\n        | 1 -> 1\n        | 2 -> 2\n        | 3 -> 3\n        | 4 -> 4\n        | 5 -> 5\n        | 6 -> 6\n        | 7 -> 7\n        | 8 -> 8\n        | 9 -> 9\n        | A -> 10\n        | B -> 11\n        | C -> 12\n        | D -> 13\n        | E -> 14\n        | F -> 15\n        | _ -> failwith \"Invalid hexadecimal number\"\n    hex_digit num", "    let rec hex_digit num = \n        match num with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | 2 -> \"2\"\n        | 3 -> \"3\"\n        | 4 -> \"4\"\n        | 5 -> \"5\"\n        | 6 -> \"6\"\n        | 7 -> \"7\"\n        | 8 -> \"8\"\n        | 9 -> \"9\"\n        | 10 -> \"A\"\n        | 11 -> \"B\"\n        | 12 -> \"C\"\n        | 13 -> \"D\"\n        | 14 -> \"E\"\n        | 15 -> \"F\"\n        | _ -> failwith \"Invalid hex_digit\"\n    hex_digit num", "    let rec hex_digit_num (digit:char) =\n        match digit with\n        | '0' -> 0\n        | '1' -> 1\n        | '2' -> 2\n        | '3' -> 3\n        | '4' -> 4\n        | '5' -> 5\n        | '6' -> 6\n        | '7' -> 7\n        | '8' -> 8\n        | '9' -> 9\n        | 'A' -> 10\n        | 'B' -> 11\n        | 'C' -> 12\n        | 'D' -> 13\n        | 'E' -> 14\n        | 'F' -> 15\n        | 'a' -> 16\n        | 'b' -> 17\n        | 'c' -> 18\n        | 'd' -> 19\n        | 'e' -> 20\n        | 'f' -> 21\n        | '0' -> 22\n        | '1' -> 23\n        | '2' -> 24\n        | '3' -> 25\n        | '4' -> 26\n        | '5' -> 27\n        | '6' -> 28\n        | '7' -> 29\n        | '8' -> 30\n        | '9' -> 31\n        | 'A' -> 32\n        | 'B' -> 33\n        | 'C' -> 34\n        | 'D' -> 35\n        | 'E' -> 36\n        | 'F' -> 37\n        | '0' -> 38\n        | '1' -> 39\n        | '2' -> 40\n        | '3' -> 41\n        | '4' -> 42\n        | '5' -> 43\n        | '6' -> 44\n        | '7' -> 45\n        | '8' -> 46\n        | '9' -> 47\n        | 'A' -> 48\n        | 'B' -> 49\n        | 'C' -> 50\n        | 'D' -> 51\n        | 'E' -> 52\n        | 'F' -> 53\n        | '0' -> 54\n        | '1' -> 55\n        | '2' -> 56\n        | '3' -> 57\n        | '4' -> 58\n        | '5' -> 59\n        | '6' -> 60\n        | '7", "    let rec hex_digit num = \n        match num with\n        | 0 -> 0\n        | 1 -> 1\n        | 2 -> 2\n        | 3 -> 3\n        | 4 -> 4\n        | 5 -> 5\n        | 6 -> 6\n        | 7 -> 7\n        | 8 -> 8\n        | 9 -> 9\n        | A -> 10\n        | B -> 11\n        | C -> 12\n        | D -> 13\n        | E -> 14\n        | F -> 15\n        | _ -> failwith \"Invalid hexadecimal number\"\n    hex_digit num", "    let mutable i = 0\n    let mutable j = 0\n    let mutable k = 0\n    let mutable l = 0\n    let mutable m = 0\n    let mutable n = 0\n    let mutable p = 0\n    let mutable q = 0\n    let mutable r = 0\n    let mutable s = 0\n    let mutable t = 0\n    let mutable u = 0\n    let mutable v = 0\n    let mutable w = 0\n    let mutable x = 0\n    let mutable y = 0\n    let mutable z = 0\n    let mutable z' = 0\n    let mutable z'' = 0\n    let mutable z''' = 0\n    let mutable z'''' = 0\n    let mutable z''''' = 0\n    let mutable z'''''' = 0\n    let mutable z''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' =", "    let rec hex_key_digit num = \n        match num with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | 2 -> \"2\"\n        | 3 -> \"3\"\n        | 4 -> \"4\"\n        | 5 -> \"5\"\n        | 6 -> \"6\"\n        | 7 -> \"7\"\n        | 8 -> \"8\"\n        | 9 -> \"9\"\n        | A -> \"A\"\n        | B -> \"B\"\n        | C -> \"C\"\n        | D -> \"D\"\n        | E -> \"E\"\n        | F -> \"F\"\n        | _ -> failwith \"hex_key_digit: invalid input\"\n    hex_key_digit num", "    let rec hex_digit num = \n        match num with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | 2 -> \"2\"\n        | 3 -> \"3\"\n        | 4 -> \"4\"\n        | 5 -> \"5\"\n        | 6 -> \"6\"\n        | 7 -> \"7\"\n        | 8 -> \"8\"\n        | 9 -> \"9\"\n        | 10 -> \"A\"\n        | 11 -> \"B\"\n        | 12 -> \"C\"\n        | 13 -> \"D\"\n        | 14 -> \"E\"\n        | 15 -> \"F\"\n        | _ -> failwith \"Invalid hexadecimal number.\"\n    hex_digit num", "    let rec hex_digit_digit (digit:char) = \n        match digit with\n        | '0' -> 0\n        | '1' -> 1\n        | '2' -> 2\n        | '3' -> 3\n        | '4' -> 4\n        | '5' -> 5\n        | '6' -> 6\n        | '7' -> 7\n        | '8' -> 8\n        | '9' -> 9\n        | 'A' -> 10\n        | 'B' -> 11\n        | 'C' -> 12\n        | 'D' -> 13\n        | 'E' -> 14\n        | 'F' -> 15\n        | _ -> failwith \"Invalid hexadecimal number.\"\n    let rec hex_digit (digit:char) = \n        match digit with\n        | '0' -> 0\n        | '1' -> 1\n        | '2' -> 2\n        | '3' -> 3\n        | '4' -> 4\n        | '5' -> 5\n        | '6' -> 6\n        | '7' -> 7\n        | '8' -> 8\n        | '9' -> 9\n        | 'A' -> 10\n        | 'B' -> 11\n        | 'C' -> 12\n        | 'D' -> 13\n        | 'E' -> 14\n        | 'F' -> 15\n        | _ -> failwith \"Invalid hexadecimal number.\"\n    hex_digit_digit num", "    let rec hex_digit num = \n        match num with\n        | 0 -> 0\n        | 1 -> 1\n        | 2 -> 2\n        | 3 -> 3\n        | 4 -> 4\n        | 5 -> 5\n        | 6 -> 6\n        | 7 -> 7\n        | 8 -> 8\n        | 9 -> 9\n        | 10 -> 10\n        | 11 -> 11\n        | 12 -> 12\n        | 13 -> 13\n        | _ -> failwith \"Invalid hexadecimal number\"\n    hex_digit num", "    let rec hex_digit num = \n        match num with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | 2 -> \"2\"\n        | 3 -> \"3\"\n        | 4 -> \"4\"\n        | 5 -> \"5\"\n        | 6 -> \"6\"\n        | 7 -> \"7\"\n        | 8 -> \"8\"\n        | 9 -> \"9\"\n        | 10 -> \"A\"\n        | 11 -> \"B\"\n        | 12 -> \"C\"\n        | 13 -> \"D\"\n        | 14 -> \"E\"\n        | 15 -> \"F\"\n        | _ -> failwith \"hex_digit: invalid input\"\n    hex_digit num", "    let rec hex_digit num = \n        match num with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | 2 -> \"2\"\n        | 3 -> \"3\"\n        | 4 -> \"4\"\n        | 5 -> \"5\"\n        | 6 -> \"6\"\n        | 7 -> \"7\"\n        | 8 -> \"8\"\n        | 9 -> \"9\"\n        | A -> \"A\"\n        | B -> \"B\"\n        | C -> \"C\"\n        | D -> \"D\"\n        | E -> \"E\"\n        | F -> \"F\"\n        | _ -> failwith \"Invalid hexadecimal number.\"\n    hex_digit num", "    let rec hex_digit_digit (digit:char) =\n        match digit with\n        | '0' -> 0\n        | '1' -> 1\n        | '2' -> 2\n        | '3' -> 3\n        | '4' -> 4\n        | '5' -> 5\n        | '6' -> 6\n        | '7' -> 7\n        | '8' -> 8\n        | '9' -> 9\n        | 'A' -> 10\n        | 'B' -> 11\n        | 'C' -> 12\n        | 'D' -> 13\n        | 'E' -> 14\n        | 'F' -> 15\n        | _ -> failwith \"Invalid hexadecimal number.\"\n    let rec hex_digit_digit_digit (digit:char) =\n        match digit with\n        | '0' -> 0\n        | '1' -> 1\n        | '2' -> 2\n        | '3' -> 3\n        | '4' -> 4\n        | '5' -> 5\n        | '6' -> 6\n        | '7' -> 7\n        | '8' -> 8\n        | '9' -> 9\n        | 'A' -> 10\n        | 'B' -> 11\n        | 'C' -> 12\n        | 'D' -> 13\n        | 'E' -> 14\n        | 'F' -> 15\n        | _ -> failwith \"Invalid hexadecimal number.\"\n    hex_digit_digit_digit num", "    let rec hex_digit num = \n        match num with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | 2 -> \"2\"\n        | 3 -> \"3\"\n        | 4 -> \"4\"\n        | 5 -> \"5\"\n        | 6 -> \"6\"\n        | 7 -> \"7\"\n        | 8 -> \"8\"\n        | 9 -> \"9\"\n        | 10 -> \"A\"\n        | 11 -> \"B\"\n        | 12 -> \"C\"\n        | 13 -> \"D\"\n        | 14 -> \"E\"\n        | 15 -> \"F\"\n        | _ -> failwith \"Invalid hexadecimal number\"\n    hex_digit num", "    let rec hex_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit", "    let rec hex_digit num = \n        match num with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | 2 -> \"2\"\n        | 3 -> \"3\"\n        | 4 -> \"4\"\n        | 5 -> \"5\"\n        | 6 -> \"6\"\n        | 7 -> \"7\"\n        | 8 -> \"8\"\n        | 9 -> \"9\"\n        | A -> \"A\"\n        | B -> \"B\"\n        | C -> \"C\"\n        | D -> \"D\"\n        | E -> \"E\"\n        | F -> \"F\"\n        | _ -> failwith \"Invalid hexadecimal number.\"\n    hex_digit num", "    let rec hex_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}