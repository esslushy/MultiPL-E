{"name": "HumanEval_26_remove_duplicates", "language": "fs", "prompt": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nlet remove_duplicates numbers = \n", "tests": "let test() = \n  let candidate = remove_duplicates\n  assert (candidate [] = [])\n  assert (candidate [1; 2; 3; 4] = [1; 2; 3; 4])\n  assert (candidate [1; 2; 3; 2; 4; 3; 5] = [1; 4; 5])\n  0\n\ntest()", "completions": ["    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with \n        | [] -> numbers\n        | head :: tail -> \n            let new_numbers = remove_duplicates_numbers tail\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_list (numbers:int list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let new_numbers = List.filter (fun x -> x < head) numbers\n            remove_duplicates_list new_numbers\n    remove_duplicates_list numbers", "    let rec remove_duplicates_rec (numbers:int list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = List.filter (fun x -> x <> head) numbers\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_rec (numbers:int list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let new_numbers = List.filter (fun x -> x <> head) numbers\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_rec (numbers:int list) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let new_numbers = remove_duplicates_rec xs\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_numbers (numbers:int list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let new_numbers = List.filter (fun x -> x <> head) numbers\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_rec (numbers:int list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let new_numbers = List.filter (fun x -> x < head) numbers\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_rec (numbers:int list) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let new_numbers = remove_duplicates_rec xs\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_numbers (numbers:int list) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let new_numbers = remove_duplicates_numbers xs\n            let new_numbers = remove_duplicates_numbers new_numbers\n            new_numbers\n    \n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers:int list) =\n        if numbers.Length = 0 then numbers\n        else\n            let left, right = List.partition (fun x -> x % 2 = 0) numbers\n            let left_numbers = remove_duplicates_numbers left\n            let right_numbers = remove_duplicates_numbers right\n            let new_numbers = List.append left_numbers right_numbers\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers:int list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = remove_duplicates_numbers tail\n            if head = new_numbers.Head then \n                new_numbers\n            else\n                remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_rec (numbers:int list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = remove_duplicates_rec tail\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_rec (numbers:int list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = List.filter (fun x -> x <> head) numbers\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_rec (numbers:int list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = remove_duplicates_rec tail\n            if head <> head then\n                new_numbers\n            else\n                remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_rec (numbers:int list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let new_numbers = List.filter (fun x -> x < head) numbers\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_rec (numbers:int list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = List.filter (fun x -> x < head) numbers\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_rec (numbers:int list) = \n        match numbers with \n        | [] -> numbers\n        | head :: tail -> \n            let new_numbers = remove_duplicates_rec tail\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_numbers n = \n        if n = 0 then []\n        else \n            let left, right = List.partition (fun x -> x % 2 = 0) numbers\n            let left_numbers = remove_duplicates_numbers left\n            let right_numbers = remove_duplicates_numbers right\n            left_numbers @ right_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_rec (numbers:int list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let new_numbers = remove_duplicates_rec tail\n            remove_duplicates_rec new_numbers\n    remove_duplicates_rec numbers", "    let rec remove_duplicates_numbers (numbers:int list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = remove_duplicates_numbers tail\n            let new_head = head\n            if head = new_head then new_numbers\n            else remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}