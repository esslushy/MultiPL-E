{"name": "HumanEval_132_is_nested", "language": "fs", "prompt": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested string = \n", "tests": "let test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()", "completions": ["    let rec is_nested_list list = \n        match list with \n        | [] -> false\n        | head :: tail -> is_nested_list tail && is_nested head\n    is_nested_list string", "    let rec is_nested_rec (string:string) = \n        match string with\n        | \"\" -> false\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"[]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        ", "    let rec is_nested_rec (string:string) = \n        if string.StartsWith(\"[[\") then \n            let rec is_nested_rec_rec (string:string) = \n                if string.StartsWith(\"[[\") then \n                    let rec is_nested_rec_rec_rec (string:string) = \n                        if string.StartsWith(\"[[\") then \n                            let rec is_nested_rec_rec_rec_rec (string:string) = \n                                if string.StartsWith(\"[[\") then \n                                    let rec is_nested_rec_rec_rec_rec (string:string) = \n                                        if string.StartsWith(\"[[\") then \n                                            let rec is_nested_rec_rec_rec_rec (string:string) = \n                                                if string.StartsWith(\"[[\") then \n                                                    let rec is_nested_rec_rec_rec_rec (string:string) = \n                                                        if string.StartsWith(\"[[\") then \n                                                            let rec is_nested_rec_rec_rec_rec (string:string) = \n                                                                if string.StartsWith(\"[[\") then \n                                                                    let rec is_nested_rec_rec_rec_rec (string:string) = \n                                                                        if string.StartsWith(\"[[\") then \n                                                                            let rec is_nested_rec_rec_rec_rec (string:string) = \n                                                                                if string.StartsWith(\"[[\") then \n                                                                                    let rec is_nested_rec_rec_rec_rec (string:string) = \n                                                                                        if string.StartsWith(\"[[\") then \n                                                                                            let rec is_nested_rec_rec_rec_rec (string:string) = \n                                                                                               if string.StartsWith(\"[[\") then \n                                                                                                   let rec is_nested_rec_rec_rec_rec (string:string) = \n                                                                                                       if string.StartsWith(\"[[\") then \n                                                                                                           let rec is_nested_rec_rec_rec_rec (string:string) =", "    let rec is_nested_rec (string:string) = \n        match string with \n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        ", "    let rec is_nested_rec (s:string) = \n        match s with \n        | \"\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n", "    let rec is_nested_rec (s:string) =\n        match s with\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '", "    let rec is_nested_rec (string:string) =\n        match string with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"[[\" -> true\n        | \"]]\" -> true\n        | \"[[\" -> true\n        | \"]]]\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | _ -> false\n    is_nested_rec string", "    let rec is_nested' (string:string) = \n        match string with\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"()\" -> true\n        | \"", "    let rec is_nested_rec (s:string) = \n        match s with\n        | \"\" -> false\n        | \"[\" -> true\n        | \"[]\" -> true\n        | \"[]\" -> true\n        | \"]\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        ", "    let rec is_nested_rec (s:string) = \n        match s.Length with\n        | 0 -> false\n        | _ -> \n            let rec is_nested_rec_inner (s:string) = \n                match s.Length with\n                | 0 -> false\n                | _ -> \n                    let rec is_nested_rec_inner_inner (s:string) = \n                        match s.Length with\n                        | 0 -> false\n                        | _ -> \n                            let rec is_nested_rec_inner_inner_inner (s:string) = \n                                match s.Length with\n                                | 0 -> false\n                                | _ -> \n                                    let rec is_nested_rec_inner_inner_inner_inner (s:string) = \n                                        match s.Length with\n                                        | 0 -> false\n                                        | _ -> \n                                            let rec is_nested_rec_inner_inner_inner_inner_inner (s:string) = \n                                                match s.Length with\n                                                | 0 -> false\n                                                | _ -> \n                                                    let rec is_nested_rec_inner_inner_inner_inner_inner (s:string) = \n                                                        match s.Length with\n                                                        | 0 -> false\n                                                        | _ -> \n                                                            let rec is_nested_rec_inner_inner_inner_inner_inner (s:string) = \n                                                                match s.Length with\n                                                                | 0 -> false\n                                                                | _ -> \n                                                                    let rec is_nested_rec_inner_inner_inner_inner_inner (s:string) = \n                                                                        match s.Length with\n                                                                        | 0 -> false\n                                                                        | _ -> \n                                                                            let rec is_nested_rec_inner_inner_inner_inner_inner (s:string) = \n                                                                                match s.Length with\n                                                                                | 0 -> false\n                                                                                | _ -> \n                                                                                    let rec is_nested_rec_inner_inner_inner_inner_inner (s:string) = \n                                                                                        match s.Length with\n                                                                                        | 0 -> false\n                               ", "    let rec is_nested_rec (substring:string) = \n        match substring with \n        | [] -> false\n        | head::tail -> is_nested_rec (head::tail)\n    is_nested_rec string", "    let rec is_nested_rec (substring:string) = \n        match substring with \n        | '[' -> is_nested_rec substring\n        | ']' -> is_nested_rec substring\n        | ']'.[0] -> is_nested_rec substring\n        | ']'.[1] -> is_nested_rec substring\n        | ']'.[2] -> is_nested_rec substring\n        | ']'.[3] -> is_nested_rec substring\n        | ']'.[4] -> is_nested_rec substring\n        | ']'.[5] -> is_nested_rec substring\n        | ']'.[6] -> is_nested_rec substring\n        | ']'.[7] -> is_nested_rec substring\n        | ']'.[8] -> is_nested_rec substring\n        | ']'.[9] -> is_nested_rec substring\n        | ']'.[10] -> is_nested_rec substring\n        | ']'.[11] -> is_nested_rec substring\n        | ']'.[12] -> is_nested_rec substring\n        | ']'.[13] -> is_nested_rec substring\n        | ']'.[14] -> is_nested_rec substring\n        | ']'.[15] -> is_nested_rec substring\n        | ']'.[16] -> is_nested_rec substring\n        | ']'.[17] -> is_nested_rec substring\n        | ']'.[18] -> is_nested_rec substring\n        | ']'.[19] -> is_nested_rec substring\n        | ']'.[20] -> is_nested_rec substring\n        | ']'.[21] -> is_nested_rec substring\n        | ']'.[22] -> is_nested_rec substring\n        | ']'.[23] -> is_nested_rec substring\n        | ']'.[24] -> is_nested_rec substring\n        | ']'.[25] -> is_nested_rec substring\n        | ']'.[26] -> is_nested_rec substring\n", "    let rec is_nested_rec (str:string) = \n        match str with\n        | '[' -> true\n        | ']' -> true\n        | ']' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true\n        | '(' -> true\n        | ')' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true\n        | '(' -> true\n        | ')' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true\n        | '(' -> true\n        | ')' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true\n        | '(' -> true\n        | ')' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true\n        | '(' -> true\n        | ')' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true\n        | '(' -> true\n        | ')' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true\n        | '(' -> true\n        | ')' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true\n        | '(' -> true\n        | ')' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true\n        | '(' -> true\n        | ')' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true\n        | '(' -> true\n        | ')' -> true\n        | '[' -> true\n        | ']' -> true\n        | '{' -> true\n        | '}' -> true", "    let rec is_nested_rec (str:string) = \n        match str with \n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '", "    let rec is_nested_rec (str:string) = \n        match str with\n        | \"()\" -> true\n        | \"(\" -> is_nested_rec \"(\"\n        | \")\" -> is_nested_rec \")\"\n        | \"{\" -> is_nested_rec \"{\"\n        | \"}\" -> is_nested_rec \"}\"\n        | \"[\" -> is_nested_rec \"[\"\n        | \"]\" -> is_nested_rec \"]\"\n        | \"{\" -> is_nested_rec \"{\"\n        | \"}\" -> is_nested_rec \"}\"\n        | _ -> false\n    is_nested_rec string", "    let rec is_nested_rec (str:string) = \n        if str.StartsWith(\"[[\") && str.EndsWith(\"]]\") then \n            let brackets = str.Substring(2, str.Length - 3)\n            let brackets = brackets.Split([| '[' |], StringSplitOptions.RemoveEmptyEntries)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.filter (fun x -> x.Length > 0)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.filter (fun x -> x.Length > 0)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.filter (fun x -> x.Length > 0)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.filter (fun x -> x.Length > 0)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.filter (fun x -> x.Length > 0)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.filter (fun x -> x.Length > 0)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.filter (fun x -> x.Length > 0)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.filter (fun x -> x.Length > 0)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.filter (fun x -> x.Length > 0)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.filter (fun x -> x.Length > 0)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let", "    let rec is_nested_rec (str:string) =\n        match str with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> false\n        | \")\" -> false\n        | \"[\" -> false\n        | \"]\" -> false\n        | \"{\" -> false\n        | \"}\" -> false\n        | \"(\" -> false\n        | \")\" -> false\n        | _ -> false\n    is_nested_rec string", "    let rec is_nested_rec (str:string) = \n        match str with \n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | _ -> false\n    is_nested_rec string", "    let rec is_nested_rec (str:string) = \n        match str with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> false\n        | \")\" -> false\n        | \"{\" -> false\n        | \"}\" -> false\n        | _ -> false\n    is_nested_rec string", "    let rec is_nested_rec (string:string) = \n        match string with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> false\n        | \")\" -> false\n        | \"{\" -> false\n        | \"}\" -> false\n        | _ -> false\n    is_nested_rec string"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}