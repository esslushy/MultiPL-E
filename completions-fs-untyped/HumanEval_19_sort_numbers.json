{"name": "HumanEval_19_sort_numbers", "language": "fs", "prompt": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers numbers = \n", "tests": "let test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()", "completions": ["    let rec sort_numbers' (numbers:string list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            let head = head.ToLower()\n            if head = 'zero' then \n                sort_numbers' tail\n            else \n                let tail = tail |> List.map (fun n -> n.ToLower())\n                if head = 'one' then \n                    sort_numbers' tail\n                else \n                    let tail = tail |> List.map (fun n -> n.ToLower())\n                    if head = 'two' then \n                        sort_numbers' tail\n                    else \n                        let tail = tail |> List.map (fun n -> n.ToLower())\n                        if head = 'three' then \n                            sort_numbers' tail\n                        else \n                            let tail = tail |> List.map (fun n -> n.ToLower())\n                            if head = 'four' then \n                                sort_numbers' tail\n                            else \n                                let tail = tail |> List.map (fun n -> n.ToLower())\n                                if head = 'five' then \n                                    sort_numbers' tail\n                                else \n                                    let tail = tail |> List.map (fun n -> n.ToLower())\n                                    if head = 'six' then \n                                        sort_numbers' tail\n                                    else \n                                        let tail = tail |> List.map (fun n -> n.ToLower())\n                                        if head = 'seven' then \n                                            sort_numbers' tail\n                                        else \n                                            let tail = tail |> List.map (fun n -> n.ToLower())\n                                            if head = 'eight' then \n                                                sort_numbers' tail\n                                            else \n                                                let tail = tail |> List.map (fun n -> n.ToLower())\n                                                if head = 'nine' then \n                                                    sort_numbers' tail\n                                                else \n                                                    let tail = tail |> List.map (fun n -> n.ToLower())\n                                                    if head = 'ten' then \n                                                        sort_numbers' tail\n                                                    else \n                               ", "    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head' = head.ToUpper()\n            if head' = 'Z' then\n                sort_numbers' tail\n            else\n                let tail' = tail |> List.map (fun n -> n.ToUpper())\n                if head' = 'Y' then\n                    sort_numbers' tail'\n                else\n                    sort_numbers' tail'\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head = head.Trim()\n            let tail = tail |> List.map (fun n -> n.Trim())\n            if head = \"zero\" then\n                tail\n            else\n                sort_numbers' tail\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers:string list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            let head_numbers = head.Split(' ')\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev)\n            let head_numbers = head_numbers |> List.map (fun x -> x.ToCharArray() |> Array.rev", "    let rec sort_numbers' (numbers:string list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let head = head.ToUpper()\n            let tail = tail |> List.rev\n            if head = 'Z' then \n                sort_numbers' tail\n            else \n                let tail = tail |> List.rev\n                if head = '0' then \n                    sort_numbers' tail\n                else \n                    let tail = tail |> List.rev\n                    if head = '1' then \n                        sort_numbers' tail\n                    else \n                        let tail = tail |> List.rev\n                        if head = '2' then \n                            sort_numbers' tail\n                        else \n                            let tail = tail |> List.rev\n                            if head = '3' then \n                                sort_numbers' tail\n                            else \n                                let tail = tail |> List.rev\n                                if head = '4' then \n                                    sort_numbers' tail\n                                else \n                                    let tail = tail |> List.rev\n                                    if head = '5' then \n                                        sort_numbers' tail\n                                    else \n                                        let tail = tail |> List.rev\n                                        if head = '6' then \n                                            sort_numbers' tail\n                                        else \n                                            let tail = tail |> List.rev\n                                            if head = '7' then \n                                                sort_numbers' tail\n                                            else \n                                                let tail = tail |> List.rev\n                                                if head = '8' then \n                                                    sort_numbers' tail\n                                                else \n                                                    let tail = tail |> List.rev\n                                                    if head = '9' then \n                                                        sort_numbers' tail\n                                                    else \n                                                        let tail = tail |> List.rev\n                                                        if head = '0' then \n                                                            sort_numbers' tail\n                                                        else \n                                                            let tail = tail |> List.rev\n                                                            if head = '1' then \n                                                                sort_numbers' tail\n                                                            else \n                                                                let tail", "    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToLower())\n            let head = head.ToUpper()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToCharArray()\n            let tail = tail |> List.map (fun x -> x.ToCharArray())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail = tail |> List.map (fun x -> x.ToString())\n            let head = head |> List.map (fun x -> x.ToString())\n            let tail", "    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head_numbers = head.Split(' ')\n            let head_numbers = head_numbers |> List.map (fun x -> int x)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let head_numbers = head_numbers |> List.map (fun x -> x + 1)\n            let head_numbers = head_numbers |> List.sort\n            let", "    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let x = x.ToCharArray()\n            let y = xs |> List.sort |> List.toArray\n            sort_numbers' (y::xs)\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head = head.Trim()\n            let tail = tail |> List.map (fun n -> n.Trim())\n            if head = \"zero\" then\n                tail\n            else\n                let tail = tail |> List.map (fun n -> n.Trim())\n                if head = \"one\" then\n                    tail\n                else\n                    let tail = tail |> List.map (fun n -> n.Trim())\n                    if head = \"two\" then\n                        tail\n                    else\n                        let tail = tail |> List.map (fun n -> n.Trim())\n                        if head = \"three\" then\n                            tail\n                        else\n                            let tail = tail |> List.map (fun n -> n.Trim())\n                            if head = \"four\" then\n                                tail\n                            else\n                                let tail = tail |> List.map (fun n -> n.Trim())\n                                if head = \"five\" then\n                                    tail\n                                else\n                                    let tail = tail |> List.map (fun n -> n.Trim())\n                                    if head = \"six\" then\n                                        tail\n                                    else\n                                        let tail = tail |> List.map (fun n -> n.Trim())\n                                        if head = \"seven\" then\n                                            tail\n                                        else\n                                            let tail = tail |> List.map (fun n -> n.Trim())\n                                            if head = \"eight\" then\n                                                tail\n                                            else\n                                                let tail = tail |> List.map (fun n -> n.Trim())\n                                                    if head = \"nine\" then\n                                                        tail\n                                                    else\n                                                        let tail = tail |> List.map (fun n -> n.Trim())\n                                                            if head = \"ten\" then\n                                                                tail\n                                                            else\n                                                                let tail = tail |> List.map (fun n -> n.Trim())\n                                                                    if head = \"eleven\" then\n                                                                        tail\n                                                                    else\n                                                                        let tail = tail |> List.map (fun n ->", "    let rec sort_numbers' n = \n        match n with\n        | 0 -> numbers\n        | 1 -> numbers\n        | 2 -> numbers\n        | 3 -> numbers\n        | 4 -> numbers\n        | 5 -> numbers\n        | 6 -> numbers\n        | 7 -> numbers\n        | 8 -> numbers\n        | 9 -> numbers\n        | _ -> numbers\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head_numbers = sort_numbers' tail\n            let head_numbers = head::head_numbers\n            sort_numbers' head_numbers\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers:string list) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let x = x.Trim()\n            let y = x.Substring(0,1)\n            let z = x.Substring(1)\n            if y <> z then \n                sort_numbers' xs\n            else\n                sort_numbers' y::xs\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun n -> n.ToLower())\n            let head = head.ToUpper()\n            let tail = tail |> List.map (fun n -> n.ToUpper())\n            let head = head.ToCharArray()\n            let tail = tail |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head |> List.map (fun n -> n.ToCharArray())\n            let head = head", "    let rec sort_numbers' (numbers:int list) = \n        match numbers with \n        | [] -> numbers\n        | x::xs -> \n            let x = x - 1\n            let y = xs.[x]\n            let z = xs.[y]\n            if z < x then sort_numbers' xs\n            elif z > x then sort_numbers' ys\n            else sort_numbers' (xs@ys)\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | x::xs ->\n            let x = x.ToCharArray() |> Array.rev\n            let y = xs |> List.rev |> List.sort\n            sort_numbers' y\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers:int list) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let x = x - 1\n            let y = x - numbers.[x]\n            if y < 0 then \n                sort_numbers' xs\n            else \n                sort_numbers' (xs @ [y])\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers:string list) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let x = x.Trim()\n            let y = x.Split(' ')\n            let z = y |> List.map (fun y -> y.Trim())\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n            let z = z |> List.map (fun z -> z |> List.map (fun y -> y.Trim()))\n", "    let rec sort_numbers' (numbers:string list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let head = head.Trim()\n            let tail = tail |> List.rev\n            if head = 'zero' then\n                sort_numbers' tail\n            else\n                let tail = tail |> List.rev\n                if head = 'one' then\n                    sort_numbers' tail\n                else\n                    let tail = tail |> List.rev\n                    if head = 'two' then\n                        sort_numbers' tail\n                    else\n                        let tail = tail |> List.rev\n                        if head = 'three' then\n                            sort_numbers' tail\n                        else\n                            let tail = tail |> List.rev\n                            if head = 'four' then\n                                sort_numbers' tail\n                            else\n                                let tail = tail |> List.rev\n                                if head = 'five' then\n                                    sort_numbers' tail\n                                else\n                                    let tail = tail |> List.rev\n                                    if head = 'six' then\n                                        sort_numbers' tail\n                                    else\n                                        let tail = tail |> List.rev\n                                        if head = 'seven' then\n                                            sort_numbers' tail\n                                        else\n                                            let tail = tail |> List.rev\n                                            if head = 'eight' then\n                                                sort_numbers' tail\n                                            else\n                                                let tail = tail |> List.rev\n                                                if head = 'nine' then\n                                                    sort_numbers' tail\n                                                else\n                                                    let tail = tail |> List.rev\n                                                    if head = 'ten' then\n                                                        sort_numbers' tail\n                                                    else\n                                                        let tail = tail |> List.rev\n                                                        if head = 'eleven' then\n                                                            sort_numbers' tail\n                                                        else\n                                                            let tail = tail |> List.rev\n                                                            if head = 'twelve' then\n                                                                sort_numbers' tail\n                                                            else\n                                                                let tail = tail |> List.rev\n                                                                if head = 'thirteen' then\n                                                                    sort_numbers", "    let rec sort_numbers' (numbers:string list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToLower())\n            if head = 'zero' then \n                sort_numbers' tail\n            else\n                let tail = tail |> List.map (fun x -> x.ToLower())\n                if head = 'one' then \n                    sort_numbers' tail\n                else\n                    let tail = tail |> List.map (fun x -> x.ToLower())\n                    if head = 'two' then \n                        sort_numbers' tail\n                    else\n                        let tail = tail |> List.map (fun x -> x.ToLower())\n                        if head = 'three' then \n                            sort_numbers' tail\n                        else\n                            let tail = tail |> List.map (fun x -> x.ToLower())\n                            if head = 'four' then \n                                sort_numbers' tail\n                            else\n                                let tail = tail |> List.map (fun x -> x.ToLower())\n                                if head = 'five' then \n                                    sort_numbers' tail\n                                else\n                                    let tail = tail |> List.map (fun x -> x.ToLower())\n                                    if head = 'six' then \n                                        sort_numbers' tail\n                                    else\n                                        let tail = tail |> List.map (fun x -> x.ToLower())\n                                        if head = 'seven' then \n                                            sort_numbers' tail\n                                        else\n                                            let tail = tail |> List.map (fun x -> x.ToLower())\n                                            if head = 'eight' then \n                                                sort_numbers' tail\n                                            else\n                                                let tail = tail |> List.map (fun x -> x.ToLower())\n                                                if head = 'nine' then \n                                                    sort_numbers' tail\n                                                else\n                                                    let tail = tail |> List.map (fun x -> x.ToLower())\n                                                    if head = 'ten' then \n                                                        sort_numbers", "    let rec sort_numbers' (numbers:int list) = \n        match numbers with \n        | [] -> numbers\n        | x::xs -> \n            let x = x - 1\n            let y = x - 1\n            if x <> y then \n                sort_numbers' (xs@[x])\n            else \n                sort_numbers' (xs@[y])\n    sort_numbers' numbers"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}