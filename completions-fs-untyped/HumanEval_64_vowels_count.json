{"name": "HumanEval_64_vowels_count", "language": "fs", "prompt": "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nlet vowels_count s = \n", "tests": "let test() = \n  let candidate = vowels_count\n  assert (candidate \"abcde\" = 2)\n  assert (candidate \"Alone\" = 3)\n  assert (candidate \"key\" = 2)\n  assert (candidate \"bye\" = 1)\n  assert (candidate \"keY\" = 2)\n  assert (candidate \"bYe\" = 1)\n  assert (candidate \"ACEDY\" = 3)\n  0\n\ntest()", "completions": ["    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable i = 0\n    let mutable count = 0\n    while i < s.Length && count < 2 do\n        if s.[i] = 'y' then count <- count + 1\n        i <- i + 1\n    count", "    let rec loop acc = \n        match s with\n        | \"\" -> acc\n        | _ -> \n            let mutable acc = acc + 1\n            for c in s do\n                if c = 'y' then acc <- acc - 1\n            loop acc\n    loop 0", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' || c = 'y' then\n            count <- count + 1\n    count", "    let rec loop i = \n        if i = s.Length then 0\n        else \n            match s.[i] with\n            | 'a' -> 1\n            | 'e' -> 1\n            | 'i' -> 1\n            | 'o' -> 1\n            | 'u' -> 1\n            | _ -> loop (i + 1)\n    loop 0", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let rec loop acc =\n        match s with\n        | \"\" -> acc\n        | _ ->\n            let mutable acc = acc\n            for c in s do\n                acc <- acc + (if c = 'y' then 1 else 0)\n            loop acc\n    loop 0", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let rec loop acc = \n        match s with\n        | \"\" -> acc\n        | \"a\" -> 1\n        | \"e\" -> 2\n        | \"i\" -> 3\n        | \"o\" -> 4\n        | \"u\" -> 5\n        | _ -> loop (acc + 1)\n    loop 0"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}