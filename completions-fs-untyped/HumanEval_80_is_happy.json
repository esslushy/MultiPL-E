{"name": "HumanEval_80_is_happy", "language": "fs", "prompt": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nlet is_happy s = \n", "tests": "let test() = \n  let candidate = is_happy\n  assert (candidate \"a\" = false)\n  assert (candidate \"aa\" = false)\n  assert (candidate \"abcd\" = true)\n  assert (candidate \"aabb\" = false)\n  assert (candidate \"adb\" = true)\n  assert (candidate \"xyy\" = false)\n  assert (candidate \"iopaxpoi\" = true)\n  assert (candidate \"iopaxioi\" = false)\n  0\n\ntest()", "completions": ["    let rec check_length l = \n        if l = 0 then true\n        elif s.[0] = s.[l-1] then check_length (l-1)\n        else false\n    check_length 0", "    let rec is_happy_rec s =\n        match s with\n        | \"\" -> false\n        | _ ->\n            let mutable is_happy_found = false\n            for i in 0..s.Length-1 do\n                if s.[i] = 'a' then\n                    is_happy_found <- true\n            is_happy_found\n    is_happy_rec s", "    let rec is_happy_rec s = \n        match s with\n        | \"\" -> true\n        | _ -> \n            let mutable i = 0\n            while i < s.Length && not (Char.IsLetter(s.[i])) do\n                i <- i + 1\n            i < s.Length && not (Char.IsLetter(s.[i]))\n    is_happy_rec s", "    let rec is_happy_rec s = \n        match s with\n        | \"\" -> false\n        | _ -> \n            let s = s.Trim()\n            if s.Length < 3 then false\n            else is_happy_rec s\n    is_happy_rec s", "    let rec check_length (s:string) =\n        if s.Length < 3 then\n            false\n        else\n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] <> s.[i-1] || s.[i] <> s.[i-2] || s.[i] <> s.[i-3] then\n                    check_length s.[i]\n                i <- i + 1\n    check_length s", "    let rec check_length n = \n        if n <= 3 then \n            true\n        else \n            let first_char = s.[0]\n            let second_char = s.[n-1]\n            if first_char = second_char then \n                check_length (n-1)\n            else \n                false\n    check_length 3", "    let rec check_length (s:string) =\n        if s.Length < 3 then\n            false\n        else\n            let mutable i = 0\n            while i < s.Length && not (Char.IsLetter(s.[i])) do\n                i <- i + 1\n            i < s.Length && s.[i] = s.[i-1]\n    check_length s", "    let rec check_length (length:int) (s:string) =\n        if length = 0 then\n            s.Length = 0\n        else\n            let first = s.Substring(0,length)\n            let second = s.Substring(length)\n            if first = second then\n                s.Length = length\n            else\n                check_length (length-1) second\n    check_length 3 s", "    let rec check_length (s:string) =\n        if s.Length <= 3 then\n            s.Length = 3\n        else\n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] = s.[i+1] && s.[i+1] = s.[i+2] && s.[i+2] = s.[i+3] then\n                    i <- i + 3\n                else\n                    i <- i + 1\n            check_length s.[i..]\n    check_length s", "    let rec is_happy_rec s = \n        match s with\n        | \"\" -> false\n        | _ -> \n            let mutable is_happy_rec_result = true\n            let mutable i = 0\n            while i < s.Length && not is_happy_rec_result do\n                if s.[i] = 'a' || s.[i] = 'b' || s.[i] = 'c' || s.[i] = 'd' || s.[i] = 'e' || s.[i] = 'f' || s.[i] = 'g' || s.[i] = 'h' || s.[i] = 'i' || s.[i] = 'j' || s.[i] = 'k' || s.[i] = 'l' || s.[i] = 'm' || s.[i] = 'n' || s.[i] = 'o' || s.[i] = 'p' || s.[i] = 'q' || s.[i] = 'r' || s.[i] = 's' || s.[i] = 't' || s.[i] = 'u' || s.[i] = 'v' || s.[i] = 'w' || s.[i] = 'x' || s.[i] = 'y' || s.[i] = 'z' || s.[i] = '0' || s.[i] = '1' || s.[i] = '2' || s.[i] = '3' || s.[i] = '4' || s.[i] = '5' || s.[i] = '6' || s.[i] = '7' || s.[i] = '8' || s.[i] = '9' || s.[i] = '.' || s.[i] = ',' || s.[i] = '+' || s.[i] = '/' || s.[i] = '*' || s.[i] = '-' || s.[i] = '?' || s.[i] = '.' || s.[i] = ',' || s.[i] = '.' || s.[i] = '.' || s.[i] = '.' || s.[i] = '.' || s.[i] = '.' || s.[i", "    let rec is_happy_rec s = \n        match s with\n        | [] -> false\n        | x::xs -> \n            if x = 'a' then is_happy_rec xs\n            else is_happy_rec xs\n    is_happy_rec s", "    let rec is_happy_rec s = \n        match s with\n        | \"\" -> false\n        | _ -> \n            let s = s.ToCharArray()\n            let mutable i = 0\n            let mutable is_happy = true\n            while i < s.Length && is_happy do\n                if s.[i] <> s.[i-1] then\n                    is_happy <- false\n                else\n                    i <- i + 1\n            is_happy_rec s\n    is_happy_rec s", "    let rec check_length (s:string) =\n        if s.Length < 3 then\n            false\n        else\n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] <> s.[i-1] then\n                    false\n                else\n                    i <- i + 1\n            check_length s\n    check_length s", "    let rec check_length l = \n        match l with\n        | [] -> false\n        | x::xs -> \n            if x = s then true\n            else check_length xs\n    check_length s", "    let rec is_happy_rec s = \n        match s with\n        | x when x.Length >= 3 && x.[0] = x.[1] && x.[2] = x.[3] -> \n            is_happy_rec (x.Substring(1,3))\n        | x when x.Length >= 3 && x.[0] = x.[1] && x.[2] = x.[3] -> \n            is_happy_rec (x.Substring(1,3))\n        | x when x.Length >= 3 && x.[0] = x.[1] && x.[2] = x.[3] -> \n            is_happy_rec (x.Substring(1,3))\n        | x when x.Length >= 3 && x.[0] = x.[1] && x.[2] = x.[3] -> \n            is_happy_rec (x.Substring(1,3))\n        | x when x.Length >= 3 && x.[0] = x.[1] && x.[2] = x.[3] -> \n            is_happy_rec (x.Substring(1,3))\n        | x when x.Length >= 3 && x.[0] = x.[1] && x.[2] = x.[3] -> \n            is_happy_rec (x.Substring(1,3))\n        | x when x.Length >= 3 && x.[0] = x.[1] && x.[2] = x.[3] -> \n            is_happy_rec (x.Substring(1,3))\n        | x when x.Length >= 3 && x.[0] = x.[1] && x.[2] = x.[3] -> \n            is_happy_rec (x.Substring(1,3))\n        | x when x.Length >= 3 && x.[0] = x.[1] && x.[2] = x.[3] -> \n            is_happy_rec (x.Substring(1,3))\n        | x when x.Length >= 3 && x.[0] = x.[1] && x.[2] = x.[3] -> \n            is_happy_rec (x.Substring(1,3))\n        | x when x", "    let rec check_length (s:string) = \n        if s.Length < 3 then \n            false\n        else \n            let mutable i = 0\n            while i < s.Length && not (Char.IsLetter(s.[i])) do\n                i <- i + 1\n            i < s.Length && not (Char.IsLetter(s.[i]))\n    check_length s", "    let rec is_happy_rec s = \n        match s with\n        | \"\" -> false\n        | _ -> \n            let mutable is_happy_rec_result = true\n            for i in 0 .. s.Length - 1 do\n                if s.[i] <> ' ' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\r' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <> '\\n' && s.[i] <> '\\r' && s.[i] <> '\\t' && s.[i] <", "    let rec is_happy_rec s = \n        match s with\n        | \"\" -> false\n        | _ -> \n            let s' = s.ToCharArray()\n            let s'' = s'.ToCharArray()\n            let s''' = s''.ToCharArray()\n            let s'''' = s''.ToCharArray()\n            let s''''' = s''.ToCharArray()\n            let s'''''' = s''.ToCharArray()\n            let s'''''' = s''.ToCharArray()\n            let s''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            let s'''''''' = s''.ToCharArray()\n            ", "    let rec check_length (length:int) (str:string) =\n        if length >= 3 then\n            str.Contains(s)\n        else\n            false\n    check_length 3 s", "    let rec check_length (s:string) =\n        if s.Length < 3 then\n            false\n        else\n            let mutable i = 0\n            while i < s.Length do\n                if s.[i] <> s.[i-1] || s.[i] <> s.[i-2] || s.[i] <> s.[i-3] then\n                    false\n                else\n                    i <- i + 1\n            check_length s\n    check_length s"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}