{"name": "HumanEval_159_eat", "language": "fs", "prompt": "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nlet eat number need remaining = \n", "tests": "let test() = \n  let candidate = eat\n  assert (candidate 5 6 10 = [11; 4])\n  assert (candidate 4 8 9 = [12; 1])\n  assert (candidate 1 10 10 = [11; 0])\n  assert (candidate 2 11 5 = [7; 0])\n  assert (candidate 4 5 7 = [9; 2])\n  assert (candidate 4 5 1 = [5; 0])\n  0\n\ntest()", "completions": ["    let remaining = remaining - number\n    if remaining < 0 then failwith \"You need to eat at least one number of carrots.\"\n    if remaining = 0 then failwith \"You need to eat at least one number of carrots.\"\n    if remaining = 1 then [number, 0]\n    else \n        let remaining = remaining - 1\n        if remaining = 0 then failwith \"You need to eat at least one number of carrots.\"\n        let number, remaining = eat (number, need, remaining)\n        if remaining = 0 then failwith \"You need to eat at least one number of carrots.\"\n        number, remaining", "    let rec eat' number need remaining = \n        match number, need, remaining with\n        | 0, 0, 0 -> [0, 0]\n        | 0, _, 0 -> [0, 0]\n        | _, 0, 0 -> [0, 0]\n        | _, _, 0 -> [0, 0]\n        | _, _, _ -> [0, 0]\n    eat' number need remaining", "    let rec eat (n, need, remaining) =\n        if n >= need then\n            [n, need - n, remaining]\n        else\n            eat (n + 1, need, remaining - n)\n    eat (number, need, remaining)", "    if number <= 0 || need <= 0 || remaining <= 0 then\n        [], 0\n    else\n        let remaining = remaining - number\n        let need = need - number\n        let remaining = remaining - need\n        let total = number + need + remaining\n        let eat = total - number + need + remaining\n        [eat], eat", "    let rec eat' number need remaining = \n        match number, need, remaining with\n        | 0, _, _ -> [0, 0]\n        | _, 0, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | n, n', n' when n = n' -> [n, n']\n        | n, n', n' -> eat' (n + 1) (n' - 1) (n' - 1)\n    eat' number need remaining", "    let rec eat (n, need, remaining) =\n        if n = need then\n            [n, remaining]\n        else\n            let left = remaining - n\n            if left = 0 then\n                [n, remaining]\n            else\n                eat (n - 1, need - n, left)\n    eat (number, need, remaining)", "    let rec eat' number need remaining =\n        match number, need, remaining with\n        | 0, 0, 0 -> [0, 0]\n        | 0, _, 0 -> [0, 0]\n        | _, 0, 0 -> [0, 0]\n        | _, _, 0 -> [0, 0]\n        | _, _, _ -> [0, 0]\n    eat' number need remaining", "    let remaining = remaining - number\n    let need = need - number\n    if remaining <= 0 then\n        [need, 0]\n    else\n        let total = need + number\n        let left = remaining - need\n        if left = 0 then\n            [total, 0]\n        else\n            let left = left / 2\n            let right = left + left\n            if right < 0 then\n                [total, 0]\n            else\n                let right = right / 2\n                let left = left + left\n                if left < 0 then\n                    [total, 0]\n                else\n                    let left = left + left\n                    if left < 0 then\n                        [total, 0]\n                    else\n                        let left = left + left\n                        if left < 0 then\n                            [total, 0]\n                        else\n                            let left = left + left\n                            if left < 0 then\n                                [total, 0]\n                            else\n                                let left = left + left\n                                if left < 0 then\n                                    [total, 0]\n                                else\n                                    let left = left + left\n                                    if left < 0 then\n                                        [total, 0]\n                                    else\n                                        let left = left + left\n                                        if left < 0 then\n                                            [total, 0]\n                                        else\n                                            let left = left + left\n                                            if left < 0 then\n                                                [total, 0]\n                                            else\n                                                let left = left + left\n                                                if left < 0 then\n                                                    [total, 0]\n                                                else\n                                                    let left = left + left\n                                                    if left < 0 then\n                                                        [total, 0]\n                                                    else\n                                                        let left = left + left\n                                                        if left < 0 then\n                                                            [total, 0]\n                                                        else\n                                                            let left = left + left\n                                                            if left < 0 then\n                                                                 [total, 0]\n                                                            else\n                                                                 let left = left + left\n                                                                 if left < 0 then\n                                                                     [total, 0]\n                                                                 else\n                                                                     let left = left + left\n                                                                     if left < 0 then\n                                                                         [total, 0]\n                                                                     else\n                                                                         let left = left + left", "    let rec eat' number need remaining = \n        match need with\n        | 0 -> remaining\n        | _ -> eat' (number - 1) (need - 1) (remaining - 1)\n    eat' number number number number number number", "    let rec eat (n, n', n'') = \n        if n = 0 then \n            if n'' = 0 then \n                [n, n'']\n            else \n                eat (n'', n'', n'')\n        else \n            if n'' = 0 then \n                [n, n]\n            else \n                eat (n, n', n'')\n    eat (number, need, remaining)", "    let rec eat' number need remaining =\n        match number, need, remaining with\n        | 0, 0, 0 -> [0, 0]\n        | 0, _, 0 -> [0, 0]\n        | _, 0, 0 -> [0, 0]\n        | _, _, 0 -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | n, n', n' -> if n' = n then [n, n'] else eat' n n'\n    eat' number need remaining", "    let rec eat' number need remaining = \n        match number, need, remaining with\n        | 0, 0, 0 -> [0, 0]\n        | 0, _, _ -> [0, 0]\n        | _, 0, 0 -> [0, 0]\n        | _, _, _ -> \n            let remaining' = remaining - need\n            if remaining' = 0 then [0, 0]\n            else eat' (number - 1) (need - 1) (remaining' - 1)\n    eat' number need remaining", "    let remaining = remaining - number\n    let need = need - number\n    if remaining <= 0 then [need]\n    else\n        let total = need + number\n        if total <= 0 then [0]\n        else\n            let eat = total / number\n            if eat >= need then [eat]\n            else\n                let remaining = remaining - eat\n                if remaining <= 0 then [0]\n                else\n                    let eat = remaining / number\n                    if eat >= need then [eat]\n                    else\n                        let remaining = remaining - eat\n                        if remaining <= 0 then [0]\n                        else\n                            let eat = remaining / number\n                            if eat >= need then [eat]\n                            else\n                                let remaining = remaining - eat\n                                if remaining <= 0 then [0]\n                                else\n                                    let eat = remaining / number\n                                    if eat >= need then [eat]\n                                    else\n                                        let remaining = remaining - eat\n                                        if remaining <= 0 then [0]\n                                        else\n                                            let eat = remaining / number\n                                            if eat >= need then [eat]\n                                            else\n                                                let remaining = remaining - eat\n                                                if remaining <= 0 then [0]\n                                                else\n                                                    let eat = remaining / number\n                                                    if eat >= need then [eat]\n                                                    else\n                                                        let remaining = remaining - eat\n                                                        if remaining <= 0 then [0]\n                                                        else\n                                                            let eat = remaining / number\n                                                            if eat >= need then [eat]\n                                                            else\n                                                                let remaining = remaining - eat\n                                                                if remaining <= 0 then [0]\n                                                                else\n                                                                    let eat = remaining / number\n                                                                    if eat >= need then [eat]\n                                                                    else\n                                                                        let remaining = remaining - eat\n                                                                        if remaining <= 0 then [0]\n                                                                        else\n                                                                            let eat = remaining / number\n                                                                            if eat >= need then [eat]\n                                                                            else\n                                                                                let remaining = remaining - eat\n                                                                                if remaining <= 0 then [0]\n                                                                                else\n                                                                                    let eat = remaining / number\n                                                                                    if eat >= need then [eat]\n                                                                                    else\n                                                                                        let remaining =", "    let rec eat' number need remaining =\n        match need with\n        | 0 -> [number, remaining]\n        | n -> \n            if n = 0 then [number, remaining]\n            else eat' (number - n) (need - n) (remaining - n)\n    eat' number number (need - number) (remaining - number)", "    let rec eat (n, n', n'') =\n        if n = 0 then\n            n''\n        else\n            let n''' = n'' + n\n            if n''' = n'' then\n                n'''\n            else\n                eat (n''', n''', n''')\n    eat (n, n, n'')", "    let rec eat' number need remaining =\n        match number, need, remaining with\n        | 0, 0, 0 -> [0, 0]\n        | 0, _, 0 -> [0, 0]\n        | _, 0, 0 -> [0, 0]\n        | _, _, 0 -> [0, 0]\n        | _, _, _ ->\n            let left = eat' (number - 1) (need - 1) (remaining - 1)\n            let right = eat' (number + 1) (need + 1) (remaining - 1)\n            left @ right\n    eat' number number number", "    let rec eat' number need remaining =\n        match number, need, remaining with\n        | 0, 0, 0 -> [0, 0]\n        | 0, _, 0 -> [0, 0]\n        | _, 0, 0 -> [0, 0]\n        | _, _, 0 -> [0, 0]\n        | _, _, _ -> [0, 0]\n    eat' number need remaining", "    let rec eat' (n:int) (need:int) (remaining:int) =\n        if n >= need then\n            [n-need]\n        else\n            let n' = n + need\n            if n' >= remaining then\n                [n']\n            else\n                eat' n' need remaining\n    eat' number 0 0", "    let remaining = remaining - number\n    let need = need - number\n    if remaining <= 0 then\n        [0, 0]\n    else\n        let total = number + need\n        let left = remaining - total\n        if left < 0 then\n            [0, 0]\n        else\n            let left = left / 2\n            let right = left + left\n            if right < 0 then\n                [0, 0]\n            else\n                let right = right / 2\n                let left = left + left\n                if left < 0 then\n                    [0, 0]\n                else\n                    let left = left / 2\n                    let right = left + left\n                    if right < 0 then\n                        [0, 0]\n                    else\n                        let left = left / 2\n                        let right = left + left\n                        if right < 0 then\n                            [0, 0]\n                        else\n                            let left = left / 2\n                            let right = left + left\n                            if right < 0 then\n                                [0, 0]\n                            else\n                                let left = left / 2\n                                let right = left + left\n                                if right < 0 then\n                                    [0, 0]\n                                else\n                                    let left = left / 2\n                                    let right = left + left\n                                    if right < 0 then\n                                        [0, 0]\n                                    else\n                                        let left = left / 2\n                                        let right = left + left\n                                        if right < 0 then\n                                            [0, 0]\n                                        else\n                                            let left = left / 2\n                                            let right = left + left\n                                            if right < 0 then\n                                                [0, 0]\n                                            else\n                                                let left = left / 2\n                                                let right = left + left\n                                                if right < 0 then\n                                                    [0, 0]\n                                                else\n                                                    let left = left / 2\n                                                    let right = left + left\n                                                    if right < 0 then\n                                                        [0, 0]\n                                                    else\n                                                        let left = left / 2\n                                                        let right = left + left\n                                                        if right < 0 then\n                                                            [0, 0]\n                                                        else\n                                                            let left = left / 2\n                                                            let right = left + left\n                               ", "    let rec eat' number need remaining = \n        match number, need, remaining with\n        | 0, 0, 0 -> [0, 0]\n        | 0, _, 0 -> [0, 0]\n        | _, 0, 0 -> [0, 0]\n        | _, _, 0 -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        | _, _, _ -> [0, 0]\n        |"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}