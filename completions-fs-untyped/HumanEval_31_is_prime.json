{"name": "HumanEval_31_is_prime", "language": "fs", "prompt": "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nlet is_prime n = \n", "tests": "let test() = \n  let candidate = is_prime\n  assert (candidate 6 = false)\n  assert (candidate 101 = true)\n  assert (candidate 11 = true)\n  assert (candidate 13441 = true)\n  assert (candidate 61 = true)\n  assert (candidate 4 = false)\n  assert (candidate 1 = false)\n  assert (candidate 5 = true)\n  assert (candidate 11 = true)\n  assert (candidate 17 = true)\n  assert (candidate 85 = false)\n  assert (candidate 77 = false)\n  assert (candidate 255379 = false)\n  0\n\ntest()", "completions": ["    let rec is_prime_n n = \n        if n = 0 then true\n        elif n % 2 = 0 then is_prime_n (n / 2)\n        else false\n    is_prime_n n", "    let rec check n =\n        if n = 0 then\n            true\n        else\n            let rec check_prime n =\n                if n = 1 then\n                    true\n                else\n                    let rec check_prime_n n =\n                        if n = 2 then\n                            true\n                        else\n                            let rec check_prime_n_n =\n                                if n = 3 then\n                                    true\n                                else\n                                    let rec check_prime_n_n_n =\n                                        if n = 4 then\n                                            true\n                                        else\n                                            let rec check_prime_n_n_n_n =\n                                                if n = 5 then\n                                                    true\n                                                else\n                                                    let rec check_prime_n_n_n_n_n =\n                                                        if n = 6 then\n                                                            true\n                                                        else\n                                                            let rec check_prime_n_n_n_n_n_n_n_n =\n                                                                if n = 7 then\n                                                                    true\n                                                                else\n                                                                    let rec check_prime_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_", "    let rec is_prime_n n =\n        if n = 0 then\n            true\n        else\n            let n' = n - 1\n            if n' = 0 then\n                false\n            else\n                is_prime_n n'\n    is_prime_n n", "    let rec check n = \n        if n = 0 then true\n        elif n = 1 then false\n        else check (n-1)\n    check n", "    let rec is_prime_n n = \n        if n = 0 then true\n        elif n = 1 then false\n        else is_prime_n (n-1)\n    is_prime_n n", "    let rec is_prime_n n = \n        if n = 0 then true\n        elif n = 1 then false\n        else is_prime_n (n-1)\n    is_prime_n n", "    let rec is_prime_n n = \n        if n = 0 then true\n        elif n % 2 = 0 then is_prime_n (n / 2)\n        else false\n    is_prime_n n", "    let rec is_prime_n n = \n        if n = 0 then true\n        elif n = 1 then false\n        else is_prime_n (n-1)\n    is_prime_n n", "    let rec is_prime_n n = \n        if n = 0 then true\n        elif n = 1 then false\n        else is_prime_n (n - 1)\n    is_prime_n n", "    let rec is_prime_n n = \n        if n = 0 then true\n        elif n = 1 then false\n        else is_prime_n (n - 1)\n    is_prime_n n", "    let rec is_prime_rec n = \n        if n = 0 then true\n        elif n = 1 then false\n        elif n % 2 = 0 then is_prime_rec (n / 2)\n        else is_prime_rec (n / 2)\n    is_prime_rec n", "    let rec is_prime_rec n = \n        if n = 0 then false\n        elif n % 2 = 0 then is_prime_rec (n / 2)\n        else is_prime_rec (n / 2)\n    is_prime_rec n", "    let rec is_prime_n n =\n        if n = 0 then true\n        elif n % 2 = 0 then is_prime_n (n / 2)\n        else false\n    is_prime_n n", "    let rec is_prime_n n = \n        if n = 0 then true\n        elif n = 1 then false\n        else is_prime_n (n-1)\n    is_prime_n n", "    let rec is_prime_n n = \n        if n = 0 then true\n        elif n % 2 = 0 then is_prime_n (n / 2)\n        else false\n    is_prime_n n", "    let rec is_prime_n n = \n        if n = 0 then true\n        elif n = 1 then false\n        else is_prime_n (n-1)\n    is_prime_n n", "    let rec is_prime_n n =\n        if n = 0 then true\n        elif n % 2 = 0 then is_prime_n (n / 2)\n        else false\n    is_prime_n n", "    let rec is_prime_n n = \n        if n = 0 then false\n        elif n % 2 = 0 then is_prime_n (n / 2)\n        else is_prime_n (n / 2) && is_prime_n (n / 3)\n    is_prime_n n", "    let rec check_prime_n n = \n        if n = 0 then true\n        elif n = 1 then false\n        elif n % 2 = 0 then check_prime_n (n / 2)\n        else check_prime_n (n / 2) && check_prime_n (n / 3)\n    check_prime_n n", "    let rec is_prime_n n = \n        if n = 0 then true\n        elif n = 1 then false\n        else is_prime_n (n-1)\n    is_prime_n n"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}