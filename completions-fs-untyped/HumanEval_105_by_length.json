{"name": "HumanEval_105_by_length", "language": "fs", "prompt": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n// If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\nlet by_length arr = \n", "tests": "let test() = \n  let candidate = by_length\n  assert (candidate [2; 1; 1; 4; 5; 8; 2; 3] = [\"Eight\"; \"Five\"; \"Four\"; \"Three\"; \"Two\"; \"Two\"; \"One\"; \"One\"])\n  assert (candidate [] = [])\n  assert (candidate [1; -1; 55] = [\"One\"])\n  assert (candidate [1; -1; 3; 2] = [\"Three\"; \"Two\"; \"One\"])\n  assert (candidate [9; 4; 8] = [\"Nine\"; \"Eight\"; \"Four\"])\n  0\n\ntest()", "completions": ["    let rec loop i = \n        if i >= arr.Length then []\n        else \n            let x = arr.[i]\n            let y = arr.[i+1]\n            [x;y]\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let curr = arr.[i]\n            if curr <> 0 then loop (i+1)\n            else loop (i+1)\n        else []\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let elem = arr.[i]\n            if elem <> 0 then loop (i+1)\n            else loop (i+1)\n        else\n            arr\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let v = arr.[i]\n            if v > 0 then loop (i + 1)\n            else loop (i + 1)\n        else []\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let x = arr.[i]\n            if x <> 0 then loop (i+1)\n            else loop (i+1)\n        else []\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            loop (i + 1)\n        else \n            arr\n    loop 0", "    let rec loop i = \n        if i = 0 then []\n        else \n            let x = arr.[i-1]\n            let y = arr.[i]\n            loop (i-1)\n            [x; y]\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let elem = arr.[i]\n            if elem = '1' then \n                loop (i+1)\n            else \n                loop (i+1)\n        else \n            arr\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let x = arr.[i]\n            let y = loop (i + 1)\n            [x; y]\n        else\n            []\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let x = arr.[i]\n            if x > 0 then loop (i + 1)\n            else loop (i + 1)\n        else []\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc + x) xs\n    loop 0 arr", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] arr", "    let rec loop i = \n        if i < arr.Length then \n            let x = arr.[i]\n            let y = loop (i+1)\n            [x;y]\n        else \n            [||]\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let x = arr.[i]\n            loop (i + 1)\n        else \n            arr\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            [arr.[i]]\n        else \n            []\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let x = arr.[i]\n            if x <> 0 then loop (i+1)\n            else loop (i+1)\n        else []\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let x = arr.[i]\n            if x > 0 then loop (i + 1)\n            else loop (i + 1)\n        else\n            arr\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let curr = arr.[i]\n            if curr <> 0 then \n                loop (i + 1)\n            else \n                curr\n        else \n            0\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            loop (i + 1)\n        else \n            arr\n    loop 0", "    let rec loop i = \n        if i < arr.Length then \n            let x = arr.[i]\n            if x <> 0 then loop (i + 1)\n            else loop (i + 1)\n        else \n            arr\n    loop 0"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}