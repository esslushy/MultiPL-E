{"name": "HumanEval_49_modp", "language": "fs", "prompt": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlet modp n p = \n", "tests": "let test() = \n  let candidate = modp\n  assert (candidate 3 5 = 3)\n  assert (candidate 1101 101 = 2)\n  assert (candidate 0 101 = 1)\n  assert (candidate 3 11 = 8)\n  assert (candidate 100 101 = 1)\n  assert (candidate 30 5 = 4)\n  assert (candidate 31 5 = 3)\n  0\n\ntest()", "completions": ["    if n = 0 then p\n    else\n        let rec loop p =\n            if p = 0 then p\n            else\n                let p' = p % p\n                if p' < p then loop p'\n                else loop p'\n        loop p", "    let rec loop n p = \n        if n = p then p\n        else loop (n - p) (p % n)\n    loop n p", "    let rec loop n p = \n        if n = p then p\n        else loop (n - p) (p + 1)\n    loop n p", "    let rec loop n p = \n        if n = p then p\n        else loop (n - p) (n % p)\n    loop n p", "    let rec loop n p = \n        if n = p then p\n        else loop (n - p) (p + 1)\n    loop n p", "    let rec loop n p = \n        if n = p then p\n        else loop (n - p) (p / n)\n    loop n p", "    let rec loop i = \n        if i = p then \n            n\n        else\n            loop (i + 1)\n    loop n", "    let rec loop n p = \n        if n = p then p\n        else loop (n - p) (n % p)\n    loop n p", "    let rec loop n p = \n        if n = p then p\n        else loop (n - p) (p + 1)\n    loop n p", "    let rec loop n p = \n        if n = p then p\n        else loop (n - p) (p % n)\n    loop n p", "    if n = 0 then 0\n    elif n % p = 0 then n / p\n    else n % p", "    if n = 0 then 0\n    else\n        let rec loop i =\n            if i = p then 0\n            else loop (i - 1)\n        loop n", "    let rec modp' n p = \n        if n = p then p\n        else modp' (n - p) (p + 1)\n    modp' n p", "    let rec loop n p = \n        if n = p then 1\n        else loop (n - p) (p % n)\n    loop n p", "    let rec modp' n p = \n        if n = 0 then p\n        else modp' (n - 1) (p % p)\n    modp' n p", "    if n = 0 then p\n    else \n        let rec loop n p = \n            if n = p then p\n            else loop (n-1) (p-1)\n        loop n p", "    let rec loop n p = \n        if n = p then 1\n        else loop (n - p) (p - n)\n    loop n p", "    let rec loop n p = \n        if n = p then p\n        else loop (n-1) (p-1)\n    loop n p", "    if n = 0 then p\n    else\n        let rec loop i =\n            if i = p then p\n            else loop (i - 1)\n        loop n", "    if n < 0 then failwith \"n < 0\"\n    elif n = 0 then p\n    else \n        let rec loop i = \n            if i < n then \n                let x = p - i\n                if x < 0 then loop (i + 1)\n                else loop (i + x)\n            else p\n        loop (n - 1)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}