{"name": "HumanEval_75_is_multiply_prime", "language": "fs", "prompt": "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nlet is_multiply_prime a = \n", "tests": "let test() = \n  let candidate = is_multiply_prime\n  assert (candidate 5 = false)\n  assert (candidate 30 = true)\n  assert (candidate 8 = true)\n  assert (candidate 10 = false)\n  assert (candidate 125 = true)\n  assert (candidate 105 = true)\n  assert (candidate 126 = false)\n  assert (candidate 729 = false)\n  assert (candidate 891 = false)\n  assert (candidate 1001 = true)\n  0\n\ntest()", "completions": ["    let rec is_multiply_prime_aux acc = \n        if a = 0 then acc\n        else is_multiply_prime_aux (acc + 1)\n    is_multiply_prime_aux 0", "    let rec is_multiply_prime_rec acc = \n        if a = 0 then acc\n        else is_multiply_prime_rec (a / 2)\n    is_multiply_prime_rec false", "    let rec is_multiply_prime_acc a = \n        match a with \n        | 0 -> false\n        | _ -> \n            let rec is_multiply_prime_acc_acc a = \n                match a with \n                | 0 -> false\n                | _ -> \n                    let rec is_multiply_prime_acc_acc_acc a = \n                        match a with \n                        | 0 -> false\n                        | _ -> \n                            let rec is_multiply_prime_acc_acc_acc_acc a = \n                                match a with \n                                | 0 -> false\n                                | _ -> \n                                    let rec is_multiply_prime_acc_acc_acc_acc a = \n                                        match a with \n                                        | 0 -> false\n                                        | _ -> \n                                            let rec is_multiply_prime_acc_acc_acc_acc_acc a = \n                                                match a with \n                                                | 0 -> false\n                                                | _ -> \n                                                    let rec is_multiply_prime_acc_acc_acc_acc_acc a = \n                                                        match a with \n                                                        | 0 -> false\n                                                        | _ -> \n                                                            let rec is_multiply_prime_acc_acc_acc_acc_acc a = \n                                                                match a with \n                                                                | 0 -> false\n                                                                | _ -> \n                                                                    let rec is_multiply_prime_acc_acc_acc_acc_acc a = \n                                                                        match a with \n                                                                        | 0 -> false\n                                                                        | _ -> \n                                                                            let rec is_multiply_prime_acc_acc_acc_acc_acc a = \n                                                                                match a with \n                                                                                | 0 -> false\n                                                                                | _ -> \n                                                                                    let rec is_multiply_prime_acc_acc_acc_acc_acc a = \n                                                                                        match a with \n                                                                                        | 0 -> false\n                                                                                        | _ -> \n                                                                                            let rec is_multiply_prime_acc_acc_acc_acc_acc a = \n                                                                                             ", "    let rec is_multiply_prime_aux acc = \n        if a = 0 then acc\n        else is_multiply_prime_aux (acc + 1)\n    is_multiply_prime_aux 0", "    let rec is_multiply_prime_acc x = \n        match x with\n        | 0 -> false\n        | _ -> \n            let x = x - 1\n            let y = x - 2\n            let z = x - 3\n            let x = x - 4\n            let y = x - 5\n            let z = x - 6\n            let x = x - 7\n            let y = x - 8\n            let z = x - 9\n            let x = x - 10\n            let y = x - 11\n            let z = x - 12\n            let x = x - 13\n            let y = x - 14\n            let z = x - 15\n            let x = x - 16\n            let y = x - 17\n            let z = x - 18\n            let x = x - 19\n            let y = x - 20\n            let z = x - 21\n            let x = x - 22\n            let y = x - 23\n            let z = x - 24\n            let x = x - 25\n            let y = x - 26\n            let z = x - 27\n            let x = x - 28\n            let y = x - 29\n            let z = x - 30\n            let x = x - 31\n            let y = x - 32\n            let z = x - 33\n            let x = x - 34\n            let y = x - 35\n            let z = x - 36\n            let x = x - 37\n            let y = x - 38\n            let z = x - 39\n            let x = x - 40\n            let y = x - 41\n            let z = x - 42\n            let x = x - 43\n            let y = x - 44\n            let z = x - 45\n            let x = x - 46\n            let y = x - 47\n            let z = x - 48\n            let x = x - 49\n            let y = x - 50\n            let z = x - 51\n            let x = x - 52\n            let y = x - 53\n            let z = x - 54\n            let x = x - 55\n            let y = x - 56\n            let z = x - 57\n            let x = x - 58\n            let y = x - 59\n            let z = x - 60", "    let rec is_multiply_prime_rec a = \n        if a = 0 then false\n        elif a = 1 then true\n        else is_multiply_prime_rec (a - 1)\n    is_multiply_prime_rec a", "    let rec is_multiply_prime_rec a = \n        if a = 0 then false\n        elif a = 1 then true\n        elif a = 2 then true\n        elif a = 3 then true\n        elif a = 4 then true\n        elif a = 5 then true\n        elif a = 6 then true\n        elif a = 7 then true\n        elif a = 8 then true\n        elif a = 9 then true\n        elif a = 10 then true\n        elif a = 11 then true\n        elif a = 12 then true\n        elif a = 13 then true\n        elif a = 14 then true\n        elif a = 15 then true\n        else is_multiply_prime_rec (a-1)\n    is_multiply_prime_rec a", "    let rec is_multiply_prime_aux acc = \n        if a = 0 then acc\n        else is_multiply_prime_aux (acc + 1)\n    is_multiply_prime_aux 0", "    let rec is_multiply_prime_rec acc = \n        if a = 0 then acc\n        elif a % 3 = 0 then is_multiply_prime_rec (acc + 1)\n        else is_multiply_prime_rec (acc + 2)\n    is_multiply_prime_rec 0", "    let rec is_multiply_prime_a n = \n        if n = 0 then \n            true\n        elif n % 3 = 0 then \n            is_multiply_prime_a (n / 3)\n        else\n            false\n    is_multiply_prime_a a", "    let rec is_multiply_prime_rec a = \n        match a with\n        | x when x = 0 -> false\n        | x when x = 1 -> true\n        | x when x = 2 -> true\n        | x when x = 3 -> true\n        | x when x = 4 -> true\n        | x when x = 5 -> true\n        | x when x = 6 -> true\n        | x when x = 7 -> true\n        | x when x = 8 -> true\n        | x when x = 9 -> true\n        | x when x = 10 -> true\n        | x when x = 11 -> true\n        | x when x = 12 -> true\n        | x when x = 13 -> true\n        | x when x = 14 -> true\n        | x when x = 15 -> true\n        | x when x = 16 -> true\n        | x when x = 17 -> true\n        | x when x = 18 -> true\n        | x when x = 19 -> true\n        | x when x = 20 -> true\n        | x when x = 21 -> true\n        | x when x = 22 -> true\n        | x when x = 23 -> true\n        | x when x = 24 -> true\n        | x when x = 25 -> true\n        | x when x = 26 -> true\n        | x when x = 27 -> true\n        | x when x = 28 -> true\n        | x when x = 29 -> true\n        | x when x = 30 -> true\n        | x when x = 31 -> true\n        | x when x = 32 -> true\n        | x when x = 33 -> true\n        | x when x = 34 -> true\n        | x when x = 35 -> true\n        | x when x = 36 -> true\n        | x when x = 37 -> true\n        | x when x = 38 -> true\n        | x when x = 39 -> true\n        | x when x = 40 -> true\n        | x when x = 41 -> true\n        | x when x = 42 -> true\n        | x when x = 43 -> true\n        | x when x = 44 -> true\n        | x when x = 45 -> true\n        | x when x = 46 -> true\n        | x when x = 47 -> true\n        | x when x = 48 -> true\n        ", "    let rec is_multiply_prime_rec acc = \n        if a = 0 then acc\n        else is_multiply_prime_rec (acc + 1)\n    is_multiply_prime_rec 0", "    let rec is_multiply_prime_acc = function\n        | 0 -> false\n        | n -> \n            let rec is_multiply_prime_acc_acc = function\n                | 0 -> false\n                | n -> \n                    if n % a = 0 then is_multiply_prime_acc_acc (n / a)\n                    else false\n            is_multiply_prime_acc_acc a\n    is_multiply_prime_acc a", "    let rec is_multiply_prime_aux acc = \n        if a = 0 then acc\n        else is_multiply_prime_aux (acc + 1)\n    is_multiply_prime_aux 0", "    let rec is_multiply_prime_rec a = \n        if a = 0 then \n            false\n        else\n            let rec is_multiply_prime_rec_rec a = \n                if a = 0 then \n                    false\n                else\n                    if a % 3 = 0 then \n                        is_multiply_prime_rec_rec a\n                    else\n                        is_multiply_prime_rec_rec a\n            is_multiply_prime_rec_rec a\n    is_multiply_prime_rec a", "    let rec is_multiply_prime_rec a = \n        if a = 0 then \n            false\n        else\n            let rec is_multiply_prime_rec_rec a = \n                if a = 0 then \n                    false\n                else\n                    let rec is_multiply_prime_rec_rec_rec a = \n                        if a = 0 then \n                            false\n                        else\n                            let rec is_multiply_prime_rec_rec_rec_rec a = \n                                if a = 0 then \n                                    false\n                                else\n                                    let rec is_multiply_prime_rec_rec_rec_rec a = \n                                        if a = 0 then \n                                            false\n                                        else\n                                            let rec is_multiply_prime_rec_rec_rec_rec a = \n                                                if a = 0 then \n                                                    false\n                                                else\n                                                    let rec is_multiply_prime_rec_rec_rec_rec a = \n                                                        if a = 0 then \n                                                            false\n                                                        else\n                                                            let rec is_multiply_prime_rec_rec_rec_rec a = \n                                                                if a = 0 then \n                                                                    false\n                                                                else\n                                                                    let rec is_multiply_prime_rec_rec_rec_rec a = \n                                                                        if a = 0 then \n                                                                            false\n                                                                        else\n                                                                            let rec is_multiply_prime_rec_rec_rec_rec a = \n                                                                                if a = 0 then \n                                                                                    false\n                                                                                else\n                                                                                    let rec is_multiply_prime_rec_rec_rec_rec a = \n                                                                                        if a = 0 then \n                                                                                            false\n                                                                                        else\n                                                                                            let rec is_multiply_prime_rec_rec_rec_rec a = \n                                                                                               if a = 0 then \n                                                                                                   false\n                                                                                               else\n                                                                                                   let rec is_multiply_prime_rec_rec_rec_rec a = \n                                                                                                       if a = 0 then \n                               ", "    let rec is_multiply_prime_rec a = \n        if a = 0 then true\n        elif a = 1 then false\n        elif a = 2 then true\n        elif a = 3 then false\n        elif a = 4 then true\n        elif a = 5 then true\n        else is_multiply_prime_rec (a / 2)\n    is_multiply_prime_rec a", "    let rec is_multiply_prime_rec a = \n        if a = 0 then true\n        elif a = 1 then false\n        else is_multiply_prime_rec (a / 2)\n    is_multiply_prime_rec a", "    let rec is_multiply_prime_rec a = \n        if a = 0 then false\n        elif a = 1 then true\n        else is_multiply_prime_rec (a / 2)\n    is_multiply_prime_rec a", "    let rec is_multiply_prime_acc = function\n        | 0 -> false\n        | n -> \n            let rec is_multiply_prime_acc_acc = function\n                | 0 -> true\n                | n -> \n                    let rec is_multiply_prime_acc_acc_acc = function\n                        | 0 -> true\n                        | n -> \n                            let rec is_multiply_prime_acc_acc_acc = function\n                                | 0 -> true\n                                | n -> \n                                    let rec is_multiply_prime_acc_acc_acc = function\n                                        | 0 -> true\n                                        | n -> \n                                            let rec is_multiply_prime_acc_acc_acc = function\n                                                | 0 -> true\n                                                | n -> \n                                                    let rec is_multiply_prime_acc_acc_acc = function\n                                                        | 0 -> true\n                                                        | n -> \n                                                            let rec is_multiply_prime_acc_acc_acc = function\n                                                                | 0 -> true\n                                                                | n -> \n                                                                    let rec is_multiply_prime_acc_acc_acc = function\n                                                                        | 0 -> true\n                                                                        | n -> \n                                                                            let rec is_multiply_prime_acc_acc_acc = function\n                                                                                | 0 -> true\n                                                                                | n -> \n                                                                                    let rec is_multiply_prime_acc_acc_acc = function\n                                                                                        | 0 -> true\n                                                                                        | n -> \n                                                                                            let rec is_multiply_prime_acc_acc_acc = function\n                                                                                               | 0 -> true\n                                                                                               | n -> \n                                                                                                   let rec is_multiply_prime_acc_acc_acc = function\n                                                                                                       | 0 -> true\n                                                                                                       | n -> \n                                                                                                           let rec is_multiply_prime_acc_acc_acc = function\n                                                                                                               | 0 -> true\n                                                                                                               | n -> \n                                                                                                                   let rec is_multiply_prime_acc_acc_acc = function\n                                                                                                                       "], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}