{"name": "HumanEval_14_all_prefixes", "language": "fs", "prompt": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes string = \n", "tests": "let test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()", "completions": ["    let rec all_prefixes_rec (prefixes:string list) = \n        match prefixes with\n        | [] -> []\n        | head::tail -> \n            let prefix = head.Trim()\n            if prefix.Length > 0 then \n                prefixes\n                |> List.filter (fun prefix -> prefix.StartsWith(prefix))\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                |> List.map (fun prefix -> prefix.Trim())\n                |> List.filter (fun prefix -> prefix.Length > 0)\n                ", "    let rec all_prefixes' (prefixes:string list) =\n        match prefixes with\n        | [] -> []\n        | head::tail ->\n            let prefixes' = head::prefixes\n            all_prefixes' tail\n    all_prefixes' string", "    let rec all_prefixes' (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ ->\n            let prefixes' = prefixes @ [str]\n            all_prefixes' prefixes' (str.Substring(1))\n    all_prefixes' [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ ->\n            let prefixes = prefixes @ [str]\n            all_prefixes_rec prefixes str\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ ->\n            let prefix = str.Substring(0, str.Length - 1)\n            let prefixes' = prefixes |> List.filter (fun prefix -> prefix.StartsWith(prefix))\n            all_prefixes_rec prefixes' str\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (prefix: string) = \n        match prefixes with\n        | [] -> prefix\n        | prefix::rest -> \n            let prefix_length = prefix.Length\n            if prefix_length > 1 then \n                prefix + (all_prefixes_rec rest prefix)\n            else\n                prefix + prefix\n    all_prefixes_rec [] string", "    let rec all_prefixes' (prefixes: string list) = \n        match prefixes with\n        | [] -> []\n        | head::tail -> \n            let prefix = head.Substring(0, head.Length-1)\n            if prefix = string string then \n                prefixes\n            else\n                all_prefixes' tail\n    all_prefixes' []", "    let rec all_prefixes_rec (prefixes:string list) (prefix:string) =\n        if prefix.Length = 0 then\n            prefixes\n        else\n            let prefix_length = prefix.Length\n            let prefix_list = prefixes |> List.map (fun prefix -> prefix.Substring(0, prefix_length))\n            all_prefixes_rec prefix_list prefix\n    all_prefixes_rec [] string", "    let rec all_prefixes' (prefixes:string list) (str:string) =\n        match str with\n        | \"\" -> prefixes\n        | _ ->\n            let prefixes' = prefixes |> List.map (fun prefix -> prefix + \" \")\n            all_prefixes' prefixes' str\n    all_prefixes' [] string", "    let rec all_prefixes' (prefixes: string list) =\n        match prefixes with\n        | [] -> []\n        | x::xs -> \n            let prefixes' = x::prefixes\n            all_prefixes' prefixes'\n    all_prefixes' []", "    let rec all_prefixes' (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ ->\n            let prefix = str.Substring(0, str.Length - 1)\n            prefixes @ [prefix]\n            |> List.map (fun prefix -> all_prefixes' prefixes prefix)\n    all_prefixes' [] string", "    let rec all_prefixes' (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ ->\n            let prefixes = prefixes @ [str]\n            all_prefixes' prefixes' (str.Substring(1))\n    all_prefixes' [] string", "    let rec all_prefixes' (prefixes:string list) (str:string) = \n        match str with\n        | \"\" -> prefixes\n        | _ -> \n            let prefixes' = prefixes |> List.map (fun prefix -> prefix + \" \")\n            all_prefixes' prefixes' str\n    all_prefixes' [] string", "    let rec all_prefixes_rec acc = \n        function\n        | 'a' -> acc\n        | 'b' -> acc\n        | 'c' -> acc\n        | 'a' -> acc\n        | 'b' -> acc\n        | 'c' -> acc\n        | 'a' -> acc\n        | 'b' -> acc\n        | 'c' -> acc\n        | _ -> acc\n    all_prefixes_rec (string |> List.rev |> List.toArray)", "    let rec all_prefixes_rec (prefixes:string list) (str:string) =\n        match str.Length with\n        | 0 -> prefixes\n        | _ ->\n            let prefix = str.[0]\n            let prefixes' = prefixes @ [prefix]\n            all_prefixes_rec prefixes' str.[1..]\n    all_prefixes_rec [] string", "    let rec all_prefixes' (prefixes: string list) (str: string) = \n        match str with\n        | \"\" -> prefixes\n        | _ -> \n            let prefix = str.Substring(0, str.Length - 1)\n            prefixes |> List.filter (fun prefix -> prefix.StartsWith(prefix)) |> List.map (fun prefix -> prefix + prefix)\n    all_prefixes' [] string", "    let rec all_prefixes' (prefixes:string list) =\n        match prefixes with\n        | [] -> []\n        | head::tail ->\n            let prefix = head.Trim()\n            if prefix.Length > 0 then\n                prefix::all_prefixes' tail\n            else\n                prefix::all_prefixes' tail\n    all_prefixes' []", "    let rec all_prefixes_rec (prefixes: string list) = \n        match prefixes with\n        | [] -> []\n        | head::tail -> \n            let prefix = head.ToUpper()\n            if prefix.Length <> 0 then \n                all_prefixes_rec tail\n            else\n                prefixes\n    all_prefixes_rec [string]", "    let rec all_prefixes' (prefixes:string list) (str:string) =\n        match str with\n        | \"\" -> prefixes\n        | _ ->\n            let prefixes' = prefixes @ [str]\n            all_prefixes' prefixes' str\n    all_prefixes' [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ ->\n            let prefixes = prefixes @ [str]\n            all_prefixes_rec prefixes (str.Substring(0, str.Length - 1))\n    all_prefixes_rec [] string"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}