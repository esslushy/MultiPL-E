{"name": "HumanEval_117_select_words", "language": "fs", "prompt": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words s n = \n", "tests": "let test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()", "completions": ["    let words = s.Split(' ')\n    let words = words |> Array.filter (fun w -> w <> \"\")\n    words |> Array.map (fun w -> w.ToLower())", "    let rec loop acc = \n        match s with\n        | \"\" -> acc\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> Array.map (fun word -> word.Trim())\n            if words.Length > n then loop (words |> List.filter (fun word -> word.Length > n) |> List.rev)\n            else loop (words |> List.filter (fun word -> word.Length <= n) |> List.rev)\n    loop []", "    let words = \n        s.ToCharArray()\n        |> Array.filter (fun c -> c <> ' ' && c <> '\\t')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.", "    let words = \n        s \n        |> Seq.filter (fun c -> c <> ' ' && c <> '\\t')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.filter (fun c -> c <> ' ')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq", "    let rec select_words_rec s n = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> List.ofArray\n                |> List.filter (fun w -> w.Length > n)\n                |> List.map (fun w -> w.Trim())\n            select_words_rec s (n - words.Length)\n    select_words_rec s n", "    let words = \n        s \n        |> Seq.filter (fun c -> c <> ' ' && c <> '\\t' && c <> '\\n' && c <> '\\r')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.toList\n    words |> List.filter (fun w -> w.Length >= n)", "    let rec select_words_rec (s:string) (n:int) = \n        if s.Length = 0 then \n            []\n        else\n            let words = s.ToCharArray()\n            let words = words |> Array.filter (fun w -> w <> ' ')\n            if words.Length = n then\n                words\n            else\n                words |> Array.map (fun w -> w.ToString()) |> Array.filter (fun w -> w <> ' ')\n    select_words_rec s n", "    if s = \"\" then []\n    else\n        let words = \n            s.Split(' ')\n            |> Array.filter (fun word -> word.Length > n)\n            |> Array.map (fun word -> word.Trim())\n        words\n        |> List.ofArray\n        |> List.filter (fun word -> word.Length <= n)\n        |> List.map (fun word -> word.Trim())", "    let words = \n        s.Split(' ')\n        |> Array.map (fun word -> word.ToLower())\n        |> Array.filter (fun word -> word.Length > n)\n        |> Array.map (fun word -> word.ToLower())\n    words\n    |> Array.filter (fun word -> word.Length > n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length < n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length <= n)\n", "    let words = \n        s.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n        |> Array.map (fun s -> s.Trim())\n    if words.Length <> n then \n        failwith \"The number of words in the string s does not match the number of words in the string s\"\n    words", "    if s = \"\" then []\n    else \n        let words = s.Split([| ' ' |], StringSplitOptions.RemoveEmptyEntries)\n        words \n        |> Array.filter (fun word -> word.Length = n)\n        |> Array.map (fun word -> word.ToLower())\n        |> Array.toList", "    let rec select_words_rec s n = \n        if n = 0 then []\n        else\n            let words = \n                s.Split(' ')\n                |> Array.filter (fun w -> w.Length > n)\n            if words.Length = n then words else select_words_rec s (n - 1)\n    select_words_rec s n", "    let words = \n        s.Split(' ')\n        |> Array.map (fun s -> s.Trim())\n        |> Array.filter (fun s -> s.Length > n)\n    words", "    let rec select_words' (s:string) (n:int) = \n        match s.Length with\n        | 0 -> []\n        | _ when n = 0 -> []\n        | _ when n = 1 -> [s]\n        | _ when n = n -> [s]\n        | _ -> \n            let words = \n                s.ToCharArray()\n                |> Array.filter (fun c -> c <> ' ' && c <> '\\t')\n                |> Array.map (fun c -> c.ToString())\n                |> Array.filter (fun c -> c <> ' ')\n                |> Array.map (fun c -> c.ToString())\n            let words = words |> Array.filter (fun c -> c <> ' ')\n            words |> Array.map (fun c -> c.ToString())\n    select_words' s n", "    let rec select_words_rec s n = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> Array.map (fun word -> word.Trim())\n            if words.Length = n then words else select_words_rec s (n-words.Length)\n    select_words_rec s n", "    let rec select_words_rec s n = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> List.ofArray\n                |> List.filter (fun w -> w.Length <= n)\n                |> List.map (fun w -> w.Trim())\n            select_words_rec s (n-w.Length) words\n    select_words_rec s n", "    let rec select_words' (s:string) (n:int) =\n        if n = 0 then\n            s.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n            |> List.ofArray\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length > n)\n            |> List.map (fun s -> s.Trim())\n            |> List.filter (fun s -> s.Length", "    let rec select_words_rec (s:string) (n:int) = \n        if s.Length = 0 then \n            [], n\n        else\n            let words = s.Split(' ')\n            if words.Length <> n then \n                [], n\n            else\n                let words = words |> Array.take n\n                words |> Array.map (fun word -> word.Trim())\n                |> Array.map (fun word -> word.ToLower())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToLower())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun word -> word.ToCharArray())\n                |> Array.map (fun word -> word.ToUpper())\n                |> Array.map (fun", "    let rec select_words_rec s n = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> Array.map (fun word -> word.Trim())\n                |> Array.filter (fun word -> word.Length > n)\n            words |> List.ofArray\n    select_words_rec s n", "    let words = \n        s.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n        |> Array.map (fun x -> x.Trim())\n        |> Array.filter (fun x -> x <> \"\")\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x -> x.Length > n)\n        |> Array.map (fun x -> x.ToLower())\n        |> Array.filter (fun x"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}