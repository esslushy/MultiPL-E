{"name": "HumanEval_128_prod_signs", "language": "fs", "prompt": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\nlet prod_signs arr = \n", "tests": "let test() = \n  let candidate = prod_signs\n  assert (candidate [1; 2; 2; -4] = -9)\n  assert (candidate [0; 1] = 0)\n  assert (candidate [1; 1; 1; 2; 3; -1; 1] = -10)\n  assert (candidate [] = None)\n  assert (candidate [2; 4; 1; 2; -1; -1; 9] = 20)\n  assert (candidate [-1; 1; -1; 1] = 4)\n  assert (candidate [-1; 1; 1; 1] = -4)\n  assert (candidate [-1; 1; 1; 0] = 0)\n  0\n\ntest()", "completions": ["    let rec loop acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 0 -> loop (acc + 1)\n            | 1 -> loop (acc - 1)\n            | _ -> loop (acc * xs)\n    loop 0", "    let rec loop acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 0 -> loop (acc + 1)\n            | 1 -> loop (acc - 1)\n            | _ -> loop (acc * xs)\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | 0 -> loop (acc + 1) xs\n            | 1 -> loop (acc - 1) xs\n            | _ -> loop (acc + x) xs\n    loop 0 arr", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | 1 -> loop (acc + 1) xs\n            | -1 -> loop (acc - 1) xs\n            | _ -> loop (acc + 1) xs\n    loop 0 arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] arr", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> \n            let sign = \n                match x with\n                | 0 -> 1\n                | 1 -> -1\n                | _ -> 0\n            loop (acc * sign) xs\n    loop 0 arr", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            match x with\n            | 0 -> loop (acc + 1) xs\n            | 1 -> loop (acc - 1) xs\n            | _ -> loop (acc + 1) xs\n    loop 0 arr"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}