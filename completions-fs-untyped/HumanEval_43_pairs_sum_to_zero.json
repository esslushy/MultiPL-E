{"name": "HumanEval_43_pairs_sum_to_zero", "language": "fs", "prompt": "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nlet pairs_sum_to_zero l = \n", "tests": "let test() = \n  let candidate = pairs_sum_to_zero\n  assert (candidate [1; 3; 5; 0] = false)\n  assert (candidate [1; 3; -2; 1] = false)\n  assert (candidate [1; 2; 3; 7] = false)\n  assert (candidate [2; 4; -5; 3; 5; 7] = true)\n  assert (candidate [1] = false)\n  assert (candidate [-3; 9; -1; 3; 2; 30] = true)\n  assert (candidate [-3; 9; -1; 3; 2; 31] = true)\n  assert (candidate [-3; 9; -1; 4; 2; 30] = false)\n  assert (candidate [-3; 9; -1; 4; 2; 31] = false)\n  0\n\ntest()", "completions": ["    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec sum_to_zero_rec acc = function\n        | [] -> acc\n        | x::xs -> sum_to_zero_rec (acc + x) xs\n    sum_to_zero_rec 0 l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop i = \n        if i < l then \n            let x = l - i\n            if x > 0 then \n                loop (i + 1)\n            else \n                true\n        else \n            false\n    loop 0", "    let rec sum_to_zero_rec acc = function\n        | [] -> acc\n        | x::xs -> sum_to_zero_rec (acc + x) xs\n    sum_to_zero_rec 0 l", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec sum_to_zero_rec acc = function\n        | [] -> acc\n        | x::xs -> sum_to_zero_rec (acc + x) xs\n    sum_to_zero_rec 0 l", "    let rec loop i l = \n        match l with \n        | [] -> []\n        | h::t -> \n            if i = 0 then \n                h::loop (i-1) t\n            else \n                h::loop (i-1) t\n    loop 0 l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if acc = 0 then loop (acc + x)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec sum_to_zero_rec acc = function\n        | [] -> acc\n        | x :: xs -> sum_to_zero_rec (acc + x) xs\n    sum_to_zero_rec 0 l", "    let rec sum_to_zero_rec acc l = \n        match l with \n        | [] -> acc\n        | (x, y)::tail -> \n            if x = y then acc\n            else sum_to_zero_rec (acc + 1) tail\n    sum_to_zero_rec 0 l", "    let rec sum_to_zero_list l = \n        match l with\n        | [] -> []\n        | x::xs -> sum_to_zero_list xs\n    sum_to_zero_list l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec sum_to_zero_rec acc l = \n        match l with \n        | [] -> acc\n        | x::xs -> sum_to_zero_rec (acc + x) xs\n    sum_to_zero_rec 0 l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}