{"name": "HumanEval_88_sort_array", "language": "fs", "prompt": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nlet sort_array array = \n", "tests": "let test() = \n  let candidate = sort_array\n  assert (candidate [] = [])\n  assert (candidate [5] = [5])\n  assert (candidate [2; 4; 3; 0; 1; 5] = [0; 1; 2; 3; 4; 5])\n  assert (candidate [2; 4; 3; 0; 1; 5; 6] = [6; 5; 4; 3; 2; 1; 0])\n  assert (candidate [2; 1] = [1; 2])\n  assert (candidate [15; 42; 87; 32; 11; 0] = [0; 11; 15; 32; 42; 87])\n  assert (candidate [21; 14; 23; 11] = [23; 21; 14; 11])\n  0\n\ntest()", "completions": ["    let rec sort_array' (array: 'T[]) = \n        let rec sort_array'' (array: 'T[]) = \n            let first = array.[0]\n            let last = array.[array.Length - 1]\n            let sum = first + last\n            if sum % 2 = 0 then\n                array\n            else\n                let temp = array.[0]\n                array.[0] <- array.[1]\n                array.[1] <- temp\n                sort_array'' array\n        sort_array'' array\n    sort_array' array", "    let rec sort_array' (array: 'a []) =\n        let mutable sorted = false\n        let mutable i = 0\n        while i < array.Length && not sorted do\n            let temp = array.[i]\n            array.[i] <- array.[i + 1]\n            array.[i + 1] <- temp\n            i <- i + 2\n            sorted <- true\n        if i < array.Length then\n            sort_array' array.[i]\n        else\n            array\n    sort_array' array", "    let rec sort_array_rec (array: 'a array) =\n        let rec sort_array_rec_rec (array: 'a array) =\n            let rec sort_array_rec_rec_rec (array: 'a array) =\n                let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                    let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                        let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                            let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                    let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                        let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                            let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                    let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                        let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                            let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                                let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                                    let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                                        let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                                            let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                                                let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                                                    let rec sort_array_rec_rec_rec_rec (array: 'a array) =\n                                                                                        let rec sort_array_rec_rec_rec_rec (array: 'a array", "    let rec sort_array_rec (array: 'T[]) = \n        let mutable result = array\n        let mutable i = 0\n        while i < array.Length do\n            let temp = array.[i]\n            let j = i + 1\n            if j < array.Length then\n                let temp = array.[j]\n                if temp <> temp then\n                    result <- temp\n                    i <- j\n        result\n    sort_array_rec array", "    let rec sort_array' (array: 'T[]) =\n        if array.Length = 0 then\n            array\n        else\n            let first_index = array.[0]\n            let last_index = array.[array.Length - 1]\n            if first_index < last_index then\n                let temp = array.[first_index]\n                array.[first_index] <- array.[last_index]\n                array.[last_index] <- temp\n                sort_array' array\n            else\n                let temp = array.[last_index]\n                array.[last_index] <- array.[first_index]\n                array.[first_index] <- temp\n                sort_array' array\n    sort_array' array", "    let rec sort_array_rec (array: 'T[]) = \n        let rec sort_array_rec' (array: 'T[]) = \n            let first_index = array.GetLowerBound(0)\n            let last_index = array.GetUpperBound(array.Length-1)\n            if first_index < 0 || last_index < 0 then\n                array\n            else\n                let first_value = array.[first_index]\n                let last_value = array.[last_index]\n                let new_array = Array.copy array\n                new_array.[first_index] <- first_value\n                new_array.[last_index] <- last_value\n                sort_array_rec' new_array\n        sort_array_rec' array\n    sort_array_rec array", "    let rec sort_array_rec (array: 'a []) =\n        let rec sort_array_rec' (array: 'a []) =\n            let first_index = Array.findIndex (fun x -> x = array.[0]) array\n            let last_index = Array.findIndex (fun x -> x = array.[array.Length - 1]) array\n            if first_index < 0 then\n                array\n            else\n                let first_index = Array.findIndex (fun x -> x = array.[first_index]) array\n                let last_index = Array.findIndex (fun x -> x = array.[last_index]) array\n                if first_index < 0 then\n                    array\n                else\n                    let first_index = Array.findIndex (fun x -> x = array.[first_index]) array\n                    let last_index = Array.findIndex (fun x -> x = array.[last_index]) array\n                    let temp = array.[first_index]\n                    array.[first_index] <- array.[last_index]\n                    array.[last_index] <- temp\n                    array\n        sort_array_rec' array\n    sort_array_rec array", "    let rec sort_array_rec (array: 'a[]) =\n        let rec sort_array_rec' (array: 'a[]) =\n            let rec sort_array_rec'' (array: 'a[]) =\n                let rec sort_array_rec''' (array: 'a[]) =\n                    let rec sort_array_rec''' (array: 'a[]) =\n                        let rec sort_array_rec''' (array: 'a[]) =\n                            let rec sort_array_rec''' (array: 'a[]) =\n                                let rec sort_array_rec''' (array: 'a[]) =\n                                    let rec sort_array_rec''' (array: 'a[]) =\n                                        let rec sort_array_rec''' (array: 'a[]) =\n                                            let rec sort_array_rec''' (array: 'a[]) =\n                                                let rec sort_array_rec''' (array: 'a[]) =\n                                                    let rec sort_array_rec'' (array: 'a[]) =\n                                                        let rec sort_array_rec'' (array: 'a[]) =\n                                                            let rec sort_array_rec'' (array: 'a[]) =\n                                                                let rec sort_array_rec' (array: 'a[]) =\n                                                                    let rec sort_array_rec' (array: 'a[]) =\n                                                                        let rec sort_array_rec' (array: 'a[]) =\n                                                                            let rec sort_array_rec' (array: 'a[]) =\n                                                                                let rec sort_array_rec' (array: 'a[]) =\n                                                                                    let rec sort_array_rec' (array: 'a[]) =\n                                                                                        let rec sort_array_rec' (array: 'a[]) =\n                                                                                            let rec sort_array_rec' (array: 'a[]) =\n                                                                                                   let rec sort_array_rec' (array: 'a[]) =\n                                                                                                       let rec sort_array_rec' (array: 'a[]) =\n                                                                                                           let rec sort_array_rec'", "    let rec sort_array' (array: 'T[]) =\n        let rec sort_array'' (array: 'T[]) =\n            let rec sort_array'' (array: 'T[]) =\n                let rec sort_array'' (array: 'T[]) =\n                    let rec sort_array'' (array: 'T[]) =\n                        let rec sort_array'' (array: 'T[]) =\n                            let rec sort_array'' (array: 'T[]) =\n                                let rec sort_array' (array: 'T[]) =\n                                    let rec sort_array' (array: 'T[]) =\n                                        let rec sort_array' (array: 'T[]) =\n                                            let rec sort_array' (array: 'T[]) =\n                                                let rec sort_array' (array: 'T[]) =\n                                                    let rec sort_array' (array: 'T[]) =\n                                                        let rec sort_array' (array: 'T[]) =\n                                                            let rec sort_array' (array: 'T[]) =\n                                                                let rec sort_array' (array: 'T[]) =\n                                                                    let rec sort_array' (array: 'T[]) =\n                                                                        let rec sort_array' (array: 'T[]) =\n                                                                            let rec sort_array' (array: 'T[]) =\n                                                                                let rec sort_array' (array: 'T[]) =\n                                                                                    let rec sort_array' (array: 'T[]) =\n                                                                                        let rec sort_array' (array: 'T[]) =\n                                                                                            let rec sort_array' (array: 'T[]) =\n                                                                                                   let rec sort_array' (array: 'T[]) =\n                                                                                                       let rec sort_array' (array: 'T[]) =\n                                                                                                           let rec sort_array' (array: 'T[]) =\n                                                                                                               let rec sort_array' (array: 'T[]) =\n                                                                                                                   let rec sort_array' (array: 'T[]) =\n                                                                                                                       let rec sort_array' (array: 'T[]) =\n                               ", "    let rec sort_array' (array: 'a []) =\n        let rec sort_array'' (array: 'a []) =\n            let first_index = Array.findIndex ((=) array.[0]) array\n            let last_index = Array.findIndex ((=) array.[array.Length - 1]) array\n            if first_index <> last_index then\n                let temp = array.[first_index]\n                array.[first_index] <- array.[last_index]\n                array.[last_index] <- temp\n                sort_array'' array\n            else\n                array\n        sort_array' array\n    sort_array' array", "    let rec sort_array_aux (array: 'T[]) =\n        if array.Length = 0 then\n            array\n        else\n            let first_index = array.[0]\n            let last_index = array.[array.Length - 1]\n            if first_index < last_index then\n                let temp = array.[0]\n                array.[0] <- array.[1]\n                array.[1] <- temp\n                sort_array_aux array\n            else\n                let temp = array.[last_index]\n                array.[last_index] <- array.[first_index]\n                array.[first_index] <- temp\n                sort_array_aux array\n    sort_array_aux array", "    let rec sort_array' (array: 'T[]) = \n        let mutable i = 0\n        let mutable j = array.Length - 1\n        while i < j do\n            if array.[i] > array.[j] then\n                let temp = array.[i]\n                array.[i] <- array.[j]\n                array.[j] <- temp\n                i <- j\n            else\n                j <- j - 1\n        if i < j then\n            let temp = array.[i]\n            array.[i] <- array.[j]\n            array.[j] <- temp\n            sort_array' array\n        else\n            array\n    sort_array' array", "    let rec sort_array_rec (array: 'T[]) = \n        let rec sort_array_rec' (array: 'T[]) = \n            let rec sort_array_rec'' (array: 'T[]) = \n                let first_index = Array.findIndex ((=) array.[0]) array\n                let last_index = Array.findIndex ((=) array.[array.Length - 1]) array\n                if first_index <> last_index then\n                    let temp = array.[first_index]\n                    array.[first_index] <- array.[last_index]\n                    array.[last_index] <- temp\n                    sort_array_rec'' array\n                else\n                    array\n            sort_array_rec' array\n        sort_array_rec' array\n    sort_array_rec array", "    let rec sort_array_rec (array: 'a []) = \n        let first_index = Array.findIndex ((=) array.[0]) array\n        let last_index = Array.findIndex ((=) array.[array.Length - 1]) array\n        let sum = (first_index + last_index) / 2\n        if sum <> 0 then\n            let temp = array.[first_index]\n            array.[first_index] <- array.[last_index]\n            array.[last_index] <- temp\n            sort_array_rec array\n        else\n            array\n    sort_array_rec array", "    let rec sort_array' (array: 'a []) =\n        if array.Length = 0 then\n            array\n        else\n            let first_index = array.[0]\n            let last_index = array.[array.Length - 1]\n            if first_index < last_index then\n                let temp = array.[0]\n                array.[0] <- array.[1]\n                array.[1] <- temp\n                sort_array' array\n            else\n                let temp = array.[0]\n                array.[0] <- array.[1]\n                array.[1] <- temp\n                sort_array' array\n    sort_array' array", "    let rec sort_array' acc array =\n        match array with\n        | [] -> acc\n        | x :: xs ->\n            let xs = x :: xs\n            let xs = sort_array' (x :: acc) xs\n            sort_array' (x :: acc) xs\n    sort_array' [] array", "    let rec sort_array_rec (array: 'T[]) = \n        let rec sort_array_rec' (array: 'T[]) = \n            let rec sort_array_rec'' (array: 'T[]) = \n                let rec sort_array_rec'' (array: 'T[]) = \n                    let rec sort_array_rec'' (array: 'T[]) = \n                        let rec sort_array_rec'' (array: 'T[]) = \n                            let rec sort_array_rec'' (array: 'T[]) = \n                                let rec sort_array_rec'' (array: 'T[]) = \n                                    let rec sort_array_rec'' (array: 'T[]) = \n                                        let rec sort_array_rec'' (array: 'T[]) = \n                                            let rec sort_array_rec'' (array: 'T[]) = \n                                                let rec sort_array_rec'' (array: 'T[]) = \n                                                    let rec sort_array_rec'' (array: 'T[]) = \n                                                        let rec sort_array_rec'' (array: 'T[]) = \n                                                            let rec sort_array_rec' (array: 'T[]) = \n                                                                let rec sort_array_rec' (array: 'T[]) = \n                                                                    let rec sort_array_rec' (array: 'T[]) = \n                                                                        let rec sort_array_rec' (array: 'T[]) = \n                                                                            let rec sort_array_rec' (array: 'T[]) = \n                                                                                let rec sort_array_rec' (array: 'T[]) = \n                                                                                    let rec sort_array_rec' (array: 'T[]) = \n                                                                                        let rec sort_array_rec' (array: 'T[]) = \n                                                                                            let rec sort_array_rec' (array: 'T[]) = \n                                                                                                   let rec sort_array_rec' (array: 'T[]) = \n                                                                                                       let rec sort_array_rec' (array: 'T[])", "    let rec sort_array' (array: 'T[]) = \n        let mutable i = 0\n        let mutable j = 0\n        while i < array.Length && j < array.Length do\n            if array.[i] > array.[j] then\n                array.[i] <- array.[j]\n                j <- j + 1\n            else\n                array.[i] <- array.[j]\n                j <- j + 1\n        if j < array.Length then\n            array.[j] <- array.[i]\n            sort_array' array\n        else\n            array\n    sort_array' array", "    let rec sort_array_rec (array: 'T[]) = \n        let rec sort_array_rec' (array: 'T[]) = \n            let rec sort_array_rec'' (array: 'T[]) = \n                let rec sort_array_rec'' (array: 'T[]) = \n                    let rec sort_array_rec'' (array: 'T[]) = \n                        let rec sort_array_rec'' (array: 'T[]) = \n                            let rec sort_array_rec'' (array: 'T[]) = \n                                let rec sort_array_rec'' (array: 'T[]) = \n                                    let rec sort_array_rec'' (array: 'T[]) = \n                                        let rec sort_array_rec'' (array: 'T[]) = \n                                            let rec sort_array_rec'' (array: 'T[]) = \n                                                let rec sort_array_rec'' (array: 'T[]) = \n                                                    let rec sort_array_rec'' (array: 'T[]) = \n                                                        let rec sort_array_rec' (array: 'T[]) = \n                                                            let rec sort_array_rec' (array: 'T[]) = \n                                                                let rec sort_array_rec' (array: 'T[]) = \n                                                                    let rec sort_array_rec' (array: 'T[]) = \n                                                                        let rec sort_array_rec' (array: 'T[]) = \n                                                                            let rec sort_array_rec' (array: 'T[]) = \n                                                                                let rec sort_array_rec' (array: 'T[]) = \n                                                                                    let rec sort_array_rec' (array: 'T[]) = \n                                                                                        let rec sort_array_rec' (array: 'T[]) = \n                                                                                            let rec sort_array_rec' (array: 'T[]) = \n                                                                                                   let rec sort_array_rec' (array: 'T[]) = \n                                                                                                       let rec sort_array_rec' (array: 'T[]) =", "    let rec sort_array_rec (array: 'T[]) = \n        if array.Length = 0 then array\n        else\n            let first_index = array.[0]\n            let last_index = array.[array.Length - 1]\n            if first_index < last_index then\n                let temp = array.[0]\n                array.[0] <- array.[1]\n                array.[1] <- array.[2]\n                array.[2] <- array.[3]\n                array.[3] <- array.[4]\n                array.[4] <- array.[5]\n                array.[5] <- array.[6]\n                array.[6] <- temp\n                sort_array_rec array\n            else\n                let temp = array.[0]\n                array.[0] <- array.[1]\n                array.[1] <- array.[2]\n                array.[2] <- array.[3]\n                array.[3] <- array.[4]\n                array.[4] <- array.[5]\n                array.[5] <- array.[6]\n                array.[6] <- temp\n                sort_array_rec array\n    sort_array_rec array"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}