{"name": "HumanEval_35_max_element", "language": "fs", "prompt": "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlet max_element l = \n", "tests": "let test() = \n  let candidate = max_element\n  assert (candidate [1; 2; 3] = 3)\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 124; 1; -10] = 124)\n  0\n\ntest()", "completions": ["    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x > xs -> max_element' (x::acc) xs\n            | _ -> max_element' (x::acc) xs\n    max_element' [] l", "    let rec max_element' acc = function\n        | [] -> acc\n        | x::xs -> max_element' (x::acc) xs\n    max_element' [] l", "    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x > acc -> max_element' (x::acc) xs\n            | _ -> max_element' acc xs\n    max_element' [] l", "    let rec max_element' acc = function\n        | [] -> acc\n        | x :: xs -> max_element' (x :: acc) xs\n    max_element' [] l", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' xs\n            else max_element' (x::acc)\n    max_element' []", "    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc) xs\n            else max_element' acc xs\n    max_element' [] l", "    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | hd::tl -> \n            if hd > tl.Head then max_element' (hd::acc) tl\n            else max_element' (hd::acc) tl\n    max_element' [] l", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' xs\n            else max_element' (x::acc)\n    max_element' []", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc) xs\n            else max_element' (x::acc) xs\n    max_element' [] l", "    let rec max_element' acc =\n        match l with\n        | [] -> acc\n        | x::xs ->\n            if x > acc then max_element' (x::acc) xs\n            else max_element' (x::acc) xs\n    max_element' [] l", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | x when x > x -> max_element' (x::acc) xs\n            | _ -> max_element' (x::acc) xs\n    max_element' [] l", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc) xs\n            else max_element' acc xs\n    max_element' [] l", "    let rec max_element' acc =\n        match l with\n        | [] -> acc\n        | hd::tl ->\n            if hd > acc then max_element' (hd::acc) tl\n            else max_element' (hd::acc) tl\n    max_element' []", "    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' xs else max_element' (x::acc)\n    max_element' []", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc) xs\n            else max_element' (x::acc) xs\n    max_element' [] l", "    let rec max_element' acc =\n        match l with\n        | [] -> acc\n        | x::xs ->\n            if x > acc then\n                max_element' (x::acc)\n            else\n                max_element' (acc::x::xs)\n    max_element' []", "    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc) xs\n            else max_element' (x::acc) xs\n    max_element' [] l", "    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | x :: xs -> \n            match x with\n            | x when x > xs -> max_element' (x :: acc) xs\n            | _ -> max_element' (x :: acc) xs\n    max_element' [] l", "    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | x :: xs -> \n            if x > acc then max_element' (x :: acc) xs\n            else max_element' acc xs\n    max_element' 0 l", "    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc) xs\n            else max_element' (x::acc) xs\n    max_element' [] l"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}