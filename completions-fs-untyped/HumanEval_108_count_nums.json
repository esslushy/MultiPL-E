{"name": "HumanEval_108_count_nums", "language": "fs", "prompt": "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nlet count_nums arr = \n", "tests": "let test() = \n  let candidate = count_nums\n  assert (candidate [] = 0)\n  assert (candidate [-1; -2; 0] = 0)\n  assert (candidate [1; 1; 2; -2; 3; 4; 5] = 6)\n  assert (candidate [1; 6; 9; -6; 0; 1; 5] = 5)\n  assert (candidate [1; 100; 98; -7; 1; -1] = 4)\n  assert (candidate [12; 23; 34; -45; -56; 0] = 5)\n  assert (candidate [0; 1] = 1)\n  assert (candidate [1] = 1)\n  0\n\ntest()", "completions": ["    let rec count_nums_rec acc = function\n        | [] -> acc\n        | x::xs -> count_nums_rec (acc + x) xs\n    count_nums_rec 0 arr", "    let rec count_nums_rec acc = function\n        | [] -> acc\n        | x::xs ->\n            let acc = acc + x\n            count_nums_rec (acc + 1) xs\n    count_nums_rec 0 arr", "    let rec count_nums_rec acc = function\n        | [] -> acc\n        | x::xs -> count_nums_rec (acc + x) xs\n    count_nums_rec 0 arr", "    let rec count_nums_rec acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            count_nums_rec acc'\n    count_nums_rec 0", "    let rec count_nums_rec acc =\n        match arr with\n        | [] -> acc\n        | x::xs -> count_nums_rec (acc + x) xs\n    count_nums_rec 0 arr", "    let rec count_nums_rec acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            count_nums_rec acc'\n    count_nums_rec 0", "    let rec count_nums_rec acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + (x - (min xs.[0] xs.[1]))\n            count_nums_rec acc'\n    count_nums_rec 0", "    let rec count_nums' acc n = \n        if n < 0 then acc\n        else count_nums' (acc + n) (n - 1)\n    count_nums' 0 0", "    let rec count_nums_rec acc = function\n        | [] -> acc\n        | x :: xs -> count_nums_rec (acc + x) xs\n    count_nums_rec 0 arr", "    let rec count_nums_rec acc = function\n        | [] -> acc\n        | x::xs -> count_nums_rec (acc + x) xs\n    count_nums_rec 0 arr", "    let rec count_nums' acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> count_nums' (acc + x) xs\n    count_nums' 0 []", "    let rec count_nums_rec acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let acc = acc + (x - int x)\n            count_nums_rec acc\n    count_nums_rec 0", "    let rec count_nums_rec acc = function\n        | [] -> acc\n        | x::xs -> count_nums_rec (acc + x) xs\n    count_nums_rec 0 arr", "    let rec count_nums' (arr:int[]) = \n        match arr with\n        | [] -> 0\n        | x::xs -> \n            let n = x + 1\n            if n > 0 then \n                count_nums' xs\n            else \n                n\n    count_nums' arr", "    let rec count_nums_rec acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let acc = acc + 1\n            count_nums_rec (acc + x) xs\n    count_nums_rec 0 arr", "    let rec count_nums_rec acc = \n        match arr with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then \n                count_nums_rec (acc + x) xs\n            else \n                count_nums_rec acc xs\n    count_nums_rec 0 []", "    let rec count_nums_rec acc = \n        match arr with \n        | [] -> acc\n        | x::xs -> \n            let acc = acc + 1\n            count_nums_rec (acc - 1) xs\n    count_nums_rec 0 arr", "    let rec count_nums_rec acc = \n        match arr with \n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            count_nums_rec acc'\n    count_nums_rec 0", "    let rec count_nums' (arr:int[]) = \n        match arr with\n        | [] -> 0\n        | x::xs -> \n            let n = x - int x\n            if n > 0 then count_nums' xs else n\n    count_nums' arr", "    let rec count_nums' acc i = \n        if i < 0 then acc\n        else count_nums' (acc + 1) (i - 1)\n    count_nums' 0 0"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}