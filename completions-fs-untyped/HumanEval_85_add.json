{"name": "HumanEval_85_add", "language": "fs", "prompt": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nlet add lst = \n", "tests": "let test() = \n  let candidate = add\n  assert (candidate [4; 88] = 88)\n  assert (candidate [4; 5; 6; 7; 2; 122] = 122)\n  assert (candidate [4; 0; 6; 7] = 0)\n  assert (candidate [4; 4; 6; 8] = 12)\n  0\n\ntest()", "completions": ["    let even = List.filter (fun x -> x % 2 = 0) lst\n    let odd = List.filter (fun x -> x % 2 = 1) lst\n    even @ odd", "    let evens = List.filter (fun x -> x % 2 = 0) lst\n    let odds = List.filter (fun x -> x % 2 = 1) lst\n    List.append evens odds", "    List.fold (fun acc elem -> \n        match acc with\n        | [] -> elem :: acc\n        | _ -> acc) [] lst", "    let evens = List.filter (fun i -> i % 2 = 0) lst\n    let odds = List.filter (fun i -> i % 2 = 1) lst\n    List.append evens odds", "    let evens = List.filter (fun x -> x % 2 = 0) lst\n    let odds = List.filter (fun x -> x % 2 = 1) lst\n    List.append evens odds", "    let evens = List.filter (fun i -> i % 2 = 0) lst\n    let odds = List.filter (fun i -> i % 2 = 1) lst\n    List.append evens odds", "    let evens = List.filter (fun x -> x % 2 = 0) lst\n    let odds = List.filter (fun x -> x % 2 = 0) lst\n    List.fold (fun acc x -> acc + x) 0 evens\n    |> fun x -> List.fold (fun acc x -> acc + x) 0 odds", "    let rec add' acc lst = \n        match lst with\n        | [] -> acc\n        | x :: xs -> add' (x :: acc) xs\n    add' [] lst", "    let evens = List.filter (fun i -> i % 2 = 0) lst\n    let odds = List.filter (fun i -> i % 2 = 1) lst\n    List.fold (fun acc i -> acc + i) 0 evens\n    |> fun x -> x + List.sum odds", "    let evens = List.filter (fun x -> x % 2 = 0) lst\n    let odds = List.filter (fun x -> x % 2 = 1) lst\n    List.append evens odds", "    let evens = \n        lst \n        |> List.filter (fun i -> i % 2 = 0)\n        |> List.map (fun i -> i + 1)\n    let odds = \n        lst \n        |> List.filter (fun i -> i % 2 = 1)\n        |> List.map (fun i -> i + 1)\n    evens @ odds", "    let evens = List.filter (fun i -> i % 2 = 0) lst\n    let odds = List.filter (fun i -> i % 2 = 1) lst\n    List.fold (fun acc elem -> acc + elem) 0 evens\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem % 2)\n    |> List.map (fun elem -> elem)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem % 2)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> elem + 1)\n    |> List.map (fun elem -> ele", "    let evens = List.filter (fun i -> i % 2 = 0) lst\n    let odds = List.filter (fun i -> i % 2 = 1) lst\n    List.append evens odds", "    let evens = List.filter (fun x -> x % 2 = 0) lst\n    let odds = List.filter (fun x -> x % 2 = 1) lst\n    List.append evens odds", "    let rec add' acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs -> add' (x::acc) xs\n    add' [] lst", "    let evens = List.filter (fun i -> i % 2 = 0) lst\n    let odds = List.filter (fun i -> i % 2 = 1) lst\n    List.append evens odds", "    let rec add' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> add' (x::acc) xs\n    add' [] lst", "    let evens = List.filter (fun i -> i % 2 = 0) lst\n    let odds = List.filter (fun i -> i % 2 = 1) lst\n    List.append evens odds", "    let evens = List.filter (fun x -> x % 2 = 0) lst\n    let odds = List.filter (fun x -> x % 2 = 1) lst\n    List.append evens odds", "    let rec add' acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs -> add' (x::acc) xs\n    add' [] lst"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}