{"name": "HumanEval_99_closest_integer", "language": "fs", "prompt": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlet closest_integer value = \n", "tests": "let test() = \n  let candidate = closest_integer\n  assert (candidate \"10\" = 10)\n  assert (candidate \"14.5\" = 15)\n  assert (candidate \"-15.5\" = -16)\n  assert (candidate \"15.3\" = 15)\n  assert (candidate \"0\" = 0)\n  0\n\ntest()", "completions": ["    let rec loop i =\n        if i = value then i\n        else loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then\n            i\n        else\n            loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then\n            i\n        else\n            loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i >= value.Length then\n            i\n        else\n            let current = value.[i]\n            if current = '0' then\n                loop (i + 1)\n            else\n                loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then i\n        else loop (i + 1)\n    loop 0", "    let rec loop i = \n        if i = value then i\n        else loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then i\n        else loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then i\n        else loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then i\n        else loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then\n            i\n        else\n            loop (i + 1)\n    loop 0", "    let rec loop i = \n        if i = value then i\n        else loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then\n            i\n        else\n            loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then\n            i\n        else\n            loop (i + 1)\n    loop 0", "    let rec loop i = \n        if i = value then i\n        else loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then\n            i\n        else\n            loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then\n            i\n        else\n            loop (i + 1)\n    loop 0", "    let rec loop i = \n        if i = value then i\n        else loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then i\n        else loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then\n            i\n        else\n            loop (i + 1)\n    loop 0", "    let rec loop i =\n        if i = value then\n            i\n        else\n            loop (i + 1)\n    loop 0"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}