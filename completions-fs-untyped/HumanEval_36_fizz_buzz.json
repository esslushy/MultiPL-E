{"name": "HumanEval_36_fizz_buzz", "language": "fs", "prompt": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlet fizz_buzz n = \n", "tests": "let test() = \n  let candidate = fizz_buzz\n  assert (candidate 50 = 0)\n  assert (candidate 78 = 2)\n  assert (candidate 79 = 3)\n  assert (candidate 100 = 3)\n  assert (candidate 200 = 6)\n  assert (candidate 4000 = 192)\n  assert (candidate 10000 = 639)\n  assert (candidate 100000 = 8026)\n  0\n\ntest()", "completions": ["    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = int (floor (float n / 11.0))\n            let remainder = n % 11.0\n            if remainder <> 0.0 then fizzBuzz (digit + 1)\n            else fizzBuzz (digit + 2)\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0 \n        else \n            let digit = int (System.Math.Floor(float n / 11.0))\n            let remainder = n - (digit * 11.0)\n            fizzBuzz remainder\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = int (n % 11)\n            let remainder = n / 11\n            fizzBuzz (remainder + digit)\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = int n\n            if digit % 11 = 0 then fizzBuzz (digit / 11)\n            elif digit % 13 = 0 then fizzBuzz (digit / 13)\n            else fizzBuzz (digit / 5)\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = int (n % 11)\n            let remainder = n / 11\n            fizzBuzz (remainder + digit)\n    fizzBuzz n", "    let rec fizzBuzz n = \n        match n with\n        | 0 -> 0\n        | 1 -> 1\n        | _ -> fizzBuzz (n - 1) + fizzBuzz (n - 2)\n    fizzBuzz n", "    let rec fizz_buzz' n = \n        if n = 0 then 0\n        elif n % 11 = 0 then n / 11\n        else n / 11 + fizz_buzz' (n / 11)\n    fizz_buzz' n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n", "    let rec fizzBuzz n = \n        match n with\n        | 0 -> 0\n        | 1 -> 1\n        | 2 -> 2\n        | 3 -> 3\n        | 4 -> 4\n        | 5 -> 5\n        | 6 -> 6\n        | 7 -> 7\n        | _ -> fizzBuzz (n - 1)\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = int (n % 11)\n            let remainder = n / 11\n            if remainder = 0 then digit\n            else fizzBuzz (remainder - 1)\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n < 10 then \n            fizzBuzz (n + 1)\n        else \n            fizzBuzz (n - 1)\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = int n / 11\n            let remainder = n % 11\n            if remainder = 0 then digit\n            else fizzBuzz (remainder + 1)\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0 \n        else \n            let digit = int (System.Math.Floor(float n / 11.0))\n            let remainder = n % 11.0\n            let fizz = (digit * 11) + remainder\n            fizzBuzz (fizz + fizz_buzz(fizz))\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        else \n            let digit = int n / 11\n            let remainder = n % 11\n            if remainder = 0 then \n                digit\n            else\n                fizzBuzz (digit + fizzBuzz (remainder / 10))\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else n\n    fizzBuzz n", "    let rec fizzBuzz n = \n        if n = 0 then 0\n        elif n % 11 = 0 then fizzBuzz (n / 11)\n        elif n % 13 = 0 then fizzBuzz (n / 13)\n        else fizzBuzz (n / 13) + 1\n    fizzBuzz n"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}