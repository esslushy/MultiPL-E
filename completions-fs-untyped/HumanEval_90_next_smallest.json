{"name": "HumanEval_90_next_smallest", "language": "fs", "prompt": "//You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3, 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n// next_smallest([1, 1]) == None\nlet next_smallest lst = \n", "tests": "let test() = \n  let candidate = next_smallest\n  assert (candidate [1; 2; 3; 4; 5] = 2)\n  assert (candidate [5; 1; 4; 3; 2] = 2)\n  assert (candidate [] = None)\n  assert (candidate [1; 1] = None)\n  assert (candidate [1; 1; 1; 1; 0] = 1)\n  assert (candidate [1; 1] = None)\n  assert (candidate [-35; 34; 12; -45] = -35)\n  0\n\ntest()", "completions": ["    let rec loop i =\n        if i = lst.Length then None\n        else\n            let x = lst.[i]\n            if x < lst.[i-1] then loop (i-1)\n            else loop (i-1)\n    loop 0", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc = \n            match x with\n            | [] -> acc\n            | x::xs -> \n                let res = loop (x::acc)\n                if res = None then None else loop (xs::acc)\n        loop []", "    let rec loop i =\n        match lst with\n        | [] -> None\n        | x::xs ->\n            if i = 0 then\n                Some x\n            else\n                loop (i-1)\n    loop 0", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc xs = \n            match xs with\n            | [] -> acc\n            | x::xs -> \n                if x <> xs.[0] then loop (x::acc) xs\n                else loop (x::acc) xs\n        loop [] xs", "    let rec loop i = \n        if i < lst.Length then \n            if lst.[i] < lst.[i-1] then \n                loop (i+1)\n            else \n                None\n        else\n            None\n    loop 0", "    match lst with\n    | [] -> None\n    | x::xs -> \n        match x with\n        | x when x <= 1 -> Some x\n        | _ -> next_smallest xs", "    let rec loop i = \n        if i < lst.Length then \n            let curr = lst.[i]\n            if curr < i then loop (i + 1)\n            else loop (curr)\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (x :: acc) xs\n    loop [] lst", "    let rec loop acc = function\n        | [] -> Some acc\n        | x::xs -> loop (x::acc) xs\n    loop [] lst", "    let rec loop i =\n        match i with\n        | 0 -> None\n        | _ ->\n            let min_i = List.min lst\n            let min_lst = List.take min_i lst\n            let min_lst = List.rev min_lst\n            loop (min_i - 1)\n    loop 0", "    match lst with\n    | [] -> None\n    | x::xs ->\n        let rec find_smallest xs =\n            match xs with\n            | [] -> None\n            | x::xs ->\n                if x <> xs.[0] then find_smallest xs\n                else find_smallest xs\n        find_smallest xs", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec next_smallest_acc xs acc = \n            match xs with\n            | [] -> acc\n            | x::xs -> \n                match next_smallest_acc xs (x::acc) with\n                | None -> acc\n                | Some x -> x::acc\n        next_smallest_acc xs []", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc = function\n            | [] -> acc\n            | x::xs -> \n                match loop (x::acc) xs with\n                | [] -> acc\n                | x::xs -> loop (x::acc) xs\n        loop [] xs", "    let rec loop i = \n        if i < lst.Length then \n            if lst.[i] < lst.[i-1] then \n                loop (i+1)\n            else \n                loop (i-1)\n        else \n            None\n    loop 0", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc xs =\n            match xs with\n            | [] -> acc\n            | x::xs -> \n                match loop (x::acc) xs with\n                | None -> acc\n                | Some x -> loop (x::acc) xs\n        loop [] xs", "    let rec find_min_element lst =\n        match lst with\n        | [] -> None\n        | x::xs ->\n            let min_element = min x\n            if min_element = x then find_min_element xs\n            else find_min_element xs\n    find_min_element lst", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc xs =\n            match xs with\n            | [] -> acc\n            | x::xs -> loop (x::acc) xs\n        loop [] xs", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc = function\n            | [] -> acc\n            | x::xs -> \n                match loop (x::acc) xs with\n                | [] -> acc\n                | xs -> loop (x::acc) xs\n        loop [] xs", "    let rec loop i =\n        if i = lst.Length then None\n        else\n            let elem = lst.[i]\n            if elem < lst.[i-1] then loop (i-1)\n            else loop (i-1)\n    loop 0", "    match lst with\n    | [] -> None\n    | x::xs -> \n        match x with\n        | x when x < 0 -> None\n        | x when x > lst.Length -> None\n        | _ -> Some x"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}