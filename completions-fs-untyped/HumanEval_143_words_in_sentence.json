{"name": "HumanEval_143_words_in_sentence", "language": "fs", "prompt": "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nlet words_in_sentence sentence = \n", "tests": "let test() = \n  let candidate = words_in_sentence\n  assert (candidate \"This is a test\" = \"is\")\n  assert (candidate \"lets go for swimming\" = \"go for\")\n  assert (candidate \"there is no place available here\" = \"there is no place\")\n  assert (candidate \"Hi I am Hussein\" = \"Hi am Hussein\")\n  assert (candidate \"go for it\" = \"go for it\")\n  assert (candidate \"here\" = \"\")\n  assert (candidate \"here is\" = \"is\")\n  0\n\ntest()", "completions": ["    let rec words_in_sentence_rec sentence = \n        match sentence with\n        | \"\" -> \"\"\n        | _ -> sentence.Split(' ') |> Array.map (fun word -> word.ToString())\n    words_in_sentence_rec sentence", "    let rec words_in_sentence_rec (words:string list) (sentence:string) =\n        if sentence.Length = 0 then\n            words\n        else\n            let new_words = sentence.Split(' ')\n            if new_words.Length = words.Length then\n                words\n            else\n                words_in_sentence_rec words new_words\n    words_in_sentence_rec [] sentence", "    let words = sentence.Split(' ')\n    let len = words.Length\n    if len <= 1 then\n        None\n    else\n        Some(words.[0], words.[1..])", "    let words = sentence.Split(' ')\n    words\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length > 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.ToLower())\n    |> Array.filter (fun word -> word.Length = 1)\n    |>", "    let rec words_in_sentence_rec sentence = \n        match sentence with\n        | \"\" -> \"\"\n        | word -> word.ToCharArray() |> Array.map (fun c -> c.ToString()) |> String.concat \" \"\n    words_in_sentence_rec sentence", "    let words = sentence.Split(' ')\n    let len = words.Length\n    if len <> 1 then failwith \"Expected 1 word in sentence\"\n    words.[0]", "    let words = sentence.Split(' ')\n    words\n    |> Array.filter (fun word -> word.Length > 1)\n    |> Array.length", "    let rec words_in_sentence_rec sentence = \n        match sentence with\n        | \"\" -> []\n        | _ -> \n            let words = sentence.Split(' ')\n            let new_words = words |> Array.map (fun word -> word.ToLower())\n            words_in_sentence_rec new_words\n    words_in_sentence_rec sentence", "    let rec words_in_sentence' (words:string) =\n        match words.Length with\n        | 0 -> []\n        | _ ->\n            let words = words.Split(' ')\n            let words = words |> List.map (fun word -> word.Trim())\n            words_in_sentence' words\n    words_in_sentence' sentence", "    let words = sentence.Split(' ')\n    words\n    |> Array.map (fun word -> word.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToString())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToString())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (fun x -> x.Length = 1)\n    |> Array.map (fun x -> x.ToCharArray())\n    |> Array.filter (", "    let rec words_in_sentence' (words:string) =\n        if words.Length = 0 then\n            None\n        else\n            let words_in_sentence' = words.Split(' ')\n            if words_in_sentence'.[0].Length = 0 then\n                None\n            else\n                Some(words_in_sentence'.[0])\n    words_in_sentence' sentence", "    let rec words_in_sentence_rec sentence = \n        match sentence with\n        | \"\" -> \"\"\n        | s -> s.Split(' ') |> Array.map (fun s -> s.Trim()) |> Array.map (fun s -> s.ToLower())\n        |> Array.map (fun s -> s.Trim())\n        |> Array.filter (fun s -> s.Length > 0)\n        |> Array.map (fun s -> s.ToLower())\n        |> Array.map (fun s -> s.Trim())\n        |> Array.map (fun s -> s.ToLower())\n        |> Array.filter (fun s -> s.Length > 0)\n        |> Array.map (fun s -> s.Trim())\n        |> Array.map (fun s -> s.ToLower())\n        |> Array.map (fun s -> s.Trim())\n        |> Array.map (fun s -> s.ToLower())\n        |> Array.filter (fun s -> s.Length > 0)\n        |> Array.map (fun s -> s.Trim())\n        |> Array.map (fun s -> s.ToLower())\n        |> Array.map (fun s -> s.Trim())\n        |> Array.map (fun s -> s.ToLower())\n        |> Array.filter (fun s -> s.Length > 0)\n        |> Array.map (fun s -> s.Trim())\n        |> Array.map (fun s -> s.ToLower())\n        |> Array.filter (fun s -> s.Length > 0)\n        |> Array.map (fun s -> s.Trim())\n        |> Array.map (fun s -> s.ToLower())\n        |> Array.filter (fun s -> s.Length > 0)\n        |> Array.map (fun s -> s.Trim())\n        |> Array.map (fun s -> s.ToLower())\n        |> Array.filter (fun s -> s.Length > 0)\n        |> Array.map (fun s -> s.Trim())\n        |> Array.map (fun s -> s.ToLower())\n        |> Array.filter (fun", "    let words = sentence.Split(' ')\n    let len = words.Length\n    if len <> 1 then\n        failwith \"You need to pass a sentence with only one word\"\n    else\n        words", "    let words = sentence.Split(' ')\n    let len = words.Length\n    if len <> 1 then failwith \"The sentence must be a single word\"\n    words.[0]", "    let words = sentence.Split(' ')\n    words\n    |> Array.filter (fun word -> not (word.StartsWith(\"is\")))\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(0,1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    |> Array.filter (fun word -> word.Length = 1)\n    |> Array.map (fun word -> word.Substring(1))\n    ", "    let rec words_in_sentence' (words:string list) =\n        match words with\n        | [] -> []\n        | word::rest ->\n            if word.Length = 0 then\n                words_in_sentence' rest\n            else\n                words_in_sentence' (word::words)\n    words_in_sentence' sentence", "    let rec words_in_sentence' (words:string list) (sentence:string) =\n        if sentence.Length = 0 then\n            words\n        else\n            let words = sentence.Split(' ')\n            if words.Length = 0 then\n                words\n            else\n                words |> List.map (fun word -> word.Trim())\n    words_in_sentence' words sentence", "    let words = sentence.Split(' ')\n    let len = words.Length\n    let rec loop i =\n        if i < len then\n            let word = words.[i]\n            if word.Length = 1 then\n                if i = 0 then\n                    word\n                else\n                    loop (i - 1)\n            else\n                word\n    loop 0", "    let words = sentence.Split(' ')\n    let len = words.Length\n    if len = 0 then\n        None\n    else\n        Some(words.[0])", "    let rec words_in_sentence' (words:string) =\n        if words.Length = 0 then\n            Some(sentence)\n        else\n            let words' = words.Split(' ')\n            if words'.[0].Length = 0 then\n                words_in_sentence' words'.[1..]\n            else\n                words_in_sentence' words'.[0..]\n    words_in_sentence' sentence"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}