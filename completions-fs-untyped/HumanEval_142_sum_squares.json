{"name": "HumanEval_142_sum_squares", "language": "fs", "prompt": "//\"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output should be -126\nlet sum_squares lst = \n", "tests": "let test() = \n  let candidate = sum_squares\n  assert (candidate [1; 2; 3] = 6)\n  assert (candidate [1; 4; 9] = 14)\n  assert (candidate [] = 0)\n  assert (candidate [1; 1; 1; 1; 1; 1; 1; 1; 1] = 9)\n  assert (candidate [-1; -1; -1; -1; -1; -1; -1; -1; -1] = -3)\n  assert (candidate [0] = 0)\n  assert (candidate [-1; -5; 2; -1; -5] = -126)\n  assert (candidate [-56; -99; 1; 0; -2] = 3030)\n  assert (candidate [-1; 0; 0; 0; 0; 0; 0; 0; -1] = 0)\n  assert (candidate [-16; -9; -2; 36; 36; 26; -20; 25; -40; 20; -4; 12; -26; 35; 37] = -14196)\n  assert (candidate [-1; -3; 17; -1; -15; 13; -1; 14; -14; -12; -5; 14; -14; 6; 13; 11; 16; 16; 4; 10] = -1448)\n  0\n\ntest()", "completions": ["    let rec sum_squares_rec acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x * x\n            sum_squares_rec acc' xs\n    sum_squares_rec 0 lst", "    let rec sum_squares_rec acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> sum_squares_rec (acc + x) xs\n    sum_squares_rec 0 lst", "    let rec sum_squares_i lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + (x + x)\n            sum_squares_i xs\n    sum_squares_i lst", "    let rec sum_squares_i lst i = \n        match lst with \n        | [] -> 0\n        | x :: xs -> \n            let sum = sum_squares_i xs (i + 1)\n            sum + (sum_squares_i xs (i + 1))\n    sum_squares_i lst 0", "    let rec sum_squares_loop acc lst = \n        match lst with \n        | [] -> acc\n        | (x,y)::tail -> \n            let sum = x + y\n            sum_squares_loop (sum * sum) tail\n    sum_squares_loop 0 lst", "    let rec sum_squares_loop acc lst = \n        match lst with \n        | [] -> acc\n        | (x,y)::tail -> \n            let sum = acc + x + y\n            sum_squares_loop (sum + x + y) tail\n    sum_squares_loop 0 lst", "    let rec sum_squares_list acc lst = \n        match lst with\n        | [] -> acc\n        | x :: xs -> sum_squares_list (acc + x) xs\n    sum_squares_list 0 lst", "    let rec sum_squares_rec acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let sum = acc + x\n            sum_squares_rec (sum*sum) xs\n    sum_squares_rec 0 lst", "    let rec sum_squares_rec acc lst = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            let acc = acc + x * x\n            sum_squares_rec acc xs\n    sum_squares_rec 0 lst", "    let rec loop acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec sum_squares_i lst = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            let xs_i = sum_squares_i xs\n            let xs_i_i = xs_i * xs_i\n            let xs_i_i_i = xs_i_i * xs_i_i\n            let xs_i_i_i_i = xs_i_i_i * xs_i_i_i\n            let xs_i_i_i_i_i = xs_i_i_i_i_i * xs_i_i_i_i_i\n            let xs_i_i_i_i_i_i = xs_i_i_i_i_i_i_i * xs_i_i_i_i_i_i_i\n            let xs_i_i_i_i_i_i_i = xs_i_i_i_i_i_i_i_i_i * xs_i_i_i_i_i_i_i_i\n            let xs_i_i_i_i_i_i_i_i = xs_i_i_i_i_i_i_i_i_i_i_i * xs_i_i_i_i_i_i_i_i_i\n            let xs_i_i_i_i_i_i_i_i_i = xs_i_i_i_i_i_i_i_i_i_i_i_i_i * xs_i_i_i_i_i_i_i_i_i_i_i\n            let xs_i_i_i_i_i_i_i_i_i_i_i_i_i_i = xs_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i\n            let xs_i_i_i_i_i_i_i_i", "    let rec loop acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc = acc + x * x\n            loop acc xs\n    loop 0 lst", "    let rec loop acc = function\n        | [] -> acc\n        | x :: xs -> loop (acc + x * x) xs\n    loop 0 lst", "    let rec sum_squares_rec acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            sum_squares_rec acc' xs\n    sum_squares_rec 0 lst", "    let rec sum_squares_rec acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> sum_squares_rec (acc + x) xs\n    sum_squares_rec 0 lst", "    let rec sum_squares_loop acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            let x_sum = x + xs.[0]\n            let x_sum_sum = x_sum + xs.[1]\n            let x_sum_sum_sum = x_sum_sum + xs.[2]\n            sum_squares_loop (x_sum_sum_sum) xs.[3]\n    sum_squares_loop 0 lst", "    let rec sum_squares_loop acc lst = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            let acc = acc + x * x\n            sum_squares_loop acc xs\n    sum_squares_loop 0 lst", "    let rec sum_squares_rec acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> sum_squares_rec (acc + x) xs\n    sum_squares_rec 0 lst", "    let rec sum_squares_rec acc lst = \n        match lst with \n        | [] -> acc\n        | (x,y)::tail -> \n            let acc = acc + x * y\n            sum_squares_rec acc tail\n    sum_squares_rec 0 lst", "    let rec sum_squares_rec acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            sum_squares_rec acc' xs\n    sum_squares_rec 0 lst"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}