{"name": "HumanEval_29_filter_by_prefix", "language": "fs", "prompt": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix strings prefix = \n", "tests": "let test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()", "completions": ["    let rec filter_by_prefix' (strings:string list) (prefix:string) = \n        match strings with\n        | [] -> prefix\n        | head::tail -> \n            if head.StartsWith(prefix) then \n                prefix + head\n            else\n                filter_by_prefix' tail prefix\n    filter_by_prefix' strings prefix", "    strings |> List.filter (fun s -> s.StartsWith(prefix, StringComparison.Ordinal))", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix))", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix))", "    strings \n    |> List.filter (fun s -> s.StartsWith(prefix))\n    |> List.map (fun s -> s.Substring(prefix.Length))", "    strings \n    |> List.filter (fun s -> s.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))\n    |> List.map (fun s -> s.Substring(prefix.Length))", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix))\n    |> List.map (fun s -> s.Substring(prefix.Length))", "    let rec filter_by_prefix' (strings: string list) (prefix: string) =\n        match strings with\n        | [] -> prefix\n        | head::tail ->\n            if head.StartsWith(prefix) then\n                filter_by_prefix' tail prefix\n            else\n                head\n    filter_by_prefix' strings prefix", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))", "    strings\n    |> List.filter (fun x -> x.StartsWith(prefix))", "    let rec filter_by_prefix' (strings:string list) (prefix:string) =\n        if strings.Length = 0 then\n            strings\n        else\n            let first = strings.[0]\n            if first.StartsWith(prefix) then\n                strings.[0..strings.Length-1]\n            else\n                filter_by_prefix' (strings.Tail) prefix\n    filter_by_prefix' strings prefix", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix))\n    |> List.map (fun s -> s.Substring(prefix.Length))", "    strings \n    |> List.filter (fun s -> s.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix))", "    strings |> List.filter (fun x -> x.StartsWith(prefix))", "    strings |> List.filter (fun s -> s.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))", "    strings\n    |> List.filter (fun x -> x.StartsWith(prefix))", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix))", "    let rec filter_by_prefix' (strings: string list) (prefix: string) = \n        if strings.IsEmpty then \n            strings\n        else\n            let first = strings.Head\n            let rest = strings.Tail\n            if first.StartsWith(prefix) then \n                filter_by_prefix' rest prefix\n            else\n                strings\n    filter_by_prefix' strings prefix", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix))\n    |> List.map (fun s -> s.Substring(prefix.Length))"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}