{"name": "HumanEval_61_correct_bracketing", "language": "fs", "prompt": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nlet correct_bracketing brackets = \n", "tests": "let test() = \n  let candidate = correct_bracketing\n  assert (candidate \"()\" = true)\n  assert (candidate \"(()())\" = true)\n  assert (candidate \"()()(()())()\" = true)\n  assert (candidate \"()()((()()())())(()()(()))\" = true)\n  assert (candidate \"((()())))\" = false)\n  assert (candidate \")(()\" = false)\n  assert (candidate \"(\" = false)\n  assert (candidate \"((((\" = false)\n  assert (candidate \")\" = false)\n  assert (candidate \"(()\" = false)\n  assert (candidate \"()()(()())())(()\" = false)\n  assert (candidate \"()()(()())()))()\" = false)\n  0\n\ntest()", "completions": ["    let rec loop brackets = \n        match brackets with \n        | [] -> true\n        | (bracket, rest) :: rest -> \n            if bracket = \"(\" && rest = \")\" then \n                loop rest\n            else \n                loop (bracket :: rest)\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket,bracket') :: rest ->\n            if bracket = bracket' then loop rest\n            else loop rest\n    loop brackets", "    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (bracket, bracket_closing)::tail -> \n            if bracket = bracket_closing then loop tail\n            else loop (bracket::brackets)\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket, closing) :: rest ->\n            match closing with\n            | '(' -> loop rest\n            | ')' -> loop rest\n            | '(' :: closing -> loop rest\n            | closing -> loop rest\n    loop brackets", "    let rec loop brackets = \n        match brackets with \n        | [] -> true\n        | (bracket,bracket') :: rest -> \n            if bracket = bracket' then loop rest\n            else loop rest\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest ->\n            if bracket = \"(\" && rest = \")\" then\n                loop rest\n            else\n                loop (bracket :: rest)\n    loop brackets", "    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest -> \n            if bracket = \"()\" then loop rest\n            else loop rest\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket,bracket') :: rest ->\n            if bracket = bracket' then\n                loop rest\n            else\n                loop (bracket :: rest)\n    loop brackets", "    let rec loop brackets = \n        match brackets with \n        | [] -> true\n        | (bracket, rest) :: rest' -> \n            match bracket with \n            | \"(\" -> loop rest'\n            | \")\" -> loop rest'\n            | _ -> loop rest'\n    loop brackets", "    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (bracket, bracket_list) :: rest -> \n            match bracket with\n            | '(' -> loop rest\n            | ')' -> loop rest\n            | '(' :: rest -> loop rest\n            | ')' :: rest -> loop rest\n            | _ -> false\n    loop brackets", "    let rec loop (brackets:string list) =\n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest ->\n            if bracket = \"(\" && bracket = \")\" then\n                loop rest\n            else\n                loop rest\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket, bracket_list)::rest ->\n            if bracket = brackets then\n                loop rest\n            else\n                loop (bracket::bracket_list)\n    loop brackets", "    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (bracket,bracket') :: rest -> \n            if bracket = \"(\" && bracket' = \")\" then\n                loop rest\n            else\n                loop (bracket :: brackets)\n    loop brackets", "    let rec loop brackets = \n        match brackets with \n        | [] -> true\n        | (bracket,bracket') :: rest -> \n            if bracket = \"(\" && bracket' = \")\" then \n                loop rest\n            else\n                loop (bracket :: brackets)\n    loop brackets", "    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (bracket, bracket_bracket)::rest -> \n            if bracket = bracket_bracket then loop rest\n            else loop rest\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest ->\n            if bracket = \"(\" && rest = \")\" then\n                loop rest\n            else\n                loop (bracket :: rest)\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket,bracket') :: rest ->\n            if bracket = bracket' then\n                loop rest\n            else\n                loop (bracket :: brackets)\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket, bracket_list) :: rest ->\n            match bracket with\n            | '(' -> loop rest\n            | ')' -> loop rest\n            | _ -> loop rest\n    loop brackets", "    let rec check_bracket (bracket:string) = \n        if bracket.StartsWith(\"(\") && bracket.EndsWith(\")\") then\n            let brackets = bracket.Substring(1, bracket.Length - 2)\n            let brackets = brackets.Split([|'('; ')'|], System.StringSplitOptions.RemoveEmptyEntries)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.", "    let rec check_bracket (bracket:string) = \n        if bracket.StartsWith(\"(\") && bracket.EndsWith(\")\") then\n            let opening_bracket = bracket.Substring(0, bracket.Length - 2)\n            let closing_bracket = bracket.Substring(bracket.Length - 1)\n            let opening_bracket_has_closing_bracket = brackets |> List.exists (fun b -> b = opening_bracket)\n            let closing_bracket_has_opening_bracket = brackets |> List.exists (fun b -> b = closing_bracket)\n            if opening_bracket_has_opening_bracket && closing_bracket_has_opening_bracket then\n                Some(opening_bracket, opening_bracket)\n            else\n                None\n        else\n            None\n    check_bracket brackets"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}