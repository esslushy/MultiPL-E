{"name": "HumanEval_56_correct_bracketing", "language": "fs", "prompt": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing brackets = \n", "tests": "let test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()", "completions": ["    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (bracket, c)::tail -> \n            if c = '<' then loop tail\n            else loop (bracket::tail)\n    loop brackets", "    let rec check_bracket (bracket:string) =\n        if bracket.StartsWith(\"<\") && bracket.EndsWith(\">\") then\n            let brackets = bracket.Split([|'<'|], StringSplitOptions.RemoveEmptyEntries)\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun x -> x.Trim())\n            let brackets = brackets |> Array.map (fun", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (left, right) :: rest ->\n            if left = right then\n                loop rest\n            else\n                loop (left :: brackets)\n    loop brackets", "    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest -> \n            if bracket = \">\" then loop rest\n            else loop rest\n    loop brackets", "    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest -> \n            if bracket = \">\" then loop rest\n            else loop rest\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | h :: t -> loop t\n        | h :: t -> loop (h :: brackets)\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest ->\n            if bracket = \"<\" && rest = \">\" then\n                loop rest\n            else\n                loop rest\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (left, right) :: rest ->\n            if left = right then\n                loop rest\n            else\n                loop (left :: brackets)\n    loop brackets", "    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (x, y)::rest -> \n            if x = y then \n                loop rest\n            else\n                loop (x::rest)\n    loop brackets", "    let rec loop brackets = \n        match brackets with \n        | [] -> true\n        | (bracket, rest) :: rest -> \n            if bracket = \"<\" && rest = \">\" then \n                loop rest\n            else \n                loop (bracket :: rest)\n    loop brackets", "    let rec check_bracket (bracket:string) =\n        if bracket.StartsWith(\"<\") && bracket.EndsWith(\">\") then\n            let opening_bracket = bracket.Substring(1, bracket.Length - 2)\n            let closing_bracket = bracket.Substring(0, bracket.Length - 2)\n            let opening_bracket_closed = brackets |> List.exists (fun x -> x = opening_bracket)\n            let closing_bracket_closed = brackets |> List.exists (fun x -> x = closing_bracket)\n            if opening_bracket_closed && closing_bracket_closed then\n                true\n            else\n                false\n        else\n            false\n    check_bracket brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest ->\n            match bracket with\n            | \"<\" -> loop rest\n            | \">\" -> loop rest\n            | \"<=\" -> loop rest\n            | \">=\" -> loop rest\n            | \"<>\" -> loop rest\n            | _ -> false\n    loop brackets", "    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest -> \n            if bracket = \"<\" && rest = \">\" then \n                loop rest\n            else\n                loop (bracket :: rest)\n    loop brackets", "    let rec check_bracket (bracket:string) =\n        if bracket.StartsWith(\"<\") && bracket.EndsWith(\">\") then\n            let brackets = bracket.Split([|'<'|], StringSplitOptions.RemoveEmptyEntries)\n            if brackets.Length <> 2 then\n                false\n            else\n                let first_bracket = brackets.[0]\n                let second_bracket = brackets.[1]\n                if first_bracket.StartsWith(\"<\") && second_bracket.EndsWith(\">\") then\n                    let first_bracket = first_bracket.Split([|'<'|], StringSplitOptions.RemoveEmptyEntries)\n                    let second_bracket = second_bracket.Split([|'>'|], StringSplitOptions.RemoveEmptyEntries)\n                    if first_bracket.Length <> 2 && second_bracket.Length <> 2 then\n                        false\n                    else\n                        let first_bracket = first_bracket.[0]\n                        let second_bracket = second_bracket.[0]\n                        if first_bracket.StartsWith(\"<\") && second_bracket.EndsWith(\">\") then\n                            let first_bracket = first_bracket.Split([|'<'|], StringSplitOptions.RemoveEmptyEntries)\n                            let second_bracket = second_bracket.Split([|'>'|], StringSplitOptions.RemoveEmptyEntries)\n                            if first_bracket.Length <> 2 && second_bracket.Length <> 2 then\n                                false\n                            else\n                                let first_bracket = first_bracket.[0]\n                                let second_bracket = second_bracket.[0]\n                                if first_bracket.StartsWith(\"<\") && second_bracket.EndsWith(\">\") then\n                                    let first_bracket = first_bracket.Split([|'<'|], StringSplitOptions.RemoveEmptyEntries)\n                                    let second_bracket = second_bracket.Split([|'>'|], StringSplitOptions.RemoveEmptyEntries)\n                                    if first_bracket.Length <> 2 && second_bracket.Length <> 2 then\n                                        false\n                                    else", "    let rec loop brackets = \n        match brackets with \n        | [] -> true\n        | (bracket,bracket_list)::tail -> \n            if bracket = '<' && bracket_list = brackets then \n                loop tail\n            else \n                loop (bracket::bracket_list)\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (left, right) :: rest ->\n            if left = right then\n                loop rest\n            else\n                loop (left :: brackets)\n    loop brackets", "    let rec loop brackets = \n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest -> \n            if bracket = \"<\" && rest = brackets then\n                loop rest\n            else\n                loop rest\n    loop brackets", "    let rec loop brackets =\n        match brackets with\n        | [] -> true\n        | (bracket, rest) :: rest ->\n            if bracket = \"<\" && rest = \">\" then\n                loop rest\n            else\n                loop (bracket :: rest)\n    loop brackets", "    let rec loop (brackets:string list) =\n        match brackets with\n        | [] -> true\n        | h :: t ->\n            match h with\n            | \"<\" -> loop t\n            | \">\" -> loop t\n            | \"<>\" -> loop t\n            | \"<<\" -> loop t\n            | \">>>\" -> loop t\n            | _ -> false\n    loop brackets", "    let rec loop brackets = \n        match brackets with \n        | [] -> true\n        | (bracket,bracket_brackets)::rest -> \n            if bracket = \">\" then \n                loop rest\n            else \n                loop (bracket::bracket_brackets)\n    loop brackets"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}