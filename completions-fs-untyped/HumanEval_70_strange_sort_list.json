{"name": "HumanEval_70_strange_sort_list", "language": "fs", "prompt": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) == []\nlet strange_sort_list lst = \n", "tests": "let test() = \n  let candidate = strange_sort_list\n  assert (candidate [1; 2; 3; 4] = [1; 4; 2; 3])\n  assert (candidate [5; 6; 7; 8; 9] = [5; 9; 6; 8; 7])\n  assert (candidate [1; 2; 3; 4; 5] = [1; 5; 2; 4; 3])\n  assert (candidate [5; 6; 7; 8; 9; 1] = [1; 9; 5; 8; 6; 7])\n  assert (candidate [5; 5; 5; 5] = [5; 5; 5; 5])\n  assert (candidate [] = [])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8] = [1; 8; 2; 7; 3; 6; 4; 5])\n  assert (candidate [0; 2; 2; 2; 5; 5; -5; -5] = [-5; 5; -5; 5; 0; 2; 2; 2])\n  assert (candidate [111111] = [111111])\n  0\n\ntest()", "completions": ["    let rec loop acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] lst", "    let rec sort_list lst = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_x = min x\n            let max_x = max x\n            let min_y = min y\n            let max_y = max y\n            if min_x < max_x && min_y < max_y then\n                let temp = min_x\n                min_x <- max_x\n                max_x <- temp\n                sort_list xs\n            elif min_y < max_y && min_x < max_x then\n                let temp = min_y\n                min_y <- max_y\n                max_y <- temp\n                sort_list xs\n            else\n                let temp = min_y\n                min_y <- max_y\n                max_y <- temp\n                sort_list xs\n    sort_list lst", "    let rec loop acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] lst", "    let rec sort_list lst = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x\n            let max_val = max x\n            let min_val_list = sort_list xs\n            let max_val_list = sort_list xs\n            (min_val_list, max_val_list)\n    sort_list lst", "    let rec sort_list acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            let min_val = min x acc\n            let max_val = max x acc\n            let new_list = sort_list (min_val::acc) xs\n            sort_list (max_val::acc) new_list\n    sort_list [] lst", "    let rec loop i lst = \n        match lst with \n        | [] -> []\n        | x::xs -> \n            if i = 0 then loop (i-1) xs\n            else loop (i-1) (x::xs)\n    loop 0 lst", "    let rec sort_list lst = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x\n            let max_val = max x\n            let new_list = \n                if min_val > max_val then\n                    [min_val, max_val]\n                else\n                    [min_val, max_val]\n            sort_list new_list\n    sort_list lst", "    let rec loop i lst = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            if i = 0 then x::loop (i-1) xs\n            else loop (i-1) (x::xs)\n    loop 0 lst", "    let rec sort_list acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            let min_val = min x acc\n            let max_val = max x acc\n            let new_list = sort_list (min_val::acc) xs\n            sort_list (max_val::acc) new_list\n    sort_list [] lst", "    let rec loop acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] lst", "    let rec sort_list lst = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x\n            let max_val = max x\n            let min_val_list = min_val::xs\n            let max_val_list = max_val::xs\n            sort_list min_val_list\n            sort_list max_val_list\n    sort_list lst", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] lst", "    let rec sort_list lst = \n        match lst with \n        | [] -> []\n        | x::xs -> \n            let min_val = min x\n            let max_val = max x\n            let new_list = \n                if min_val > max_val then \n                    [min_val, max_val]\n                else\n                    [min_val, x]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            let x_min, x_max = min x xs\n            let x_min_acc = sort_list (x_min::acc) xs\n            let x_max_acc = sort_list (x_max::acc) xs\n            sort_list (x_min_acc@x_max_acc) xs\n    sort_list [] lst", "    let rec sort_list lst = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x\n            let max_val = max x\n            let new_list = \n                if min_val > max_val then \n                    [min_val, max_val]\n                else\n                    [min_val, max_val]\n            sort_list new_list\n    sort_list lst", "    let rec loop acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] lst", "    let rec sort_list acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let min_val = min x acc\n            let max_val = max x acc\n            sort_list (min_val::acc) xs\n    sort_list [] lst", "    let rec sort_list lst = \n        match lst with \n        | [] -> []\n        | x::xs -> \n            let min_val = min x\n            let max_val = max x\n            let new_list = \n                if min_val > max_val then \n                    [min_val]\n                else \n                    [max_val]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list lst = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_x = min x\n            let max_x = max x\n            let min_y = min y\n            let max_y = max y\n            if min_x < max_x && min_y < max_y then\n                [min_x; min_y; max_x; max_y]\n            else\n                sort_list xs\n    sort_list lst", "    let rec sort_list acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let xs_min = min xs\n            let xs_max = max xs\n            let xs_min_max = min xs_min xs_max\n            if xs_min_max > xs_min then sort_list (xs_min_max::acc) xs\n            else sort_list (xs_min::acc) xs\n    sort_list [] lst"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}