{"name": "HumanEval_146_specialFilter", "language": "fs", "prompt": "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlet specialFilter nums = \n", "tests": "let test() = \n  let candidate = specialFilter\n  assert (candidate [5; -2; 1; -5] = 0)\n  assert (candidate [15; -73; 14; -15] = 1)\n  assert (candidate [33; -2; -3; 45; 21; 109] = 2)\n  assert (candidate [43; -12; 93; 125; 121; 109] = 4)\n  assert (candidate [71; -2; -33; 75; 21; 19] = 3)\n  assert (candidate [1] = 0)\n  assert (candidate [] = 0)\n  0\n\ntest()", "completions": ["    let rec loop acc = \n        if acc = nums.Length then acc\n        else loop (acc + 1)\n    loop 0", "    let rec loop acc nums = \n        if nums = 0 then acc\n        else \n            if nums % 2 = 0 then loop (acc + 1) (nums / 2)\n            else loop (acc + 1) (nums / 2)\n    loop 0 nums", "    let rec loop acc nums = \n        if nums = 0 then acc\n        else loop (acc + nums) (nums - 1)\n    loop 0 nums", "    let rec loop i = \n        if i = nums.Length then i\n        else loop (i + 1)\n    loop 0", "    let rec loop acc nums = \n        if nums = 0 then acc\n        else loop (acc + nums) (nums - 1)\n    loop 0 nums", "    let rec loop acc nums = \n        if nums = 0 then acc\n        else loop (acc + nums) (nums - 1)\n    loop 0 nums", "    let rec loop acc nums = \n        if nums = 0 then acc\n        else loop (acc + nums) (nums - 1)\n    loop 0 nums", "    let rec loop acc = \n        if acc = nums then acc\n        else loop (acc + 1)\n    loop 0", "    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1) xs\n            else loop (acc + 1) xs\n    loop 0 nums", "    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1) xs\n            else loop (acc + 1) xs\n    loop 0 nums", "    let rec loop acc nums = \n        if nums |> Seq.exists ((=) num) then \n            acc + 1\n        else \n            loop (acc + 1) (nums |> Seq.takeWhile ((=) num) |> Seq.length)\n    loop 0 nums", "    let rec loop i = \n        if i = nums.Length then 0\n        else \n            if nums.[i] % 2 = 0 then loop (i + 1)\n            else loop (i + 1)\n    loop 0", "    let rec loop acc nums = \n        match nums with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1) xs\n            else loop (acc + 1) xs\n    loop 0 nums", "    let rec loop acc nums = \n        if nums = 0 then acc\n        else loop (acc + nums) (nums - 1)\n    loop 0 nums", "    let rec specialFilter' nums = \n        match nums with \n        | [] -> 0 \n        | x::xs -> \n            if x % 2 = 0 then specialFilter' xs\n            else specialFilter' (x::xs)\n    specialFilter' nums", "    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1) xs\n            else loop (acc + 1) xs\n    loop 0 nums", "    let rec loop i = \n        if i = nums.Length then 0\n        else \n            let first = nums.[i]\n            let last = nums.[i] - 1\n            if first > 10 && last > 10 then loop (i + 1)\n            else loop (i + 1)\n    loop 0", "    let rec loop acc nums = \n        if nums = 0 then acc\n        else loop (nums - 1) (nums / 2)\n    loop 0 nums", "    let rec loop acc nums = \n        if nums = 0 then acc\n        else loop (acc + nums) (nums - 1)\n    loop 0 nums", "    let rec loop acc nums = \n        match nums with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1) xs\n            else loop (acc + 1) xs\n    loop 0 nums"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}