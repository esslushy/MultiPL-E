{"name": "HumanEval_6_parse_nested_parens", "language": "fs", "prompt": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens paren_string = \n", "tests": "let test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()", "completions": ["    let rec parse_parens (parens:string list) = \n        match parens with \n        | [] -> []\n        | (parens_string, parens_level)::rest -> \n            let parens_string = parens_string.Trim()\n            let parens_level = parens_level.Trim()\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\")\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level = parens_level.Replace(\"(\", \"\")\n            let parens_level =", "    let rec parse_parens_nested_parens paren_string = \n        match paren_string with\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()\" -> []\n        |let rec parse_parens (paren_string:string) = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        |let rec parse_nested_parens_rec paren_string = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []", "    let rec parse_parens (paren_string:string) = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"(()())\" -> []\n        | \"(()())()\" -> []\n        | \"(()())()()\" -> []\n        | \"(()())()()()\" -> []\n        | \"(()())()()()()\" -> []\n        | \"(()())()()()()()\" -> []\n        | \"(()())()()()()()()\" -> []\n        | \"(()())()()()()()()()\" -> []\n        | \"(()())()()()()()()()()\" -> []\n        | \"(()())()()()()()()()()()\" -> []\n        | \"(()())()()()()()()()()()()()\" -> []\n        | \"(()())()()()()()()()()()()()()()()\" -> []\n        |let rec parse_nested_parens_rec paren_string = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        |let rec parse_parens (paren_string:string) = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "    let rec parse_parens (paren_string:string) = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        ", "    let rec parse_parens (paren_string:string) = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        ", "    let rec parse_nested_parens_rec paren_string = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "    let rec parse_nested_parens_rec paren_string = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []", "    let rec parse_parens paren_string = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(()", "    let rec parse_parens (paren_string:string) = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()\" -> []\n        |let rec parse_nested_parens_rec paren_string = \n        match paren_string with \n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" ->", "    let rec parse_nested_parens_rec paren_string = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()\" -> []\n        |let rec parse_nested_parens_rec paren_string = \n        match paren_string with \n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()\" -> []\n        |let rec parse_nested_parens_rec paren_string = \n        match paren_string with\n        | \"\" -> []\n        | _ -> \n            let paren_string = paren_string.Trim()\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\", \"\")\n            let paren_string = paren_string.Replace(\")\", \"\")\n            let paren_string = paren_string.Replace(\"(\",", "    let rec parse_parens (paren_string:string) = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        ", "    let rec parse_parens_rec paren_string = \n        match paren_string with\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "    let rec parse_parens (paren_string:string) = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}