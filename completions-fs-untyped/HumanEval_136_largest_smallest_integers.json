{"name": "HumanEval_136_largest_smallest_integers", "language": "fs", "prompt": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0]) == (None, None)\nlet largest_smallest_integers lst = \n", "tests": "let test() = \n  let candidate = largest_smallest_integers\n  assert (candidate [2; 4; 1; 3; 5; 7] = (None, 1))\n  assert (candidate [2; 4; 1; 3; 5; 7; 0] = (None, 1))\n  assert (candidate [1; 3; 2; 4; 5; 6; -2] = (-2, 1))\n  assert (candidate [4; 5; 3; 6; 2; 7; -7] = (-7, 2))\n  assert (candidate [7; 3; 8; 4; 9; 2; 5; -9] = (-9, 2))\n  assert (candidate [] = (None, None))\n  assert (candidate [0] = (None, None))\n  assert (candidate [-1; -3; -5; -6] = (-1, None))\n  assert (candidate [-1; -3; -5; -6; 0] = (-1, None))\n  assert (candidate [-6; -4; -4; -3; 1] = (-3, 1))\n  assert (candidate [-6; -4; -4; -3; -100; 1] = (-3, 1))\n  0\n\ntest()", "completions": ["    let rec largest_smallest_integers_rec acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs ->\n            if x < 0 then largest_smallest_integers_rec (Some x) xs\n            else largest_smallest_integers_rec (Some x) xs\n    largest_smallest_integers_rec None lst", "    match lst with\n    | [] -> None\n    | _ ->\n        let rec largest_smallest_integers' acc =\n            match acc with\n            | [] -> largest_smallest_integers' acc\n            | x::xs ->\n                if x < 0 then largest_smallest_integers' (x::acc)\n                else largest_smallest_integers' (x::acc)\n        largest_smallest_integers' []", "    match lst with\n    | [] -> None\n    | _ ->\n        let rec largest_smallest_integers' acc lst =\n            match lst with\n            | [] -> acc\n            | x::xs -> largest_smallest_integers' (Some x) xs\n        largest_smallest_integers' None lst", "    match lst with\n    | [] -> None\n    | x::xs -> \n        let rec loop acc xs = \n            match xs with\n            | [] -> acc\n            | x::xs -> \n                match x with\n                | x when x < 0 -> loop (x::acc) xs\n                | x when x > 0 -> loop (x::acc) xs\n                | _ -> loop (x::acc) xs\n        loop [] xs", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc xs = \n            match xs with\n            | [] -> acc\n            | x::xs -> \n                if x > 0 then loop (x::acc) xs\n                else loop acc xs\n        loop [] xs", "    let rec largest_smallest_integers_rec acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = largest_smallest_integers_rec acc xs\n            largest_smallest_integers_rec acc' xs\n    largest_smallest_integers_rec None lst", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs ->\n        let rec loop acc xs =\n            match xs with\n            | [] -> acc\n            | x::xs -> loop (x::acc) xs\n        loop [] xs", "    match lst with\n    | [] -> None\n    | [_] -> None\n    | _ ->\n        let rec loop acc = function\n            | [] -> acc\n            | x::xs ->\n                match x with\n                | x when x < 0 -> loop (x::acc) xs\n                | x when x > 0 -> loop (x::acc) xs\n                | _ -> loop (x::acc) xs\n        loop [] lst", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc xs = \n            match xs with\n            | [] -> acc\n            | [y] -> loop (y::acc) xs\n            | x::xs -> loop (x::acc) xs\n        loop [] xs", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc xs =\n            match xs with\n            | [] -> acc\n            | x::xs -> \n                let y = x - xs.[0]\n                if y < 0 then loop (x::acc) xs\n                else loop (x::acc) xs\n        loop [] xs", "    let rec largest_smallest_integers' acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> largest_smallest_integers' (Some x) xs\n    largest_smallest_integers' None lst", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc xs =\n            match xs with\n            | [] -> acc\n            | x::xs -> loop (x::acc) xs\n        loop [] xs", "    let rec largest_smallest_integers' acc = function\n        | [] -> acc\n        | x :: xs -> largest_smallest_integers' (x :: acc) xs\n    largest_smallest_integers' [] lst", "    let rec largest_smallest_integers' acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x < 0 then largest_smallest_integers' (x::acc)\n            else largest_smallest_integers' (x::acc)\n    largest_smallest_integers' []", "    match lst with\n    | [] -> None\n    | _ ->\n        let rec largest_smallest_integers_rec acc lst =\n            match lst with\n            | [] -> acc\n            | x :: xs -> largest_smallest_integers_rec (Some x) xs\n        largest_smallest_integers_rec None lst", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs ->\n        let rec loop acc xs =\n            match xs with\n            | [] -> acc\n            | x::xs ->\n                let y = x - xs.[0]\n                if y < 0 then loop (x::acc) xs\n                else loop (x::acc) xs\n        loop [] xs", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc xs = \n            match xs with\n            | [] -> acc\n            | x::xs -> \n                match x with\n                | x when x < 0 -> loop (x::acc) xs\n                | x when x > 0 -> loop (x::acc) xs\n                | _ -> loop (x::acc) xs\n        loop [] xs", "    match lst with\n    | [] -> None\n    | _ ->\n        let rec largest_smallest_integers' acc = function\n            | [] -> acc\n            | x::xs -> largest_smallest_integers' (x::acc) xs\n        largest_smallest_integers' [] lst", "    let rec largest_smallest_integers_rec acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> largest_smallest_integers_rec (x::acc) xs\n    largest_smallest_integers_rec [] lst", "    let rec largest_smallest_integers_rec acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then largest_smallest_integers_rec (x::acc) xs\n            else largest_smallest_integers_rec acc xs\n    largest_smallest_integers_rec [] lst"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}