{"name": "HumanEval_81_numerical_letter_grade", "language": "fs", "prompt": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nlet numerical_letter_grade grades = \n", "tests": "let test() = \n  let candidate = numerical_letter_grade\n  assert (candidate [4.0; 3; 1.7; 2; 3.5] = [\"A+\"; \"B\"; \"C-\"; \"C\"; \"A-\"])\n  assert (candidate [1.2] = [\"D+\"])\n  assert (candidate [0.5] = [\"D-\"])\n  assert (candidate [0.0] = [\"E\"])\n  assert (candidate [1.0; 0.3; 1.5; 2.8; 3.3] = [\"D\"; \"D-\"; \"C-\"; \"B\"; \"B+\"])\n  assert (candidate [0.0; 0.7] = [\"E\"; \"D-\"])\n  0\n\ntest()", "completions": ["    let grade = \n        grades \n        |> List.map (fun x -> x.ToString())\n        |> String.concat \" \"\n    grade", "    let grade = \n        grades \n        |> List.map (fun x -> x.Grade)\n        |> List.reduce (+)\n    grade", "    let grade = \n        grades\n        |> List.map (fun x -> x.Grade)\n        |> List.reduce (+)\n    grade", "    let grade = \n        grades \n        |> List.map (fun x -> x.Grade) \n        |> List.sum\n    grade", "    let grade = \n        grades \n        |> List.map (fun x -> x.Grade)\n        |> List.sum\n    grade", "    let grade = \n        grades \n        |> List.map (fun (letter,grade) -> letter,grade) \n        |> List.filter (fun (letter,grade) -> grade > 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.sortBy (fun (letter,grade) -> grade)\n        |> List.head\n    grade", "    let grade = \n        grades \n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade > 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.map", "    let grade = \n        grades \n        |> List.map (fun x -> x.Grade)\n        |> List.sum\n    grade", "    let grade = \n        grades \n        |> List.map (fun x -> x.Grade)\n        |> List.sum\n    grade", "    let grade = \n        grades \n        |> List.map (fun x -> x.ToString())\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()))\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()))\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()))\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()))\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()))\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()))\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()))\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()))\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()))\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()))\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray() |> Array.map (fun x -> x.ToString()", "    let grade = \n        grades \n        |> List.map (fun x -> x.Grade)\n        |> List.max\n    grade", "    let grade = \n        grades \n        |> List.map (fun x -> x.ToString())\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray())\n        |> List.map (fun x -> x.[0])\n        |> List.map (fun x -> x.ToString())\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray())\n        |> List.map (fun x -> x.[0])\n        |> List.map (fun x -> x.ToString())\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray())\n        |> List.map (fun x -> x.[0])\n        |> List.map (fun x -> x.ToString())\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray())\n        |> List.map (fun x -> x.[0])\n        |> List.map (fun x -> x.ToString())\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray())\n        |> List.map (fun x -> x.[0])\n        |> List.map (fun x -> x.ToString())\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray())\n        |> List.map (fun x -> x.[0])\n        |> List.map (fun x -> x.ToString())\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToCharArray())\n        |> List.map (fun x -> x.[0])\n        |> List.map (fun x -> x.ToString())\n        |> List.filter (fun x -> x.Length > 0)\n        |> List.map (fun x -> x.ToChar", "    let grade = \n        grades \n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.sortBy (fun (letter,grade) -> grade)\n        |> List.head\n    grade", "    let grade = \n        grades \n        |> List.map (fun x -> x.Grade)\n        |> List.sum\n    grade", "    let grade = \n        grades \n        |> List.map (fun x -> x.Grade)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (fun x -> x <> 'A')\n        |> List.map (fun x -> x.Letter)\n        |> List.filter (", "    let grade = \n        grades \n        |> List.map (fun (letter,grade) -> letter,grade) \n        |> List.filter (fun (letter,grade) -> grade > 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade < 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade > 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade < 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade > 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade < 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade > 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade < 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade > 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade < 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade > 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |> List.filter (fun (letter,grade) -> grade < 0.0)\n        |> List.map (fun (letter,grade) -> letter,grade)\n        |", "    let grade = \n        grades \n        |> List.map (fun (letter,grade) -> letter, grade) \n        |> List.filter (fun (letter,grade) -> grade > 0.0)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.map (fun (letter,grade) -> letter, grade)\n        |> List.", "    let grade = \n        grades\n        |> List.map (fun x -> x.ToString())\n        |> String.concat \" \"\n    grade", "    let grade = \n        grades\n        |> List.map (fun (letter, grade) -> letter, grade)\n        |> List.filter (fun (letter, _) -> letter = 'A' || letter = 'B' || letter = 'C' || letter = 'D' || letter = 'E')\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)\n        |> List.map (fun (letter, _) -> letter, 0.0)", "    let grade = \n        grades \n        |> List.map (fun x -> x.ToString()) \n        |> List.reduce (+)\n    grade.ToCharArray()"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}