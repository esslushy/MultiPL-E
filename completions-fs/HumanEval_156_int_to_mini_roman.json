{"name": "HumanEval_156_int_to_mini_roman", "language": "fs", "prompt": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nlet int_to_mini_roman (number: int): string  = \n", "tests": "let test() = \n  let candidate = int_to_mini_roman\n  assert (candidate 19 = \"xix\")\n  assert (candidate 152 = \"clii\")\n  assert (candidate 251 = \"ccli\")\n  assert (candidate 426 = \"cdxxvi\")\n  assert (candidate 500 = \"d\")\n  assert (candidate 1 = \"i\")\n  assert (candidate 4 = \"iv\")\n  assert (candidate 43 = \"xliii\")\n  assert (candidate 90 = \"xc\")\n  assert (candidate 94 = \"xciv\")\n  assert (candidate 532 = \"dxxxii\")\n  assert (candidate 900 = \"cm\")\n  assert (candidate 994 = \"cmxciv\")\n  assert (candidate 1000 = \"m\")\n  0\n\ntest()", "completions": ["    let rec loop i = \n        match i with\n        | 0 -> \"\"\n        | 1 -> \"I\"\n        | 2 -> \"II\"\n        | 3 -> \"III\"\n        | 4 -> \"IV\"\n        | 5 -> \"V\"\n        | 6 -> \"VI\"\n        | 7 -> \"VII\"\n        | 8 -> \"VIII\"\n        | 9 -> \"IX\"\n        | 10 -> \"X\"\n        | 11 -> \"XI\"\n        | 12 -> \"XII\"\n        | 13 -> \"XIII\"\n        | 14 -> \"XIV\"\n        | 15 -> \"XV\"\n        | 16 -> \"XVI\"\n        | 17 -> \"XVII\"\n        | 18 -> \"XVIII\"\n        | 19 -> \"XIX\"\n        | _ -> loop (i - 1)\n    loop number", "    let romanNumeral = \n        number \n        |> string \n        |> Seq.takeWhile (fun c -> c <> 'i' && c <> 'o' && c <> 'u')\n        |> Seq.toList\n    romanNumeral\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.", "    let romanNumeral = \n        number \n        |> string \n        |> String.toLower \n        |> fun x -> x.[0..1]\n    romanNumeral", "    let romanNumeral = \n        number \n        |> string \n        |> String.map (fun x -> x.ToString()) \n        |> String.toLower\n    romanNumeral", "    let romanNumeral = System.Convert.ToString(number)\n    let lowerCaseRomanNumeral = romanNumeral.ToLower()\n    if lowerCaseRomanNumeral.Length > 1 then\n        lowerCaseRomanNumeral.Substring(0, 1) + romanNumeral.Substring(1)\n    else\n        romanNumeral", "    let romanNumeral = string number\n    let romanNumeralLower = romanNumeral.ToLower()\n    romanNumeralLower.ToCharArray()\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.rev\n    |> Array.", "    let romanNumeral = string (number % 10)\n    let romanNumeral = romanNumeral.ToString()\n    romanNumeral.ToLower()", "    let romanNumeral = System.Convert.ToString(number, System.Globalization.NumberStyles.AllowHexSpecifier)\n    romanNumeral.ToLower()", "    let romanNumeral = \n        number \n        |> string \n        |> Seq.takeWhile (fun c -> c <> 'i' && c <> 'o' && c <> 'u')\n        |> Seq.skipWhile (fun c -> c <> 'i' && c <> 'o' && c <> 'u')\n        |> Seq.map (fun c -> c.ToString())\n        |> Seq.toArray\n    \n    let romanNumeral = romanNumeral |> Array.map (fun c -> c.ToString())\n    \n    romanNumeral\n    |> Array.map (fun c -> c.ToLower())\n    |> Array.toList\n    |> List.rev\n    |> List.map (fun c -> c.ToString())\n    |> List.toArray\n    |> Array.map (fun c -> c.ToLower())\n    |> Array.toList\n    |> List.rev\n    |> List.map (fun c -> c.ToString())\n    |> List.toArray\n    |> Array.map (fun c -> c.ToLower())\n    |> Array.toList\n    |> List.rev\n    |> List.map (fun c -> c.ToString())\n    |> List.toArray\n    |> Array.map (fun c -> c.ToLower())\n    |> Array.toList\n    |> List.rev\n    |> List.map (fun c -> c.ToString())\n    |> List.toArray\n    |> Array.map (fun c -> c.ToLower())\n    |> Array.toList\n    |> List.rev\n    |> List.map (fun c -> c.ToString())\n    |> List.toArray\n    |> Array.map (fun c -> c.ToLower())\n    |> Array.toList\n    |> List.rev\n    |> List.map (fun c -> c.ToString())\n    |> List.toArray\n    |> Array.map (fun c -> c.ToLower())\n    |> Array.toList\n    |> List.rev\n    |> List.", "    let romanNumeral = \n        let romanNumeral = \n            let romanNumeral = \n                let romanNumeral = \n                    let romanNumeral = \n                        let romanNumeral = \n                            let romanNumeral = \n                                let romanNumeral = \n                                    let romanNumeral = \n                                        let romanNumeral = \n                                            let romanNumeral = \n                                                let romanNumeral = \n                                                    let romanNumeral = \n                                                        let romanNumeral = \n                                                            let romanNumeral = \n                                                                let romanNumeral = \n                                                                    let romanNumeral = \n                                                                        let romanNumeral = \n                                                                            let romanNumeral = \n                                                                                let romanNumeral = \n                                                                                    let romanNumeral = \n                                                                                        let romanNumeral = \n                                                                                            let romanNumeral = \n                                                                                               let romanNumeral = \n                                                                                                   let romanNumeral = \n                                                                                                       let romanNumeral = \n                                                                                                           let romanNumeral = \n                                                                                                               let romanNumeral = \n                                                                                                                   let romanNumeral = \n                                                                                                                       let romanNumeral = \n                                                                                                                           let romanNumeral = \n                                                                                                                              let romanNumeral = \n                                                                                                                                      let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                              let romanNumeral = \n                                                                                                                                                  let romanNumeral = \n                                                                                                                                                  let romanNumeral = \n                                                                                                                                                  let romanNumeral = \n                                                                                                                                                  let romanNumeral = \n                                                                                                                                                  let romanNumeral = \n                                                                                                                                                  let romanNumeral = \n                                                                                                                                                  let romanNumeral = \n                                                                                                                                                  let romanNumeral = \n                                                                                                                                                  let romanNumeral = \n                                                                                                                                                  let romanNumeral = \n                                                                                                                            ", "    let romanNumeral = string number\n    let romanNumeralLower = romanNumeral.ToLower()\n    let romanNumeralUpper = romanNumeral.ToUpper()\n    romanNumeralUpper + romanNumeralLower", "    let romanNumeral = \n        let romanNumeral = \n            let romanNumeral = \n                let romanNumeral = \n                    let romanNumeral = \n                        let romanNumeral = \n                            let romanNumeral = \n                                let romanNumeral = \n                                    let romanNumeral = \n                                        let romanNumeral = \n                                            let romanNumeral = \n                                                let romanNumeral = \n                                                    let romanNumeral = \n                                                        let romanNumeral = \n                                                            let romanNumeral = \n                                                                let romanNumeral = \n                                                                    let romanNumeral = \n                                                                        let romanNumeral = \n                                                                            let romanNumeral = \n                                                                                let romanNumeral = \n                                                                                    let romanNumeral = \n                                                                                        let romanNumeral = \n                                                                                            let romanNumeral = \n                                                                                               let romanNumeral = \n                                                                                                   let romanNumeral = \n                                                                                                       let romanNumeral = \n                                                                                                           let romanNumeral = \n                                                                                                               let romanNumeral = \n                                                                                                                   let romanNumeral = \n                                                                                                                       let romanNumeral = \n                                                                                                                           let romanNumeral = \n                                                                                                                              let romanNumeral = \n                                                                                                                                  let romanNumeral = \n                                                                                                                                      let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                                          let romanNumeral = \n                                                                                                                            ", "    let roman_numeral = string number\n    let roman_numeral_lower = roman_numeral.ToLower()\n    if roman_numeral_lower.Length > 1 then\n        roman_numeral_lower.Substring(1)\n    else\n        roman_numeral_lower", "    let romanNumeral = (number % 1000) / 100\n    let romanNumeral = romanNumeral + (romanNumeral % 10)\n    romanNumeral.ToString()", "    let romanNumeral = System.Convert.ToString(number, System.Globalization.NumberStyles.AllowHexSpecifier)\n    romanNumeral.ToLower()", "    let romanNumeral = \n        number \n        |> string \n        |> String.filter (fun c -> c <> 'i' && c <> 'o' && c <> 'u')\n        |> String.filter (fun c -> c <> 'a' && c <> 'z')\n        |> String.filter (fun c -> c <> 'A' && c <> 'Z')\n        |> String.filter (fun c -> c <> '0' && c <> '1')\n        |> String.filter (fun c -> c <> '0' && c <> '2')\n        |> String.filter (fun c -> c <> '0' && c <> '3')\n        |> String.filter (fun c -> c <> '0' && c <> '4')\n        |> String.filter (fun c -> c <> '0' && c <> '5')\n        |> String.filter (fun c -> c <> '0' && c <> '6')\n        |> String.filter (fun c -> c <> '0' && c <> '7')\n        |> String.filter (fun c -> c <> '0' && c <> '8')\n        |> String.filter (fun c -> c <> '0' && c <> '9')\n        |> String.filter (fun c -> c <> '0' && c <> 'A')\n        |> String.filter (fun c -> c <> '0' && c <> 'B')\n        |> String.filter (fun c -> c <> '0' && c <> 'C')\n        |> String.filter (fun c -> c <> '0' && c <> 'D')\n        |> String.filter (fun c -> c <> '0' && c <> 'E')\n        |> String.filter (fun c -> c <> '0' && c <> 'F')\n        |> String.filter (fun c -> c <> '0' && c <> 'G')\n        |> String.filter (fun c -> c <> '0' && c <> 'H')\n        |> String.filter", "    let roman_num = System.Convert.ToInt32(number)\n    let roman_num_str = System.String(roman_num.ToString())\n    roman_num_str.Substring(0, roman_num_str.Length - 1)", "    let romanNumeral = \n        number \n        |> string \n        |> Seq.map (fun x -> x.ToString())\n        |> Seq.reduce (fun a b -> a + b)\n    romanNumeral.ToLower()", "    let romanNumeral = \n        let romanNumeral = number |> string |> String.toUpper\n        if romanNumeral.Length = 1 then romanNumeral\n        else romanNumeral + \"i\"\n    romanNumeral", "    let romanNumeral = string number\n    let romanNumeralLower = romanNumeral.ToLower()\n    let romanNumeralUpper = romanNumeral.ToUpper()\n    romanNumeralUpper + romanNumeralLower"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}