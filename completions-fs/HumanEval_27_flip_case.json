{"name": "HumanEval_27_flip_case", "language": "fs", "prompt": "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nlet flip_case (string: string): string  = \n", "tests": "let test() = \n  let candidate = flip_case\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hello!\" = \"hELLO!\")\n  assert (candidate \"These violent delights have violent ends\" = \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n  0\n\ntest()", "completions": ["    string.ToUpper() + string.ToLower()", "    string.ToUpper() + string.ToLower()", "    let mutable res = string\n    for i = 0 to string.Length - 1 do\n        res <- res.ToUpper() + string.[i]\n    res", "    let mutable result = string\n    for i = 0 to string.Length - 1 do\n        result <- string.[i] <- string.[i] ^^^ string.[i]\n    result", "    let sb = System.Text.StringBuilder()\n    let mutable i = 0\n    while i < string.Length do\n        if string.[i] = 'A' then\n            sb.Append('a') |> ignore\n            i <- i + 1\n        elif string.[i] = 'A' then\n            sb.Append('A') |> ignore\n            i <- i + 1\n        elif string.[i] = 'a' then\n            sb.Append('a') |> ignore\n            i <- i + 1\n        elif string.[i] = 'A' then\n            sb.Append('A') |> ignore\n            i <- i + 1\n        elif string.[i] = 'a' then\n            sb.Append('a') |> ignore\n            i <- i + 1\n        elif string.[i] = 'A' then\n            sb.Append('A') |> ignore\n            i <- i + 1\n        elif string.[i] = 'a' then\n            sb.Append('a') |> ignore\n            i <- i + 1\n        elif string.[i] = 'A' then\n            sb.Append('A') |> ignore\n            i <- i + 1\n        elif string.[i] = 'a' then\n            sb.Append('a') |> ignore\n            i <- i + 1\n        elif string.[i] = 'A' then\n            sb.Append('A') |> ignore\n            i <- i + 1\n        elif string.[i] = 'a' then\n            sb.Append('a') |> ignore\n            i <- i + 1\n        elif string.[i] = 'A' then\n            sb.Append('A') |> ignore\n            i <- i + 1\n        elif string.[i] = 'a' then\n            sb.Append('a') |> ignore\n            i <- i + 1\n        elif string.[i] = 'A' then\n            sb.Append('A') |> ignore\n            i <- i + 1\n        elif string.[i] = 'a' then\n            sb.Append('a') |> ignore\n            i <- i + 1\n        elif", "    let mutable result = string\n    for i = 0 to string.Length - 1 do\n        result <- string.[i] <- string.[i] ^^^ string.[i]\n    result", "    let mutable result = string\n    for i = 0 to string.Length - 1 do\n        result <- string.[i] <- string.[i] ^^^ string.[i]\n    result", "    let mutable res = string\n    for i = 0 to string.Length - 1 do\n        res <- string.[i] <- string.[i] ^^^ string.[i]\n    res", "    let sb = new System.Text.StringBuilder()\n    let mutable i = 0\n    while i < string.Length do\n        if string.[i] = 'A' then\n            sb.Append('a') |> ignore\n            i <- i + 1\n        elif string.[i] = 'A' then\n            sb.Append('A') |> ignore\n            i <- i + 1\n        elif string.[i] = 'a' then\n            sb.Append('a') |> ignore\n            i <- i + 1\n        elif string.[i] = 'A' then\n            sb.Append('A') |> ignore\n            i <- i + 1\n        else\n            sb.Append(string.[i]) |> ignore\n            i <- i + 1\n    sb.ToString()", "    let s = string\n    let s = s.ToUpper()\n    s.ToLower()", "    let mutable result = string\n    for i = 0 to string.Length - 1 do\n        result <- string.[i] <- string.[i] ^^^ string.[i]\n    result", "    string.ToUpper() + string.ToLower()", "    string.ToUpper() + string.ToLower()", "    let mutable result = string\n    for i = 0 to string.Length - 1 do\n        result <- string.[i] <- string.[i] ^^^ string.[i]\n    result", "    let mutable result = string\n    for c in string do\n        if c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Replace('a', 'A')\n        elif c = 'a' then result <- result.Replace('a', 'A')\n        elif c = 'A' then result <- result.Re", "    string.ToUpper()\n    |> string.Replace", "    string.ToUpper() + string.ToLower()", "    let mutable result = string\n    for i = 0 to string.Length - 1 do\n        result <- string.[i] <- string.[i] ^^^ string.[i]\n    result", "    let sb = System.Text.StringBuilder()\n    let mutable i = 0\n    while i < string.Length do\n        if string.[i] = 'A' then\n            sb.Append(string.[0..i-1]) |> ignore\n            sb.Append(string.[i+1..]) |> ignore\n            i <- i + 2\n        else\n            sb.Append(string.[0..i-1]) |> ignore\n            sb.Append(string.[i+1..]) |> ignore\n            i <- i + 1\n    sb.ToString()", "    let mutable result = string\n    for c in string do\n        if c = 'A' then\n            result <- result.ToUpper() + result\n        elif c = 'a' then\n            result <- result.ToLower() + result\n        else\n            result <- result.ToUpper() + result\n    result"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}